[33mcommit 690aed55fa825dcd227426905567c7adeeeb20b5[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m)[m
Author: eckhofen <gabriel.eckeck@gmail.com>
Date:   Tue Apr 2 14:56:57 2024 +1300

    First upload of files

[1mdiff --git a/.4.swp b/.4.swp[m
[1mnew file mode 100644[m
[1mindex 0000000..67f2a09[m
Binary files /dev/null and b/.4.swp differ
[1mdiff --git a/.ipynb_checkpoints/00_download_data-checkpoint.ipynb b/.ipynb_checkpoints/00_download_data-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..ba40d6d[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/00_download_data-checkpoint.ipynb[m
[36m@@ -0,0 +1,185 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "bf78f16c-13d6-455d-b945-780d492e0260",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SRA cache dir set: /workspace/cfngle/.ncbi\n",[m
[32m+[m[32m      "spots read      : 6,878,446\n",[m
[32m+[m[32m      "reads read      : 13,756,892\n",[m
[32m+[m[32m      "reads written   : 6,878,446\n",[m
[32m+[m[32m      "reads 0-length  : 6,878,446\n",[m
[32m+[m[32m      "SRR18462635 done\n",[m
[32m+[m[32m      "spots read      : 9,655,168\n",[m
[32m+[m[32m      "reads read      : 19,310,336\n",[m
[32m+[m[32m      "reads written   : 9,655,168\n",[m
[32m+[m[32m      "reads 0-length  : 9,655,168\n",[m
[32m+[m[32m      "SRR18462642 done\n",[m
[32m+[m[32m      "spots read      : 6,438,585\n",[m
[32m+[m[32m      "reads read      : 12,877,170\n",[m
[32m+[m[32m      "reads written   : 6,438,585\n",[m
[32m+[m[32m      "reads 0-length  : 6,438,585\n",[m
[32m+[m[32m      "SRR18462634 done\n",[m
[32m+[m[32m      "spots read      : 7,783,619\n",[m
[32m+[m[32m      "reads read      : 15,567,238\n",[m
[32m+[m[32m      "reads written   : 7,783,619\n",[m
[32m+[m[32m      "reads 0-length  : 7,783,619\n",[m
[32m+[m[32m      "SRR18462644 done\n",[m
[32m+[m[32m      "spots read      : 6,900,366\n",[m
[32m+[m[32m      "reads read      : 13,800,732\n",[m
[32m+[m[32m      "reads written   : 6,900,366\n",[m
[32m+[m[32m      "reads 0-length  : 6,900,366\n",[m
[32m+[m[32m      "SRR18462653 done\n",[m
[32m+[m[32m      "spots read      : 8,208,443\n",[m
[32m+[m[32m      "reads read      : 16,416,886\n",[m
[32m+[m[32m      "reads written   : 8,208,443\n",[m
[32m+[m[32m      "reads 0-length  : 8,208,443\n",[m
[32m+[m[32m      "SRR18462636 done\n",[m
[32m+[m[32m      "spots read      : 6,139,229\n",[m
[32m+[m[32m      "reads read      : 12,278,458\n",[m
[32m+[m[32m      "reads written   : 6,139,229\n",[m
[32m+[m[32m      "reads 0-length  : 6,139,229\n",[m
[32m+[m[32m      "SRR18462637 done\n",[m
[32m+[m[32m      "spots read      : 6,316,438\n",[m
[32m+[m[32m      "reads read      : 12,632,876\n",[m
[32m+[m[32m      "reads written   : 6,316,438\n",[m
[32m+[m[32m      "reads 0-length  : 6,316,438\n",[m
[32m+[m[32m      "SRR18462638 done\n",[m
[32m+[m[32m      "spots read      : 7,446,943\n",[m
[32m+[m[32m      "reads read      : 14,893,886\n",[m
[32m+[m[32m      "reads written   : 7,446,943\n",[m
[32m+[m[32m      "reads 0-length  : 7,446,943\n",[m
[32m+[m[32m      "SRR18462639 done\n",[m
[32m+[m[32m      "spots read      : 8,156,543\n",[m
[32m+[m[32m      "reads read      : 16,313,086\n",[m
[32m+[m[32m      "reads written   : 8,156,543\n",[m
[32m+[m[32m      "reads 0-length  : 8,156,543\n",[m
[32m+[m[32m      "SRR18462643 done\n",[m
[32m+[m[32m      "spots read      : 6,571,203\n",[m
[32m+[m[32m      "reads read      : 13,142,406\n",[m
[32m+[m[32m      "reads written   : 6,571,203\n",[m
[32m+[m[32m      "reads 0-length  : 6,571,203\n",[m
[32m+[m[32m      "SRR18462654 done\n",[m
[32m+[m[32m      "spots read      : 4,388,108\n",[m
[32m+[m[32m      "reads read      : 8,776,216\n",[m
[32m+[m[32m      "reads written   : 4,388,108\n",[m
[32m+[m[32m      "reads 0-length  : 4,388,108\n",[m
[32m+[m[32m      "SRR18462655 done\n",[m
[32m+[m[32m      "spots read      : 9,355,753\n",[m
[32m+[m[32m      "reads read      : 18,711,506\n",[m
[32m+[m[32m      "reads written   : 9,355,753\n",[m
[32m+[m[32m      "reads 0-length  : 9,355,753\n",[m
[32m+[m[32m      "SRR18462645 done\n",[m
[32m+[m[32m      "spots read      : 6,876,486\n",[m
[32m+[m[32m      "reads read      : 13,752,972\n",[m
[32m+[m[32m      "reads written   : 6,876,486\n",[m
[32m+[m[32m      "reads 0-length  : 6,876,486\n",[m
[32m+[m[32m      "SRR18462646 done\n",[m
[32m+[m[32m      "spots read      : 5,567,999\n",[m
[32m+[m[32m      "reads read      : 11,135,998\n",[m
[32m+[m[32m      "reads written   : 5,567,999\n",[m
[32m+[m[32m      "reads 0-length  : 5,567,999\n",[m
[32m+[m[32m      "SRR18462640 done\n",[m
[32m+[m[32m      "spots read      : 7,234,168\n",[m
[32m+[m[32m      "reads read      : 14,468,336\n",[m
[32m+[m[32m      "reads written   : 7,234,168\n",[m
[32m+[m[32m      "reads 0-length  : 7,234,168\n",[m
[32m+[m[32m      "SRR18462641 done\n",[m
[32m+[m[32m      "spots read      : 6,309,665\n",[m
[32m+[m[32m      "reads read      : 12,619,330\n",[m
[32m+[m[32m      "reads written   : 6,309,665\n",[m
[32m+[m[32m      "reads 0-length  : 6,309,665\n",[m
[32m+[m[32m      "SRR18462648 done\n",[m
[32m+[m[32m      "spots read      : 7,063,363\n",[m
[32m+[m[32m      "reads read      : 14,126,726\n",[m
[32m+[m[32m      "reads written   : 7,063,363\n",[m
[32m+[m[32m      "reads 0-length  : 7,063,363\n",[m
[32m+[m[32m      "SRR18462649 done\n",[m
[32m+[m[32m      "spots read      : 8,048,435\n",[m
[32m+[m[32m      "reads read      : 16,096,870\n",[m
[32m+[m[32m      "reads written   : 8,048,435\n",[m
[32m+[m[32m      "reads 0-length  : 8,048,435\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### Download data for all the species ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "### Japanese medaka (JM)\n",[m
[32m+[m[32m    "#  Bioproject number: PRJNA716946\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# file accession numbers: \n",[m
[32m+[m[32m    "filenames=(\"SAMN21040263\" \"SAMN21040262\" \"SAMN21040261\" \"SAMN21040260\" \"SAMN21040259\" \"SAMN21040258\" \"SAMN21040257\" \"SAMN21040256\"\n",[m
[32m+[m[32m    "\"SAMN21040255\" \"SAMN21040254\" \"SAMN21040253\" \"SAMN21040252\" \"SAMN21040251\" \"SAMN21040250\" \"SAMN21040249\" \"SAMN21040248\"\n",[m
[32m+[m[32m    "\"SAMN21040247\" \"SAMN21040246\" \"SAMN21040245\" \"SAMN21040244\" \"SAMN21040243\" \"SAMN21040242\" \"SAMN21040241\" \"SAMN21040240\"\n",[m
[32m+[m[32m    "\"SAMN18472656\" \"SAMN18472655\" \"SAMN18472654\" \"SAMN18472653\" \"SAMN18472652\" \"SAMN18472651\" \"SAMN18472650\" \"SAMN18472649\"\n",[m
[32m+[m[32m    "\"SAMN18472648\" \"SAMN18472647\" \"SAMN18472646\" \"SAMN18472645\" \"SAMN18472644\" \"SAMN18472643\" \"SAMN18472642\" \"SAMN18472641\"\n",[m
[32m+[m[32m    "\"SAMN18472640\" \"SAMN18472639\" \"SAMN18472638\" \"SAMN18472637\" \"SAMN18472636\" \"SAMN18472635\" \"SAMN18472634\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# without the ones which were succesfully downloaded \n",[m
[32m+[m[32m    "filenames_1=(\n",[m
[32m+[m[32m    "\"SAMN18472656\" \"SAMN18472655\" \"SAMN18472654\" \"SAMN18472653\" \"SAMN18472652\" \"SAMN18472651\" \"SAMN18472650\" \"SAMN18472649\"\n",[m
[32m+[m[32m    "\"SAMN18472648\" \"SAMN18472647\" \"SAMN18472646\" \"SAMN18472645\" \"SAMN18472644\" \"SAMN18472643\" \"SAMN18472642\" \"SAMN18472641\"\n",[m
[32m+[m[32m    "\"SAMN18472640\" \"SAMN18472639\" \"SAMN18472638\" \"SAMN18472637\" \"SAMN18472636\" \"SAMN18472635\" \"SAMN18472634\")\n",[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "filenames_SRR=(\"SRR18462635\" \"SRR18462633\" \"SRR18462634\" \"SRR18462636\" \"SRR18462637\" \"SRR18462638\" \"SRR18462639\" \"SRR18462640\"\n",[m
[32m+[m[32m    "\"SRR18462641\" \"SRR18462642\" \"SRR18462643\" \"SRR18462644\" \"SRR18462645\" \"SRR18462646\" \"SRR18462647\" \"SRR18462648\"\n",[m
[32m+[m[32m    "\"SRR18462649\" \"SRR18462650\" \"SRR18462651\" \"SRR18462652\" \"SRR18462653\" \"SRR18462654\" \"SRR18462655\" \"SRR15669758\"\n",[m
[32m+[m[32m    "\"SRR15669759\" \"SRR15669760\" \"SRR15669761\" \"SRR15669762\" \"SRR15669763\" \"SRR15669764\" \"SRR15669765\" \"SRR15669766\"\n",[m
[32m+[m[32m    "\"SRR15669767\" \"SRR15669768\" \"SRR15669769\" \"SRR15669770\" \"SRR15669771\" \"SRR15669772\" \"SRR15669773\" \"SRR15669774\"\n",[m
[32m+[m[32m    "\"SRR15669775\" \"SRR15669776\" \"SRR15669777\" \"SRR15669778\" \"SRR15669779\" \"SRR15669780\" \"SRR15669781\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# without the ones which were succesfully downloaded \n",[m
[32m+[m[32m    "filenames_SRR_1=(\n",[m
[32m+[m[32m    "\"SRR18462635\" \"SRR18462642\" \"SRR18462634\" \"SRR18462644\" \"SRR18462653\" \"SRR18462636\" \"SRR18462637\" \"SRR18462638\"\n",[m
[32m+[m[32m    "\"SRR18462639\" \"SRR18462643\" \"SRR18462654\" \"SRR18462655\" \"SRR18462645\" \"SRR18462646\" \"SRR18462640\" \"SRR18462641\"\n",[m
[32m+[m[32m    "\"SRR18462648\" \"SRR18462649\" \"SRR18462647\" \"SRR18462650\" \"SRR18462651\" \"SRR18462652\" \"SRR18462633\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load sratoolkit\n",[m
[32m+[m[32m    "#vdb-config --interactive\n",[m
[32m+[m[32m    "for (( i=0; i<${#filenames_SRR_1[@]}; i++ )); \n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "    fasterq-dump --split-files \"${filenames_SRR_1[i]}\"\n",[m
[32m+[m[32m    "    echo \"${filenames_SRR_1[i]} done\"\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "b73e7710-924b-4d41-8bea-673a1744577e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/00a_JM_BSseeker2-checkpoint.sl b/.ipynb_checkpoints/00a_JM_BSseeker2-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..2630ec0[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/00a_JM_BSseeker2-checkpoint.sl[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m
[32m+[m[32m#SBATCH --job-name=indexBS[m
[32m+[m[32m#SBATCH --time=24:00:00[m
[32m+[m[32m#SBATCH --mem=20G[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/raw-data/JM/rgenome/output.log[m
[32m+[m
[32m+[m[32mPROJECT="/workspace/cfngle/raw-data/JM"[m
[32m+[m[32mGENOME="/workspace/cfngle/raw-data/JM/rgenome"[m
[32m+[m[32mOUT=$GENOME[m
[32m+[m
[32m+[m[32mmodule load conda[m
[32m+[m[32mconda deactivate[m
[32m+[m[32mconda activate cfngle_env-01[m
[32m+[m
[32m+[m[32mbs_seeker2-build.py \[m
[32m+[m[32m    -f ${GENOME}/GCF_002234675.1_ASM223467v1_genomic.fasta \[m
[32m+[m[32m    --aligner bowtie2 \[m
[32m+[m[32m    -r \[m
[32m+[m[32m    -d /workspace/cfngle/raw-data/JM/rgenome/BSseeker2-index[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/00a_JM_fastqc-checkpoint.sl b/.ipynb_checkpoints/00a_JM_fastqc-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..d90f049[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/00a_JM_fastqc-checkpoint.sl[m
[36m@@ -0,0 +1,66 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32m# 200 bp sequences[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32mpath_rgenome="AC/GCF_902167405.1_gadMor3.0_genomic.fasta"[m
[32m+[m[32m#AC[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AC_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AC_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AC_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AC_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AC_EH_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AC_EH_100_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="Chrysophrys_auratus.v.1.0.all.male.map.fasta"[m
[32m+[m[32m#AS[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AS_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AS_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AS_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AS_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AS_EH_200_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AS_EH_100_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="fMerMel2.1_cnag1.scaffolds.fa"[m
[32m+[m[32m#EH\[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/EH_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/EH_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/EH_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/EH_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/EH_EH_200_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/EH_EH_100_minimap.sam -t 20[m[41m [m
[1mdiff --git a/.ipynb_checkpoints/00a_RRBS-checkpoint.ipynb b/.ipynb_checkpoints/00a_RRBS-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..91b7d16[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/00a_RRBS-checkpoint.ipynb[m
[36m@@ -0,0 +1,1377 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "4d1f29d1-809b-4e6b-8aac-79fc09282f80",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# 00a RRBS data analysis\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Author: Gabriel Ecker Eckhofen (adapted from Dafni Anastasiadi)\n",[m
[32m+[m[32m    "Date: Febuary 2024"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "f57139d3-47f2-44f6-8491-12363f3603d3",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "# Install Entrez Direct\n",[m
[32m+[m[32m    "conda install -c bioconda entrez-direct\n",[m
[32m+[m[32m    "y"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "58a14287-df70-48e9-84ce-23498633f59b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Fetch metadata for a specific BioSample ID\n",[m
[32m+[m[32m    "esearch -db biosample -query SAMNxxxxxx | efetch -format native"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "756caf22-eda3-4bd3-baf1-e4a0d3038865",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 1. Prepare data and directories\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Data was downloaded with SRAtoolkit "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "561d77eb-30d4-41e5-8254-62621e3c5a71",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/raw-reads"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "d7f1939d-faa8-4885-8605-0b7b624f3023",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find -type f -exec md5sum \"{}\" + > checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "7a8233e4-6b90-499c-a60a-9bcc5c52bfd7",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "./EC_3/EC_3_FKDN220184500-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_3/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_3/EC_3_FKDN220184500-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5K3KDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5K3KDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5GGLDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5GGLDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_1/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_1/WC_1_FKDN220184493-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_1/WC_1_FKDN220184493-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_6/WC_6_FKDN220184497-1A_H5GGJDSX3_L3_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_6/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_6/WC_6_FKDN220184497-1A_H5GGJDSX3_L3_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_6/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_6/EC_6_FKDN220184503-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_6/EC_6_FKDN220184503-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5GGLDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5GGLDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5K3KDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5K3KDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_5/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_5/EC_5_FKDN220184502-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_5/EC_5_FKDN220184502-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_3/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_3/WC_3_FKDN220184495-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_3/WC_3_FKDN220184495-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./checklist.chk: FAILED\n",[m
[32m+[m[32m      "./WC_5/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_5/WC_5_FKDN220184496-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_5/WC_5_FKDN220184496-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_2/WC_2_FKDN220184494-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_2/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_2/WC_2_FKDN220184494-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_1/EC_1_FKDN220184498-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_1/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_1/EC_1_FKDN220184498-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "md5sum: WARNING: 1 computed checksum did NOT match\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "md5sum -c checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "e30aaf24-3fbe-4346-b0e3-4c197d377e52",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Define Project Variables and create analysis directories:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "6c13cc36-5ae4-447e-9abe-32c08a774f48",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#Create analysis directories and define project variables\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the user as a variable\n",[m
[32m+[m[32m    "USER=\"cfngle\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the project directory and temp subdirectory as a variable\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/$USER/raw-data/JM/raw-reads"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "id": "810a60cc-673f-40fc-abe0-aab516ebcce4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "mkdir: missing operand\n",[m
[32m+[m[32m      "Try 'mkdir --help' for more information.\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Create analysis subdirectories\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/000.raw\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/001.fastqc_raw\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/002.trimmomatic\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/003.fastq_trimmomatic\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/004.alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.b.stats_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.qc_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/006.deduplication\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/007.meth_extraction\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/008.methylkit\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/099.test"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "id": "111c44eb-dc86-48ea-bc08-cc4e9c9661e7",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfndxa/MarsdenObj1/Sequencing_WGBS"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "c5e17deb-bbbb-4bd7-910d-9d431cd550ee",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 1.1 FastQC RAW Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "id": "6563ed7d-f7b8-467a-9f26-f7b6617aa010",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "/workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/X201SC20071998-Z01-F001/01.RawData\n",[m
[32m+[m[32m      "/workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/001.fastqc_raw\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 01:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/001.fastqc_raw/fastqc_raw\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 26\n",[m
[32m+[m[32m      "Submitted batch job 1059579\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfndxa/Paua_clock/01_pilot_run\"# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/X201SC20071998-Z01-F001/01.RawData\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/001.fastqc_raw\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`find -type f -name \"*.fq.gz\"`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc_raw --time 01:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "id": "0908f545-c305-4531-b535-a3a61771e65e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mmultiqc/1.11\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "id": "437edb0f-7d48-4a0e-9d2f-fcb49d2a2904",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1678927475.1725929-866276;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.14 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Raw\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/001.fastqc_raw\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m105/105\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 26 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 001.fastqc_raw/Fastqc-Raw_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 001.fastqc_raw/Fastqc-Raw_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 001.fastqc_raw -o 001.fastqc_raw -i Fastqc-Raw"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "50e04741-aff4-4af1-9279-0d6d60f29ae8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 2. Trimming"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 34,[m
[32m+[m[32m   "id": "5a155bfd-5e13-4f05-a07e-b71ffc78bfc4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "EC_1 EC_2 EC_3 EC_4 EC_5 EC_6 WC_1 WC_2 WC_3 WC_5 WC_6\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 01:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/002.trimmomatic/trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 11\n",[m
[32m+[m[32m      "Submitted batch job 1059719\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfndxa/Paua_clock/01_pilot_run\"# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/000.raw/merged\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "UNPAIRED=\"${OUT}/unpaired\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $IN\n",[m
[32m+[m[32m    "mkdir -p $OUT\n",[m
[32m+[m[32m    "mkdir -p $UNPAIRED\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Set the path to the adapter file:\n",[m
[32m+[m[32m    "CLIP=\"${OUT}/adapters.fasta\"\n",[m
[32m+[m[32m    "# Get the files to trim:\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "FILES=`basename -a ${IN}/*.fq.gz | sed 's/_[1,2].fq.gz//g'|sort -u `\n",[m
[32m+[m[32m    "#FILES=`ls ${IN}/*.fastq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5\"_\"$6}' | sort -u`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "echo $FILES\n",[m
[32m+[m[32m    "module load Trimmomatic\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for FILE in $FILES\n",[m
[32m+[m[32m    "     do\n",[m
[32m+[m[32m    "        In_File1=${IN}/${FILE}_1.fq.gz\n",[m
[32m+[m[32m    "        In_File2=${IN}/${FILE}_2.fq.gz\n",[m
[32m+[m[32m    "        echo $In_File1\n",[m
[32m+[m[32m    "        echo $In_File2\n",[m
[32m+[m[32m    "        Out_PAIRED_1=${OUT}/${FILE}_trimmomatic_R1.fastq\n",[m
[32m+[m[32m    "        Out_UNPAIRED_1=${UNPAIRED}/${FILE}_trimmomatic_unpaired_1.fastq\n",[m
[32m+[m[32m    "        Out_PAIRED_2=${OUT}/${FILE}_trimmomatic_R2.fastq\n",[m
[32m+[m[32m    "        Out_UNPAIRED_2=${UNPAIRED}/${FILE}_trimmomatic_unpaired_2.fastq\n",[m
[32m+[m[32m    "  #      echo $Out_PAIRED_1\n",[m
[32m+[m[32m    "  #      echo $Out_UNPAIRED_1\n",[m
[32m+[m[32m    "  #      echo $Out_PAIRED_2\n",[m
[32m+[m[32m    "  #      echo $Out_UNPAIRED_2\n",[m
[32m+[m[32m    "        COMMAND=\"java -jar -Xms8G -Xmx8G \\\n",[m
[32m+[m[32m    "                 ${TRIMMOMATIC} PE -threads 3 \\\n",[m
[32m+[m[32m    "                 ${In_File1} ${In_File2} \\\n",[m
[32m+[m[32m    "                 ${Out_PAIRED_1} ${Out_UNPAIRED_1} ${Out_PAIRED_2} ${Out_UNPAIRED_2} \\\n",[m
[32m+[m[32m    "                 ILLUMINACLIP:${CLIP}:2:30:10 SLIDINGWINDOW:5:20 MINLEN:50 HEADCROP:10 LEADING:5 TRAILING:5\" # headcrop suggested by Novogene due to library construction protocol\n",[m
[32m+[m[32m    "      # echo $COMMAND\n",[m
[32m+[m[32m    "done #| abatch -j ${OUT}/trimmomatic-logs --time 01:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1f93e76c-40f1-4c3b-9466-c6eaa788cd00",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1 FastQC TRIMMED Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "51ce841f-d25c-452a-be07-537f33193bbc",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 01:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/003.fastq_trimmomatic/fastqc-trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 22\n",[m
[32m+[m[32m      "Submitted batch job 1061325\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    " #!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfndxa/Paua_clock/01_pilot_run\"# Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/003.fastq_trimmomatic\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-trimmomatic-logs --time 01:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "165399e1-0c53-4375-9f83-ef419f9a256f",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mmultiqc/1.11\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "id": "aeae0461-94aa-48ef-bc35-44e85d8242ac",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1679006215.2262704-625372;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.14 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Trimmed\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /powerplant/workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/003.fastq_trimmomatic\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m87/87\u001b[0m  \u001b[0m0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 21 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 003.fastq_trimmomatic -o 003.fastq_trimmomatic -i Fastqc-Trimmed"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "105a8a9b-d575-4ea9-8651-ab1d2eedc6eb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5. Alignment\n",[m
[32m+[m[32m    "Bismark user guide https://felixkrueger.github.io/Bismark/\n",[m
[32m+[m[32m    "### 5.1 Preparation of the genome\n",[m
[32m+[m[32m    "Hake assembly from CNAG. Unpublished and confidential."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "id": "b0d6738f-fcaf-4e38-99f3-71603447c489",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd Hake_genome/Genoma_merluza"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "e7e5d3e0-1ae5-4b58-b0de-0a9686bbb058",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "grep -e \">\" fMerMel2.1_cnag1.scaffolds.fa | awk 'sub(/^>/, \"\")' | sort -k1 > chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "dfb354d0-c0c6-42c8-8fe2-60d1256d78ac",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr1\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr10\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr11\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr12\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr13\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr14\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr15\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr16\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr16_unloc_1\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr16_unloc_2\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "head chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "id": "31bdff52-c31e-4e7e-8937-44177045ed93",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mbismark/0.20.0\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load bismark/0.23.0"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "fb0d2214-3c91-4125-a40d-51d0456ee89d",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "perl: warning: Setting locale failed.\n",[m
[32m+[m[32m      "perl: warning: Please check that your locale settings:\n",[m
[32m+[m[32m      "\tLANGUAGE = (unset),\n",[m
[32m+[m[32m      "\tLC_ALL = (unset),\n",[m
[32m+[m[32m      "\tLANG = \"en_NZ.UTF-8\"\n",[m
[32m+[m[32m      "    are supported and installed on your system.\n",[m
[32m+[m[32m      "perl: warning: Falling back to the standard locale (\"C\").\n",[m
[32m+[m[32m      "Writing bisulfite genomes out into a single MFA (multi FastA) file\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bisulfite Genome Indexer version v0.19.1 (last modified 26 April 2018)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step I - Prepare genome folders - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Calculating genomic frequencies (this may take several minutes depending on genome size) ...\n",[m
[32m+[m[32m      "====================================================================================================================================================================\n",[m
[32m+[m[32m      "Now reading in and storing sequence information of the genome specified in: /workspace/cfndxa/Hake_clock/Hake_genome/Genoma_merluza/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr1 (55177781 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr2 (50776625 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr3 (45020414 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr4 (35452080 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr7 (33414852 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr5 (33356331 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr6 (33253109 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr8 (32860176 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr9 (32531924 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr10 (32021586 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr11 (31397609 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr12 (30968743 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr13 (30809883 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr14 (30802331 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr15 (30368893 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr17 (29776308 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr18 (29194296 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr16 (28829120 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr19 (28611363 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr20 (28374871 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr21 (27346746 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr16_unloc_1 (901166 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr5_unloc_1 (317500 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr6_unloc_1 (254833 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_38 (198171 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr16_unloc_2 (189000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr5_unloc_2 (184715 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr6_unloc_2 (183079 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr5_unloc_3 (168000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr1_unloc_1 (163803 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr4_unloc_1 (150714 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_46 (146535 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_47 (142546 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr5_unloc_4 (136715 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr1_unloc_2 (128000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_51 (127531 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr9_unloc_1 (122420 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr16_unloc_3 (117390 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr2_unloc_1 (107405 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_55 (94000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_56 (88000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_57 (84000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_58 (80000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_60 (71832 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_61 (71578 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_62 (66153 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_63 (65306 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_64 (65206 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_65 (64150 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_66 (60000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_67 (57219 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_68 (57037 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_69 (55112 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_70 (54687 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_71 (53000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_72 (52227 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_73 (50306 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_74 (50000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_75 (49570 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_76 (33204 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_77 (22741 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_78 (19000 bp)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr4_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_56 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr14 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr16_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_66 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr15 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_78 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr8 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr6 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr21 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr2_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_63 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr3 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr5_unloc_4 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr10 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_38 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_75 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_64 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_72 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_51 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_69 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr19 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr9 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr11 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr20 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_68 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr9_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_67 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr5_unloc_2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr6_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr13 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr16_unloc_3 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_58 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_57 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr12 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_71 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr1_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr1_unloc_2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr16 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_73 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_62 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr17 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_65 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_47 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_46 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr7 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_61 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr18 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr5 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_60 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr5_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_70 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr5_unloc_3 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr16_unloc_2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_77 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr6_unloc_2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_76 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_55 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_74 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr4 <<\n",[m
[32m+[m[32m      "Writing genomic nucleotide frequencies to the file >/workspace/cfndxa/Hake_clock/Hake_genome/Genoma_merluza/genomic_nucleotide_frequencies.txt< for future re-use\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: A\t196302152\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AA\t54138017\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AC\t46487910\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AG\t45583225\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AT\t50092937\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: C\t161397773\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CA\t54843710\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CC\t39341466\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CG\t21533297\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CT\t45679258\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: G\t161278401\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GA\t42477620\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GC\t33016534\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GG\t39295088\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GT\t46489095\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: T\t196452166\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TA\t44842746\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TC\t42551796\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TG\t54866743\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TT\t54190804\n",[m
[32m+[m[32m      "Finished processing genomic nucleotide frequencies\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total number of conversions performed:\n",[m
[32m+[m[32m      "C->T:\t161397773\n",[m
[32m+[m[32m      "G->A:\t161278401\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step II - Genome bisulfite conversions - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bismark Genome Preparation - Step III: Launching the Bowtie 2 indexer\n",[m
[32m+[m[32m      "Please be aware that this process can - depending on genome size - take several hours!\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_CT.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.CT_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_GA.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.GA_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 178857623\n",[m
[32m+[m[32m      "Using parameters --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 178857623\n",[m
[32m+[m[32m      "Using parameters --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:21\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:21\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.1543e+08 (target: 134143217)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.1543e+08 (target: 134143217)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 715430492 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block of length 715430492 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:18\n",[m
[32m+[m[32m      "Returning block of 715430493 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 357580553\n",[m
[32m+[m[32m      "fchr[G]: 518978326\n",[m
[32m+[m[32m      "fchr[T]: 518978326\n",[m
[32m+[m[32m      "fchr[$]: 715430492\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 242676999 bytes to primary EBWT file: BS_GA.1.bt2\n",[m
[32m+[m[32m      "Wrote 178857628 bytes to secondary EBWT file: BS_GA.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 715430492\n",[m
[32m+[m[32m      "    bwtLen: 715430493\n",[m
[32m+[m[32m      "    sz: 178857623\n",[m
[32m+[m[32m      "    bwtSz: 178857624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44714406\n",[m
[32m+[m[32m      "    offsSz: 178857624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3726201\n",[m
[32m+[m[32m      "    numLines: 3726201\n",[m
[32m+[m[32m      "    ebwtTotLen: 238476864\n",[m
[32m+[m[32m      "    ebwtTotSz: 238476864\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:10:45\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:04\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:01\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 178857623\n",[m
[32m+[m[32m      "Using parameters --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  Sorting block time: 00:10:22\n",[m
[32m+[m[32m      "Returning block of 715430493 for bucket 1\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:21\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:06\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.1543e+08 (target: 134143217)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 715430492 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 196302152\n",[m
[32m+[m[32m      "fchr[G]: 196302152\n",[m
[32m+[m[32m      "fchr[T]: 357580553\n",[m
[32m+[m[32m      "fchr[$]: 715430492\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 242676999 bytes to primary EBWT file: BS_CT.1.bt2\n",[m
[32m+[m[32m      "Wrote 178857628 bytes to secondary EBWT file: BS_CT.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 715430492\n",[m
[32m+[m[32m      "    bwtLen: 715430493\n",[m
[32m+[m[32m      "    sz: 178857623\n",[m
[32m+[m[32m      "    bwtSz: 178857624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44714406\n",[m
[32m+[m[32m      "    offsSz: 178857624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3726201\n",[m
[32m+[m[32m      "    numLines: 3726201\n",[m
[32m+[m[32m      "    ebwtTotLen: 238476864\n",[m
[32m+[m[32m      "    ebwtTotSz: 238476864\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:12:53\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:04\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:00\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 178857623\n",[m
[32m+[m[32m      "Using parameters --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:22\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:09\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.1543e+08 (target: 134143217)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 715430492 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:25\n",[m
[32m+[m[32m      "Returning block of 715430493 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 357580553\n",[m
[32m+[m[32m      "fchr[G]: 518978326\n",[m
[32m+[m[32m      "fchr[T]: 518978326\n",[m
[32m+[m[32m      "fchr[$]: 715430492\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 242676999 bytes to primary EBWT file: BS_GA.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 178857628 bytes to secondary EBWT file: BS_GA.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 715430492\n",[m
[32m+[m[32m      "    bwtLen: 715430493\n",[m
[32m+[m[32m      "    sz: 178857623\n",[m
[32m+[m[32m      "    bwtSz: 178857624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44714406\n",[m
[32m+[m[32m      "    offsSz: 178857624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3726201\n",[m
[32m+[m[32m      "    numLines: 3726201\n",[m
[32m+[m[32m      "    ebwtTotLen: 238476864\n",[m
[32m+[m[32m      "    ebwtTotSz: 238476864\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:10:54\n",[m
[32m+[m[32m      "  Sorting block time: 00:10:26\n",[m
[32m+[m[32m      "Returning block of 715430493 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 196302152\n",[m
[32m+[m[32m      "fchr[G]: 196302152\n",[m
[32m+[m[32m      "fchr[T]: 357580553\n",[m
[32m+[m[32m      "fchr[$]: 715430492\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 242676999 bytes to primary EBWT file: BS_CT.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 178857628 bytes to secondary EBWT file: BS_CT.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 715430492\n",[m
[32m+[m[32m      "    bwtLen: 715430493\n",[m
[32m+[m[32m      "    sz: 178857623\n",[m
[32m+[m[32m      "    bwtSz: 178857624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44714406\n",[m
[32m+[m[32m      "    offsSz: 178857624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3726201\n",[m
[32m+[m[32m      "    numLines: 3726201\n",[m
[32m+[m[32m      "    ebwtTotLen: 238476864\n",[m
[32m+[m[32m      "    ebwtTotSz: 238476864\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:12:56\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "bismark_genome_preparation --genomic_composition /workspace/cfndxa/Hake_clock/Hake_genome/Genoma_merluza/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1c9fecb5-d184-4c1d-a649-f10c6badd0e1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5.2 Alignments to genome"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "id": "0f373877-37ea-4284-8322-93f1233f1e50",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 5-01:00:00 --mem 50G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfndxa/Hake_clock/bisRAD_Hake/006.alignments/bis-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 95\n",[m
[32m+[m[32m      "Submitted batch job 2003623\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfndxa/Hake_clock/bisRAD_Hake\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.dup_filter\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/006.alignments\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfndxa/Hake_clock/Hake_genome/Genoma_merluza\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq.gz | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_ALIGNMENTS\"}'`\n",[m
[32m+[m[32m    "        file1=\"${file}_1.1.1.fq.gz\"\n",[m
[32m+[m[32m    "        file2=\"${file}_2.2.2.fq.gz\"\n",[m
[32m+[m[32m    "#echo ${PREFIX}\n",[m
[32m+[m[32m    "#echo ${file1}\n",[m
[32m+[m[32m    "#echo ${file2}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                -1 ${file1} \\\n",[m
[32m+[m[32m    "                -2 ${file2} \\\n",[m
[32m+[m[32m    "                --o ${OUT} \\\n",[m
[32m+[m[32m    "                --non_directional\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align --time 5-01:00:00 --mem 50G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "a9e7ee5e-420f-4866-b7e5-cac41b01845c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1694665830.3449497-917231;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.15 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Alignments_QC\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /powerplant/workspace/cfndxa/Hake_clock/bisRAD_Hake/006b.relaxed.alignments\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m381/381\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 95 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 006b.relaxed.alignments/Alignments_QC_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 006b.relaxed.alignments/Alignments_QC_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 006b.relaxed.alignments/ -i Alignments_QC -o 006b.relaxed.alignments/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1be44dfc-32ae-4e64-9145-0844b8093894",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 7. Methylation extraction"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "id": "765ab234-84b0-440b-b723-566a2b9a0836",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 5-01:00:00 --mem 50G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfndxa/Hake_clock/bisRAD_Hake/008.extraction/meth-extract\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 95\n",[m
[32m+[m[32m      "Submitted batch job 2009829\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfndxa/Hake_clock/bisRAD_Hake\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/006b.relaxed.alignments\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/008.extraction\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfndxa/Hake_clock/Hake_genome/Genoma_merluza\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.bam`\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"bismark_methylation_extractor \\\n",[m
[32m+[m[32m    "                ${file} \\\n",[m
[32m+[m[32m    "                -p \\\n",[m
[32m+[m[32m    "                --merge_non_CpG \\\n",[m
[32m+[m[32m    "                --cytosine_report \\\n",[m
[32m+[m[32m    "                --scaffolds \\\n",[m
[32m+[m[32m    "                --genome_folder ${GENOME} \\\n",[m
[32m+[m[32m    "                -o ${OUT}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/meth-extract --time 5-01:00:00 --mem 50G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "id": "a79f72c3-4b64-4e6a-99b9-5850e8e030fb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "mkdir -p 008b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "bd0d2f6f-de65-4f03-a15b-ff4cf2fccaa9",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cp 008.extraction/*CpG_report.txt 008b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "id": "a6faa41b-2d40-4b6f-bd31-27f8fe353734",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for i in *CpG_report.txt; do awk '{if ($4 > 0) print}' $i > $i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "id": "934a5a83-a227-4fc9-a6eb-d392d780dc21",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find . -name \"*.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "id": "f7068525-3f61-4fb0-8a1f-2a21c1698bc3",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1708648365.609395-260321;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: MethylationExtraction_QC\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfndxa/Paua_clock/01_pilot_run/010.extraction\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m433/433\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 24 methextract reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 010.extraction/MethylationExtraction_QC_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 010.extraction/MethylationExtraction_QC_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 010.extraction/ -i MethylationExtraction_QC -o 010.extraction/"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/00a_RRBS_JM-checkpoint.ipynb b/.ipynb_checkpoints/00a_RRBS_JM-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..e3819db[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/00a_RRBS_JM-checkpoint.ipynb[m
[36m@@ -0,0 +1,4008 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "4d1f29d1-809b-4e6b-8aac-79fc09282f80",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# 00a RRBS data analysis JM\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Author: Gabriel Ecker Eckhofen (adapted from Dafni Anastasiadi)\n",[m
[32m+[m[32m    "Date: Febuary 2024"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "id": "f57139d3-47f2-44f6-8491-12363f3603d3",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load conda"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "58a14287-df70-48e9-84ce-23498633f59b",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Setting up conda envirnment and activating it\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# must be done in terminal \n",[m
[32m+[m[32m    "# conda install -c bioconda entrez-direct"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "id": "af2dd13e-3345-467c-8874-ea7f9dcb08dd",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SAMN21040263\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040262\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040261\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specifiedtput: \n",[m
[32m+[m[32m      "No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040260\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040259\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040258\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040257\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: tput: No value for $TERM and no -T specifiedNo value for $TERM and no -T specified\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040256\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040255\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040254\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040253\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040252\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040251\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040250\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040249\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040248\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040247\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040246\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040245\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040244\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040243\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040242\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040241\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040240\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472656\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472655\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472654\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472653\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472652\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472651\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472650\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472649\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472648\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472647\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472646\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472645\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472644\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472643\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472642\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472641\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472640\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472639\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472638\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472637\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472636\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472635\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472634\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/raw-reads/00_metadata\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Fetch metadata for a specific BioSample ID\n",[m
[32m+[m[32m    "filenames=(\"SAMN21040240.fastq\" \"SAMN21040241.fastq\" \"SAMN21040242.fastq\" \"SAMN21040243.fastq\" \"SAMN21040244.fastq\" \"SAMN21040245.fastq\" \"SAMN21040246.fastq\" \n",[m
[32m+[m[32m    "\"SAMN21040247.fastq\" \"SAMN21040248.fastq\" \"SAMN21040249.fastq\" \"SAMN21040250.fastq\" \"SAMN21040251.fastq\" \"SAMN21040252.fastq\" \"SAMN21040253.fastq\" \"SAMN21040254.fastq\" \n",[m
[32m+[m[32m    "\"SAMN21040255.fastq\" \"SAMN21040256.fastq\" \"SAMN21040257.fastq\" \"SAMN21040258.fastq\" \"SAMN21040259.fastq\" \"SAMN21040260.fastq\" \"SAMN21040261.fastq\" \"SAMN21040262.fastq\" \"SAMN21040263.fastq\" \n",[m
[32m+[m[32m    "\"SRR18462633.fastq\" \"SRR18462634.fastq\" \"SRR18462635.fastq\" \"SRR18462636.fastq\" \"SRR18462637.fastq\" \"SRR18462638.fastq\" \"SRR18462639.fastq\" \"SRR18462640.fastq\" \n",[m
[32m+[m[32m    "\"SRR18462641.fastq\" \"SRR18462642.fastq\" \"SRR18462643.fastq\" \"SRR18462644.fastq\" \"SRR18462645.fastq\" \"SRR18462646.fastq\" \"SRR18462647.fastq\" \"SRR18462648.fastq\" \n",[m
[32m+[m[32m    "\"SRR18462649.fastq\" \"SRR18462650.fastq\" \"SRR18462651.fastq\" \"SRR18462652.fastq\" \"SRR18462653.fastq\" \"SRR18462654.fastq\" \"SRR18462655.fastq\" )\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "filenames=(\"SAMN21040263\" \"SAMN21040262\" \"SAMN21040261\" \"SAMN21040260\" \"SAMN21040259\" \"SAMN21040258\" \"SAMN21040257\" \"SAMN21040256\"\n",[m
[32m+[m[32m    "\"SAMN21040255\" \"SAMN21040254\" \"SAMN21040253\" \"SAMN21040252\" \"SAMN21040251\" \"SAMN21040250\" \"SAMN21040249\" \"SAMN21040248\"\n",[m
[32m+[m[32m    "\"SAMN21040247\" \"SAMN21040246\" \"SAMN21040245\" \"SAMN21040244\" \"SAMN21040243\" \"SAMN21040242\" \"SAMN21040241\" \"SAMN21040240\"\n",[m
[32m+[m[32m    "\"SAMN18472656\" \"SAMN18472655\" \"SAMN18472654\" \"SAMN18472653\" \"SAMN18472652\" \"SAMN18472651\" \"SAMN18472650\" \"SAMN18472649\"\n",[m
[32m+[m[32m    "\"SAMN18472648\" \"SAMN18472647\" \"SAMN18472646\" \"SAMN18472645\" \"SAMN18472644\" \"SAMN18472643\" \"SAMN18472642\" \"SAMN18472641\"\n",[m
[32m+[m[32m    "\"SAMN18472640\" \"SAMN18472639\" \"SAMN18472638\" \"SAMN18472637\" \"SAMN18472636\" \"SAMN18472635\" \"SAMN18472634\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for (( i=0; i<${#filenames[@]}; i++ )); do\n",[m
[32m+[m[32m    "    # Index\n",[m
[32m+[m[32m    "    echo \"${filenames[i]%.fastq}\"\n",[m
[32m+[m[32m    "    esearch -db biosample -query ${filenames[i]%.fastq} | efetch -format native > ${filenames[i]}.txt\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 23,[m
[32m+[m[32m   "id": "bde928db-5685-43df-b3b6-4b53d96bdd4a",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda deactivate"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "c1a0dbeb-7b6f-4cad-890e-01bd6ee3f2a1",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SAMN21040240.fastq\n",[m
[32m+[m[32m      "JM_001.fastq\n",[m
[32m+[m[32m      "SAMN21040241.fastq\n",[m
[32m+[m[32m      "JM_002.fastq\n",[m
[32m+[m[32m      "SAMN21040242.fastq\n",[m
[32m+[m[32m      "JM_003.fastq\n",[m
[32m+[m[32m      "SAMN21040243.fastq\n",[m
[32m+[m[32m      "JM_004.fastq\n",[m
[32m+[m[32m      "SAMN21040244.fastq\n",[m
[32m+[m[32m      "JM_005.fastq\n",[m
[32m+[m[32m      "SAMN21040245.fastq\n",[m
[32m+[m[32m      "JM_006.fastq\n",[m
[32m+[m[32m      "SAMN21040246.fastq\n",[m
[32m+[m[32m      "JM_007.fastq\n",[m
[32m+[m[32m      "SAMN21040247.fastq\n",[m
[32m+[m[32m      "JM_008.fastq\n",[m
[32m+[m[32m      "SAMN21040248.fastq\n",[m
[32m+[m[32m      "JM_009.fastq\n",[m
[32m+[m[32m      "SAMN21040249.fastq\n",[m
[32m+[m[32m      "JM_010.fastq\n",[m
[32m+[m[32m      "SAMN21040250.fastq\n",[m
[32m+[m[32m      "JM_011.fastq\n",[m
[32m+[m[32m      "SAMN21040251.fastq\n",[m
[32m+[m[32m      "JM_012.fastq\n",[m
[32m+[m[32m      "SAMN21040252.fastq\n",[m
[32m+[m[32m      "JM_013.fastq\n",[m
[32m+[m[32m      "SAMN21040253.fastq\n",[m
[32m+[m[32m      "JM_014.fastq\n",[m
[32m+[m[32m      "SAMN21040254.fastq\n",[m
[32m+[m[32m      "JM_015.fastq\n",[m
[32m+[m[32m      "SAMN21040255.fastq\n",[m
[32m+[m[32m      "JM_016.fastq\n",[m
[32m+[m[32m      "SAMN21040256.fastq\n",[m
[32m+[m[32m      "JM_017.fastq\n",[m
[32m+[m[32m      "SAMN21040257.fastq\n",[m
[32m+[m[32m      "JM_018.fastq\n",[m
[32m+[m[32m      "SAMN21040258.fastq\n",[m
[32m+[m[32m      "JM_019.fastq\n",[m
[32m+[m[32m      "SAMN21040259.fastq\n",[m
[32m+[m[32m      "JM_020.fastq\n",[m
[32m+[m[32m      "SAMN21040260.fastq\n",[m
[32m+[m[32m      "JM_021.fastq\n",[m
[32m+[m[32m      "SAMN21040261.fastq\n",[m
[32m+[m[32m      "JM_022.fastq\n",[m
[32m+[m[32m      "SAMN21040262.fastq\n",[m
[32m+[m[32m      "JM_023.fastq\n",[m
[32m+[m[32m      "SAMN21040263.fastq\n",[m
[32m+[m[32m      "JM_024.fastq\n",[m
[32m+[m[32m      "SRR18462633.fastq\n",[m
[32m+[m[32m      "JM_025.fastq\n",[m
[32m+[m[32m      "SRR18462634.fastq\n",[m
[32m+[m[32m      "JM_026.fastq\n",[m
[32m+[m[32m      "SRR18462635.fastq\n",[m
[32m+[m[32m      "JM_027.fastq\n",[m
[32m+[m[32m      "SRR18462636.fastq\n",[m
[32m+[m[32m      "JM_028.fastq\n",[m
[32m+[m[32m      "SRR18462637.fastq\n",[m
[32m+[m[32m      "JM_029.fastq\n",[m
[32m+[m[32m      "SRR18462638.fastq\n",[m
[32m+[m[32m      "JM_030.fastq\n",[m
[32m+[m[32m      "SRR18462639.fastq\n",[m
[32m+[m[32m      "JM_031.fastq\n",[m
[32m+[m[32m      "SRR18462640.fastq\n",[m
[32m+[m[32m      "JM_032.fastq\n",[m
[32m+[m[32m      "SRR18462641.fastq\n",[m
[32m+[m[32m      "JM_033.fastq\n",[m
[32m+[m[32m      "SRR18462642.fastq\n",[m
[32m+[m[32m      "JM_034.fastq\n",[m
[32m+[m[32m      "SRR18462643.fastq\n",[m
[32m+[m[32m      "JM_035.fastq\n",[m
[32m+[m[32m      "SRR18462644.fastq\n",[m
[32m+[m[32m      "JM_036.fastq\n",[m
[32m+[m[32m      "SRR18462645.fastq\n",[m
[32m+[m[32m      "JM_037.fastq\n",[m
[32m+[m[32m      "SRR18462646.fastq\n",[m
[32m+[m[32m      "JM_038.fastq\n",[m
[32m+[m[32m      "SRR18462647.fastq\n",[m
[32m+[m[32m      "JM_039.fastq\n",[m
[32m+[m[32m      "SRR18462648.fastq\n",[m
[32m+[m[32m      "JM_040.fastq\n",[m
[32m+[m[32m      "SRR18462649.fastq\n",[m
[32m+[m[32m      "JM_041.fastq\n",[m
[32m+[m[32m      "SRR18462650.fastq\n",[m
[32m+[m[32m      "JM_042.fastq\n",[m
[32m+[m[32m      "SRR18462651.fastq\n",[m
[32m+[m[32m      "JM_043.fastq\n",[m
[32m+[m[32m      "SRR18462652.fastq\n",[m
[32m+[m[32m      "JM_044.fastq\n",[m
[32m+[m[32m      "SRR18462653.fastq\n",[m
[32m+[m[32m      "JM_045.fastq\n",[m
[32m+[m[32m      "SRR18462654.fastq\n",[m
[32m+[m[32m      "JM_046.fastq\n",[m
[32m+[m[32m      "SRR18462655.fastq\n",[m
[32m+[m[32m      "JM_047.fastq\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# renaming \n",[m
[32m+[m[32m    "counter=1\n",[m
[32m+[m[32m    "for file in *.fastq; do\n",[m
[32m+[m[32m    "    newname=$(printf \"JM_%03d.fastq\" \"$counter\")\n",[m
[32m+[m[32m    "    mv \"$file\" \"$newname\"\n",[m
[32m+[m[32m    "    echo \"$file\"\n",[m
[32m+[m[32m    "    echo \"$newname\"\n",[m
[32m+[m[32m    "    ((counter++))\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "id": "e3b4904d-4e6c-4f68-84e5-66a992686127",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) filelist.txt\n",[m
[32m+[m[32m      "JM_001_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040240.fastq.txt\n",[m
[32m+[m[32m      "JM_002_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040241.fastq.txt\n",[m
[32m+[m[32m      "JM_003_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040242.fastq.txt\n",[m
[32m+[m[32m      "JM_004_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040243.fastq.txt\n",[m
[32m+[m[32m      "JM_005_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040244.fastq.txt\n",[m
[32m+[m[32m      "JM_006_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040245.fastq.txt\n",[m
[32m+[m[32m      "JM_007_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040246.fastq.txt\n",[m
[32m+[m[32m      "JM_008_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040247.fastq.txt\n",[m
[32m+[m[32m      "JM_009_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040248.fastq.txt\n",[m
[32m+[m[32m      "JM_010_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040249.fastq.txt\n",[m
[32m+[m[32m      "JM_011_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040250.fastq.txt\n",[m
[32m+[m[32m      "JM_012_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040251.fastq.txt\n",[m
[32m+[m[32m      "JM_013_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040252.fastq.txt\n",[m
[32m+[m[32m      "JM_014_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040253.fastq.txt\n",[m
[32m+[m[32m      "JM_015_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040254.fastq.txt\n",[m
[32m+[m[32m      "JM_016_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040255.fastq.txt\n",[m
[32m+[m[32m      "JM_017_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040256.fastq.txt\n",[m
[32m+[m[32m      "JM_018_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040257.fastq.txt\n",[m
[32m+[m[32m      "JM_019_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040258.fastq.txt\n",[m
[32m+[m[32m      "JM_020_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040259.fastq.txt\n",[m
[32m+[m[32m      "JM_021_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040260.fastq.txt\n",[m
[32m+[m[32m      "JM_022_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040261.fastq.txt\n",[m
[32m+[m[32m      "JM_023_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040262.fastq.txt\n",[m
[32m+[m[32m      "JM_024_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040263.fastq.txt\n",[m
[32m+[m[32m      "JM_025_metadata.txt\n",[m
[32m+[m[32m      "SRR18462633.fastq.txt\n",[m
[32m+[m[32m      "JM_026_metadata.txt\n",[m
[32m+[m[32m      "SRR18462634.fastq.txt\n",[m
[32m+[m[32m      "JM_027_metadata.txt\n",[m
[32m+[m[32m      "SRR18462635.fastq.txt\n",[m
[32m+[m[32m      "JM_028_metadata.txt\n",[m
[32m+[m[32m      "SRR18462636.fastq.txt\n",[m
[32m+[m[32m      "JM_029_metadata.txt\n",[m
[32m+[m[32m      "SRR18462637.fastq.txt\n",[m
[32m+[m[32m      "JM_030_metadata.txt\n",[m
[32m+[m[32m      "SRR18462638.fastq.txt\n",[m
[32m+[m[32m      "JM_031_metadata.txt\n",[m
[32m+[m[32m      "SRR18462639.fastq.txt\n",[m
[32m+[m[32m      "JM_032_metadata.txt\n",[m
[32m+[m[32m      "SRR18462640.fastq.txt\n",[m
[32m+[m[32m      "JM_033_metadata.txt\n",[m
[32m+[m[32m      "SRR18462641.fastq.txt\n",[m
[32m+[m[32m      "JM_034_metadata.txt\n",[m
[32m+[m[32m      "SRR18462642.fastq.txt\n",[m
[32m+[m[32m      "JM_035_metadata.txt\n",[m
[32m+[m[32m      "SRR18462643.fastq.txt\n",[m
[32m+[m[32m      "JM_036_metadata.txt\n",[m
[32m+[m[32m      "SRR18462644.fastq.txt\n",[m
[32m+[m[32m      "JM_037_metadata.txt\n",[m
[32m+[m[32m      "SRR18462645.fastq.txt\n",[m
[32m+[m[32m      "JM_038_metadata.txt\n",[m
[32m+[m[32m      "SRR18462646.fastq.txt\n",[m
[32m+[m[32m      "JM_039_metadata.txt\n",[m
[32m+[m[32m      "SRR18462647.fastq.txt\n",[m
[32m+[m[32m      "JM_040_metadata.txt\n",[m
[32m+[m[32m      "SRR18462648.fastq.txt\n",[m
[32m+[m[32m      "JM_041_metadata.txt\n",[m
[32m+[m[32m      "SRR18462649.fastq.txt\n",[m
[32m+[m[32m      "JM_042_metadata.txt\n",[m
[32m+[m[32m      "SRR18462650.fastq.txt\n",[m
[32m+[m[32m      "JM_043_metadata.txt\n",[m
[32m+[m[32m      "SRR18462651.fastq.txt\n",[m
[32m+[m[32m      "JM_044_metadata.txt\n",[m
[32m+[m[32m      "SRR18462652.fastq.txt\n",[m
[32m+[m[32m      "JM_045_metadata.txt\n",[m
[32m+[m[32m      "SRR18462653.fastq.txt\n",[m
[32m+[m[32m      "JM_046_metadata.txt\n",[m
[32m+[m[32m      "SRR18462654.fastq.txt\n",[m
[32m+[m[32m      "JM_047_metadata.txt\n",[m
[32m+[m[32m      "SRR18462655.fastq.txt\n",[m
[32m+[m[32m      "JM_048_metadata.txt\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# renaming \n",[m
[32m+[m[32m    "counter=1\n",[m
[32m+[m[32m    "for file in *.txt; do\n",[m
[32m+[m[32m    "    newname=$(printf \"JM_%03d_metadata.txt\" \"$counter\")\n",[m
[32m+[m[32m    "    mv \"$file\" \"$newname\"\n",[m
[32m+[m[32m    "    echo \"$file\"\n",[m
[32m+[m[32m    "    echo \"$newname\"\n",[m
[32m+[m[32m    "    ((counter++))\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "756caf22-eda3-4bd3-baf1-e4a0d3038865",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 1. Prepare data and directories\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Data was downloaded with SRAtoolkit "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "id": "561d77eb-30d4-41e5-8254-62621e3c5a71",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/raw-reads"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "d7f1939d-faa8-4885-8605-0b7b624f3023",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find -type f -exec md5sum \"{}\" + > checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "id": "7a8233e4-6b90-499c-a60a-9bcc5c52bfd7",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "./JM_031_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_002.fastq: OK\n",[m
[32m+[m[32m      "./JM_042_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_027_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_014.fastq: OK\n",[m
[32m+[m[32m      "./JM_004.fastq: OK\n",[m
[32m+[m[32m      "./JM_037_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_042.fastq: OK\n",[m
[32m+[m[32m      "./JM_008_metadata.txt: OK\n",[m
[32m+[m[32m      "./.ipynb_checkpoints/SAMN21040240.fastq-checkpoint.txt: OK\n",[m
[32m+[m[32m      "./.ipynb_checkpoints/SAMN21040242.fastq-checkpoint.txt: OK\n",[m
[32m+[m[32m      "./.ipynb_checkpoints/filelist-checkpoint.txt: OK\n",[m
[32m+[m[32m      "./.ipynb_checkpoints/SAMN21040241.fastq-checkpoint.txt: OK\n",[m
[32m+[m[32m      "./JM_012_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_033_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_048_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_025_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_010_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_017.fastq: OK\n",[m
[32m+[m[32m      "./JM_039.fastq: OK\n",[m
[32m+[m[32m      "./JM_045.fastq: OK\n",[m
[32m+[m[32m      "./JM_019.fastq: OK\n",[m
[32m+[m[32m      "./JM_018_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_023.fastq: OK\n",[m
[32m+[m[32m      "./JM_012.fastq: OK\n",[m
[32m+[m[32m      "./JM_027.fastq: OK\n",[m
[32m+[m[32m      "./JM_015.fastq: OK\n",[m
[32m+[m[32m      "./JM_009_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_033.fastq: OK\n",[m
[32m+[m[32m      "./JM_045_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_021_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_029.fastq: OK\n",[m
[32m+[m[32m      "./JM_026.fastq: OK\n",[m
[32m+[m[32m      "./JM_001.fastq: OK\n",[m
[32m+[m[32m      "./JM_039_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_003.fastq: OK\n",[m
[32m+[m[32m      "./JM_029_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_031.fastq: OK\n",[m
[32m+[m[32m      "./JM_011_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_011.fastq: OK\n",[m
[32m+[m[32m      "./JM_040.fastq: OK\n",[m
[32m+[m[32m      "./JM_041.fastq: OK\n",[m
[32m+[m[32m      "./JM_030_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_019_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_020.fastq: OK\n",[m
[32m+[m[32m      "./JM_024_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_022.fastq: OK\n",[m
[32m+[m[32m      "./JM_047_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_005.fastq: OK\n",[m
[32m+[m[32m      "./JM_001_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_026_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_036.fastq: OK\n",[m
[32m+[m[32m      "./JM_018.fastq: OK\n",[m
[32m+[m[32m      "./JM_043.fastq: OK\n",[m
[32m+[m[32m      "./JM_040_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_038_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_016_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_024.fastq: OK\n",[m
[32m+[m[32m      "./JM_017_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_028.fastq: OK\n",[m
[32m+[m[32m      "./JM_038.fastq: OK\n",[m
[32m+[m[32m      "./JM_010.fastq: OK\n",[m
[32m+[m[32m      "./JM_041_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_035_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_047.fastq: OK\n",[m
[32m+[m[32m      "./JM_032.fastq: OK\n",[m
[32m+[m[32m      "./JM_021.fastq: OK\n",[m
[32m+[m[32m      "./checklist.chk: FAILED\n",[m
[32m+[m[32m      "./JM_020_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_023_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_015_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_002_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_046.fastq: OK\n",[m
[32m+[m[32m      "./JM_013.fastq: OK\n",[m
[32m+[m[32m      "./JM_037.fastq: OK\n",[m
[32m+[m[32m      "./JM_032_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_044.fastq: OK\n",[m
[32m+[m[32m      "./JM_025.fastq: OK\n",[m
[32m+[m[32m      "./JM_028_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_036_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_014_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_009.fastq: OK\n",[m
[32m+[m[32m      "./JM_006.fastq: OK\n",[m
[32m+[m[32m      "./JM_030.fastq: OK\n",[m
[32m+[m[32m      "./JM_034_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_006_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_044_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_016.fastq: OK\n",[m
[32m+[m[32m      "./JM_013_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_007_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_046_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_022_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_003_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_005_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_043_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_008.fastq: OK\n",[m
[32m+[m[32m      "./JM_007.fastq: OK\n",[m
[32m+[m[32m      "./JM_004_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_034.fastq: OK\n",[m
[32m+[m[32m      "./JM_035.fastq: OK\n",[m
[32m+[m[32m      "md5sum: WARNING: 1 computed checksum did NOT match\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "md5sum -c checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "e30aaf24-3fbe-4346-b0e3-4c197d377e52",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Define Project Variables and create analysis directories:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "id": "6c13cc36-5ae4-447e-9abe-32c08a774f48",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#Create analysis directories and define project variables\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the user as a variable\n",[m
[32m+[m[32m    "USER=\"cfngle\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the project directory and temp subdirectory as a variable\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/$USER/raw-data/JM/\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "id": "810a60cc-673f-40fc-abe0-aab516ebcce4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Create analysis subdirectories\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM/\"\n",[m
[32m+[m[32m    "mkdir -p $PROJECT\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/001.fastqc_raw\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/002.trim_galore\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/002.trimmomatic\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/003.fastq_trim_galore\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/004.alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/004.alignments_tm\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.b.stats_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.qc_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/006.deduplication\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/007.meth_extraction\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/008.methylkit\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/099.test"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "c5e17deb-bbbb-4bd7-910d-9d431cd550ee",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 1.1 FastQC RAW Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 53,[m
[32m+[m[32m   "id": "6563ed7d-f7b8-467a-9f26-f7b6617aa010",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "./JM_002.fastq ./JM_014.fastq ./JM_004.fastq ./JM_042.fastq ./JM_017.fastq ./JM_039.fastq ./JM_045.fastq ./JM_019.fastq ./JM_023.fastq ./JM_012.fastq ./JM_027.fastq ./JM_015.fastq ./JM_033.fastq ./JM_029.fastq ./JM_026.fastq ./JM_001.fastq ./JM_003.fastq ./JM_031.fastq ./JM_011.fastq ./JM_040.fastq ./JM_041.fastq ./JM_020.fastq ./JM_022.fastq ./JM_005.fastq ./JM_036.fastq ./JM_018.fastq ./JM_043.fastq ./JM_024.fastq ./JM_028.fastq ./JM_038.fastq ./JM_010.fastq ./JM_047.fastq ./JM_032.fastq ./JM_021.fastq ./JM_046.fastq ./JM_013.fastq ./JM_037.fastq ./JM_044.fastq ./JM_025.fastq ./JM_009.fastq ./JM_006.fastq ./JM_030.fastq ./JM_016.fastq ./JM_008.fastq ./JM_007.fastq ./JM_034.fastq ./JM_035.fastq\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 01:00:00 --mem 20G -c 10\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/001.fastqc_raw/fastqc_raw\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4454082\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\" #Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/raw-reads\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/001.fastqc_raw\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "cd $IN\n",[m
[32m+[m[32m    "#  FILES=`find -type f -name \"*.fastq\"`\n",[m
[32m+[m[32m    "FILES=`find -type f -name \"*.fastq\"`\n",[m
[32m+[m[32m    "echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "         COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "         echo $COMMAND\n",[m
[32m+[m[32m    "        #echo $file\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc_raw --time 01:00:00 --mem 20G -c 10 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 26,[m
[32m+[m[32m   "id": "cdccf7b3-24ba-4c00-ac81-f9c5d586a83c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "id": "0908f545-c305-4531-b535-a3a61771e65e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "id": "437edb0f-7d48-4a0e-9d2f-fcb49d2a2904",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1708664591.5094242-395558;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Raw\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/001.fastqc_raw\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m97/97\u001b[0m  stqc_raw/JM_033_fastqc.html\u001b[0m.html\u001b[0m\n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 47 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 001.fastqc_raw/Fastqc-Raw_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 001.fastqc_raw/Fastqc-Raw_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 001.fastqc_raw -o 001.fastqc_raw -i Fastqc-Raw"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "50e04741-aff4-4af1-9279-0d6d60f29ae8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 2. Trimming"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "325e34ec-e56e-4cbc-bed9-28b65bda686b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1a Trim_galore"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "5a155bfd-5e13-4f05-a07e-b71ffc78bfc4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "JM_001.fastq JM_002.fastq JM_003.fastq JM_004.fastq JM_005.fastq JM_006.fastq JM_007.fastq JM_008.fastq JM_009.fastq JM_010.fastq JM_011.fastq JM_012.fastq JM_013.fastq JM_014.fastq JM_015.fastq JM_016.fastq JM_017.fastq JM_018.fastq JM_019.fastq JM_020.fastq JM_021.fastq JM_022.fastq JM_023.fastq JM_024.fastq JM_025.fastq JM_026.fastq JM_027.fastq JM_028.fastq JM_029.fastq JM_030.fastq JM_031.fastq JM_032.fastq JM_033.fastq JM_034.fastq JM_035.fastq JM_036.fastq JM_037.fastq JM_038.fastq JM_039.fastq JM_040.fastq JM_041.fastq JM_042.fastq JM_043.fastq JM_044.fastq JM_045.fastq JM_046.fastq JM_047.fastq\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 04:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/002.trim_galore/trim_galore-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 94\n",[m
[32m+[m[32m      "Submitted batch job 4464148\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/raw-reads\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $IN\n",[m
[32m+[m[32m    "mkdir -p $OUT\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the files to trim:\n",[m
[32m+[m[32m    "FILES=`basename -a ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load trim_galore\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for FILE in $FILES\n",[m
[32m+[m[32m    "     do\n",[m
[32m+[m[32m    "        In_File1=${IN}/${FILE}\n",[m
[32m+[m[32m    "        echo $In_File1\n",[m
[32m+[m[32m    "        Out=${OUT}/${FILE}_trimmed.fastq\n",[m
[32m+[m[32m    "        COMMAND=\"trim_galore --rrbs --quality 25 --clip_R1 4 --three_prime_clip_R1 2 $In_File1 --output_dir $OUT\"\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/trim_galore-logs --time 04:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "cab78171-b1c8-4bc8-894d-cc73252af1bf",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1b Trimmomatic"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "id": "b972d276-6313-4f3b-8e0b-4e0c19f53a75",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 04:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/002.trimmomatic//trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 94\n",[m
[32m+[m[32m      "Submitted batch job 4468474\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/raw-reads\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/002.trimmomatic/\"\n",[m
[32m+[m[32m    "ADAPTER=\"${PROJECT}/zzz.adapters/TruSeq3-SE.fa\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $IN\n",[m
[32m+[m[32m    "mkdir -p $OUT\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the files to trim:\n",[m
[32m+[m[32m    "FILES=`basename -a ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load Trimmomatic\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for FILE in $FILES\n",[m
[32m+[m[32m    "     do\n",[m
[32m+[m[32m    "        In_File1=${IN}/${FILE}\n",[m
[32m+[m[32m    "        echo $In_File1\n",[m
[32m+[m[32m    "        Out=${OUT}${FILE}_trimmoniac.fastq\n",[m
[32m+[m[32m    "        COMMAND=\"trimmomatic SE -phred33 ${In_File1} ${Out} ILLUMINACLIP:${ADAPTER}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36\"\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/trimmomatic-logs --time 04:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1f93e76c-40f1-4c3b-9466-c6eaa788cd00",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.2a FastQC TRIMMED Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "51ce841f-d25c-452a-be07-537f33193bbc",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Loading \u001b[1mFastQC/0.11.7\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[91mERROR\u001b[0m: Conflicting 'FastQC' is loaded\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 02:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/003.fastq_trim_galore/fastqc-trim_galore-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4465018\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\" # Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/003.fastq_trim_galore\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-trim_galore-logs --time 02:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "165399e1-0c53-4375-9f83-ef419f9a256f",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mmultiqc/1.11\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "id": "aeae0461-94aa-48ef-bc35-44e85d8242ac",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709088715.1051173-869333;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Trimmed\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/003.fastq_trim_galore\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m200/200\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 47 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 003.fastq_trim_galore/Fastqc-Trimmed_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 003.fastq_trim_galore/Fastqc-Trimmed_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM\n",[m
[32m+[m[32m    "multiqc 003.fastq_trim_galore -o 003.fastq_trim_galore -i Fastqc-Trimmed"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "030cba67-0c6d-41ea-b99d-ead2110c7803",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.2b FastQC TRIMMED Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 23,[m
[32m+[m[32m   "id": "51794245-fa9d-4b40-b403-2b78f22072a6",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Loading \u001b[1mFastQC/0.11.7\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[91mERROR\u001b[0m: Conflicting 'FastQC' is loaded\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 02:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/003.fastq_trimmomatic/fastqc-trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4468568\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\" # Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/003.fastq_trimmomatic\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-trimmomatic-logs --time 02:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "id": "22a2abf7-c41f-4f69-9789-f26d4941b705",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "id": "339514d2-0400-415b-bcb7-3825b08caa69",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709164268.7307322-895457;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Trimmed\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/003.fastq_trimmomatic\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m189/189\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 47 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM\n",[m
[32m+[m[32m    "multiqc 003.fastq_trimmomatic -o 003.fastq_trimmomatic -i Fastqc-Trimmed"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "105a8a9b-d575-4ea9-8651-ab1d2eedc6eb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 5. Alignment\n",[m
[32m+[m[32m    "Bismark user guide https://felixkrueger.github.io/Bismark/\n",[m
[32m+[m[32m    "### 5.1 Preparation of the genome\n",[m
[32m+[m[32m    "Japanese medaka rgenome v1 (ASM223467v1)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "id": "b0d6738f-fcaf-4e38-99f3-71603447c489",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd rgenome/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "id": "e7e5d3e0-1ae5-4b58-b0de-0a9686bbb058",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "grep -e \">\" GCF_002234675.1_ASM223467v1_genomic.fna | awk 'sub(/^>/, \"\")' | sort -k1 > JM_chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 30,[m
[32m+[m[32m   "id": "dfb354d0-c0c6-42c8-8fe2-60d1256d78ac",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "NC_004387.1 Oryzias latipes mitochondrion, complete genome\n",[m
[32m+[m[32m      "NC_019859.2 Oryzias latipes chromosome 1, ASM223467v1\n",[m
[32m+[m[32m      "NC_019860.2 Oryzias latipes chromosome 2, ASM223467v1\n",[m
[32m+[m[32m      "NC_019861.2 Oryzias latipes chromosome 3, ASM223467v1\n",[m
[32m+[m[32m      "NC_019862.2 Oryzias latipes chromosome 4, ASM223467v1\n",[m
[32m+[m[32m      "NC_019863.2 Oryzias latipes chromosome 5, ASM223467v1\n",[m
[32m+[m[32m      "NC_019864.2 Oryzias latipes chromosome 6, ASM223467v1\n",[m
[32m+[m[32m      "NC_019865.2 Oryzias latipes chromosome 7, ASM223467v1\n",[m
[32m+[m[32m      "NC_019866.2 Oryzias latipes chromosome 8, ASM223467v1\n",[m
[32m+[m[32m      "NC_019867.2 Oryzias latipes chromosome 9, ASM223467v1\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "head JM_chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 31,[m
[32m+[m[32m   "id": "31bdff52-c31e-4e7e-8937-44177045ed93",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load bismark/0.23.0"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 35,[m
[32m+[m[32m   "id": "fb0d2214-3c91-4125-a40d-51d0456ee89d",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Writing bisulfite genomes out into a single MFA (multi FastA) file\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bisulfite Genome Indexer version v0.23.0 (last modified: 14 April 2019)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step I - Prepare genome folders - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Calculating genomic frequencies (this may take several minutes depending on genome size) ...\n",[m
[32m+[m[32m      "====================================================================================================================================================================\n",[m
[32m+[m[32m      "Now reading in and storing sequence information of the genome specified in: /workspace/cfngle/raw-data/JM/rgenome/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "chr NC_019859.2 (37713152 bp)\n",[m
[32m+[m[32m      "chr NC_019860.2 (25379070 bp)\n",[m
[32m+[m[32m      "chr NC_019861.2 (38248663 bp)\n",[m
[32m+[m[32m      "chr NC_019862.2 (32868862 bp)\n",[m
[32m+[m[32m      "chr NC_019863.2 (33205099 bp)\n",[m
[32m+[m[32m      "chr NC_019864.2 (32246747 bp)\n",[m
[32m+[m[32m      "chr NC_019865.2 (34573382 bp)\n",[m
[32m+[m[32m      "chr NC_019866.2 (26239357 bp)\n",[m
[32m+[m[32m      "chr NC_019867.2 (33399407 bp)\n",[m
[32m+[m[32m      "chr NC_019868.2 (31218526 bp)\n",[m
[32m+[m[32m      "chr NC_019869.2 (28210532 bp)\n",[m
[32m+[m[32m      "chr NC_019870.2 (30543476 bp)\n",[m
[32m+[m[32m      "chr NC_019871.2 (33825776 bp)\n",[m
[32m+[m[32m      "chr NC_019872.2 (30598983 bp)\n",[m
[32m+[m[32m      "chr NC_019873.2 (30476034 bp)\n",[m
[32m+[m[32m      "chr NC_019874.2 (32958677 bp)\n",[m
[32m+[m[32m      "chr NC_019875.2 (31792230 bp)\n",[m
[32m+[m[32m      "chr NC_019876.2 (30918796 bp)\n",[m
[32m+[m[32m      "chr NC_019877.2 (25472880 bp)\n",[m
[32m+[m[32m      "chr NC_019878.2 (25942153 bp)\n",[m
[32m+[m[32m      "chr NC_019879.2 (31148813 bp)\n",[m
[32m+[m[32m      "chr NC_019880.2 (28976614 bp)\n",[m
[32m+[m[32m      "chr NC_019881.2 (24400806 bp)\n",[m
[32m+[m[32m      "chr NC_019882.2 (23682337 bp)\n",[m
[32m+[m[32m      "chr NC_004387.1 (16714 bp)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019869.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019864.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019861.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019866.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019879.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019874.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_004387.1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019871.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019881.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019876.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019877.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019873.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019865.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019882.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019880.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019870.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019859.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019878.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019872.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019867.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019863.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019875.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019860.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019868.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019862.2 <<\n",[m
[32m+[m[32m      "Writing genomic nucleotide frequencies to the file >/workspace/cfngle/raw-data/JM/rgenome/genomic_nucleotide_frequencies.txt< for future re-use\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: A\t216957530\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AA\t76267116\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AC\t41125942\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AG\t46339810\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AT\t53224515\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: C\t149808184\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CA\t54903461\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CC\t33648602\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CG\t14873895\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CT\t46382122\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: G\t149806542\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GA\t43510171\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GC\t31502622\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GG\t33674420\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GT\t41119214\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: T\t216993830\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TA\t42276625\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TC\t43530907\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TG\t54918326\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TT\t76267822\n",[m
[32m+[m[32m      "Finished processing genomic nucleotide frequencies\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total number of conversions performed:\n",[m
[32m+[m[32m      "C->T:\t149808184\n",[m
[32m+[m[32m      "G->A:\t149806542\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step II - Genome bisulfite conversions - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bismark Genome Preparation - Step III: Launching the Bowtie 2 indexer\n",[m
[32m+[m[32m      "Please be aware that this process can - depending on genome size - take several hours!\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_CT.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.CT_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_GA.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.GA_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:09\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:08\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "  Sorting block time: 00:09:56\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 366764072\n",[m
[32m+[m[32m      "fchr[G]: 516572256\n",[m
[32m+[m[32m      "fchr[T]: 516572256\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_GA.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_GA.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:10:47\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:03\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:00\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 216957530\n",[m
[32m+[m[32m      "fchr[G]: 216957530\n",[m
[32m+[m[32m      "fchr[T]: 366764072\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_CT.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_CT.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:12:34\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:03\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:01\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:09\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:18\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 366764072\n",[m
[32m+[m[32m      "fchr[G]: 516572256\n",[m
[32m+[m[32m      "fchr[T]: 516572256\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_GA.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_GA.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:10:54\n",[m
[32m+[m[32m      "  Sorting block time: 00:10:15\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 216957530\n",[m
[32m+[m[32m      "fchr[G]: 216957530\n",[m
[32m+[m[32m      "fchr[T]: 366764072\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_CT.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_CT.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:12:48\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "bismark_genome_preparation --genomic_composition /workspace/cfngle/raw-data/JM/rgenome/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1c9fecb5-d184-4c1d-a649-f10c6badd0e1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5.2 Alignments to genome"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "id": "0f373877-37ea-4284-8322-93f1233f1e50",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 4-24:00:00 --mem 80G -c 5\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/004.alignments/bis-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4465104\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "# echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align-local --time 23:00:00 --mem 25G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "e444f8a9-ffb0-4e86-b4a2-e96129533350",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.2.1 Alignments to genome trim_galore BISMARK --local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 83,[m
[32m+[m[32m   "id": "2a4f44ac-1fd2-4005-90dc-0c88f2d9e05e",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 2-23:59:00 --mem 25G -c 1\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/004.alignments_BS_local/bis-align_local\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4676246\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "# echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional \\\n",[m
[32m+[m[32m    "                --local\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align_local --time 2-23:59:00 --mem 25G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 84,[m
[32m+[m[32m   "id": "ecdc372d-e412-4323-aae6-2b8a1c9cbe7c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1710210739.8987062-991077;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/004.alignments_BS_local\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m190/190\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 47 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.qc_alignments_BS_local/QC.alignments_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.qc_alignments_BS_local/QC.alignments_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 004.alignments_BM_local -i QC.alignments -o 005.qc_alignments_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "467de58a-18ff-484d-a3ae-166efa68e6ed",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.2.1 Alignments to genome (Trimmomatic)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 74,[m
[32m+[m[32m   "id": "611a95cf-1b25-4632-a7db-556efecb462a",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 4-24:00:00 --mem 80G -c 8\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/004.alignments_tm/bis-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4483607\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_tm\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fastq`\n",[m
[32m+[m[32m    "# echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 4 \\\n",[m
[32m+[m[32m    "                --non_directional\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align --time 4-24:00:00 --mem 10G -c 1| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 75,[m
[32m+[m[32m   "id": "0e0dd3e6-e2fa-43a3-a012-11796117d48e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709671700.8706174-644690;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/004.alignments_tm\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m191/191\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 47 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.qc.alignments_tm/QC.alignments_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.qc.alignments_tm/QC.alignments_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 004.alignments_tm -i QC.alignments -o 005.qc.alignments_tm"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "6e6b06c2-ad91-431d-b625-e8efa8219abd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5.1a BSseeker"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "e3970845-a09e-4153-9bd7-c3a50a1dfad8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "##### BSseeker did not work with command line directly. A bioconda environment had to be set up and BSseeker 2 directly installed there. (conda install bioconda/label/cf201901::bs-seeker2).\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "bd839b4d-dc2a-43af-81ab-d9584c9a3450",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### Script for BS indexing (for .sh file) "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "2ebeae49-1865-4ffd-b132-2bd3046d0128",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#SBATCH --job-name=indexBS\n",[m
[32m+[m[32m    "#SBATCH --time=24:00:00\n",[m
[32m+[m[32m    "#SBATCH --mem=20G\n",[m
[32m+[m[32m    "#SBATCH --output=/workspace/cfngle/raw-data/JM/rgenome/output.log\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "OUT=$GENOME\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "bs_seeker2-build.py \\\n",[m
[32m+[m[32m    "    -f ${GENOME}/GCF_002234675.1_ASM223467v1_genomic.fasta \\\n",[m
[32m+[m[32m    "    --aligner bowtie2 \\\n",[m
[32m+[m[32m    "    -r \\\n",[m
[32m+[m[32m    "    -d /workspace/cfngle/raw-data/JM/rgenome/BSseeker2-index"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 54,[m
[32m+[m[32m   "id": "d895d3db-a3a2-4050-beb4-7763e24eb63c",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Collecting package metadata (current_repodata.json): done\n",[m
[32m+[m[32m      "Solving environment: done\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "==> WARNING: A newer version of conda exists. <==\n",[m
[32m+[m[32m      "  current version: 23.1.0\n",[m
[32m+[m[32m      "  latest version: 24.1.2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Please update conda by running\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    $ conda update -n base -c defaults conda\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Or to minimize the number of packages updated during conda update use\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "     conda install conda=24.1.2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "# All requested packages already installed.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda install bowtie2"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 55,[m
[32m+[m[32m   "id": "b1e9b088-37a7-4f0b-8af5-f511b863bae6",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Usage: bs_seeker2-build.py [options]\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Options:\n",[m
[32m+[m[32m      "  -h, --help            show this help message and exit\n",[m
[32m+[m[32m      "  -f FILE, --file=FILE  Input your reference genome file (fasta)\n",[m
[32m+[m[32m      "  --aligner=ALIGNER     Aligner program to perform the analysis: bowtie,\n",[m
[32m+[m[32m      "                        bowtie2, soap, rmap [Default: bowtie]\n",[m
[32m+[m[32m      "  -p PATH, --path=PATH  Path to the aligner program. Detected:\n",[m
[32m+[m[32m      "                        bowtie: None\n",[m
[32m+[m[32m      "                        bowtie2:\n",[m
[32m+[m[32m      "                        /workspace/appscratch/miniconda/cfngle_env-01/bin\n",[m
[32m+[m[32m      "                        rmap: None\n",[m
[32m+[m[32m      "                        soap: None\n",[m
[32m+[m[32m      "  -d DBPATH, --db=DBPATH\n",[m
[32m+[m[32m      "                        Path to the reference genome library (generated in\n",[m
[32m+[m[32m      "                        preprocessing genome) [Default: /powerplant/workspace/\n",[m
[32m+[m[32m      "                        appscratch/miniconda/cfngle_env-01/bin/bs_utils/refere\n",[m
[32m+[m[32m      "                        nce_genomes]\n",[m
[32m+[m[32m      "  -v, --version         show version of BS-Seeker2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  Reduced Representation Bisulfite Sequencing Options:\n",[m
[32m+[m[32m      "    Use this options with conjuction of -r [--rrbs]\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    -r, --rrbs          Build index specially for Reduced Representation\n",[m
[32m+[m[32m      "                        Bisulfite Sequencing experiments. Genome other than\n",[m
[32m+[m[32m      "                        certain fragments will be masked. [Default: False]\n",[m
[32m+[m[32m      "    -l LOW_BOUND, --low=LOW_BOUND\n",[m
[32m+[m[32m      "                        lower bound of fragment length (excluding recognition\n",[m
[32m+[m[32m      "                        sequence such as C-CGG) [Default: 20]\n",[m
[32m+[m[32m      "    -u UP_BOUND, --up=UP_BOUND\n",[m
[32m+[m[32m      "                        upper bound of fragment length (excluding recognition\n",[m
[32m+[m[32m      "                        sequence such as C-CGG ends) [Default: 500]\n",[m
[32m+[m[32m      "    -c CUT_FORMAT, --cut-site=CUT_FORMAT\n",[m
[32m+[m[32m      "                        Cut sites of restriction enzyme. Ex: MspI(C-CGG),\n",[m
[32m+[m[32m      "                        Mael:(C-TAG), double-enzyme MspI&Mael:(C-CGG,C-TAG).\n",[m
[32m+[m[32m      "                        [Default: C-CGG]\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "bs_seeker2-build.py -h"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "e6352cee-77ed-4a3d-8129-6b464c28747e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) \n",[m
[32m+[m[32m      "     BS-Seeker2 v2.1.7 - Oct. 23, 2018\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Reference genome file: /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta\n",[m
[32m+[m[32m      "Reduced Representation Bisulfite Sequencing: True\n",[m
[32m+[m[32m      "Short reads aligner you are using: bowtie2\n",[m
[32m+[m[32m      "Builder path: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# indexing reference genome for BSseeker\n",[m
[32m+[m[32m    "bs_seeker2-build.py -f /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta --aligner bowtie2 -r -d /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 76,[m
[32m+[m[32m   "id": "5ddcbb9f-2da3-43b1-a617-1066a35928f4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SBATCH_ARGS: --time 4-24:00:00 --mem 80G -c 8\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/004.alignments_BS_tm/BS-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4484673\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_BS_tm\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments_BS_tm\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${IN}/${NAME}\n",[m
[32m+[m[32m    "        COMMAND=\"bs_seeker2-align.py \\\n",[m
[32m+[m[32m    "            -i ${IN}/$NAME \\\n",[m
[32m+[m[32m    "            -r \\\n",[m
[32m+[m[32m    "            --aligner bowtie2 \\\n",[m
[32m+[m[32m    "            -o ${OUT}/${PREFIX}.bam \\\n",[m
[32m+[m[32m    "            -g ${GENOME}/GCF_002234675.1_ASM223467v1_genomic.fasta \\\n",[m
[32m+[m[32m    "            -d ${GENOME}/BSseeker2-index \\\n",[m
[32m+[m[32m    "            --temp_dir=${OUT}/TMP/ \\\n",[m
[32m+[m[32m    "            --bt2-p 4\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/BS-align --time 24:00:00 --mem 10G -c 1| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 81,[m
[32m+[m[32m   "id": "a2b29e12-8dda-4404-b5df-aae013e70a3c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 55,[m
[32m+[m[32m   "id": "b9aabc7b-1fb3-4d13-a010-4fb159ea9b58",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Loading \u001b[1mFastQC/0.11.7\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[91mERROR\u001b[0m: Conflicting 'FastQC' is loaded\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 02:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/005.fastq_BS_tm/fastqc-BS_tm-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4483213\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\" # Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments_BS_tm\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/005.fastq_BS_tm\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.bam`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-BS_tm-logs --time 02:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 58,[m
[32m+[m[32m   "id": "196e27c0-8347-44de-bc68-607daf9c15f1",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709586683.9206378-841825;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/005.fastq_BS_tm\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m189/189\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 47 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.fastq_BS_tm/QC.alignments_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.fastq_BS_tm/QC.alignments_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 005.fastq_BS_tm -i QC.alignments -o 005.fastq_BS_tm"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 79,[m
[32m+[m[32m   "id": "8416d974-3e2b-489c-8763-464589e6a139",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SBATCH_ARGS: --time 24:00:00 --mem 20 -c 2\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/007.meth_extraction_BS_tm/BS_extract\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4505706\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments_BS_tm\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction_BS_tm\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.bam`\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_meth_extract_BS_tm\"}'`\n",[m
[32m+[m[32m    "        #echo $NAME\n",[m
[32m+[m[32m    "        COMMAND=\"bs_seeker2-call_methylation.py \\\n",[m
[32m+[m[32m    "            -i ${IN}/$NAME \\\n",[m
[32m+[m[32m    "            -o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "            -d ${GENOME}/BSseeker2-index/GCF_002234675.1_ASM223467v1_genomic.fasta_rrbs_20_500_bowtie2/\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/BS_extract --time 24:00:00 --mem 8G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1be44dfc-32ae-4e64-9145-0844b8093894",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 7. Methylation extraction"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 26,[m
[32m+[m[32m   "id": "765ab234-84b0-440b-b723-566a2b9a0836",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 5-01:00:00 --mem 20G -c 6\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/007.meth_extraction/meth-extract\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4468888\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "FILES=`find ${IN}/ -type f -name \"*.bam\"`\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"bismark_methylation_extractor \\\n",[m
[32m+[m[32m    "                ${file} \\\n",[m
[32m+[m[32m    "                -s \\\n",[m
[32m+[m[32m    "                --merge_non_CpG \\\n",[m
[32m+[m[32m    "                --cytosine_report \\\n",[m
[32m+[m[32m    "                --scaffolds \\\n",[m
[32m+[m[32m    "                --genome_folder ${GENOME} \\\n",[m
[32m+[m[32m    "                --multicore 6 \\\n",[m
[32m+[m[32m    "                -o ${OUT}\"\n",[m
[32m+[m[32m    "      echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/meth-extract --time 5-01:00:00 --mem 4G -c 1| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "id": "a79f72c3-4b64-4e6a-99b9-5850e8e030fb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM\n",[m
[32m+[m[32m    "mkdir -p 007b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "id": "bd0d2f6f-de65-4f03-a15b-ff4cf2fccaa9",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cp 007.meth_extraction/*CpG_report.txt 007b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 38,[m
[32m+[m[32m   "id": "d0f06320-01ee-467d-9a82-5602a6fc2168",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/007b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 30,[m
[32m+[m[32m   "id": "a6faa41b-2d40-4b6f-bd31-27f8fe353734",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for i in *CpG_report.txt; do awk '{if ($4 > 0) print}' $i > $i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "67750aa2-a035-41fe-a473-5eaaa5ecd7de",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "##### Extracting all methylation sites"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 42,[m
[32m+[m[32m   "id": "934a5a83-a227-4fc9-a6eb-d392d780dc21",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "awk: fatal: cannot open file `JM_001_trimmed_bismark_bt2.CpG_report.txt.nonzero-checkpoint.txt' for reading (No such file or directory)\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "123",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find . -name \"*.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "id": "f7068525-3f61-4fb0-8a1f-2a21c1698bc3",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1708648365.609395-260321;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: MethylationExtraction_QC\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfndxa/Paua_clock/01_pilot_run/010.extraction\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m433/433\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 24 methextract reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 010.extraction/MethylationExtraction_QC_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 010.extraction/MethylationExtraction_QC_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 010.extraction/ -i MethylationExtraction_QC -o 010.extraction/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "a7020327-5aba-421e-9fcc-ceddac46cd7f",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Methyl extraction (LOCAL)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 111,[m
[32m+[m[32m   "id": "366f754b-e37b-48b3-aa23-bd4a6181b268",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "bismark_methylation_extractor cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam -s --merge_non_CpG --cytosine_report --scaffolds --genome_folder /workspace/cfngle/raw-data/JM/rgenome --multicore 6 -o /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#FILES=`find ${IN}/ -type f -name \"*.bam\"`\n",[m
[32m+[m[32m    "FILES=\"cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"bismark_methylation_extractor \\\n",[m
[32m+[m[32m    "                ${file} \\\n",[m
[32m+[m[32m    "                -s \\\n",[m
[32m+[m[32m    "                --merge_non_CpG \\\n",[m
[32m+[m[32m    "                --cytosine_report \\\n",[m
[32m+[m[32m    "                --scaffolds \\\n",[m
[32m+[m[32m    "                --genome_folder ${GENOME} \\\n",[m
[32m+[m[32m    "                --multicore 6 \\\n",[m
[32m+[m[32m    "                -o ${OUT}\"\n",[m
[32m+[m[32m    "      echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done #| abatch -j ${OUT}/meth-extract --time 23:59:00 --mem 10G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "c9750de8-acce-491d-87f5-27b0b1e11cf2",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      " *** Bismark methylation extractor version v0.23.0 ***\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Output will be written into the directory: /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/\n",[m
[32m+[m[32m      "Setting the option '--bedGraph' since this is required for the genome-wide cytosine report\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Summarising Bismark methylation extractor parameters:\n",[m
[32m+[m[32m      "===============================================================\n",[m
[32m+[m[32m      "Bismark single-end SAM format specified (default)\n",[m
[32m+[m[32m      "Number of cores to be used: 6\n",[m
[32m+[m[32m      "Merge CHG and CHH context to non-CpG context specified\n",[m
[32m+[m[32m      "Output path specified as: /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Summarising bedGraph parameters:\n",[m
[32m+[m[32m      "===============================================================\n",[m
[32m+[m[32m      "Generating additional output in bedGraph and coverage format\n",[m
[32m+[m[32m      "bedGraph format:\t<Chromosome> <Start Position> <End Position> <Methylation Percentage>\n",[m
[32m+[m[32m      "coverage format:\t<Chromosome> <Start Position> <End Position> <Methylation Percentage> <count methylated> <count non-methylated>\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Using a cutoff of 1 read(s) to report cytosine positions\n",[m
[32m+[m[32m      "Reporting and sorting cytosine methylation information in CpG context only (default)\n",[m
[32m+[m[32m      "The bedGraph UNIX sort command will use the following memory setting:\t'2G'. Temporary directory used for sorting is the output directory\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Summarising genome-wide cytosine methylation report parameters:\n",[m
[32m+[m[32m      "===============================================================\n",[m
[32m+[m[32m      "Generating comprehensive genome-wide cytosine report\n",[m
[32m+[m[32m      "(output format: <Chromosome> <Position> <Strand> <count methylated> <count non-methylated>  <C-context>  <trinucleotide context> )\n",[m
[32m+[m[32m      "Reporting cytosine methylation in CpG context only (default)\n",[m
[32m+[m[32m      "Using 1-based genomic coordinates (default)\n",[m
[32m+[m[32m      "Genome folder was specified as /workspace/cfngle/raw-data/JM/rgenome/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Checking file >>/workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam<< for signs of file truncation...\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in CpG context from the original top strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OT_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in CpG context from the complementary to original top strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOT_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in CpG context from the complementary to original bottom strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOB_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in CpG context from the original bottom strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OB_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in any other context from the original top strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OT_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in any other context from the complementary to original top strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOT_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in any other context from the complementary to original bottom strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOB_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in any other context from the original bottom strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OB_JM_036_trimmed_bismark_bt2.bam.txt\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "skipping SAM header line:\t@HD\tVN:1.0\tSO:unsorted\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019859.2\tLN:37713152\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019860.2\tLN:25379070\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019861.2\tLN:38248663\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019862.2\tLN:32868862\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019863.2\tLN:33205099\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019864.2\tLN:32246747\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019865.2\tLN:34573382\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019866.2\tLN:26239357\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019867.2\tLN:33399407\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019868.2\tLN:31218526\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019869.2\tLN:28210532\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019870.2\tLN:30543476\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019871.2\tLN:33825776\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019872.2\tLN:30598983\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019873.2\tLN:30476034\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019874.2\tLN:32958677\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019875.2\tLN:31792230\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019876.2\tLN:30918796\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019877.2\tLN:25472880\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019878.2\tLN:25942153\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019879.2\tLN:31148813\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019880.2\tLN:28976614\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019881.2\tLN:24400806\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019882.2\tLN:23682337\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_004387.1\tLN:16714\n",[m
[32m+[m[32m      "skipping SAM header line:\t@PG\tID:Bismark\tVN:v0.23.0\tCL:\"bismark --genome /workspace/cfngle/raw-data/JM/rgenome /workspace/cfngle/raw-data/JM/002.trim_galore/JM_036_trimmed.fq --o /workspace/cfngle/raw-data/JM/004.alignments_BS_local/JM_036_Alignments --multicore 5 --non_directional --local\"\n",[m
[32m+[m[32m      "skipping SAM header line:\t@PG\tID:samtools\tPN:samtools\tPP:Bismark\tVN:1.10\tCL:/usr/bin/samtools view -bSh -\n",[m
[32m+[m[32m      "skipping SAM header line:\t@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.10\tCL:/usr/bin/samtools view -h /workspace/cfngle/raw-data/JM/004.alignments_BS_local/JM_036_Alignments/JM_036_trimmed.fq.temp.1_bismark_bt2.bam\n",[m
[32m+[m[32m      "skipping SAM header line:\t@PG\tID:samtools.2\tPN:samtools\tPP:samtools.1\tVN:1.10\tCL:/usr/bin/samtools view -bSh -\n",[m
[32m+[m[32m      "skipping SAM header line:\t@PG\tID:samtools.3\tPN:samtools\tPP:samtools.2\tVN:1.10\tCL:/usr/bin/samtools view -h /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Now waiting for all child processes to complete\n",[m
[32m+[m[32m      "Finished processing child process. Exiting..\n",[m
[32m+[m[32m      "Finished processing child process. Exiting..\n",[m
[32m+[m[32m      "Finished processing child process. Exiting..\n",[m
[32m+[m[32m      "Finished processing child process. Exiting..\n",[m
[32m+[m[32m      "Finished processing child process. Exiting..\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Merging individual splitting reports into overall report: '/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt'\n",[m
[32m+[m[32m      "Merging from these individual files:\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.1\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.2\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.3\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.4\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.5\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.6\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Processed 5255814 lines in total\n",[m
[32m+[m[32m      "Total number of methylation call strings processed: 5255814\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Final Cytosine Methylation Report\n",[m
[32m+[m[32m      "=================================\n",[m
[32m+[m[32m      "Total number of C's analysed:\t74159684\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total methylated C's in CpG context:\t6481638\n",[m
[32m+[m[32m      "Total methylated C's in CHG context:\t135681\n",[m
[32m+[m[32m      "Total methylated C's in CHH context:\t740682\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total C to T conversions in CpG context:\t4800346\n",[m
[32m+[m[32m      "Total C to T conversions in CHG context:\t17507335\n",[m
[32m+[m[32m      "Total C to T conversions in CHH context:\t44494002\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "C methylated in CpG context:\t57.5%\n",[m
[32m+[m[32m      "C methylated in non-CpG context:\t1.4%\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Merging individual M-bias reports into overall M-bias statistics from these 6 individual files:\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.1.mbias\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.2.mbias\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.3.mbias\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.4.mbias\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.5.mbias\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.6.mbias\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Determining maximum read length for M-Bias plot\n",[m
[32m+[m[32m      "Maximum read length of Read 1: 70\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Determining maximum read length for M-Bias plot\n",[m
[32m+[m[32m      "Maximum read length of Read 1: 70\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Deleting unused files ...\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OT_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOT_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOB_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OB_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OT_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOT_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOB_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OB_JM_036_trimmed_bismark_bt2.bam.txt contains data ->\tkept\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Using these input files: /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OT_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOT_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOB_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OB_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OT_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOT_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOB_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OB_JM_036_trimmed_bismark_bt2.bam.txt\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Summary of parameters for bismark2bedGraph conversion:\n",[m
[32m+[m[32m      "======================================================\n",[m
[32m+[m[32m      "bedGraph output:\t\tJM_036_trimmed_bismark_bt2.bedGraph.gz\n",[m
[32m+[m[32m      "output directory:\t\t>/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/<\n",[m
[32m+[m[32m      "remove whitespaces:\t\tno\n",[m
[32m+[m[32m      "CX context:\t\t\tno (CpG context only, default)\n",[m
[32m+[m[32m      "No-header selected:\t\tno\n",[m
[32m+[m[32m      "Sorting method:\t\t\tUnix sort-based (smaller memory footprint, but slower)\n",[m
[32m+[m[32m      "Sort buffer size:\t\t2G\n",[m
[32m+[m[32m      "Coverage threshold:\t\t1\n",[m
[32m+[m[32m      "=============================================================================\n",[m
[32m+[m[32m      "Methylation information will now be written into a bedGraph and coverage file\n",[m
[32m+[m[32m      "=============================================================================\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Using the following files as Input:\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OT_JM_036_trimmed_bismark_bt2.txt\t/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOT_JM_036_trimmed_bismark_bt2.txt\t/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOB_JM_036_trimmed_bismark_bt2.txt\t/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OB_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Writing bedGraph to file: JM_036_trimmed_bismark_bt2.bedGraph.gz\n",[m
[32m+[m[32m      "Also writing out a coverage file including counts methylated and unmethylated residues to file: JM_036_trimmed_bismark_bt2.bismark.cov.gz\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Changed directory to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/\n",[m
[32m+[m[32m      "The genome of interest was specified to contain gazillions of chromosomes or scaffolds. Merging all input files and sorting everything in memory instead of writing out individual chromosome files...\n",[m
[32m+[m[32m      "Writing all merged methylation calls to temp file JM_036_trimmed_bismark_bt2.bedGraph.gz.methylation_calls.merged\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Finished writing methylation calls from CpG_OT_JM_036_trimmed_bismark_bt2.txt to merged temp file\n",[m
[32m+[m[32m      "Finished writing methylation calls from CpG_CTOT_JM_036_trimmed_bismark_bt2.txt to merged temp file\n",[m
[32m+[m[32m      "Finished writing methylation calls from CpG_CTOB_JM_036_trimmed_bismark_bt2.txt to merged temp file\n",[m
[32m+[m[32m      "Finished writing methylation calls from CpG_OB_JM_036_trimmed_bismark_bt2.txt to merged temp file\n",[m
[32m+[m[32m      "Sorting input file JM_036_trimmed_bismark_bt2.bedGraph.gz.methylation_calls.merged by positions (using -S of 2G)\n",[m
[32m+[m[32m      "Successfully deleted the temporary input file JM_036_trimmed_bismark_bt2.bedGraph.gz.methylation_calls.merged\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Finished BedGraph conversion ...\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Output will be written into the directory: /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/\n",[m
[32m+[m[32m      "Summary of parameters for genome-wide cytosine report:\n",[m
[32m+[m[32m      "==============================================================================\n",[m
[32m+[m[32m      "Coverage infile:\t\t\t\tJM_036_trimmed_bismark_bt2.bismark.cov.gz\n",[m
[32m+[m[32m      "Output directory:\t\t\t\t>/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/<\n",[m
[32m+[m[32m      "Parent directory:\t\t\t\t>/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/<\n",[m
[32m+[m[32m      "Genome directory:\t\t\t\t>/workspace/cfngle/raw-data/JM/rgenome/<\n",[m
[32m+[m[32m      "Coverage threshold\t\t\t\t0 (all positions will be reported, default)\n",[m
[32m+[m[32m      "CX context:\t\t\t\t\tno (CpG context only, default)\n",[m
[32m+[m[32m      "Genome coordinates used:\t\t\t1-based (default)\n",[m
[32m+[m[32m      "GZIP compression:\t\t\t\tno\n",[m
[32m+[m[32m      "Split by chromosome:\t\t\t\tno\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in and storing sequence information of the genome specified in: /workspace/cfngle/raw-data/JM/rgenome/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Couldn't find files ending in .fa, trying .fa.gz instead\n",[m
[32m+[m[32m      "chr NC_019859.2 (37713152 bp)\n",[m
[32m+[m[32m      "chr NC_019860.2 (25379070 bp)\n",[m
[32m+[m[32m      "chr NC_019861.2 (38248663 bp)\n",[m
[32m+[m[32m      "chr NC_019862.2 (32868862 bp)\n",[m
[32m+[m[32m      "chr NC_019863.2 (33205099 bp)\n",[m
[32m+[m[32m      "chr NC_019864.2 (32246747 bp)\n",[m
[32m+[m[32m      "chr NC_019865.2 (34573382 bp)\n",[m
[32m+[m[32m      "chr NC_019866.2 (26239357 bp)\n",[m
[32m+[m[32m      "chr NC_019867.2 (33399407 bp)\n",[m
[32m+[m[32m      "chr NC_019868.2 (31218526 bp)\n",[m
[32m+[m[32m      "chr NC_019869.2 (28210532 bp)\n",[m
[32m+[m[32m      "chr NC_019870.2 (30543476 bp)\n",[m
[32m+[m[32m      "chr NC_019871.2 (33825776 bp)\n",[m
[32m+[m[32m      "chr NC_019872.2 (30598983 bp)\n",[m
[32m+[m[32m      "chr NC_019873.2 (30476034 bp)\n",[m
[32m+[m[32m      "chr NC_019874.2 (32958677 bp)\n",[m
[32m+[m[32m      "chr NC_019875.2 (31792230 bp)\n",[m
[32m+[m[32m      "chr NC_019876.2 (30918796 bp)\n",[m
[32m+[m[32m      "chr NC_019877.2 (25472880 bp)\n",[m
[32m+[m[32m      "chr NC_019878.2 (25942153 bp)\n",[m
[32m+[m[32m      "chr NC_019879.2 (31148813 bp)\n",[m
[32m+[m[32m      "chr NC_019880.2 (28976614 bp)\n",[m
[32m+[m[32m      "chr NC_019881.2 (24400806 bp)\n",[m
[32m+[m[32m      "chr NC_019882.2 (23682337 bp)\n",[m
[32m+[m[32m      "chr NC_004387.1 (16714 bp)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Stored sequence information of 25 chromosomes/scaffolds in total\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "==============================================================================\n",[m
[32m+[m[32m      "Methylation information will now be written into a genome-wide cytosine report\n",[m
[32m+[m[32m      "==============================================================================\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Adding context-specific methylation summaries\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      ">>> Writing genome-wide cytosine report to: JM_036_trimmed_bismark_bt2.CpG_report.txt <<<\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      ">>> Writing all cytosine context summary file to: JM_036_trimmed_bismark_bt2.cytosine_context_summary.txt <<<\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Storing all covered cytosine positions for chromosome: NC_004387.1\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_004387.1 (stored 212 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019859.2 (stored 76806 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019860.2 (stored 63713 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019861.2 (stored 62867 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019862.2 (stored 55535 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019863.2 (stored 55690 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019864.2 (stored 54900 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019865.2 (stored 57554 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019866.2 (stored 58411 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019867.2 (stored 57391 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019868.2 (stored 50348 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019869.2 (stored 54578 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019870.2 (stored 63179 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019871.2 (stored 60561 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019872.2 (stored 51507 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019873.2 (stored 50313 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019874.2 (stored 57173 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019875.2 (stored 58525 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019876.2 (stored 63440 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019877.2 (stored 46607 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019878.2 (stored 44831 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019879.2 (stored 52465 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019880.2 (stored 63234 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019881.2 (stored 58193 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for last chromosome NC_019882.2 (stored 44357 different covered positions)\n",[m
[32m+[m[32m      "Finished writing out cytosine report for covered chromosomes (processed 25 chromosomes/scaffolds in total)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now processing chromosomes that were not covered by any methylation calls in the coverage file...\n",[m
[32m+[m[32m      "All chromosomes in the genome were covered by at least some reads. coverage2cytosine processing complete.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Finished generating genome-wide cytosine report\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## verifying \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#FILES=`find ${IN}/ -type f -name \"*.bam\"`\n",[m
[32m+[m[32m    "FILES=\"/workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "bismark_methylation_extractor ${FILES} -s --merge_non_CpG --cytosine_report --scaffolds --genome_folder ${GENOME} --multicore 6 -o ${OUT}\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "bc70ae95-e782-43fa-a3b5-162f4bc153ae",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM\n",[m
[32m+[m[32m    "mkdir -p 007b.extraction_nonzero_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 100,[m
[32m+[m[32m   "id": "c500480d-b0b0-4225-ad79-46c45f70edf6",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cp 007.meth_extraction_BM_local/*CpG_report.txt 007b.extraction_nonzero_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "id": "1fe08a6f-be76-4be0-9fe1-83e3fd389fbb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## cp 007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2.CpG_report.txt 007b.extraction_nonzero_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "cab380b6-fd58-4436-8c0f-919cb840f0b1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/007b.extraction_nonzero_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 102,[m
[32m+[m[32m   "id": "c229e513-2d97-437c-a34c-7374f8a262e4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for i in *CpG_report.txt; do awk '{if ($4 > 0) print}' $i > $i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "id": "ce7edb5a-1bc9-4d7a-bf5d-2c0726a6e9ea",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## for i in JM_036_trimmed_bismark_bt2.CpG_report.txt; do awk '{if ($4 > 0) print}' $i > $i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "6eaddbe1-bc50-4301-89a0-ef628d3b78d8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "##### Extracting all methylation sites"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 103,[m
[32m+[m[32m   "id": "956b482e-62ae-4e68-be42-6d2eed071bd2",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find . -name \"*nonzero.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "82da6888-28e6-44c9-a881-7a162410d87d",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find . -name \"JM_036_trimmed_bismark_bt2.CpG_report.txt.nonzero.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "b3bb9d3d-89bc-4fa5-8eaf-b0b45b83225b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "mv *MK.txt /workspace/cfngle/raw-data/JM/008.methylkit_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "e5bb52aa-11a0-4802-8ffb-c45a7926b618",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/00a_RRBS_ZF-checkpoint.ipynb b/.ipynb_checkpoints/00a_RRBS_ZF-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..2b7639d[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/00a_RRBS_ZF-checkpoint.ipynb[m
[36m@@ -0,0 +1,4612 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "4d1f29d1-809b-4e6b-8aac-79fc09282f80",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# 00a RRBS data analysis ZF\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Author: Gabriel Ecker Eckhofen (adapted from Dafni Anastasiadi)\n",[m
[32m+[m[32m    "Date: Febuary 2024"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "id": "af2dd13e-3345-467c-8874-ea7f9dcb08dd",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Z528_HL7CKDMXX_CGCTACAT_L001_R1\n",[m
[32m+[m[32m      "Z532_HL7CKDMXX_CTCCTAGT_L001_R1\n",[m
[32m+[m[32m      "Z536_HL7CKDMXX_GTACACCT_L001_R1\n",[m
[32m+[m[32m      "Z548_HL7CKDMXX_ACGGACTT_L001_R1\n",[m
[32m+[m[32m      "Z552_HC5Y2DRXX_AACCAG_L001_R1\n",[m
[32m+[m[32m      "Z556_HL7CKDMXX_ACGCTTCT_L001_R1\n",[m
[32m+[m[32m      "Z27_HL7CKDMXX_TGCTGTGA_L001_R1\n",[m
[32m+[m[32m      "Z34_HL7CKDMXX_CAGGTTCA_L001_R1\n",[m
[32m+[m[32m      "Z55_HL7CKDMXX_GCCTTAAC_L001_R1\n",[m
[32m+[m[32m      "Z62_HL7CKDMXX_GCCAGAAT_L001_R1\n",[m
[32m+[m[32m      "Z83_HL7CKDMXX_TCCTGGTA_L001_R1\n",[m
[32m+[m[32m      "Z90_HL7CKDMXX_GACATCTC_L001_R1\n",[m
[32m+[m[32m      "Z201_HC5Y2DRXX_TGGTGA_L001_R1\n",[m
[32m+[m[32m      "Z205_HC5Y2DRXX_AGTGAG_L001_R1\n",[m
[32m+[m[32m      "Z209_HC5Y2DRXX_GCACTA_L001_R1\n",[m
[32m+[m[32m      "Z213_HC5Y2DRXX_ACCTCA_L001_R1\n",[m
[32m+[m[32m      "Z249_HL7CKDMXX_GAACCTTC_L001_R1\n",[m
[32m+[m[32m      "Z253_HL7CKDMXX_CTATCCAC_L001_R1\n",[m
[32m+[m[32m      "Z265_HC5Y2DRXX_GTGCTT_L001_R1\n",[m
[32m+[m[32m      "Z269_HL7CKDMXX_AGAACCAG_L001_R1\n",[m
[32m+[m[32m      "Z281_HL7CKDMXX_ATTCCGCT_L001_R1\n",[m
[32m+[m[32m      "Z285_HL7CKDMXX_AATGACGC_L001_R1\n",[m
[32m+[m[32m      "Z321_HC5Y2DRXX_AAGCCT_L001_R1\n",[m
[32m+[m[32m      "Z329_HL7CKDMXX_ACTGCACT_L001_R1\n",[m
[32m+[m[32m      "Z333_HL7CKDMXX_CGTCTAAC_L001_R1\n",[m
[32m+[m[32m      "Z353_HL7CKDMXX_GACTACGA_L001_R1\n",[m
[32m+[m[32m      "Z357_HL7CKDMXX_CGACCTAA_L001_R1\n",[m
[32m+[m[32m      "Z361_HL7CKDMXX_AACCGAAC_L001_R1\n",[m
[32m+[m[32m      "Z433_HL7CKDMXX_AAGTCCTC_L001_R1\n",[m
[32m+[m[32m      "Z441_HC5Y2DRXX_GTCGTA_L001_R1\n",[m
[32m+[m[32m      "Z445_HL7CKDMXX_CCACATTG_L001_R1\n",[m
[32m+[m[32m      "Z477_HL7CKDMXX_GAATGGCA_L001_R1\n",[m
[32m+[m[32m      "Z485_HL7CKDMXX_ATCGTGGT_L001_R1\n",[m
[32m+[m[32m      "Z489_HL7CKDMXX_GTACCACA_L001_R1\n",[m
[32m+[m[32m      "Z560_HL7CKDMXX_AGCAGACA_L001_R1\n",[m
[32m+[m[32m      "Z564_HC5Y2DRXX_AAGAGG_L001_R1\n",[m
[32m+[m[32m      "Z568_HL7CKDMXX_AACTCGGA_L001_R1\n",[m
[32m+[m[32m      "Z157_HL7CKDMXX_ACTCCTAC_L001_R1\n",[m
[32m+[m[32m      "Z165_HL7CKDMXX_TACATCGG_L001_R1\n",[m
[32m+[m[32m      "Z173_HL7CKDMXX_CCTTAGGT_L001_R1\n",[m
[32m+[m[32m      "Z180_HL7CKDMXX_CCACAACA_L001_R1\n",[m
[32m+[m[32m      "Z225_HL7CKDMXX_CAGTGCTT_L001_R1\n",[m
[32m+[m[32m      "Z229_HL7CKDMXX_TAGTGCCA_L001_R1\n",[m
[32m+[m[32m      "Z233_HL7CKDMXX_AGGCAATG_L001_R1\n",[m
[32m+[m[32m      "Z237_HL7CKDMXX_GCTACAAC_L001_R1\n",[m
[32m+[m[32m      "Z257_HL7CKDMXX_ACGATCAG_L001_R1\n",[m
[32m+[m[32m      "Z261_HL7CKDMXX_GAAGACTG_L001_R1\n",[m
[32m+[m[32m      "Z289_HL7CKDMXX_ACCAAGCA_L001_R1\n",[m
[32m+[m[32m      "Z293_HL7CKDMXX_GTCGAGAA_L001_R1\n",[m
[32m+[m[32m      "Z305_HC5Y2DRXX_GAGTCA_L001_R1\n",[m
[32m+[m[32m      "Z313_HC5Y2DRXX_CGTAGA_L001_R1\n",[m
[32m+[m[32m      "Z317_HL7CKDMXX_CCTATACC_L002_R1\n",[m
[32m+[m[32m      "Z385_HC5Y2DRXX_GGAGAA_L001_R1\n",[m
[32m+[m[32m      "Z389_HL7CKDMXX_TCACTCGA_L002_R1\n",[m
[32m+[m[32m      "Z393_HL7CKDMXX_TCGTGCAT_L002_R1\n",[m
[32m+[m[32m      "Z401_HL7CKDMXX_TAGGAGCT_L002_R1\n",[m
[32m+[m[32m      "Z405_HL7CKDMXX_TCTACGCA_L002_R1\n",[m
[32m+[m[32m      "Z409_HL7CKDMXX_TAACGTCG_L002_R1\n",[m
[32m+[m[32m      "Z449_HL7CKDMXX_TCTAGTCC_L002_R1\n",[m
[32m+[m[32m      "Z453_HL7CKDMXX_CTCTCAGA_L002_R1\n",[m
[32m+[m[32m      "Z12_HL7CKDMXX_ACAACAGC_L002_R1\n",[m
[32m+[m[32m      "Z20_HL7CKDMXX_ACCATCCT_L002_R1\n",[m
[32m+[m[32m      "Z41_HL7CKDMXX_CCAACACT_L002_R1\n",[m
[32m+[m[32m      "Z48_HL7CKDMXX_AACGCCTT_L002_R1\n",[m
[32m+[m[32m      "Z69_HL7CKDMXX_CCGGAATA_L002_R1\n",[m
[32m+[m[32m      "Z76_HL7CKDMXX_CTGACTAC_L002_R1\n",[m
[32m+[m[32m      "Z141_HL7CKDMXX_CTACATCC_L002_R1\n",[m
[32m+[m[32m      "Z145_HC5Y2DRXX_AGCATG_L001_R1\n",[m
[32m+[m[32m      "Z149_HL7CKDMXX_CTCCAATC_L002_R1\n",[m
[32m+[m[32m      "Z1_HL7CKDMXX_TCCAACTG_L002_R1\n",[m
[32m+[m[32m      "Z3_HL7CKDMXX_ATCTGACC_L002_R1\n",[m
[32m+[m[32m      "Z97_HL7CKDMXX_CGCAACTA_L002_R1\n",[m
[32m+[m[32m      "Z101_HL7CKDMXX_CTCGACTT_L002_R1\n",[m
[32m+[m[32m      "Z109_HL7CKDMXX_ACTCTGAG_L002_R1\n",[m
[32m+[m[32m      "Z133_HL7CKDMXX_ATGACAGG_L002_R1\n",[m
[32m+[m[32m      "Z241_HL7CKDMXX_CGTCCATT_L002_R1\n",[m
[32m+[m[32m      "Z273_HL7CKDMXX_TCTAGGAG_L002_R1\n",[m
[32m+[m[32m      "Z277_HL7CKDMXX_TCCATTGC_L002_R1\n",[m
[32m+[m[32m      "Z297_HL7CKDMXX_CCAAGTAG_L002_R1\n",[m
[32m+[m[32m      "Z301_HL7CKDMXX_GTGATCCA_L002_R1\n",[m
[32m+[m[32m      "Z341_HL7CKDMXX_CATACGGA_L002_R1\n",[m
[32m+[m[32m      "Z345_HL7CKDMXX_CATTCGTC_L002_R1\n",[m
[32m+[m[32m      "Z349_HL7CKDMXX_ACTCTCCA_L002_R1\n",[m
[32m+[m[32m      "Z369_HL7CKDMXX_AACACTGG_L002_R1\n",[m
[32m+[m[32m      "Z373_HL7CKDMXX_CTAGCTCA_L002_R1\n",[m
[32m+[m[32m      "Z377_HL7CKDMXX_GCTCAGTT_L002_R1\n",[m
[32m+[m[32m      "Z381_HL7CKDMXX_GCACACAA_L002_R1\n",[m
[32m+[m[32m      "Z421_HL7CKDMXX_AACTTGCC_L002_R1\n",[m
[32m+[m[32m      "Z425_HL7CKDMXX_CTCGAACA_L002_R1\n",[m
[32m+[m[32m      "Z429_HL7CKDMXX_CAAGCCAA_L002_R1\n",[m
[32m+[m[32m      "Z461_HL7CKDMXX_AAGGACCA_L002_R1\n",[m
[32m+[m[32m      "Z465_HL7CKDMXX_ACAGCAAG_L002_R1\n",[m
[32m+[m[32m      "Z469_HL7CKDMXX_TGCGTAAC_L002_R1\n",[m
[32m+[m[32m      "Z576_HL7CKDMXX_AGCCAACT_L002_R1\n",[m
[32m+[m[32m      "Z580_HL7CKDMXX_GTCTCATC_L002_R1\n",[m
[32m+[m[32m      "Z584_HL7CKDMXX_CCTGTCAA_L002_R1\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/raw-reads\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Fetch metadata for a specific BioSample ID\n",[m
[32m+[m[32m    "filenames=(\"Z528_HL7CKDMXX_CGCTACAT_L001_R1.fastq\" \"Z532_HL7CKDMXX_CTCCTAGT_L001_R1.fastq\" \"Z536_HL7CKDMXX_GTACACCT_L001_R1.fastq\" \"Z548_HL7CKDMXX_ACGGACTT_L001_R1.fastq\" \"Z552_HC5Y2DRXX_AACCAG_L001_R1.fastq\" \"Z556_HL7CKDMXX_ACGCTTCT_L001_R1.fastq\" \"Z27_HL7CKDMXX_TGCTGTGA_L001_R1.fastq\" \"Z34_HL7CKDMXX_CAGGTTCA_L001_R1.fastq\" \"Z55_HL7CKDMXX_GCCTTAAC_L001_R1.fastq\" \"Z62_HL7CKDMXX_GCCAGAAT_L001_R1.fastq\" \"Z83_HL7CKDMXX_TCCTGGTA_L001_R1.fastq\" \"Z90_HL7CKDMXX_GACATCTC_L001_R1.fastq\" \"Z201_HC5Y2DRXX_TGGTGA_L001_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z205_HC5Y2DRXX_AGTGAG_L001_R1.fastq\" \"Z209_HC5Y2DRXX_GCACTA_L001_R1.fastq\" \"Z213_HC5Y2DRXX_ACCTCA_L001_R1.fastq\" \"Z249_HL7CKDMXX_GAACCTTC_L001_R1.fastq\" \"Z253_HL7CKDMXX_CTATCCAC_L001_R1.fastq\" \"Z265_HC5Y2DRXX_GTGCTT_L001_R1.fastq\" \"Z269_HL7CKDMXX_AGAACCAG_L001_R1.fastq\" \"Z281_HL7CKDMXX_ATTCCGCT_L001_R1.fastq\" \"Z285_HL7CKDMXX_AATGACGC_L001_R1.fastq\" \"Z321_HC5Y2DRXX_AAGCCT_L001_R1.fastq\" \"Z329_HL7CKDMXX_ACTGCACT_L001_R1.fastq\" \"Z333_HL7CKDMXX_CGTCTAAC_L001_R1.fastq\" \"Z353_HL7CKDMXX_GACTACGA_L001_R1.fastq\" \"Z357_HL7CKDMXX_CGACCTAA_L001_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z361_HL7CKDMXX_AACCGAAC_L001_R1.fastq\" \"Z433_HL7CKDMXX_AAGTCCTC_L001_R1.fastq\" \"Z441_HC5Y2DRXX_GTCGTA_L001_R1.fastq\" \"Z445_HL7CKDMXX_CCACATTG_L001_R1.fastq\" \"Z477_HL7CKDMXX_GAATGGCA_L001_R1.fastq\" \"Z485_HL7CKDMXX_ATCGTGGT_L001_R1.fastq\" \"Z489_HL7CKDMXX_GTACCACA_L001_R1.fastq\" \"Z560_HL7CKDMXX_AGCAGACA_L001_R1.fastq\" \"Z564_HC5Y2DRXX_AAGAGG_L001_R1.fastq\" \"Z568_HL7CKDMXX_AACTCGGA_L001_R1.fastq\" \"Z157_HL7CKDMXX_ACTCCTAC_L001_R1.fastq\" \"Z165_HL7CKDMXX_TACATCGG_L001_R1.fastq\" \"Z173_HL7CKDMXX_CCTTAGGT_L001_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z180_HL7CKDMXX_CCACAACA_L001_R1.fastq\" \"Z225_HL7CKDMXX_CAGTGCTT_L001_R1.fastq\" \"Z229_HL7CKDMXX_TAGTGCCA_L001_R1.fastq\" \"Z233_HL7CKDMXX_AGGCAATG_L001_R1.fastq\" \"Z237_HL7CKDMXX_GCTACAAC_L001_R1.fastq\" \"Z257_HL7CKDMXX_ACGATCAG_L001_R1.fastq\" \"Z261_HL7CKDMXX_GAAGACTG_L001_R1.fastq\" \"Z289_HL7CKDMXX_ACCAAGCA_L001_R1.fastq\" \"Z293_HL7CKDMXX_GTCGAGAA_L001_R1.fastq\" \"Z305_HC5Y2DRXX_GAGTCA_L001_R1.fastq\" \"Z313_HC5Y2DRXX_CGTAGA_L001_R1.fastq\" \"Z317_HL7CKDMXX_CCTATACC_L002_R1.fastq\" \"Z385_HC5Y2DRXX_GGAGAA_L001_R1.fastq\" \"Z389_HL7CKDMXX_TCACTCGA_L002_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z393_HL7CKDMXX_TCGTGCAT_L002_R1.fastq\" \"Z401_HL7CKDMXX_TAGGAGCT_L002_R1.fastq\" \"Z405_HL7CKDMXX_TCTACGCA_L002_R1.fastq\" \"Z409_HL7CKDMXX_TAACGTCG_L002_R1.fastq\" \"Z449_HL7CKDMXX_TCTAGTCC_L002_R1.fastq\" \"Z453_HL7CKDMXX_CTCTCAGA_L002_R1.fastq\" \"Z12_HL7CKDMXX_ACAACAGC_L002_R1.fastq\" \"Z20_HL7CKDMXX_ACCATCCT_L002_R1.fastq\" \"Z41_HL7CKDMXX_CCAACACT_L002_R1.fastq\" \"Z48_HL7CKDMXX_AACGCCTT_L002_R1.fastq\" \"Z69_HL7CKDMXX_CCGGAATA_L002_R1.fastq\" \"Z76_HL7CKDMXX_CTGACTAC_L002_R1.fastq\" \"Z141_HL7CKDMXX_CTACATCC_L002_R1.fastq\" \"Z145_HC5Y2DRXX_AGCATG_L001_R1.fastq\" \"Z149_HL7CKDMXX_CTCCAATC_L002_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z1_HL7CKDMXX_TCCAACTG_L002_R1.fastq\" \"Z3_HL7CKDMXX_ATCTGACC_L002_R1.fastq\" \"Z97_HL7CKDMXX_CGCAACTA_L002_R1.fastq\" \"Z101_HL7CKDMXX_CTCGACTT_L002_R1.fastq\" \"Z109_HL7CKDMXX_ACTCTGAG_L002_R1.fastq\" \"Z133_HL7CKDMXX_ATGACAGG_L002_R1.fastq\" \"Z241_HL7CKDMXX_CGTCCATT_L002_R1.fastq\" \"Z273_HL7CKDMXX_TCTAGGAG_L002_R1.fastq\" \"Z277_HL7CKDMXX_TCCATTGC_L002_R1.fastq\" \"Z297_HL7CKDMXX_CCAAGTAG_L002_R1.fastq\" \"Z301_HL7CKDMXX_GTGATCCA_L002_R1.fastq\" \"Z341_HL7CKDMXX_CATACGGA_L002_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z345_HL7CKDMXX_CATTCGTC_L002_R1.fastq\" \"Z349_HL7CKDMXX_ACTCTCCA_L002_R1.fastq\" \"Z369_HL7CKDMXX_AACACTGG_L002_R1.fastq\" \"Z373_HL7CKDMXX_CTAGCTCA_L002_R1.fastq\" \"Z377_HL7CKDMXX_GCTCAGTT_L002_R1.fastq\" \"Z381_HL7CKDMXX_GCACACAA_L002_R1.fastq\" \"Z421_HL7CKDMXX_AACTTGCC_L002_R1.fastq\" \"Z425_HL7CKDMXX_CTCGAACA_L002_R1.fastq\" \"Z429_HL7CKDMXX_CAAGCCAA_L002_R1.fastq\" \"Z461_HL7CKDMXX_AAGGACCA_L002_R1.fastq\" \"Z465_HL7CKDMXX_ACAGCAAG_L002_R1.fastq\" \"Z469_HL7CKDMXX_TGCGTAAC_L002_R1.fastq\" \"Z576_HL7CKDMXX_AGCCAACT_L002_R1.fastq\" \"Z580_HL7CKDMXX_GTCTCATC_L002_R1.fastq\" \"Z584_HL7CKDMXX_CCTGTCAA_L002_R1.fastq\" \n",[m
[32m+[m[32m    ")\n",[m
[32m+[m[32m    "for (( i=0; i<${#filenames[@]}; i++ )); do\n",[m
[32m+[m[32m    "    # Index\n",[m
[32m+[m[32m    "    echo \"${filenames[i]%.fastq}\"\n",[m
[32m+[m[32m    "    #esearch -db biosample -query ${filenames[i]%.fastq} | efetch -format native > ${filenames[i]}.txt\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "c1a0dbeb-7b6f-4cad-890e-01bd6ee3f2a1",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Z101_HL7CKDMXX_CTCGACTT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_001.fastq\n",[m
[32m+[m[32m      "Z109_HL7CKDMXX_ACTCTGAG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_002.fastq\n",[m
[32m+[m[32m      "Z12_HL7CKDMXX_ACAACAGC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_003.fastq\n",[m
[32m+[m[32m      "Z133_HL7CKDMXX_ATGACAGG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_004.fastq\n",[m
[32m+[m[32m      "Z141_HL7CKDMXX_CTACATCC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_005.fastq\n",[m
[32m+[m[32m      "Z145_HC5Y2DRXX_AGCATG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_006.fastq\n",[m
[32m+[m[32m      "Z149_HL7CKDMXX_CTCCAATC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_007.fastq\n",[m
[32m+[m[32m      "Z157_HL7CKDMXX_ACTCCTAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_008.fastq\n",[m
[32m+[m[32m      "Z165_HL7CKDMXX_TACATCGG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_009.fastq\n",[m
[32m+[m[32m      "Z173_HL7CKDMXX_CCTTAGGT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_010.fastq\n",[m
[32m+[m[32m      "Z180_HL7CKDMXX_CCACAACA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_011.fastq\n",[m
[32m+[m[32m      "Z1_HL7CKDMXX_TCCAACTG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_012.fastq\n",[m
[32m+[m[32m      "Z201_HC5Y2DRXX_TGGTGA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_013.fastq\n",[m
[32m+[m[32m      "Z205_HC5Y2DRXX_AGTGAG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_014.fastq\n",[m
[32m+[m[32m      "Z209_HC5Y2DRXX_GCACTA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_015.fastq\n",[m
[32m+[m[32m      "Z20_HL7CKDMXX_ACCATCCT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_016.fastq\n",[m
[32m+[m[32m      "Z213_HC5Y2DRXX_ACCTCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_017.fastq\n",[m
[32m+[m[32m      "Z225_HL7CKDMXX_CAGTGCTT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_018.fastq\n",[m
[32m+[m[32m      "Z229_HL7CKDMXX_TAGTGCCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_019.fastq\n",[m
[32m+[m[32m      "Z233_HL7CKDMXX_AGGCAATG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_020.fastq\n",[m
[32m+[m[32m      "Z237_HL7CKDMXX_GCTACAAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_021.fastq\n",[m
[32m+[m[32m      "Z241_HL7CKDMXX_CGTCCATT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_022.fastq\n",[m
[32m+[m[32m      "Z249_HL7CKDMXX_GAACCTTC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_023.fastq\n",[m
[32m+[m[32m      "Z253_HL7CKDMXX_CTATCCAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_024.fastq\n",[m
[32m+[m[32m      "Z257_HL7CKDMXX_ACGATCAG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_025.fastq\n",[m
[32m+[m[32m      "Z261_HL7CKDMXX_GAAGACTG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_026.fastq\n",[m
[32m+[m[32m      "Z265_HC5Y2DRXX_GTGCTT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_027.fastq\n",[m
[32m+[m[32m      "Z269_HL7CKDMXX_AGAACCAG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_028.fastq\n",[m
[32m+[m[32m      "Z273_HL7CKDMXX_TCTAGGAG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_029.fastq\n",[m
[32m+[m[32m      "Z277_HL7CKDMXX_TCCATTGC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_030.fastq\n",[m
[32m+[m[32m      "Z27_HL7CKDMXX_TGCTGTGA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_031.fastq\n",[m
[32m+[m[32m      "Z281_HL7CKDMXX_ATTCCGCT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_032.fastq\n",[m
[32m+[m[32m      "Z285_HL7CKDMXX_AATGACGC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_033.fastq\n",[m
[32m+[m[32m      "Z289_HL7CKDMXX_ACCAAGCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_034.fastq\n",[m
[32m+[m[32m      "Z293_HL7CKDMXX_GTCGAGAA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_035.fastq\n",[m
[32m+[m[32m      "Z297_HL7CKDMXX_CCAAGTAG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_036.fastq\n",[m
[32m+[m[32m      "Z301_HL7CKDMXX_GTGATCCA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_037.fastq\n",[m
[32m+[m[32m      "Z305_HC5Y2DRXX_GAGTCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_038.fastq\n",[m
[32m+[m[32m      "Z313_HC5Y2DRXX_CGTAGA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_039.fastq\n",[m
[32m+[m[32m      "Z317_HL7CKDMXX_CCTATACC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_040.fastq\n",[m
[32m+[m[32m      "Z321_HC5Y2DRXX_AAGCCT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_041.fastq\n",[m
[32m+[m[32m      "Z329_HL7CKDMXX_ACTGCACT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_042.fastq\n",[m
[32m+[m[32m      "Z333_HL7CKDMXX_CGTCTAAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_043.fastq\n",[m
[32m+[m[32m      "Z341_HL7CKDMXX_CATACGGA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_044.fastq\n",[m
[32m+[m[32m      "Z345_HL7CKDMXX_CATTCGTC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_045.fastq\n",[m
[32m+[m[32m      "Z349_HL7CKDMXX_ACTCTCCA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_046.fastq\n",[m
[32m+[m[32m      "Z34_HL7CKDMXX_CAGGTTCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_047.fastq\n",[m
[32m+[m[32m      "Z353_HL7CKDMXX_GACTACGA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_048.fastq\n",[m
[32m+[m[32m      "Z357_HL7CKDMXX_CGACCTAA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_049.fastq\n",[m
[32m+[m[32m      "Z361_HL7CKDMXX_AACCGAAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_050.fastq\n",[m
[32m+[m[32m      "Z369_HL7CKDMXX_AACACTGG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_051.fastq\n",[m
[32m+[m[32m      "Z373_HL7CKDMXX_CTAGCTCA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_052.fastq\n",[m
[32m+[m[32m      "Z377_HL7CKDMXX_GCTCAGTT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_053.fastq\n",[m
[32m+[m[32m      "Z381_HL7CKDMXX_GCACACAA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_054.fastq\n",[m
[32m+[m[32m      "Z385_HC5Y2DRXX_GGAGAA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_055.fastq\n",[m
[32m+[m[32m      "Z389_HL7CKDMXX_TCACTCGA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_056.fastq\n",[m
[32m+[m[32m      "Z393_HL7CKDMXX_TCGTGCAT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_057.fastq\n",[m
[32m+[m[32m      "Z3_HL7CKDMXX_ATCTGACC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_058.fastq\n",[m
[32m+[m[32m      "Z401_HL7CKDMXX_TAGGAGCT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_059.fastq\n",[m
[32m+[m[32m      "Z405_HL7CKDMXX_TCTACGCA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_060.fastq\n",[m
[32m+[m[32m      "Z409_HL7CKDMXX_TAACGTCG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_061.fastq\n",[m
[32m+[m[32m      "Z41_HL7CKDMXX_CCAACACT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_062.fastq\n",[m
[32m+[m[32m      "Z421_HL7CKDMXX_AACTTGCC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_063.fastq\n",[m
[32m+[m[32m      "Z425_HL7CKDMXX_CTCGAACA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_064.fastq\n",[m
[32m+[m[32m      "Z429_HL7CKDMXX_CAAGCCAA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_065.fastq\n",[m
[32m+[m[32m      "Z433_HL7CKDMXX_AAGTCCTC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_066.fastq\n",[m
[32m+[m[32m      "Z441_HC5Y2DRXX_GTCGTA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_067.fastq\n",[m
[32m+[m[32m      "Z445_HL7CKDMXX_CCACATTG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_068.fastq\n",[m
[32m+[m[32m      "Z449_HL7CKDMXX_TCTAGTCC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_069.fastq\n",[m
[32m+[m[32m      "Z453_HL7CKDMXX_CTCTCAGA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_070.fastq\n",[m
[32m+[m[32m      "Z461_HL7CKDMXX_AAGGACCA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_071.fastq\n",[m
[32m+[m[32m      "Z465_HL7CKDMXX_ACAGCAAG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_072.fastq\n",[m
[32m+[m[32m      "Z469_HL7CKDMXX_TGCGTAAC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_073.fastq\n",[m
[32m+[m[32m      "Z477_HL7CKDMXX_GAATGGCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_074.fastq\n",[m
[32m+[m[32m      "Z485_HL7CKDMXX_ATCGTGGT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_075.fastq\n",[m
[32m+[m[32m      "Z489_HL7CKDMXX_GTACCACA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_076.fastq\n",[m
[32m+[m[32m      "Z48_HL7CKDMXX_AACGCCTT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_077.fastq\n",[m
[32m+[m[32m      "Z528_HL7CKDMXX_CGCTACAT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_078.fastq\n",[m
[32m+[m[32m      "Z532_HL7CKDMXX_CTCCTAGT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_079.fastq\n",[m
[32m+[m[32m      "Z536_HL7CKDMXX_GTACACCT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_080.fastq\n",[m
[32m+[m[32m      "Z548_HL7CKDMXX_ACGGACTT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_081.fastq\n",[m
[32m+[m[32m      "Z552_HC5Y2DRXX_AACCAG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_082.fastq\n",[m
[32m+[m[32m      "Z556_HL7CKDMXX_ACGCTTCT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_083.fastq\n",[m
[32m+[m[32m      "Z55_HL7CKDMXX_GCCTTAAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_084.fastq\n",[m
[32m+[m[32m      "Z560_HL7CKDMXX_AGCAGACA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_085.fastq\n",[m
[32m+[m[32m      "Z564_HC5Y2DRXX_AAGAGG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_086.fastq\n",[m
[32m+[m[32m      "Z568_HL7CKDMXX_AACTCGGA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_087.fastq\n",[m
[32m+[m[32m      "Z576_HL7CKDMXX_AGCCAACT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_088.fastq\n",[m
[32m+[m[32m      "Z580_HL7CKDMXX_GTCTCATC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_089.fastq\n",[m
[32m+[m[32m      "Z584_HL7CKDMXX_CCTGTCAA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_090.fastq\n",[m
[32m+[m[32m      "Z62_HL7CKDMXX_GCCAGAAT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_091.fastq\n",[m
[32m+[m[32m      "Z69_HL7CKDMXX_CCGGAATA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_092.fastq\n",[m
[32m+[m[32m      "Z76_HL7CKDMXX_CTGACTAC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_093.fastq\n",[m
[32m+[m[32m      "Z83_HL7CKDMXX_TCCTGGTA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_094.fastq\n",[m
[32m+[m[32m      "Z90_HL7CKDMXX_GACATCTC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_095.fastq\n",[m
[32m+[m[32m      "Z97_HL7CKDMXX_CGCAACTA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_096.fastq\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/raw-reads\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# renaming \n",[m
[32m+[m[32m    "counter=1\n",[m
[32m+[m[32m    "for file in *.fastq; do\n",[m
[32m+[m[32m    "    newname=$(printf \"ZF_%03d.fastq\" \"$counter\")\n",[m
[32m+[m[32m    "    mv \"$file\" \"$newname\"\n",[m
[32m+[m[32m    "    echo \"$file\"\n",[m
[32m+[m[32m    "    echo \"$newname\"\n",[m
[32m+[m[32m    "    ((counter++))\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "756caf22-eda3-4bd3-baf1-e4a0d3038865",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 1. Prepare data and directories\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Data was downloaded with SRAtoolkit "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "561d77eb-30d4-41e5-8254-62621e3c5a71",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/raw-reads"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "d7f1939d-faa8-4885-8605-0b7b624f3023",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find -type f -exec md5sum \"{}\" + > checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "7a8233e4-6b90-499c-a60a-9bcc5c52bfd7",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "./EC_3/EC_3_FKDN220184500-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_3/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_3/EC_3_FKDN220184500-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5K3KDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5K3KDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5GGLDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5GGLDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_1/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_1/WC_1_FKDN220184493-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_1/WC_1_FKDN220184493-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_6/WC_6_FKDN220184497-1A_H5GGJDSX3_L3_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_6/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_6/WC_6_FKDN220184497-1A_H5GGJDSX3_L3_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_6/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_6/EC_6_FKDN220184503-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_6/EC_6_FKDN220184503-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5GGLDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5GGLDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5K3KDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5K3KDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_5/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_5/EC_5_FKDN220184502-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_5/EC_5_FKDN220184502-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_3/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_3/WC_3_FKDN220184495-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_3/WC_3_FKDN220184495-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./checklist.chk: FAILED\n",[m
[32m+[m[32m      "./WC_5/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_5/WC_5_FKDN220184496-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_5/WC_5_FKDN220184496-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_2/WC_2_FKDN220184494-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_2/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_2/WC_2_FKDN220184494-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_1/EC_1_FKDN220184498-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_1/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_1/EC_1_FKDN220184498-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "md5sum: WARNING: 1 computed checksum did NOT match\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "md5sum -c checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "e30aaf24-3fbe-4346-b0e3-4c197d377e52",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Define Project Variables and create analysis directories:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "6c13cc36-5ae4-447e-9abe-32c08a774f48",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#Create analysis directories and define project variables\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the user as a variable\n",[m
[32m+[m[32m    "USER=\"cfngle\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the project directory and temp subdirectory as a variable\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/$USER/raw-data/ZF"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "id": "810a60cc-673f-40fc-abe0-aab516ebcce4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Create analysis subdirectories\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF/\"\n",[m
[32m+[m[32m    "mkdir -p $PROJECT\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/001.fastqc_raw\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/002.trim_galore\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/002.trimmomatic\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/003.fastq_trim_galore\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/004.alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/004.alignments_tm\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.b.stats_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.qc_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.qc_alignments_tm\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/006.deduplication\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/007.meth_extraction\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/007.meth_extraction_tm\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/008.methylkit\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/099.test"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "c5e17deb-bbbb-4bd7-910d-9d431cd550ee",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 1.1 FastQC RAW Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "id": "6563ed7d-f7b8-467a-9f26-f7b6617aa010",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "./ZF_036.fastq ./ZF_080.fastq ./ZF_059.fastq ./ZF_046.fastq ./ZF_005.fastq ./ZF_057.fastq ./ZF_078.fastq ./ZF_071.fastq ./ZF_087.fastq ./ZF_058.fastq ./ZF_048.fastq ./ZF_011.fastq ./ZF_096.fastq ./ZF_051.fastq ./ZF_014.fastq ./ZF_002.fastq ./ZF_049.fastq ./ZF_035.fastq ./ZF_016.fastq ./ZF_032.fastq ./ZF_084.fastq ./ZF_089.fastq ./ZF_060.fastq ./ZF_038.fastq ./ZF_050.fastq ./ZF_043.fastq ./ZF_092.fastq ./ZF_069.fastq ./ZF_033.fastq ./ZF_021.fastq ./ZF_054.fastq ./ZF_037.fastq ./ZF_082.fastq ./ZF_066.fastq ./ZF_055.fastq ./ZF_072.fastq ./ZF_040.fastq ./ZF_067.fastq ./ZF_025.fastq ./ZF_017.fastq ./ZF_003.fastq ./ZF_075.fastq ./ZF_045.fastq ./ZF_073.fastq ./ZF_004.fastq ./ZF_052.fastq ./ZF_030.fastq ./ZF_019.fastq ./ZF_007.fastq ./ZF_009.fastq ./ZF_095.fastq ./ZF_018.fastq ./ZF_093.fastq ./ZF_076.fastq ./ZF_047.fastq ./ZF_053.fastq ./ZF_001.fastq ./ZF_024.fastq ./ZF_088.fastq ./ZF_063.fastq ./ZF_083.fastq ./ZF_070.fastq ./ZF_029.fastq ./ZF_091.fastq ./ZF_006.fastq ./ZF_062.fastq ./ZF_041.fastq ./ZF_042.fastq ./ZF_008.fastq ./ZF_027.fastq ./ZF_085.fastq ./ZF_056.fastq ./ZF_010.fastq ./ZF_020.fastq ./ZF_064.fastq ./ZF_086.fastq ./ZF_068.fastq ./ZF_026.fastq ./ZF_013.fastq ./ZF_079.fastq ./ZF_090.fastq ./ZF_028.fastq ./ZF_031.fastq ./ZF_022.fastq ./ZF_074.fastq ./ZF_081.fastq ./ZF_065.fastq ./ZF_034.fastq ./ZF_061.fastq ./ZF_044.fastq ./ZF_015.fastq ./ZF_023.fastq ./ZF_012.fastq ./ZF_077.fastq ./ZF_039.fastq ./ZF_094.fastq\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 01:00:00 --mem 20G -c 10\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/raw-reads/001.fastqc_raw/fastqc_raw\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4454935\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF/raw-reads\" \n",[m
[32m+[m[32m    "IN=\"${PROJECT}/\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/001.fastqc_raw\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "cd $IN\n",[m
[32m+[m[32m    "#  FILES=`find -type f -name \"*.fastq\"`\n",[m
[32m+[m[32m    "FILES=`find -type f -name \"*.fastq\"`\n",[m
[32m+[m[32m    "echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "         COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "         echo $COMMAND\n",[m
[32m+[m[32m    "        #echo $file\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc_raw --time 01:00:00 --mem 20G -c 10 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "id": "0908f545-c305-4531-b535-a3a61771e65e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mmultiqc/1.11\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "id": "437edb0f-7d48-4a0e-9d2f-fcb49d2a2904",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709001505.045413-722077;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Raw\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/raw-reads/001.fastqc_raw\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m385/385\u001b[0m  0mtqc_raw/fastqc_raw/fastqc_raw.sh\u001b[0m\n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 96 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 001.fastqc_raw/Fastqc-Raw_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 001.fastqc_raw/Fastqc-Raw_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 001.fastqc_raw -o 001.fastqc_raw -i Fastqc-Raw"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "50e04741-aff4-4af1-9279-0d6d60f29ae8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 2. Trimming"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "dd4629bf-0f0e-4922-8c74-c351408b796c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1a Trim_galore"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "d59940d9-8c56-4eb1-b148-5d9d5db94225",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "JM_001.fastq JM_002.fastq JM_003.fastq JM_004.fastq JM_005.fastq JM_006.fastq JM_007.fastq JM_008.fastq JM_009.fastq JM_010.fastq JM_011.fastq JM_012.fastq JM_013.fastq JM_014.fastq JM_015.fastq JM_016.fastq JM_017.fastq JM_018.fastq JM_019.fastq JM_020.fastq JM_021.fastq JM_022.fastq JM_023.fastq JM_024.fastq JM_025.fastq JM_026.fastq JM_027.fastq JM_028.fastq JM_029.fastq JM_030.fastq JM_031.fastq JM_032.fastq JM_033.fastq JM_034.fastq JM_035.fastq JM_036.fastq JM_037.fastq JM_038.fastq JM_039.fastq JM_040.fastq JM_041.fastq JM_042.fastq JM_043.fastq JM_044.fastq JM_045.fastq JM_046.fastq JM_047.fastq\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 04:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/002.trim_galore/trim_galore-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 94\n",[m
[32m+[m[32m      "Submitted batch job 4464148\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/raw-reads\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $IN\n",[m
[32m+[m[32m    "mkdir -p $OUT\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the files to trim:\n",[m
[32m+[m[32m    "FILES=`basename -a ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load trim_galore\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for FILE in $FILES\n",[m
[32m+[m[32m    "     do\n",[m
[32m+[m[32m    "        In_File1=${IN}/${FILE}\n",[m
[32m+[m[32m    "        echo $In_File1\n",[m
[32m+[m[32m    "        Out=${OUT}/${FILE}_trimmed.fastq\n",[m
[32m+[m[32m    "        COMMAND=\"trim_galore --rrbs --quality 25 --clip_R1 4 --three_prime_clip_R1 2 $In_File1 --output_dir $OUT\"\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/trim_galore-logs --time 04:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "ff7c00fd-bc46-4b31-a071-88510a287569",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1b Trimmomatic"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "id": "99cbceb0-62a4-483e-b5ea-67dd8b4aea2c",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 04:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/002.trimmomatic//trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 192\n",[m
[32m+[m[32m      "Submitted batch job 4469262\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/raw-reads\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/002.trimmomatic/\"\n",[m
[32m+[m[32m    "ADAPTER=\"${PROJECT}/zzz.adapters/TruSeq3-SE.fa\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $IN\n",[m
[32m+[m[32m    "mkdir -p $OUT\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the files to trim:\n",[m
[32m+[m[32m    "FILES=`basename -a ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load Trimmomatic\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for FILE in $FILES\n",[m
[32m+[m[32m    "     do\n",[m
[32m+[m[32m    "        In_File1=${IN}/${FILE}\n",[m
[32m+[m[32m    "        echo $In_File1\n",[m
[32m+[m[32m    "        Out=${OUT}${FILE}_trimmoniac.fastq\n",[m
[32m+[m[32m    "        COMMAND=\"trimmomatic SE -phred33 ${In_File1} ${Out} ILLUMINACLIP:${ADAPTER}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36\"\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/trimmomatic-logs --time 04:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1f93e76c-40f1-4c3b-9466-c6eaa788cd00",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1a FastQC TRIMMED Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "id": "51ce841f-d25c-452a-be07-537f33193bbc",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 02:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/003.fastq_trim_galore/fastqc-trim_galore-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4463263\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\" # Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/003.fastq_trim_galore\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-trim_galore-logs --time 02:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "165399e1-0c53-4375-9f83-ef419f9a256f",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "id": "aeae0461-94aa-48ef-bc35-44e85d8242ac",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709074235.8144333-918123;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Trimmed\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/003.fastq_trim_galore\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m386/386\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 96 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 003.fastq_trim_galore/Fastqc-Trimmed_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 003.fastq_trim_galore/Fastqc-Trimmed_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "multiqc 003.fastq_trim_galore -o 003.fastq_trim_galore -i Fastqc-Trimmed"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "528783c4-0024-4292-a62c-dc60c53f8216",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.2b FastQC TRIMMED Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 38,[m
[32m+[m[32m   "id": "552a22c1-de3f-4e97-8f33-c015c58179bf",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 02:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/003.fastq_trimmomatic/fastqc-trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4470123\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\" # Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/003.fastq_trimmomatic\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-trimmomatic-logs --time 02:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "3a79234b-cd1c-4197-af2c-193ab6e869e2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mmultiqc/1.11\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 41,[m
[32m+[m[32m   "id": "542ad4c0-0838-4aec-a387-c083d26719a5",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709249218.7655373-842557;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Trimmed\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/003.fastq_trimmomatic\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m385/385\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 96 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "multiqc 003.fastq_trimmomatic -o 003.fastq_trimmomatic -i Fastqc-Trimmed"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "105a8a9b-d575-4ea9-8651-ab1d2eedc6eb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 5. Alignment\n",[m
[32m+[m[32m    "Bismark user guide https://felixkrueger.github.io/Bismark/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "b4c545a8-a3dd-49d6-b5d6-85dc48928b1c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5.1a Alignment to genome: BSseeker"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1bdd5546-1964-4be3-aba3-726930289fb4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "##### BSseeker did not work with command line directly. A bioconda environment had to be set up and BSseeker 2 directly installed there. (conda install bioconda/label/cf201901::bs-seeker2).\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 52,[m
[32m+[m[32m   "id": "ba12f9fb-0430-4ae4-aa70-0c2821500ed9",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "conda activate cfngle_env-01"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 54,[m
[32m+[m[32m   "id": "b1f329a3-24a3-4e7f-9bad-f1b01fe326c6",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Collecting package metadata (current_repodata.json): done\n",[m
[32m+[m[32m      "Solving environment: done\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "==> WARNING: A newer version of conda exists. <==\n",[m
[32m+[m[32m      "  current version: 23.1.0\n",[m
[32m+[m[32m      "  latest version: 24.1.2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Please update conda by running\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    $ conda update -n base -c defaults conda\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Or to minimize the number of packages updated during conda update use\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "     conda install conda=24.1.2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "# All requested packages already installed.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda install bowtie2"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 55,[m
[32m+[m[32m   "id": "c0ff330c-e729-4e2f-a682-601c3e533b07",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Usage: bs_seeker2-build.py [options]\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Options:\n",[m
[32m+[m[32m      "  -h, --help            show this help message and exit\n",[m
[32m+[m[32m      "  -f FILE, --file=FILE  Input your reference genome file (fasta)\n",[m
[32m+[m[32m      "  --aligner=ALIGNER     Aligner program to perform the analysis: bowtie,\n",[m
[32m+[m[32m      "                        bowtie2, soap, rmap [Default: bowtie]\n",[m
[32m+[m[32m      "  -p PATH, --path=PATH  Path to the aligner program. Detected:\n",[m
[32m+[m[32m      "                        bowtie: None\n",[m
[32m+[m[32m      "                        bowtie2:\n",[m
[32m+[m[32m      "                        /workspace/appscratch/miniconda/cfngle_env-01/bin\n",[m
[32m+[m[32m      "                        rmap: None\n",[m
[32m+[m[32m      "                        soap: None\n",[m
[32m+[m[32m      "  -d DBPATH, --db=DBPATH\n",[m
[32m+[m[32m      "                        Path to the reference genome library (generated in\n",[m
[32m+[m[32m      "                        preprocessing genome) [Default: /powerplant/workspace/\n",[m
[32m+[m[32m      "                        appscratch/miniconda/cfngle_env-01/bin/bs_utils/refere\n",[m
[32m+[m[32m      "                        nce_genomes]\n",[m
[32m+[m[32m      "  -v, --version         show version of BS-Seeker2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  Reduced Representation Bisulfite Sequencing Options:\n",[m
[32m+[m[32m      "    Use this options with conjuction of -r [--rrbs]\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    -r, --rrbs          Build index specially for Reduced Representation\n",[m
[32m+[m[32m      "                        Bisulfite Sequencing experiments. Genome other than\n",[m
[32m+[m[32m      "                        certain fragments will be masked. [Default: False]\n",[m
[32m+[m[32m      "    -l LOW_BOUND, --low=LOW_BOUND\n",[m
[32m+[m[32m      "                        lower bound of fragment length (excluding recognition\n",[m
[32m+[m[32m      "                        sequence such as C-CGG) [Default: 20]\n",[m
[32m+[m[32m      "    -u UP_BOUND, --up=UP_BOUND\n",[m
[32m+[m[32m      "                        upper bound of fragment length (excluding recognition\n",[m
[32m+[m[32m      "                        sequence such as C-CGG ends) [Default: 500]\n",[m
[32m+[m[32m      "    -c CUT_FORMAT, --cut-site=CUT_FORMAT\n",[m
[32m+[m[32m      "                        Cut sites of restriction enzyme. Ex: MspI(C-CGG),\n",[m
[32m+[m[32m      "                        Mael:(C-TAG), double-enzyme MspI&Mael:(C-CGG,C-TAG).\n",[m
[32m+[m[32m      "                        [Default: C-CGG]\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "bs_seeker2-build.py -h"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 59,[m
[32m+[m[32m   "id": "591b8ca3-3c63-4733-bc2a-7e09e04aa2a2",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) \n",[m
[32m+[m[32m      "     BS-Seeker2 v2.1.7 - Oct. 23, 2018\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Reference genome file: /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta\n",[m
[32m+[m[32m      "Reduced Representation Bisulfite Sequencing: False\n",[m
[32m+[m[32m      "Short reads aligner you are using: bowtie2\n",[m
[32m+[m[32m      "Builder path: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build\n",[m
[32m+[m[32m      "[Preprocessing NC_007112.7] Last: 0:00:02.052967 \tTotal: 0:00:02.053019\n",[m
[32m+[m[32m      "[Preprocessing NC_007113.7] Last: 0:00:02.067495 \tTotal: 0:00:04.120560\n",[m
[32m+[m[32m      "[Preprocessing NC_007114.7] Last: 0:00:02.151489 \tTotal: 0:00:06.272095\n",[m
[32m+[m[32m      "[Preprocessing NC_007115.7] Last: 0:00:02.666220 \tTotal: 0:00:08.938364\n",[m
[32m+[m[32m      "[Preprocessing NC_007116.7] Last: 0:00:02.491826 \tTotal: 0:00:11.430271\n",[m
[32m+[m[32m      "[Preprocessing NC_007117.7] Last: 0:00:02.087030 \tTotal: 0:00:13.517351\n",[m
[32m+[m[32m      "[Preprocessing NC_007118.7] Last: 0:00:02.585829 \tTotal: 0:00:16.103224\n",[m
[32m+[m[32m      "[Preprocessing NC_007119.7] Last: 0:00:01.896096 \tTotal: 0:00:17.999370\n",[m
[32m+[m[32m      "[Preprocessing NC_007120.7] Last: 0:00:01.947336 \tTotal: 0:00:19.946762\n",[m
[32m+[m[32m      "[Preprocessing NC_007121.7] Last: 0:00:01.572078 \tTotal: 0:00:21.518883\n",[m
[32m+[m[32m      "[Preprocessing NC_007122.7] Last: 0:00:01.569564 \tTotal: 0:00:23.088495\n",[m
[32m+[m[32m      "[Preprocessing NC_007123.7] Last: 0:00:01.685095 \tTotal: 0:00:24.773632\n",[m
[32m+[m[32m      "[Preprocessing NC_007124.7] Last: 0:00:01.815253 \tTotal: 0:00:26.588937\n",[m
[32m+[m[32m      "[Preprocessing NC_007125.7] Last: 0:00:01.887816 \tTotal: 0:00:28.476801\n",[m
[32m+[m[32m      "[Preprocessing NC_007126.7] Last: 0:00:01.658651 \tTotal: 0:00:30.135499\n",[m
[32m+[m[32m      "[Preprocessing NC_007127.7] Last: 0:00:01.932476 \tTotal: 0:00:32.068020\n",[m
[32m+[m[32m      "[Preprocessing NC_007128.7] Last: 0:00:01.866364 \tTotal: 0:00:33.934433\n",[m
[32m+[m[32m      "[Preprocessing NC_007129.7] Last: 0:00:02.072604 \tTotal: 0:00:36.007083\n",[m
[32m+[m[32m      "[Preprocessing NC_007130.7] Last: 0:00:01.967917 \tTotal: 0:00:37.975048\n",[m
[32m+[m[32m      "[Preprocessing NC_007131.7] Last: 0:00:02.229615 \tTotal: 0:00:40.204710\n",[m
[32m+[m[32m      "[Preprocessing NC_007132.7] Last: 0:00:01.876476 \tTotal: 0:00:42.081232\n",[m
[32m+[m[32m      "[Preprocessing NC_007133.7] Last: 0:00:01.583035 \tTotal: 0:00:43.664313\n",[m
[32m+[m[32m      "[Preprocessing NC_007134.7] Last: 0:00:01.868755 \tTotal: 0:00:45.533112\n",[m
[32m+[m[32m      "[Preprocessing NC_007135.7] Last: 0:00:01.786034 \tTotal: 0:00:47.319196\n",[m
[32m+[m[32m      "[Preprocessing NC_007136.7] Last: 0:00:01.596459 \tTotal: 0:00:48.915701\n",[m
[32m+[m[32m      "[Preprocessing NW_003336534.1] Last: 0:00:00.101371 \tTotal: 0:00:49.017112\n",[m
[32m+[m[32m      "[Preprocessing NW_003337018.1] Last: 0:00:00.080997 \tTotal: 0:00:49.098142\n",[m
[32m+[m[32m      "[Preprocessing NW_003336515.1] Last: 0:00:00.072655 \tTotal: 0:00:49.170835\n",[m
[32m+[m[32m      "[Preprocessing NW_008805481.1] Last: 0:00:00.079212 \tTotal: 0:00:49.250085\n",[m
[32m+[m[32m      "[Preprocessing NW_008805364.1] Last: 0:00:00.081517 \tTotal: 0:00:49.331638\n",[m
[32m+[m[32m      "[Preprocessing NW_008805373.1] Last: 0:00:00.081058 \tTotal: 0:00:49.412733\n",[m
[32m+[m[32m      "[Preprocessing NW_018394340.1] Last: 0:00:00.073848 \tTotal: 0:00:49.486616\n",[m
[32m+[m[32m      "[Preprocessing NW_003334448.1] Last: 0:00:00.078916 \tTotal: 0:00:49.565573\n",[m
[32m+[m[32m      "[Preprocessing NW_018394341.1] Last: 0:00:00.077969 \tTotal: 0:00:49.643583\n",[m
[32m+[m[32m      "[Preprocessing NW_018394342.1] Last: 0:00:00.077378 \tTotal: 0:00:49.721000\n",[m
[32m+[m[32m      "[Preprocessing NW_008805497.1] Last: 0:00:00.071507 \tTotal: 0:00:49.792544\n",[m
[32m+[m[32m      "[Preprocessing NW_003336429.1] Last: 0:00:00.081378 \tTotal: 0:00:49.873958\n",[m
[32m+[m[32m      "[Preprocessing NW_003336819.1] Last: 0:00:00.076782 \tTotal: 0:00:49.950779\n",[m
[32m+[m[32m      "[Preprocessing NW_003336327.1] Last: 0:00:00.082348 \tTotal: 0:00:50.033167\n",[m
[32m+[m[32m      "[Preprocessing NW_003336610.1] Last: 0:00:00.071605 \tTotal: 0:00:50.104814\n",[m
[32m+[m[32m      "[Preprocessing NW_003336686.1] Last: 0:00:00.077941 \tTotal: 0:00:50.182793\n",[m
[32m+[m[32m      "[Preprocessing NW_008805444.1] Last: 0:00:00.078275 \tTotal: 0:00:50.261111\n",[m
[32m+[m[32m      "[Preprocessing NW_018394343.1] Last: 0:00:00.083639 \tTotal: 0:00:50.344800\n",[m
[32m+[m[32m      "[Preprocessing NW_003336820.1] Last: 0:00:00.069755 \tTotal: 0:00:50.414595\n",[m
[32m+[m[32m      "[Preprocessing NW_018394344.1] Last: 0:00:00.004789 \tTotal: 0:00:50.419416\n",[m
[32m+[m[32m      "[Preprocessing NW_008805422.1] Last: 0:00:00.004819 \tTotal: 0:00:50.424258\n",[m
[32m+[m[32m      "[Preprocessing NW_018394345.1] Last: 0:00:00.003139 \tTotal: 0:00:50.427418\n",[m
[32m+[m[32m      "[Preprocessing NW_018394346.1] Last: 0:00:00.004412 \tTotal: 0:00:50.431851\n",[m
[32m+[m[32m      "[Preprocessing NW_003336964.1] Last: 0:00:00.008923 \tTotal: 0:00:50.440797\n",[m
[32m+[m[32m      "[Preprocessing NW_003334692.2] Last: 0:00:00.005734 \tTotal: 0:00:50.446552\n",[m
[32m+[m[32m      "[Preprocessing NW_018394347.1] Last: 0:00:00.004564 \tTotal: 0:00:50.451138\n",[m
[32m+[m[32m      "[Preprocessing NW_003336455.2] Last: 0:00:00.004793 \tTotal: 0:00:50.455952\n",[m
[32m+[m[32m      "[Preprocessing NW_008805542.1] Last: 0:00:00.006543 \tTotal: 0:00:50.462524\n",[m
[32m+[m[32m      "[Preprocessing NW_018394348.1] Last: 0:00:00.004999 \tTotal: 0:00:50.467548\n",[m
[32m+[m[32m      "[Preprocessing NW_001884444.4] Last: 0:00:00.007896 \tTotal: 0:00:50.475468\n",[m
[32m+[m[32m      "[Preprocessing NW_018394349.1] Last: 0:00:00.005519 \tTotal: 0:00:50.481008\n",[m
[32m+[m[32m      "[Preprocessing NW_003337266.1] Last: 0:00:00.005084 \tTotal: 0:00:50.486111\n",[m
[32m+[m[32m      "[Preprocessing NW_003336714.2] Last: 0:00:00.004710 \tTotal: 0:00:50.490843\n",[m
[32m+[m[32m      "[Preprocessing NW_003336426.1] Last: 0:00:00.004855 \tTotal: 0:00:50.495717\n",[m
[32m+[m[32m      "[Preprocessing NW_003335663.1] Last: 0:00:00.004052 \tTotal: 0:00:50.499790\n",[m
[32m+[m[32m      "[Preprocessing NW_008805361.1] Last: 0:00:00.004198 \tTotal: 0:00:50.504008\n",[m
[32m+[m[32m      "[Preprocessing NW_018394350.1] Last: 0:00:00.003862 \tTotal: 0:00:50.507890\n",[m
[32m+[m[32m      "[Preprocessing NW_003336893.1] Last: 0:00:00.004394 \tTotal: 0:00:50.512305\n",[m
[32m+[m[32m      "[Preprocessing NW_008805370.1] Last: 0:00:00.004669 \tTotal: 0:00:50.516994\n",[m
[32m+[m[32m      "[Preprocessing NW_003335154.1] Last: 0:00:00.004147 \tTotal: 0:00:50.521161\n",[m
[32m+[m[32m      "[Preprocessing NW_008805348.1] Last: 0:00:00.004535 \tTotal: 0:00:50.525714\n",[m
[32m+[m[32m      "[Preprocessing NW_003336479.1] Last: 0:00:00.004250 \tTotal: 0:00:50.529984\n",[m
[32m+[m[32m      "[Preprocessing NW_008805381.1] Last: 0:00:00.004748 \tTotal: 0:00:50.534751\n",[m
[32m+[m[32m      "[Preprocessing NW_008805526.1] Last: 0:00:00.005743 \tTotal: 0:00:50.540515\n",[m
[32m+[m[32m      "[Preprocessing NW_003336769.1] Last: 0:00:00.005117 \tTotal: 0:00:50.545652\n",[m
[32m+[m[32m      "[Preprocessing NW_003334214.1] Last: 0:00:00.005239 \tTotal: 0:00:50.550910\n",[m
[32m+[m[32m      "[Preprocessing NW_003336928.1] Last: 0:00:00.004799 \tTotal: 0:00:50.555731\n",[m
[32m+[m[32m      "[Preprocessing NW_018394351.1] Last: 0:00:00.003421 \tTotal: 0:00:50.559177\n",[m
[32m+[m[32m      "[Preprocessing NW_003336599.1] Last: 0:00:00.005436 \tTotal: 0:00:50.564639\n",[m
[32m+[m[32m      "[Preprocessing NW_003335521.2] Last: 0:00:00.003968 \tTotal: 0:00:50.568631\n",[m
[32m+[m[32m      "[Preprocessing NW_003334150.2] Last: 0:00:00.005490 \tTotal: 0:00:50.574145\n",[m
[32m+[m[32m      "[Preprocessing NW_003336548.1] Last: 0:00:00.003659 \tTotal: 0:00:50.577824\n",[m
[32m+[m[32m      "[Preprocessing NW_018394352.1] Last: 0:00:00.003799 \tTotal: 0:00:50.581642\n",[m
[32m+[m[32m      "[Preprocessing NW_008805522.1] Last: 0:00:00.004384 \tTotal: 0:00:50.586045\n",[m
[32m+[m[32m      "[Preprocessing NW_003336787.1] Last: 0:00:00.003707 \tTotal: 0:00:50.589771\n",[m
[32m+[m[32m      "[Preprocessing NW_008805436.1] Last: 0:00:00.003983 \tTotal: 0:00:50.593775\n",[m
[32m+[m[32m      "[Preprocessing NW_003335528.3] Last: 0:00:00.004034 \tTotal: 0:00:50.597831\n",[m
[32m+[m[32m      "[Preprocessing NW_003336620.1] Last: 0:00:00.003885 \tTotal: 0:00:50.601742\n",[m
[32m+[m[32m      "[Preprocessing NW_003336152.2] Last: 0:00:00.005174 \tTotal: 0:00:50.606941\n",[m
[32m+[m[32m      "[Preprocessing NW_003337183.1] Last: 0:00:00.005452 \tTotal: 0:00:50.612414\n",[m
[32m+[m[32m      "[Preprocessing NW_018394353.1] Last: 0:00:00.004271 \tTotal: 0:00:50.616705\n",[m
[32m+[m[32m      "[Preprocessing NW_008805353.1] Last: 0:00:00.003506 \tTotal: 0:00:50.620231\n",[m
[32m+[m[32m      "[Preprocessing NW_003335375.1] Last: 0:00:00.005747 \tTotal: 0:00:50.626001\n",[m
[32m+[m[32m      "[Preprocessing NW_003337090.1] Last: 0:00:00.004713 \tTotal: 0:00:50.630737\n",[m
[32m+[m[32m      "[Preprocessing NW_003336521.1] Last: 0:00:00.003794 \tTotal: 0:00:50.634551\n",[m
[32m+[m[32m      "[Preprocessing NW_008805472.1] Last: 0:00:00.005404 \tTotal: 0:00:50.639975\n",[m
[32m+[m[32m      "[Preprocessing NW_003337168.1] Last: 0:00:00.003682 \tTotal: 0:00:50.643675\n",[m
[32m+[m[32m      "[Preprocessing NW_003337240.1] Last: 0:00:00.004173 \tTotal: 0:00:50.647868\n",[m
[32m+[m[32m      "[Preprocessing NW_008805354.1] Last: 0:00:00.003788 \tTotal: 0:00:50.651678\n",[m
[32m+[m[32m      "[Preprocessing NW_008805368.1] Last: 0:00:00.005307 \tTotal: 0:00:50.657005\n",[m
[32m+[m[32m      "[Preprocessing NW_003336442.1] Last: 0:00:00.004964 \tTotal: 0:00:50.661989\n",[m
[32m+[m[32m      "[Preprocessing NW_018394354.1] Last: 0:00:00.005518 \tTotal: 0:00:50.667527\n",[m
[32m+[m[32m      "[Preprocessing NW_003336991.1] Last: 0:00:00.005836 \tTotal: 0:00:50.673394\n",[m
[32m+[m[32m      "[Preprocessing NW_018394355.1] Last: 0:00:00.004292 \tTotal: 0:00:50.677706\n",[m
[32m+[m[32m      "[Preprocessing NW_003336353.1] Last: 0:00:00.004758 \tTotal: 0:00:50.682485\n",[m
[32m+[m[32m      "[Preprocessing NW_003336972.2] Last: 0:00:00.004190 \tTotal: 0:00:50.686694\n",[m
[32m+[m[32m      "[Preprocessing NW_003336806.1] Last: 0:00:00.005003 \tTotal: 0:00:50.691717\n",[m
[32m+[m[32m      "[Preprocessing NW_003336765.1] Last: 0:00:00.004110 \tTotal: 0:00:50.695847\n",[m
[32m+[m[32m      "[Preprocessing NW_008805534.1] Last: 0:00:00.003745 \tTotal: 0:00:50.699613\n",[m
[32m+[m[32m      "[Preprocessing NW_003337086.1] Last: 0:00:00.003875 \tTotal: 0:00:50.703508\n",[m
[32m+[m[32m      "[Preprocessing NW_003336838.1] Last: 0:00:00.004234 \tTotal: 0:00:50.707762\n",[m
[32m+[m[32m      "[Preprocessing NW_003335278.1] Last: 0:00:00.005643 \tTotal: 0:00:50.713426\n",[m
[32m+[m[32m      "[Preprocessing NW_003337171.1] Last: 0:00:00.004510 \tTotal: 0:00:50.717957\n",[m
[32m+[m[32m      "[Preprocessing NW_003335567.1] Last: 0:00:00.005870 \tTotal: 0:00:50.723846\n",[m
[32m+[m[32m      "[Preprocessing NW_018394356.1] Last: 0:00:00.004190 \tTotal: 0:00:50.728055\n",[m
[32m+[m[32m      "[Preprocessing NW_003334844.1] Last: 0:00:00.003592 \tTotal: 0:00:50.731664\n",[m
[32m+[m[32m      "[Preprocessing NW_003336582.1] Last: 0:00:00.004384 \tTotal: 0:00:50.736065\n",[m
[32m+[m[32m      "[Preprocessing NW_003336497.1] Last: 0:00:00.003549 \tTotal: 0:00:50.739633\n",[m
[32m+[m[32m      "[Preprocessing NW_003336278.1] Last: 0:00:00.004422 \tTotal: 0:00:50.744076\n",[m
[32m+[m[32m      "[Preprocessing NW_003337013.1] Last: 0:00:00.006418 \tTotal: 0:00:50.750515\n",[m
[32m+[m[32m      "[Preprocessing NW_003336226.1] Last: 0:00:00.005421 \tTotal: 0:00:50.755956\n",[m
[32m+[m[32m      "[Preprocessing NW_003336598.1] Last: 0:00:00.005272 \tTotal: 0:00:50.761248\n",[m
[32m+[m[32m      "[Preprocessing NW_003336396.1] Last: 0:00:00.007184 \tTotal: 0:00:50.768454\n",[m
[32m+[m[32m      "[Preprocessing NW_008805427.1] Last: 0:00:00.005541 \tTotal: 0:00:50.774019\n",[m
[32m+[m[32m      "[Preprocessing NW_003334810.2] Last: 0:00:00.005711 \tTotal: 0:00:50.779753\n",[m
[32m+[m[32m      "[Preprocessing NW_003336331.2] Last: 0:00:00.004834 \tTotal: 0:00:50.784609\n",[m
[32m+[m[32m      "[Preprocessing NW_008805358.1] Last: 0:00:00.004524 \tTotal: 0:00:50.789153\n",[m
[32m+[m[32m      "[Preprocessing NW_008805503.1] Last: 0:00:00.005388 \tTotal: 0:00:50.794562\n",[m
[32m+[m[32m      "[Preprocessing NW_018394357.1] Last: 0:00:00.004925 \tTotal: 0:00:50.799509\n",[m
[32m+[m[32m      "[Preprocessing NW_003336817.2] Last: 0:00:00.005555 \tTotal: 0:00:50.805084\n",[m
[32m+[m[32m      "[Preprocessing NW_003337254.2] Last: 0:00:00.003684 \tTotal: 0:00:50.808788\n",[m
[32m+[m[32m      "[Preprocessing NW_008805392.1] Last: 0:00:00.003905 \tTotal: 0:00:50.812713\n",[m
[32m+[m[32m      "[Preprocessing NW_003336909.1] Last: 0:00:00.005103 \tTotal: 0:00:50.817834\n",[m
[32m+[m[32m      "[Preprocessing NW_003337260.1] Last: 0:00:00.005019 \tTotal: 0:00:50.822873\n",[m
[32m+[m[32m      "[Preprocessing NW_003337065.1] Last: 0:00:00.004788 \tTotal: 0:00:50.827680\n",[m
[32m+[m[32m      "[Preprocessing NW_008805506.1] Last: 0:00:00.007480 \tTotal: 0:00:50.835182\n",[m
[32m+[m[32m      "[Preprocessing NW_003337139.1] Last: 0:00:00.005415 \tTotal: 0:00:50.840617\n",[m
[32m+[m[32m      "[Preprocessing NW_003336445.1] Last: 0:00:00.006211 \tTotal: 0:00:50.846849\n",[m
[32m+[m[32m      "[Preprocessing NW_018394358.1] Last: 0:00:00.004073 \tTotal: 0:00:50.850943\n",[m
[32m+[m[32m      "[Preprocessing NW_003336601.1] Last: 0:00:00.005253 \tTotal: 0:00:50.856214\n",[m
[32m+[m[32m      "[Preprocessing NW_003336824.1] Last: 0:00:00.005472 \tTotal: 0:00:50.861704\n",[m
[32m+[m[32m      "[Preprocessing NW_003337114.1] Last: 0:00:00.007568 \tTotal: 0:00:50.869293\n",[m
[32m+[m[32m      "[Preprocessing NW_003336812.1] Last: 0:00:00.004247 \tTotal: 0:00:50.873561\n",[m
[32m+[m[32m      "[Preprocessing NW_003336951.2] Last: 0:00:00.006080 \tTotal: 0:00:50.879662\n",[m
[32m+[m[32m      "[Preprocessing NW_003337049.1] Last: 0:00:00.003916 \tTotal: 0:00:50.883598\n",[m
[32m+[m[32m      "[Preprocessing NW_008805533.1] Last: 0:00:00.004241 \tTotal: 0:00:50.887859\n",[m
[32m+[m[32m      "[Preprocessing NW_003336762.1] Last: 0:00:00.004086 \tTotal: 0:00:50.891965\n",[m
[32m+[m[32m      "[Preprocessing NW_003336276.1] Last: 0:00:00.007187 \tTotal: 0:00:50.899174\n",[m
[32m+[m[32m      "[Preprocessing NW_003337040.2] Last: 0:00:00.005244 \tTotal: 0:00:50.904441\n",[m
[32m+[m[32m      "[Preprocessing NW_008805451.1] Last: 0:00:00.005572 \tTotal: 0:00:50.910033\n",[m
[32m+[m[32m      "[Preprocessing NW_003336501.1] Last: 0:00:00.005509 \tTotal: 0:00:50.915563\n",[m
[32m+[m[32m      "[Preprocessing NW_003335408.1] Last: 0:00:00.003793 \tTotal: 0:00:50.919385\n",[m
[32m+[m[32m      "[Preprocessing NW_003336970.1] Last: 0:00:00.004629 \tTotal: 0:00:50.924034\n",[m
[32m+[m[32m      "[Preprocessing NW_003334506.1] Last: 0:00:00.003519 \tTotal: 0:00:50.927571\n",[m
[32m+[m[32m      "[Preprocessing NW_018394359.1] Last: 0:00:00.004394 \tTotal: 0:00:50.931984\n",[m
[32m+[m[32m      "[Preprocessing NW_018394360.1] Last: 0:00:00.003523 \tTotal: 0:00:50.935525\n",[m
[32m+[m[32m      "[Preprocessing NW_018394361.1] Last: 0:00:00.004636 \tTotal: 0:00:50.940180\n",[m
[32m+[m[32m      "[Preprocessing NW_003337174.1] Last: 0:00:00.004602 \tTotal: 0:00:50.944802\n",[m
[32m+[m[32m      "[Preprocessing NW_003336810.1] Last: 0:00:00.004710 \tTotal: 0:00:50.949532\n",[m
[32m+[m[32m      "[Preprocessing NW_003336237.1] Last: 0:00:00.004818 \tTotal: 0:00:50.954370\n",[m
[32m+[m[32m      "[Preprocessing NW_003336337.1] Last: 0:00:00.006114 \tTotal: 0:00:50.960524\n",[m
[32m+[m[32m      "[Preprocessing NW_003336871.1] Last: 0:00:00.006302 \tTotal: 0:00:50.966849\n",[m
[32m+[m[32m      "[Preprocessing NW_003336801.1] Last: 0:00:00.005781 \tTotal: 0:00:50.972651\n",[m
[32m+[m[32m      "[Preprocessing NW_008805585.1] Last: 0:00:00.005676 \tTotal: 0:00:50.978348\n",[m
[32m+[m[32m      "[Preprocessing NW_008805582.2] Last: 0:00:00.005385 \tTotal: 0:00:50.983754\n",[m
[32m+[m[32m      "[Preprocessing NW_018394362.1] Last: 0:00:00.003595 \tTotal: 0:00:50.987369\n",[m
[32m+[m[32m      "[Preprocessing NW_003335050.1] Last: 0:00:00.004687 \tTotal: 0:00:50.992084\n",[m
[32m+[m[32m      "[Preprocessing NW_003337261.2] Last: 0:00:00.005305 \tTotal: 0:00:50.997408\n",[m
[32m+[m[32m      "[Preprocessing NW_003336473.1] Last: 0:00:00.004402 \tTotal: 0:00:51.001829\n",[m
[32m+[m[32m      "[Preprocessing NW_018394363.1] Last: 0:00:00.003684 \tTotal: 0:00:51.005531\n",[m
[32m+[m[32m      "[Preprocessing NW_003334114.1] Last: 0:00:00.004429 \tTotal: 0:00:51.009978\n",[m
[32m+[m[32m      "[Preprocessing NW_003336315.1] Last: 0:00:00.005014 \tTotal: 0:00:51.015011\n",[m
[32m+[m[32m      "[Preprocessing NW_018394364.1] Last: 0:00:00.004658 \tTotal: 0:00:51.019688\n",[m
[32m+[m[32m      "[Preprocessing NW_008805397.1] Last: 0:00:00.004888 \tTotal: 0:00:51.024597\n",[m
[32m+[m[32m      "[Preprocessing NW_003337217.1] Last: 0:00:00.004918 \tTotal: 0:00:51.029534\n",[m
[32m+[m[32m      "[Preprocessing NW_008805564.1] Last: 0:00:00.004378 \tTotal: 0:00:51.033931\n",[m
[32m+[m[32m      "[Preprocessing NW_008805476.1] Last: 0:00:00.004838 \tTotal: 0:00:51.038788\n",[m
[32m+[m[32m      "[Preprocessing NW_018394365.1] Last: 0:00:00.003894 \tTotal: 0:00:51.042701\n",[m
[32m+[m[32m      "[Preprocessing NW_003336830.1] Last: 0:00:00.005777 \tTotal: 0:00:51.048498\n",[m
[32m+[m[32m      "[Preprocessing NW_003336095.2] Last: 0:00:00.005041 \tTotal: 0:00:51.053558\n",[m
[32m+[m[32m      "[Preprocessing NW_003337179.1] Last: 0:00:00.005105 \tTotal: 0:00:51.058681\n",[m
[32m+[m[32m      "[Preprocessing NW_003334233.2] Last: 0:00:00.004451 \tTotal: 0:00:51.063151\n",[m
[32m+[m[32m      "[Preprocessing NW_003336980.1] Last: 0:00:00.005514 \tTotal: 0:00:51.068685\n",[m
[32m+[m[32m      "[Preprocessing NW_008805538.1] Last: 0:00:00.006830 \tTotal: 0:00:51.075533\n",[m
[32m+[m[32m      "[Preprocessing NW_003336573.1] Last: 0:00:00.007163 \tTotal: 0:00:51.082716\n",[m
[32m+[m[32m      "[Preprocessing NW_003337031.1] Last: 0:00:00.005722 \tTotal: 0:00:51.088456\n",[m
[32m+[m[32m      "[Preprocessing NW_008805516.1] Last: 0:00:00.005098 \tTotal: 0:00:51.093572\n",[m
[32m+[m[32m      "[Preprocessing NW_003336488.1] Last: 0:00:00.004306 \tTotal: 0:00:51.097896\n",[m
[32m+[m[32m      "[Preprocessing NW_003334261.1] Last: 0:00:00.005089 \tTotal: 0:00:51.103005\n",[m
[32m+[m[32m      "[Preprocessing NW_003336995.1] Last: 0:00:00.004779 \tTotal: 0:00:51.107804\n",[m
[32m+[m[32m      "[Preprocessing NW_003336489.1] Last: 0:00:00.003922 \tTotal: 0:00:51.111744\n",[m
[32m+[m[32m      "[Preprocessing NW_018394366.1] Last: 0:00:00.006092 \tTotal: 0:00:51.117856\n",[m
[32m+[m[32m      "[Preprocessing NW_003335800.1] Last: 0:00:00.005875 \tTotal: 0:00:51.123751\n",[m
[32m+[m[32m      "[Preprocessing NW_003336826.1] Last: 0:00:00.006267 \tTotal: 0:00:51.130037\n",[m
[32m+[m[32m      "[Preprocessing NW_003337014.1] Last: 0:00:00.005793 \tTotal: 0:00:51.135850\n",[m
[32m+[m[32m      "[Preprocessing NW_003336377.1] Last: 0:00:00.005140 \tTotal: 0:00:51.141007\n",[m
[32m+[m[32m      "[Preprocessing NW_003337187.1] Last: 0:00:00.004998 \tTotal: 0:00:51.146024\n",[m
[32m+[m[32m      "[Preprocessing NW_003336900.1] Last: 0:00:00.004607 \tTotal: 0:00:51.150649\n",[m
[32m+[m[32m      "[Preprocessing NW_003337197.1] Last: 0:00:00.004709 \tTotal: 0:00:51.155389\n",[m
[32m+[m[32m      "[Preprocessing NW_008805366.1] Last: 0:00:00.004885 \tTotal: 0:00:51.160295\n",[m
[32m+[m[32m      "[Preprocessing NW_003337265.1] Last: 0:00:00.007271 \tTotal: 0:00:51.167585\n",[m
[32m+[m[32m      "[Preprocessing NW_008805490.1] Last: 0:00:00.004272 \tTotal: 0:00:51.171875\n",[m
[32m+[m[32m      "[Preprocessing NW_003336924.1] Last: 0:00:00.003696 \tTotal: 0:00:51.175591\n",[m
[32m+[m[32m      "[Preprocessing NW_018394367.1] Last: 0:00:00.003869 \tTotal: 0:00:51.179479\n",[m
[32m+[m[32m      "[Preprocessing NW_003337042.1] Last: 0:00:00.004319 \tTotal: 0:00:51.183818\n",[m
[32m+[m[32m      "[Preprocessing NW_003336349.1] Last: 0:00:00.004443 \tTotal: 0:00:51.188281\n",[m
[32m+[m[32m      "[Preprocessing NW_003336239.1] Last: 0:00:00.004863 \tTotal: 0:00:51.193164\n",[m
[32m+[m[32m      "[Preprocessing NW_003334988.2] Last: 0:00:00.005319 \tTotal: 0:00:51.198504\n",[m
[32m+[m[32m      "[Preprocessing NW_008805441.1] Last: 0:00:00.004984 \tTotal: 0:00:51.203509\n",[m
[32m+[m[32m      "[Preprocessing NW_003337207.1] Last: 0:00:00.004594 \tTotal: 0:00:51.208122\n",[m
[32m+[m[32m      "[Preprocessing NW_003334619.1] Last: 0:00:00.004757 \tTotal: 0:00:51.212900\n",[m
[32m+[m[32m      "[Preprocessing NW_003337109.1] Last: 0:00:00.005661 \tTotal: 0:00:51.218584\n",[m
[32m+[m[32m      "[Preprocessing NW_003336747.1] Last: 0:00:00.004815 \tTotal: 0:00:51.223421\n",[m
[32m+[m[32m      "[Preprocessing NW_003335276.1] Last: 0:00:00.004422 \tTotal: 0:00:51.227862\n",[m
[32m+[m[32m      "[Preprocessing NW_003334281.1] Last: 0:00:00.004657 \tTotal: 0:00:51.232539\n",[m
[32m+[m[32m      "[Preprocessing NW_003336693.1] Last: 0:00:00.003930 \tTotal: 0:00:51.236489\n",[m
[32m+[m[32m      "[Preprocessing NW_003336558.1] Last: 0:00:00.003745 \tTotal: 0:00:51.240253\n",[m
[32m+[m[32m      "[Preprocessing NW_018394368.1] Last: 0:00:00.003442 \tTotal: 0:00:51.243713\n",[m
[32m+[m[32m      "[Preprocessing NW_008805445.1] Last: 0:00:00.005338 \tTotal: 0:00:51.249071\n",[m
[32m+[m[32m      "[Preprocessing NW_003334263.2] Last: 0:00:00.006956 \tTotal: 0:00:51.256048\n",[m
[32m+[m[32m      "[Preprocessing NW_003337162.1] Last: 0:00:00.004613 \tTotal: 0:00:51.260682\n",[m
[32m+[m[32m      "[Preprocessing NW_003336345.1] Last: 0:00:00.006958 \tTotal: 0:00:51.267660\n",[m
[32m+[m[32m      "[Preprocessing NW_003336979.1] Last: 0:00:00.004947 \tTotal: 0:00:51.272627\n",[m
[32m+[m[32m      "[Preprocessing NW_003336912.2] Last: 0:00:00.009378 \tTotal: 0:00:51.282027\n",[m
[32m+[m[32m      "[Preprocessing NW_003336894.1] Last: 0:00:00.005549 \tTotal: 0:00:51.287600\n",[m
[32m+[m[32m      "[Preprocessing NW_008805567.1] Last: 0:00:00.004565 \tTotal: 0:00:51.292185\n",[m
[32m+[m[32m      "[Preprocessing NW_003337034.1] Last: 0:00:00.004903 \tTotal: 0:00:51.297109\n",[m
[32m+[m[32m      "[Preprocessing NW_003336372.1] Last: 0:00:00.004812 \tTotal: 0:00:51.301944\n",[m
[32m+[m[32m      "[Preprocessing NW_003335242.1] Last: 0:00:00.004263 \tTotal: 0:00:51.306230\n",[m
[32m+[m[32m      "[Preprocessing NW_008805401.1] Last: 0:00:00.005198 \tTotal: 0:00:51.311449\n",[m
[32m+[m[32m      "[Preprocessing NW_018394369.1] Last: 0:00:00.004599 \tTotal: 0:00:51.316069\n",[m
[32m+[m[32m      "[Preprocessing NW_003336064.1] Last: 0:00:00.005689 \tTotal: 0:00:51.321781\n",[m
[32m+[m[32m      "[Preprocessing NW_018394370.1] Last: 0:00:00.004448 \tTotal: 0:00:51.326251\n",[m
[32m+[m[32m      "[Preprocessing NW_003334395.2] Last: 0:00:00.004990 \tTotal: 0:00:51.331261\n",[m
[32m+[m[32m      "[Preprocessing NW_003334672.2] Last: 0:00:00.007412 \tTotal: 0:00:51.338695\n",[m
[32m+[m[32m      "[Preprocessing NW_008805527.1] Last: 0:00:00.005345 \tTotal: 0:00:51.344059\n",[m
[32m+[m[32m      "[Preprocessing NW_018394371.1] Last: 0:00:00.004638 \tTotal: 0:00:51.348717\n",[m
[32m+[m[32m      "[Preprocessing NW_003336410.1] Last: 0:00:00.003641 \tTotal: 0:00:51.352381\n",[m
[32m+[m[32m      "[Preprocessing NW_003336484.1] Last: 0:00:00.005787 \tTotal: 0:00:51.358189\n",[m
[32m+[m[32m      "[Preprocessing NW_018394372.1] Last: 0:00:00.004263 \tTotal: 0:00:51.362472\n",[m
[32m+[m[32m      "[Preprocessing NW_008805388.1] Last: 0:00:00.006301 \tTotal: 0:00:51.368791\n",[m
[32m+[m[32m      "[Preprocessing NW_003337189.1] Last: 0:00:00.005153 \tTotal: 0:00:51.373963\n",[m
[32m+[m[32m      "[Preprocessing NW_003336941.1] Last: 0:00:00.004721 \tTotal: 0:00:51.378705\n",[m
[32m+[m[32m      "[Preprocessing NW_003337234.1] Last: 0:00:00.004674 \tTotal: 0:00:51.383400\n",[m
[32m+[m[32m      "[Preprocessing NW_003336465.1] Last: 0:00:00.004812 \tTotal: 0:00:51.388232\n",[m
[32m+[m[32m      "[Preprocessing NW_003336414.1] Last: 0:00:00.004840 \tTotal: 0:00:51.393093\n",[m
[32m+[m[32m      "[Preprocessing NW_008805347.1] Last: 0:00:00.007796 \tTotal: 0:00:51.400910\n",[m
[32m+[m[32m      "[Preprocessing NW_003336781.2] Last: 0:00:00.004749 \tTotal: 0:00:51.405681\n",[m
[32m+[m[32m      "[Preprocessing NW_008805443.1] Last: 0:00:00.004732 \tTotal: 0:00:51.410434\n",[m
[32m+[m[32m      "[Preprocessing NW_003337127.1] Last: 0:00:00.004594 \tTotal: 0:00:51.415048\n",[m
[32m+[m[32m      "[Preprocessing NW_003337161.1] Last: 0:00:00.006027 \tTotal: 0:00:51.421096\n",[m
[32m+[m[32m      "[Preprocessing NW_003335250.1] Last: 0:00:00.004579 \tTotal: 0:00:51.425697\n",[m
[32m+[m[32m      "[Preprocessing NW_003336740.1] Last: 0:00:00.004815 \tTotal: 0:00:51.430530\n",[m
[32m+[m[32m      "[Preprocessing NW_003336729.1] Last: 0:00:00.004573 \tTotal: 0:00:51.435124\n",[m
[32m+[m[32m      "[Preprocessing NW_003337037.1] Last: 0:00:00.007698 \tTotal: 0:00:51.442846\n",[m
[32m+[m[32m      "[Preprocessing NW_003336388.1] Last: 0:00:00.004509 \tTotal: 0:00:51.447383\n",[m
[32m+[m[32m      "[Preprocessing NW_008805543.1] Last: 0:00:00.004708 \tTotal: 0:00:51.452111\n",[m
[32m+[m[32m      "[Preprocessing NW_003336986.1] Last: 0:00:00.004739 \tTotal: 0:00:51.456869\n",[m
[32m+[m[32m      "[Preprocessing NW_003336884.1] Last: 0:00:00.004945 \tTotal: 0:00:51.461833\n",[m
[32m+[m[32m      "[Preprocessing NW_003336766.1] Last: 0:00:00.007049 \tTotal: 0:00:51.468900\n",[m
[32m+[m[32m      "[Preprocessing NW_018394373.1] Last: 0:00:00.004929 \tTotal: 0:00:51.473849\n",[m
[32m+[m[32m      "[Preprocessing NW_003335359.2] Last: 0:00:00.008553 \tTotal: 0:00:51.482431\n",[m
[32m+[m[32m      "[Preprocessing NW_003335796.1] Last: 0:00:00.005015 \tTotal: 0:00:51.487467\n",[m
[32m+[m[32m      "[Preprocessing NW_018394374.1] Last: 0:00:00.005391 \tTotal: 0:00:51.492877\n",[m
[32m+[m[32m      "[Preprocessing NW_003336475.1] Last: 0:00:00.004405 \tTotal: 0:00:51.497299\n",[m
[32m+[m[32m      "[Preprocessing NW_018394375.1] Last: 0:00:00.004526 \tTotal: 0:00:51.501844\n",[m
[32m+[m[32m      "[Preprocessing NW_003335322.1] Last: 0:00:00.004291 \tTotal: 0:00:51.506154\n",[m
[32m+[m[32m      "[Preprocessing NW_018394376.1] Last: 0:00:00.004151 \tTotal: 0:00:51.510323\n",[m
[32m+[m[32m      "[Preprocessing NW_003336354.1] Last: 0:00:00.004449 \tTotal: 0:00:51.514792\n",[m
[32m+[m[32m      "[Preprocessing NW_008805555.1] Last: 0:00:00.004295 \tTotal: 0:00:51.519105\n",[m
[32m+[m[32m      "[Preprocessing NW_008805384.1] Last: 0:00:00.006278 \tTotal: 0:00:51.525402\n",[m
[32m+[m[32m      "[Preprocessing NW_003336517.2] Last: 0:00:00.005643 \tTotal: 0:00:51.531064\n",[m
[32m+[m[32m      "[Preprocessing NW_008805449.1] Last: 0:00:00.004771 \tTotal: 0:00:51.535854\n",[m
[32m+[m[32m      "[Preprocessing NW_003334443.1] Last: 0:00:00.005684 \tTotal: 0:00:51.541557\n",[m
[32m+[m[32m      "[Preprocessing NW_003336441.1] Last: 0:00:00.004751 \tTotal: 0:00:51.546326\n",[m
[32m+[m[32m      "[Preprocessing NW_003336513.1] Last: 0:00:00.005928 \tTotal: 0:00:51.552273\n",[m
[32m+[m[32m      "[Preprocessing NW_003336398.1] Last: 0:00:00.005180 \tTotal: 0:00:51.557472\n",[m
[32m+[m[32m      "[Preprocessing NW_008805458.1] Last: 0:00:00.007557 \tTotal: 0:00:51.565055\n",[m
[32m+[m[32m      "[Preprocessing NW_003337153.3] Last: 0:00:00.005742 \tTotal: 0:00:51.570824\n",[m
[32m+[m[32m      "[Preprocessing NW_003336792.1] Last: 0:00:00.008710 \tTotal: 0:00:51.579557\n",[m
[32m+[m[32m      "[Preprocessing NW_008805391.1] Last: 0:00:00.007026 \tTotal: 0:00:51.586611\n",[m
[32m+[m[32m      "[Preprocessing NW_003336454.2] Last: 0:00:00.005123 \tTotal: 0:00:51.591760\n",[m
[32m+[m[32m      "[Preprocessing NW_008805393.1] Last: 0:00:00.004284 \tTotal: 0:00:51.596068\n",[m
[32m+[m[32m      "[Preprocessing NW_003337019.1] Last: 0:00:00.004592 \tTotal: 0:00:51.600685\n",[m
[32m+[m[32m      "[Preprocessing NW_003336720.1] Last: 0:00:00.005107 \tTotal: 0:00:51.605819\n",[m
[32m+[m[32m      "[Preprocessing NW_003336420.1] Last: 0:00:00.005032 \tTotal: 0:00:51.610877\n",[m
[32m+[m[32m      "[Preprocessing NW_003336827.1] Last: 0:00:00.004249 \tTotal: 0:00:51.615149\n",[m
[32m+[m[32m      "[Preprocessing NW_003334027.1] Last: 0:00:00.004465 \tTotal: 0:00:51.619641\n",[m
[32m+[m[32m      "[Preprocessing NW_003336661.1] Last: 0:00:00.003803 \tTotal: 0:00:51.623470\n",[m
[32m+[m[32m      "[Preprocessing NW_018394377.1] Last: 0:00:00.004825 \tTotal: 0:00:51.628318\n",[m
[32m+[m[32m      "[Preprocessing NW_003336603.1] Last: 0:00:00.004578 \tTotal: 0:00:51.632919\n",[m
[32m+[m[32m      "[Preprocessing NW_018394378.1] Last: 0:00:00.003932 \tTotal: 0:00:51.636872\n",[m
[32m+[m[32m      "[Preprocessing NW_008805412.1] Last: 0:00:00.006695 \tTotal: 0:00:51.643588\n",[m
[32m+[m[32m      "[Preprocessing NW_003336774.3] Last: 0:00:00.004009 \tTotal: 0:00:51.647618\n",[m
[32m+[m[32m      "[Preprocessing NW_008805369.1] Last: 0:00:00.004555 \tTotal: 0:00:51.652193\n",[m
[32m+[m[32m      "[Preprocessing NW_003336739.1] Last: 0:00:00.004193 \tTotal: 0:00:51.656410\n",[m
[32m+[m[32m      "[Preprocessing NW_003336679.1] Last: 0:00:00.004491 \tTotal: 0:00:51.660925\n",[m
[32m+[m[32m      "[Preprocessing NW_003336613.1] Last: 0:00:00.004154 \tTotal: 0:00:51.665100\n",[m
[32m+[m[32m      "[Preprocessing NW_008805363.1] Last: 0:00:00.004130 \tTotal: 0:00:51.669249\n",[m
[32m+[m[32m      "[Preprocessing NW_003337057.1] Last: 0:00:00.003943 \tTotal: 0:00:51.673212\n",[m
[32m+[m[32m      "[Preprocessing NW_018394379.1] Last: 0:00:00.004727 \tTotal: 0:00:51.677958\n",[m
[32m+[m[32m      "[Preprocessing NW_003336474.1] Last: 0:00:00.003626 \tTotal: 0:00:51.681604\n",[m
[32m+[m[32m      "[Preprocessing NW_003334432.1] Last: 0:00:00.003666 \tTotal: 0:00:51.685289\n",[m
[32m+[m[32m      "[Preprocessing NW_003337146.1] Last: 0:00:00.004089 \tTotal: 0:00:51.689399\n",[m
[32m+[m[32m      "[Preprocessing NW_003336662.1] Last: 0:00:00.004719 \tTotal: 0:00:51.694139\n",[m
[32m+[m[32m      "[Preprocessing NW_003335530.1] Last: 0:00:00.003742 \tTotal: 0:00:51.697905\n",[m
[32m+[m[32m      "[Preprocessing NW_003336612.1] Last: 0:00:00.005818 \tTotal: 0:00:51.703751\n",[m
[32m+[m[32m      "[Preprocessing NW_003336825.1] Last: 0:00:00.003816 \tTotal: 0:00:51.707593\n",[m
[32m+[m[32m      "[Preprocessing NW_018394380.1] Last: 0:00:00.003418 \tTotal: 0:00:51.711032\n",[m
[32m+[m[32m      "[Preprocessing NW_003336934.1] Last: 0:00:00.003730 \tTotal: 0:00:51.714783\n",[m
[32m+[m[32m      "[Preprocessing NW_008805580.1] Last: 0:00:00.003697 \tTotal: 0:00:51.718501\n",[m
[32m+[m[32m      "[Preprocessing NW_003336651.1] Last: 0:00:00.004130 \tTotal: 0:00:51.722663\n",[m
[32m+[m[32m      "[Preprocessing NW_003336399.1] Last: 0:00:00.003544 \tTotal: 0:00:51.726228\n",[m
[32m+[m[32m      "[Preprocessing NW_003337172.1] Last: 0:00:00.003987 \tTotal: 0:00:51.730234\n",[m
[32m+[m[32m      "[Preprocessing NW_003337070.1] Last: 0:00:00.005838 \tTotal: 0:00:51.736093\n",[m
[32m+[m[32m      "[Preprocessing NW_008805450.1] Last: 0:00:00.003750 \tTotal: 0:00:51.739861\n",[m
[32m+[m[32m      "[Preprocessing NW_003336332.1] Last: 0:00:00.003735 \tTotal: 0:00:51.743615\n",[m
[32m+[m[32m      "[Preprocessing NW_003336755.1] Last: 0:00:00.003547 \tTotal: 0:00:51.747180\n",[m
[32m+[m[32m      "[Preprocessing NW_003335891.1] Last: 0:00:00.003784 \tTotal: 0:00:51.750982\n",[m
[32m+[m[32m      "[Preprocessing NW_003336975.1] Last: 0:00:00.003531 \tTotal: 0:00:51.754531\n",[m
[32m+[m[32m      "[Preprocessing NW_003336350.1] Last: 0:00:00.004974 \tTotal: 0:00:51.759524\n",[m
[32m+[m[32m      "[Preprocessing NW_003336646.1] Last: 0:00:00.004363 \tTotal: 0:00:51.763906\n",[m
[32m+[m[32m      "[Preprocessing NW_018394381.1] Last: 0:00:00.004041 \tTotal: 0:00:51.767967\n",[m
[32m+[m[32m      "[Preprocessing NW_018394382.1] Last: 0:00:00.003440 \tTotal: 0:00:51.771427\n",[m
[32m+[m[32m      "[Preprocessing NW_018394383.1] Last: 0:00:00.003425 \tTotal: 0:00:51.774871\n",[m
[32m+[m[32m      "[Preprocessing NW_003334681.2] Last: 0:00:00.004119 \tTotal: 0:00:51.779010\n",[m
[32m+[m[32m      "[Preprocessing NW_003334956.2] Last: 0:00:00.004188 \tTotal: 0:00:51.783218\n",[m
[32m+[m[32m      "[Preprocessing NW_003336583.1] Last: 0:00:00.003818 \tTotal: 0:00:51.787055\n",[m
[32m+[m[32m      "[Preprocessing NW_018394384.1] Last: 0:00:00.003807 \tTotal: 0:00:51.790882\n",[m
[32m+[m[32m      "[Preprocessing NW_003335935.1] Last: 0:00:00.003720 \tTotal: 0:00:51.794622\n",[m
[32m+[m[32m      "[Preprocessing NW_018394385.1] Last: 0:00:00.003696 \tTotal: 0:00:51.798337\n",[m
[32m+[m[32m      "[Preprocessing NW_003336860.1] Last: 0:00:00.004357 \tTotal: 0:00:51.802715\n",[m
[32m+[m[32m      "[Preprocessing NW_003336936.1] Last: 0:00:00.003988 \tTotal: 0:00:51.806722\n",[m
[32m+[m[32m      "[Preprocessing NW_003336553.1] Last: 0:00:00.003817 \tTotal: 0:00:51.810559\n",[m
[32m+[m[32m      "[Preprocessing NW_003336949.3] Last: 0:00:00.004517 \tTotal: 0:00:51.815097\n",[m
[32m+[m[32m      "[Preprocessing NW_003336468.1] Last: 0:00:00.004457 \tTotal: 0:00:51.819575\n",[m
[32m+[m[32m      "[Preprocessing NW_018394386.1] Last: 0:00:00.003949 \tTotal: 0:00:51.823546\n",[m
[32m+[m[32m      "[Preprocessing NW_003336967.1] Last: 0:00:00.004030 \tTotal: 0:00:51.827597\n",[m
[32m+[m[32m      "[Preprocessing NW_003337066.1] Last: 0:00:00.003659 \tTotal: 0:00:51.831276\n",[m
[32m+[m[32m      "[Preprocessing NW_003336742.1] Last: 0:00:00.003928 \tTotal: 0:00:51.835224\n",[m
[32m+[m[32m      "[Preprocessing NW_008805417.1] Last: 0:00:00.003543 \tTotal: 0:00:51.838788\n",[m
[32m+[m[32m      "[Preprocessing NW_003334256.1] Last: 0:00:00.004107 \tTotal: 0:00:51.842916\n",[m
[32m+[m[32m      "[Preprocessing NW_003336520.1] Last: 0:00:00.004072 \tTotal: 0:00:51.847007\n",[m
[32m+[m[32m      "[Preprocessing NW_003336907.1] Last: 0:00:00.003538 \tTotal: 0:00:51.850566\n",[m
[32m+[m[32m      "[Preprocessing NW_003336424.1] Last: 0:00:00.003503 \tTotal: 0:00:51.854088\n",[m
[32m+[m[32m      "[Preprocessing NW_008805549.1] Last: 0:00:00.003139 \tTotal: 0:00:51.857248\n",[m
[32m+[m[32m      "[Preprocessing NW_003337165.1] Last: 0:00:00.005418 \tTotal: 0:00:51.862688\n",[m
[32m+[m[32m      "[Preprocessing NW_008805501.1] Last: 0:00:00.004933 \tTotal: 0:00:51.867642\n",[m
[32m+[m[32m      "[Preprocessing NW_003336407.1] Last: 0:00:00.004922 \tTotal: 0:00:51.872585\n",[m
[32m+[m[32m      "[Preprocessing NW_018394387.1] Last: 0:00:00.003579 \tTotal: 0:00:51.876184\n",[m
[32m+[m[32m      "[Preprocessing NW_008805432.1] Last: 0:00:00.003848 \tTotal: 0:00:51.880051\n",[m
[32m+[m[32m      "[Preprocessing NW_003337190.1] Last: 0:00:00.003788 \tTotal: 0:00:51.883860\n",[m
[32m+[m[32m      "[Preprocessing NW_003336655.1] Last: 0:00:00.003745 \tTotal: 0:00:51.887625\n",[m
[32m+[m[32m      "[Preprocessing NW_008805511.1] Last: 0:00:00.003782 \tTotal: 0:00:51.891427\n",[m
[32m+[m[32m      "[Preprocessing NW_003336325.1] Last: 0:00:00.003372 \tTotal: 0:00:51.894818\n",[m
[32m+[m[32m      "[Preprocessing NW_003336443.1] Last: 0:00:00.003707 \tTotal: 0:00:51.898547\n",[m
[32m+[m[32m      "[Preprocessing NW_003336514.1] Last: 0:00:00.003746 \tTotal: 0:00:51.902313\n",[m
[32m+[m[32m      "[Preprocessing NW_003336593.1] Last: 0:00:00.003731 \tTotal: 0:00:51.906064\n",[m
[32m+[m[32m      "[Preprocessing NW_018394388.1] Last: 0:00:00.003437 \tTotal: 0:00:51.909521\n",[m
[32m+[m[32m      "[Preprocessing NW_003336660.1] Last: 0:00:00.003539 \tTotal: 0:00:51.913079\n",[m
[32m+[m[32m      "[Preprocessing NW_003337253.1] Last: 0:00:00.004141 \tTotal: 0:00:51.917240\n",[m
[32m+[m[32m      "[Preprocessing NW_003335650.1] Last: 0:00:00.006323 \tTotal: 0:00:51.923585\n",[m
[32m+[m[32m      "[Preprocessing NW_003336888.1] Last: 0:00:00.004329 \tTotal: 0:00:51.927935\n",[m
[32m+[m[32m      "[Preprocessing NW_003336421.1] Last: 0:00:00.005446 \tTotal: 0:00:51.933401\n",[m
[32m+[m[32m      "[Preprocessing NW_003337117.1] Last: 0:00:00.004906 \tTotal: 0:00:51.938328\n",[m
[32m+[m[32m      "[Preprocessing NW_003336823.1] Last: 0:00:00.004922 \tTotal: 0:00:51.943272\n",[m
[32m+[m[32m      "[Preprocessing NW_003336389.1] Last: 0:00:00.003578 \tTotal: 0:00:51.946872\n",[m
[32m+[m[32m      "[Preprocessing NW_003336529.1] Last: 0:00:00.003964 \tTotal: 0:00:51.950855\n",[m
[32m+[m[32m      "[Preprocessing NW_003336289.1] Last: 0:00:00.004444 \tTotal: 0:00:51.955318\n",[m
[32m+[m[32m      "[Preprocessing NW_003337218.1] Last: 0:00:00.004445 \tTotal: 0:00:51.959782\n",[m
[32m+[m[32m      "[Preprocessing NW_003337059.1] Last: 0:00:00.004500 \tTotal: 0:00:51.964303\n",[m
[32m+[m[32m      "[Preprocessing NW_003336324.1] Last: 0:00:00.006030 \tTotal: 0:00:51.970353\n",[m
[32m+[m[32m      "[Preprocessing NW_003336872.1] Last: 0:00:00.005679 \tTotal: 0:00:51.976053\n",[m
[32m+[m[32m      "[Preprocessing NW_003334447.1] Last: 0:00:00.006158 \tTotal: 0:00:51.982233\n",[m
[32m+[m[32m      "[Preprocessing NW_003336751.1] Last: 0:00:00.007001 \tTotal: 0:00:51.989254\n",[m
[32m+[m[32m      "[Preprocessing NW_018394389.1] Last: 0:00:00.005337 \tTotal: 0:00:51.994612\n",[m
[32m+[m[32m      "[Preprocessing NW_003336036.1] Last: 0:00:00.005435 \tTotal: 0:00:52.000068\n",[m
[32m+[m[32m      "[Preprocessing NW_008805433.1] Last: 0:00:00.004791 \tTotal: 0:00:52.004880\n",[m
[32m+[m[32m      "[Preprocessing NW_003337088.1] Last: 0:00:00.004576 \tTotal: 0:00:52.009477\n",[m
[32m+[m[32m      "[Preprocessing NW_008805571.1] Last: 0:00:00.004737 \tTotal: 0:00:52.014234\n",[m
[32m+[m[32m      "[Preprocessing NW_003336533.1] Last: 0:00:00.010767 \tTotal: 0:00:52.025021\n",[m
[32m+[m[32m      "[Preprocessing NW_003336725.1] Last: 0:00:00.005605 \tTotal: 0:00:52.030645\n",[m
[32m+[m[32m      "[Preprocessing NW_003334033.1] Last: 0:00:00.005958 \tTotal: 0:00:52.036623\n",[m
[32m+[m[32m      "[Preprocessing NW_008805566.1] Last: 0:00:00.009003 \tTotal: 0:00:52.045645\n",[m
[32m+[m[32m      "[Preprocessing NW_003337182.1] Last: 0:00:00.009917 \tTotal: 0:00:52.055583\n",[m
[32m+[m[32m      "[Preprocessing NW_003336929.1] Last: 0:00:00.010142 \tTotal: 0:00:52.065746\n",[m
[32m+[m[32m      "[Preprocessing NW_003334318.1] Last: 0:00:00.015779 \tTotal: 0:00:52.081547\n",[m
[32m+[m[32m      "[Preprocessing NW_003334404.1] Last: 0:00:00.007202 \tTotal: 0:00:52.088771\n",[m
[32m+[m[32m      "[Preprocessing NW_003336777.1] Last: 0:00:00.006218 \tTotal: 0:00:52.095011\n",[m
[32m+[m[32m      "[Preprocessing NW_003337093.1] Last: 0:00:00.007132 \tTotal: 0:00:52.102164\n",[m
[32m+[m[32m      "[Preprocessing NW_003337176.1] Last: 0:00:00.005795 \tTotal: 0:00:52.107980\n",[m
[32m+[m[32m      "[Preprocessing NW_008805509.1] Last: 0:00:00.012943 \tTotal: 0:00:52.120943\n",[m
[32m+[m[32m      "[Preprocessing NW_003336511.1] Last: 0:00:00.009388 \tTotal: 0:00:52.130352\n",[m
[32m+[m[32m      "[Preprocessing NW_003334589.2] Last: 0:00:00.007541 \tTotal: 0:00:52.137914\n",[m
[32m+[m[32m      "[Preprocessing NW_003336914.1] Last: 0:00:00.006254 \tTotal: 0:00:52.144192\n",[m
[32m+[m[32m      "[Preprocessing NW_003334441.1] Last: 0:00:00.005303 \tTotal: 0:00:52.149517\n",[m
[32m+[m[32m      "[Preprocessing NW_003336471.1] Last: 0:00:00.007183 \tTotal: 0:00:52.156721\n",[m
[32m+[m[32m      "[Preprocessing NW_003335158.1] Last: 0:00:00.006534 \tTotal: 0:00:52.163276\n",[m
[32m+[m[32m      "[Preprocessing NW_008805434.1] Last: 0:00:00.006859 \tTotal: 0:00:52.170155\n",[m
[32m+[m[32m      "[Preprocessing NW_003337008.2] Last: 0:00:00.007000 \tTotal: 0:00:52.177174\n",[m
[32m+[m[32m      "[Preprocessing NW_008805459.1] Last: 0:00:00.007595 \tTotal: 0:00:52.184787\n",[m
[32m+[m[32m      "[Preprocessing NW_003336950.1] Last: 0:00:00.007908 \tTotal: 0:00:52.192715\n",[m
[32m+[m[32m      "[Preprocessing NW_003336868.1] Last: 0:00:00.007987 \tTotal: 0:00:52.200721\n",[m
[32m+[m[32m      "[Preprocessing NW_008805452.1] Last: 0:00:00.006897 \tTotal: 0:00:52.207641\n",[m
[32m+[m[32m      "[Preprocessing NW_003336579.1] Last: 0:00:00.009897 \tTotal: 0:00:52.217562\n",[m
[32m+[m[32m      "[Preprocessing NW_008805545.1] Last: 0:00:00.007674 \tTotal: 0:00:52.225257\n",[m
[32m+[m[32m      "[Preprocessing NW_003335884.2] Last: 0:00:00.007804 \tTotal: 0:00:52.233083\n",[m
[32m+[m[32m      "[Preprocessing NW_003336855.1] Last: 0:00:00.008389 \tTotal: 0:00:52.241495\n",[m
[32m+[m[32m      "[Preprocessing NW_003336341.1] Last: 0:00:00.009192 \tTotal: 0:00:52.250709\n",[m
[32m+[m[32m      "[Preprocessing NW_001884473.4] Last: 0:00:00.015514 \tTotal: 0:00:52.266252\n",[m
[32m+[m[32m      "[Preprocessing NW_003336300.2] Last: 0:00:00.009033 \tTotal: 0:00:52.275314\n",[m
[32m+[m[32m      "[Preprocessing NW_003337263.1] Last: 0:00:00.008010 \tTotal: 0:00:52.283349\n",[m
[32m+[m[32m      "[Preprocessing NW_003336678.1] Last: 0:00:00.009332 \tTotal: 0:00:52.292705\n",[m
[32m+[m[32m      "[Preprocessing NW_003337025.1] Last: 0:00:00.006761 \tTotal: 0:00:52.299490\n",[m
[32m+[m[32m      "[Preprocessing NW_018394390.1] Last: 0:00:00.005609 \tTotal: 0:00:52.305120\n",[m
[32m+[m[32m      "[Preprocessing NW_003336566.1] Last: 0:00:00.012490 \tTotal: 0:00:52.317632\n",[m
[32m+[m[32m      "[Preprocessing NW_008805558.1] Last: 0:00:00.009368 \tTotal: 0:00:52.327021\n",[m
[32m+[m[32m      "[Preprocessing NW_003336913.1] Last: 0:00:00.043772 \tTotal: 0:00:52.370823\n",[m
[32m+[m[32m      "[Preprocessing NW_003336170.1] Last: 0:00:00.007417 \tTotal: 0:00:52.378266\n",[m
[32m+[m[32m      "[Preprocessing NW_003336519.1] Last: 0:00:00.007075 \tTotal: 0:00:52.385365\n",[m
[32m+[m[32m      "[Preprocessing NW_003336466.1] Last: 0:00:00.009770 \tTotal: 0:00:52.395157\n",[m
[32m+[m[32m      "[Preprocessing NW_003337193.1] Last: 0:00:00.007663 \tTotal: 0:00:52.402842\n",[m
[32m+[m[32m      "[Preprocessing NW_003336323.1] Last: 0:00:00.008688 \tTotal: 0:00:52.411551\n",[m
[32m+[m[32m      "[Preprocessing NW_018394391.1] Last: 0:00:00.005899 \tTotal: 0:00:52.417471\n",[m
[32m+[m[32m      "[Preprocessing NW_003336362.1] Last: 0:00:00.006565 \tTotal: 0:00:52.424054\n",[m
[32m+[m[32m      "[Preprocessing NW_003336727.1] Last: 0:00:00.008356 \tTotal: 0:00:52.432430\n",[m
[32m+[m[32m      "[Preprocessing NW_003336625.1] Last: 0:00:00.007894 \tTotal: 0:00:52.440342\n",[m
[32m+[m[32m      "[Preprocessing NW_003335920.1] Last: 0:00:00.008196 \tTotal: 0:00:52.448561\n",[m
[32m+[m[32m      "[Preprocessing NW_003336287.1] Last: 0:00:00.006861 \tTotal: 0:00:52.455445\n",[m
[32m+[m[32m      "[Preprocessing NW_003336643.1] Last: 0:00:00.006228 \tTotal: 0:00:52.461694\n",[m
[32m+[m[32m      "[Preprocessing NW_008805528.1] Last: 0:00:00.008303 \tTotal: 0:00:52.470019\n",[m
[32m+[m[32m      "[Preprocessing NW_008805435.1] Last: 0:00:00.006477 \tTotal: 0:00:52.476518\n",[m
[32m+[m[32m      "[Preprocessing NW_003336675.1] Last: 0:00:00.005462 \tTotal: 0:00:52.482000\n",[m
[32m+[m[32m      "[Preprocessing NW_003337145.1] Last: 0:00:00.006761 \tTotal: 0:00:52.488782\n",[m
[32m+[m[32m      "[Preprocessing NW_018394392.1] Last: 0:00:00.006489 \tTotal: 0:00:52.495291\n",[m
[32m+[m[32m      "[Preprocessing NW_003336859.1] Last: 0:00:00.004951 \tTotal: 0:00:52.500263\n",[m
[32m+[m[32m      "[Preprocessing NW_003337192.1] Last: 0:00:00.005930 \tTotal: 0:00:52.506212\n",[m
[32m+[m[32m      "[Preprocessing NW_003336958.1] Last: 0:00:00.005928 \tTotal: 0:00:52.512159\n",[m
[32m+[m[32m      "[Preprocessing NW_003336403.1] Last: 0:00:00.006245 \tTotal: 0:00:52.518425\n",[m
[32m+[m[32m      "[Preprocessing NW_018394393.1] Last: 0:00:00.005842 \tTotal: 0:00:52.524286\n",[m
[32m+[m[32m      "[Preprocessing NW_018394394.1] Last: 0:00:00.005603 \tTotal: 0:00:52.529910\n",[m
[32m+[m[32m      "[Preprocessing NW_003336374.1] Last: 0:00:00.005602 \tTotal: 0:00:52.535534\n",[m
[32m+[m[32m      "[Preprocessing NW_003334429.1] Last: 0:00:00.004726 \tTotal: 0:00:52.540281\n",[m
[32m+[m[32m      "[Preprocessing NW_003337228.1] Last: 0:00:00.004948 \tTotal: 0:00:52.545249\n",[m
[32m+[m[32m      "[Preprocessing NW_003336836.1] Last: 0:00:00.005173 \tTotal: 0:00:52.550441\n",[m
[32m+[m[32m      "[Preprocessing NW_003337043.1] Last: 0:00:00.006007 \tTotal: 0:00:52.556468\n",[m
[32m+[m[32m      "[Preprocessing NW_003336572.2] Last: 0:00:00.005984 \tTotal: 0:00:52.562473\n",[m
[32m+[m[32m      "[Preprocessing NW_003337239.1] Last: 0:00:00.005346 \tTotal: 0:00:52.567837\n",[m
[32m+[m[32m      "[Preprocessing NW_003337032.1] Last: 0:00:00.005596 \tTotal: 0:00:52.573451\n",[m
[32m+[m[32m      "[Preprocessing NW_003336567.1] Last: 0:00:00.006582 \tTotal: 0:00:52.580052\n",[m
[32m+[m[32m      "[Preprocessing NW_003336877.1] Last: 0:00:00.008459 \tTotal: 0:00:52.588531\n",[m
[32m+[m[32m      "[Preprocessing NW_003336716.1] Last: 0:00:00.007076 \tTotal: 0:00:52.595628\n",[m
[32m+[m[32m      "[Preprocessing NW_008805455.1] Last: 0:00:00.006466 \tTotal: 0:00:52.602115\n",[m
[32m+[m[32m      "[Preprocessing NW_008805502.1] Last: 0:00:00.006711 \tTotal: 0:00:52.608845\n",[m
[32m+[m[32m      "[Preprocessing NW_003335779.1] Last: 0:00:00.010454 \tTotal: 0:00:52.619319\n",[m
[32m+[m[32m      "[Preprocessing NW_003337225.1] Last: 0:00:00.005439 \tTotal: 0:00:52.624779\n",[m
[32m+[m[32m      "[Preprocessing NW_003336961.1] Last: 0:00:00.004698 \tTotal: 0:00:52.629496\n",[m
[32m+[m[32m      "[Preprocessing NW_003334628.1] Last: 0:00:00.004492 \tTotal: 0:00:52.634008\n",[m
[32m+[m[32m      "[Preprocessing NW_003336682.1] Last: 0:00:00.004691 \tTotal: 0:00:52.638718\n",[m
[32m+[m[32m      "[Preprocessing NW_003336761.1] Last: 0:00:00.004553 \tTotal: 0:00:52.643291\n",[m
[32m+[m[32m      "[Preprocessing NW_003336852.1] Last: 0:00:00.004486 \tTotal: 0:00:52.647796\n",[m
[32m+[m[32m      "[Preprocessing NW_003335314.1] Last: 0:00:00.005309 \tTotal: 0:00:52.653125\n",[m
[32m+[m[32m      "[Preprocessing NW_003336623.1] Last: 0:00:00.004605 \tTotal: 0:00:52.657752\n",[m
[32m+[m[32m      "[Preprocessing NW_003336650.1] Last: 0:00:00.006332 \tTotal: 0:00:52.664106\n",[m
[32m+[m[32m      "[Preprocessing NW_003336419.1] Last: 0:00:00.006212 \tTotal: 0:00:52.670342\n",[m
[32m+[m[32m      "[Preprocessing NW_003336355.1] Last: 0:00:00.006389 \tTotal: 0:00:52.676753\n",[m
[32m+[m[32m      "[Preprocessing NW_008805468.1] Last: 0:00:00.006374 \tTotal: 0:00:52.683150\n",[m
[32m+[m[32m      "[Preprocessing NW_003336647.1] Last: 0:00:00.007670 \tTotal: 0:00:52.690842\n",[m
[32m+[m[32m      "[Preprocessing NW_008805550.1] Last: 0:00:00.005795 \tTotal: 0:00:52.696659\n",[m
[32m+[m[32m      "[Preprocessing NW_003336381.1] Last: 0:00:00.005392 \tTotal: 0:00:52.702072\n",[m
[32m+[m[32m      "[Preprocessing NW_003336994.1] Last: 0:00:00.007434 \tTotal: 0:00:52.709526\n",[m
[32m+[m[32m      "[Preprocessing NW_008805557.1] Last: 0:00:00.007571 \tTotal: 0:00:52.717118\n",[m
[32m+[m[32m      "[Preprocessing NW_003336757.1] Last: 0:00:00.009625 \tTotal: 0:00:52.726764\n",[m
[32m+[m[32m      "[Preprocessing NW_003336448.1] Last: 0:00:00.005892 \tTotal: 0:00:52.732676\n",[m
[32m+[m[32m      "[Preprocessing NW_003336540.1] Last: 0:00:00.007902 \tTotal: 0:00:52.740599\n",[m
[32m+[m[32m      "[Preprocessing NW_003336629.1] Last: 0:00:00.006664 \tTotal: 0:00:52.747284\n",[m
[32m+[m[32m      "[Preprocessing NW_003336630.1] Last: 0:00:00.006807 \tTotal: 0:00:52.754112\n",[m
[32m+[m[32m      "[Preprocessing NW_008805473.1] Last: 0:00:00.006413 \tTotal: 0:00:52.760545\n",[m
[32m+[m[32m      "[Preprocessing NW_008805431.1] Last: 0:00:00.006201 \tTotal: 0:00:52.766766\n",[m
[32m+[m[32m      "[Preprocessing NW_003337129.2] Last: 0:00:00.006921 \tTotal: 0:00:52.773707\n",[m
[32m+[m[32m      "[Preprocessing NW_018394395.1] Last: 0:00:00.006710 \tTotal: 0:00:52.780437\n",[m
[32m+[m[32m      "[Preprocessing NW_003336302.1] Last: 0:00:00.005827 \tTotal: 0:00:52.786283\n",[m
[32m+[m[32m      "[Preprocessing NW_003334203.1] Last: 0:00:00.007014 \tTotal: 0:00:52.793318\n",[m
[32m+[m[32m      "[Preprocessing NW_003335321.1] Last: 0:00:00.005750 \tTotal: 0:00:52.799091\n",[m
[32m+[m[32m      "[Preprocessing NW_003335148.1] Last: 0:00:00.004774 \tTotal: 0:00:52.803886\n",[m
[32m+[m[32m      "[Preprocessing NW_018394396.1] Last: 0:00:00.004667 \tTotal: 0:00:52.808574\n",[m
[32m+[m[32m      "[Preprocessing NW_003336277.2] Last: 0:00:00.006381 \tTotal: 0:00:52.814977\n",[m
[32m+[m[32m      "[Preprocessing NW_008805575.1] Last: 0:00:00.004908 \tTotal: 0:00:52.819908\n",[m
[32m+[m[32m      "[Preprocessing NW_003337026.1] Last: 0:00:00.004960 \tTotal: 0:00:52.824889\n",[m
[32m+[m[32m      "[Preprocessing NW_008805491.1] Last: 0:00:00.004767 \tTotal: 0:00:52.829679\n",[m
[32m+[m[32m      "[Preprocessing NW_003336756.1] Last: 0:00:00.005140 \tTotal: 0:00:52.834842\n",[m
[32m+[m[32m      "[Preprocessing NW_003336892.1] Last: 0:00:00.005008 \tTotal: 0:00:52.839871\n",[m
[32m+[m[32m      "[Preprocessing NW_003336840.1] Last: 0:00:00.005809 \tTotal: 0:00:52.845700\n",[m
[32m+[m[32m      "[Preprocessing NW_003336432.1] Last: 0:00:00.004435 \tTotal: 0:00:52.850158\n",[m
[32m+[m[32m      "[Preprocessing NW_008805428.2] Last: 0:00:00.005556 \tTotal: 0:00:52.855736\n",[m
[32m+[m[32m      "[Preprocessing NW_003336968.1] Last: 0:00:00.004917 \tTotal: 0:00:52.860676\n",[m
[32m+[m[32m      "[Preprocessing NW_003336998.2] Last: 0:00:00.010085 \tTotal: 0:00:52.870782\n",[m
[32m+[m[32m      "[Preprocessing NW_003336330.2] Last: 0:00:00.007231 \tTotal: 0:00:52.878033\n",[m
[32m+[m[32m      "[Preprocessing NW_003336600.1] Last: 0:00:00.010115 \tTotal: 0:00:52.888170\n",[m
[32m+[m[32m      "[Preprocessing NW_003336559.1] Last: 0:00:00.008641 \tTotal: 0:00:52.896833\n",[m
[32m+[m[32m      "[Preprocessing NW_003335559.1] Last: 0:00:00.007454 \tTotal: 0:00:52.904307\n",[m
[32m+[m[32m      "[Preprocessing NW_003335764.1] Last: 0:00:00.010259 \tTotal: 0:00:52.914586\n",[m
[32m+[m[32m      "[Preprocessing NW_003334575.1] Last: 0:00:00.007841 \tTotal: 0:00:52.922447\n",[m
[32m+[m[32m      "[Preprocessing NW_018394397.1] Last: 0:00:00.006174 \tTotal: 0:00:52.928640\n",[m
[32m+[m[32m      "[Preprocessing NW_008805385.1] Last: 0:00:00.005618 \tTotal: 0:00:52.934278\n",[m
[32m+[m[32m      "[Preprocessing NW_003335289.1] Last: 0:00:00.006475 \tTotal: 0:00:52.940773\n",[m
[32m+[m[32m      "[Preprocessing NW_008805378.1] Last: 0:00:00.005624 \tTotal: 0:00:52.946418\n",[m
[32m+[m[32m      "[Preprocessing NW_018394398.1] Last: 0:00:00.005967 \tTotal: 0:00:52.952404\n",[m
[32m+[m[32m      "[Preprocessing NW_003336510.1] Last: 0:00:00.007789 \tTotal: 0:00:52.960215\n",[m
[32m+[m[32m      "[Preprocessing NW_003336097.2] Last: 0:00:00.006646 \tTotal: 0:00:52.966885\n",[m
[32m+[m[32m      "[Preprocessing NW_018394399.1] Last: 0:00:00.005092 \tTotal: 0:00:52.972001\n",[m
[32m+[m[32m      "[Preprocessing NW_003335332.2] Last: 0:00:00.006837 \tTotal: 0:00:52.978857\n",[m
[32m+[m[32m      "[Preprocessing NW_003336433.1] Last: 0:00:00.006767 \tTotal: 0:00:52.985644\n",[m
[32m+[m[32m      "[Preprocessing NW_003336541.1] Last: 0:00:00.009562 \tTotal: 0:00:52.995226\n",[m
[32m+[m[32m      "[Preprocessing NW_003336310.1] Last: 0:00:00.007322 \tTotal: 0:00:53.002569\n",[m
[32m+[m[32m      "[Preprocessing NW_003337224.1] Last: 0:00:00.005537 \tTotal: 0:00:53.008126\n",[m
[32m+[m[32m      "[Preprocessing NW_003336283.1] Last: 0:00:00.008612 \tTotal: 0:00:53.016759\n",[m
[32m+[m[32m      "[Preprocessing NW_008805461.1] Last: 0:00:00.006246 \tTotal: 0:00:53.023026\n",[m
[32m+[m[32m      "[Preprocessing NW_003336451.1] Last: 0:00:00.007577 \tTotal: 0:00:53.030623\n",[m
[32m+[m[32m      "[Preprocessing NW_018394400.1] Last: 0:00:00.006590 \tTotal: 0:00:53.037235\n",[m
[32m+[m[32m      "[Preprocessing NW_003335484.2] Last: 0:00:00.005787 \tTotal: 0:00:53.043044\n",[m
[32m+[m[32m      "[Preprocessing NW_003336344.1] Last: 0:00:00.005333 \tTotal: 0:00:53.048396\n",[m
[32m+[m[32m      "[Preprocessing NW_003336919.1] Last: 0:00:00.006131 \tTotal: 0:00:53.054546\n",[m
[32m+[m[32m      "[Preprocessing NW_008805574.1] Last: 0:00:00.005561 \tTotal: 0:00:53.060127\n",[m
[32m+[m[32m      "[Preprocessing NW_003334254.1] Last: 0:00:00.012526 \tTotal: 0:00:53.072677\n",[m
[32m+[m[32m      "[Preprocessing NW_003336850.1] Last: 0:00:00.006851 \tTotal: 0:00:53.079550\n",[m
[32m+[m[32m      "[Preprocessing NW_018394401.1] Last: 0:00:00.006303 \tTotal: 0:00:53.085872\n",[m
[32m+[m[32m      "[Preprocessing NW_003335831.2] Last: 0:00:00.006546 \tTotal: 0:00:53.092439\n",[m
[32m+[m[32m      "[Preprocessing NW_018394402.1] Last: 0:00:00.006818 \tTotal: 0:00:53.099277\n",[m
[32m+[m[32m      "[Preprocessing NW_008805437.1] Last: 0:00:00.004221 \tTotal: 0:00:53.103517\n",[m
[32m+[m[32m      "[Preprocessing NW_003337095.1] Last: 0:00:00.004405 \tTotal: 0:00:53.107941\n",[m
[32m+[m[32m      "[Preprocessing NW_008805346.1] Last: 0:00:00.004582 \tTotal: 0:00:53.112544\n",[m
[32m+[m[32m      "[Preprocessing NW_003337177.1] Last: 0:00:00.004495 \tTotal: 0:00:53.117060\n",[m
[32m+[m[32m      "[Preprocessing NW_003336942.1] Last: 0:00:00.006078 \tTotal: 0:00:53.123158\n",[m
[32m+[m[32m      "[Preprocessing NW_003337121.1] Last: 0:00:00.005627 \tTotal: 0:00:53.128804\n",[m
[32m+[m[32m      "[Preprocessing NW_003336780.1] Last: 0:00:00.005431 \tTotal: 0:00:53.134255\n",[m
[32m+[m[32m      "[Preprocessing NW_008805488.1] Last: 0:00:00.004767 \tTotal: 0:00:53.139042\n",[m
[32m+[m[32m      "[Preprocessing NW_003336525.1] Last: 0:00:00.005552 \tTotal: 0:00:53.144613\n",[m
[32m+[m[32m      "[Preprocessing NW_003336809.1] Last: 0:00:00.004277 \tTotal: 0:00:53.148908\n",[m
[32m+[m[32m      "[Preprocessing NW_003336547.1] Last: 0:00:00.004269 \tTotal: 0:00:53.153196\n",[m
[32m+[m[32m      "[Preprocessing NW_018394403.1] Last: 0:00:00.005374 \tTotal: 0:00:53.158589\n",[m
[32m+[m[32m      "[Preprocessing NW_018394404.1] Last: 0:00:00.004179 \tTotal: 0:00:53.162789\n",[m
[32m+[m[32m      "[Preprocessing NW_008805383.1] Last: 0:00:00.003922 \tTotal: 0:00:53.166732\n",[m
[32m+[m[32m      "[Preprocessing NW_008805517.1] Last: 0:00:00.005228 \tTotal: 0:00:53.171980\n",[m
[32m+[m[32m      "[Preprocessing NW_003335383.2] Last: 0:00:00.006767 \tTotal: 0:00:53.178770\n",[m
[32m+[m[32m      "[Preprocessing NW_003336977.1] Last: 0:00:00.005363 \tTotal: 0:00:53.184155\n",[m
[32m+[m[32m      "[Preprocessing NW_003336687.2] Last: 0:00:00.004288 \tTotal: 0:00:53.188463\n",[m
[32m+[m[32m      "[Preprocessing NW_003336760.1] Last: 0:00:00.004652 \tTotal: 0:00:53.193135\n",[m
[32m+[m[32m      "[Preprocessing NW_003334517.2] Last: 0:00:00.003832 \tTotal: 0:00:53.196988\n",[m
[32m+[m[32m      "[Preprocessing NW_003336483.1] Last: 0:00:00.004725 \tTotal: 0:00:53.201733\n",[m
[32m+[m[32m      "[Preprocessing NW_003336730.1] Last: 0:00:00.008257 \tTotal: 0:00:53.210013\n",[m
[32m+[m[32m      "[Preprocessing NW_008805382.1] Last: 0:00:00.003885 \tTotal: 0:00:53.213918\n",[m
[32m+[m[32m      "[Preprocessing NW_003337075.1] Last: 0:00:00.004988 \tTotal: 0:00:53.218927\n",[m
[32m+[m[32m      "[Preprocessing NW_003336711.1] Last: 0:00:00.004288 \tTotal: 0:00:53.223235\n",[m
[32m+[m[32m      "[Preprocessing NW_008805470.1] Last: 0:00:00.004096 \tTotal: 0:00:53.227352\n",[m
[32m+[m[32m      "[Preprocessing NW_008805365.1] Last: 0:00:00.003857 \tTotal: 0:00:53.231231\n",[m
[32m+[m[32m      "[Preprocessing NW_003337045.1] Last: 0:00:00.004236 \tTotal: 0:00:53.235490\n",[m
[32m+[m[32m      "[Preprocessing NW_003336945.1] Last: 0:00:00.004818 \tTotal: 0:00:53.240330\n",[m
[32m+[m[32m      "[Preprocessing NW_003334670.1] Last: 0:00:00.004608 \tTotal: 0:00:53.244959\n",[m
[32m+[m[32m      "[Preprocessing NW_003335933.1] Last: 0:00:00.004914 \tTotal: 0:00:53.249894\n",[m
[32m+[m[32m      "[Preprocessing NW_018394405.1] Last: 0:00:00.004187 \tTotal: 0:00:53.254103\n",[m
[32m+[m[32m      "[Preprocessing NW_003337229.1] Last: 0:00:00.005498 \tTotal: 0:00:53.259624\n",[m
[32m+[m[32m      "[Preprocessing NW_003336897.1] Last: 0:00:00.004733 \tTotal: 0:00:53.264406\n",[m
[32m+[m[32m      "[Preprocessing NW_018394406.1] Last: 0:00:00.003959 \tTotal: 0:00:53.268392\n",[m
[32m+[m[32m      "[Preprocessing NW_003336621.1] Last: 0:00:00.004789 \tTotal: 0:00:53.273201\n",[m
[32m+[m[32m      "[Preprocessing NW_003336773.1] Last: 0:00:00.004213 \tTotal: 0:00:53.277434\n",[m
[32m+[m[32m      "[Preprocessing NW_003335387.1] Last: 0:00:00.005038 \tTotal: 0:00:53.282491\n",[m
[32m+[m[32m      "[Preprocessing NW_003336636.1] Last: 0:00:00.004623 \tTotal: 0:00:53.287132\n",[m
[32m+[m[32m      "[Preprocessing NW_003335143.1] Last: 0:00:00.004641 \tTotal: 0:00:53.291793\n",[m
[32m+[m[32m      "[Preprocessing NW_018394407.1] Last: 0:00:00.004136 \tTotal: 0:00:53.295946\n",[m
[32m+[m[32m      "[Preprocessing NW_008805544.1] Last: 0:00:00.004518 \tTotal: 0:00:53.300482\n",[m
[32m+[m[32m      "[Preprocessing NW_003336645.1] Last: 0:00:00.004798 \tTotal: 0:00:53.305300\n",[m
[32m+[m[32m      "[Preprocessing NW_003336956.1] Last: 0:00:00.005102 \tTotal: 0:00:53.310420\n",[m
[32m+[m[32m      "[Preprocessing NW_003336568.1] Last: 0:00:00.005850 \tTotal: 0:00:53.316290\n",[m
[32m+[m[32m      "[Preprocessing NW_003335153.1] Last: 0:00:00.004349 \tTotal: 0:00:53.320657\n",[m
[32m+[m[32m      "[Preprocessing NW_003336758.1] Last: 0:00:00.005881 \tTotal: 0:00:53.326559\n",[m
[32m+[m[32m      "[Preprocessing NW_003336554.1] Last: 0:00:00.004001 \tTotal: 0:00:53.330578\n",[m
[32m+[m[32m      "[Preprocessing NW_003337184.1] Last: 0:00:00.004852 \tTotal: 0:00:53.335448\n",[m
[32m+[m[32m      "[Preprocessing NW_018394408.1] Last: 0:00:00.004822 \tTotal: 0:00:53.340289\n",[m
[32m+[m[32m      "[Preprocessing NW_003337069.1] Last: 0:00:00.005813 \tTotal: 0:00:53.346123\n",[m
[32m+[m[32m      "[Preprocessing NW_003334245.1] Last: 0:00:00.007850 \tTotal: 0:00:53.353996\n",[m
[32m+[m[32m      "[Preprocessing NW_003336976.1] Last: 0:00:00.007045 \tTotal: 0:00:53.361062\n",[m
[32m+[m[32m      "[Preprocessing NW_008805356.1] Last: 0:00:00.005661 \tTotal: 0:00:53.366743\n",[m
[32m+[m[32m      "[Preprocessing NW_003337033.1] Last: 0:00:00.007385 \tTotal: 0:00:53.374149\n",[m
[32m+[m[32m      "[Preprocessing NW_003334265.1] Last: 0:00:00.005279 \tTotal: 0:00:53.379449\n",[m
[32m+[m[32m      "[Preprocessing NW_003335386.2] Last: 0:00:00.008640 \tTotal: 0:00:53.388110\n",[m
[32m+[m[32m      "[Preprocessing NW_018394409.1] Last: 0:00:00.004223 \tTotal: 0:00:53.392354\n",[m
[32m+[m[32m      "[Preprocessing NW_003337126.1] Last: 0:00:00.004709 \tTotal: 0:00:53.397084\n",[m
[32m+[m[32m      "[Preprocessing NW_008805568.1] Last: 0:00:00.004528 \tTotal: 0:00:53.401632\n",[m
[32m+[m[32m      "[Preprocessing NW_003335459.1] Last: 0:00:00.004682 \tTotal: 0:00:53.406333\n",[m
[32m+[m[32m      "[Preprocessing NW_008805454.1] Last: 0:00:00.004969 \tTotal: 0:00:53.411322\n",[m
[32m+[m[32m      "[Preprocessing NW_003337219.1] Last: 0:00:00.004852 \tTotal: 0:00:53.416193\n",[m
[32m+[m[32m      "[Preprocessing NW_008805426.1] Last: 0:00:00.004931 \tTotal: 0:00:53.421143\n",[m
[32m+[m[32m      "[Preprocessing NW_003334680.2] Last: 0:00:00.005163 \tTotal: 0:00:53.426327\n",[m
[32m+[m[32m      "[Preprocessing NW_018394410.1] Last: 0:00:00.004193 \tTotal: 0:00:53.430542\n",[m
[32m+[m[32m      "[Preprocessing NW_003337194.1] Last: 0:00:00.005493 \tTotal: 0:00:53.436058\n",[m
[32m+[m[32m      "[Preprocessing NW_003337251.1] Last: 0:00:00.007265 \tTotal: 0:00:53.443344\n",[m
[32m+[m[32m      "[Preprocessing NW_003336575.1] Last: 0:00:00.004203 \tTotal: 0:00:53.447572\n",[m
[32m+[m[32m      "[Preprocessing NW_003336966.1] Last: 0:00:00.004484 \tTotal: 0:00:53.452082\n",[m
[32m+[m[32m      "[Preprocessing NW_018394411.1] Last: 0:00:00.004622 \tTotal: 0:00:53.456727\n",[m
[32m+[m[32m      "[Preprocessing NW_008805561.1] Last: 0:00:00.004236 \tTotal: 0:00:53.460984\n",[m
[32m+[m[32m      "[Preprocessing NW_018394412.1] Last: 0:00:00.004682 \tTotal: 0:00:53.465687\n",[m
[32m+[m[32m      "[Preprocessing NW_003336607.1] Last: 0:00:00.003809 \tTotal: 0:00:53.469518\n",[m
[32m+[m[32m      "[Preprocessing NW_008805390.1] Last: 0:00:00.004233 \tTotal: 0:00:53.473772\n",[m
[32m+[m[32m      "[Preprocessing NW_003336361.1] Last: 0:00:00.003742 \tTotal: 0:00:53.477535\n",[m
[32m+[m[32m      "[Preprocessing NW_003336347.1] Last: 0:00:00.004294 \tTotal: 0:00:53.481849\n",[m
[32m+[m[32m      "[Preprocessing NW_003337132.1] Last: 0:00:00.005255 \tTotal: 0:00:53.487123\n",[m
[32m+[m[32m      "[Preprocessing NW_003336635.1] Last: 0:00:00.004017 \tTotal: 0:00:53.491160\n",[m
[32m+[m[32m      "[Preprocessing NW_003336425.1] Last: 0:00:00.004445 \tTotal: 0:00:53.495625\n",[m
[32m+[m[32m      "[Preprocessing NW_003336435.2] Last: 0:00:00.005245 \tTotal: 0:00:53.500890\n",[m
[32m+[m[32m      "[Preprocessing NW_008805499.1] Last: 0:00:00.004459 \tTotal: 0:00:53.505368\n",[m
[32m+[m[32m      "[Preprocessing NW_018394413.1] Last: 0:00:00.004523 \tTotal: 0:00:53.509923\n",[m
[32m+[m[32m      "[Preprocessing NW_003336286.1] Last: 0:00:00.004727 \tTotal: 0:00:53.514669\n",[m
[32m+[m[32m      "[Preprocessing NW_008805415.1] Last: 0:00:00.004095 \tTotal: 0:00:53.518783\n",[m
[32m+[m[32m      "[Preprocessing NW_003336784.1] Last: 0:00:00.005520 \tTotal: 0:00:53.524323\n",[m
[32m+[m[32m      "[Preprocessing NW_003337047.1] Last: 0:00:00.006388 \tTotal: 0:00:53.530731\n",[m
[32m+[m[32m      "[Preprocessing NW_003336681.2] Last: 0:00:00.006529 \tTotal: 0:00:53.537280\n",[m
[32m+[m[32m      "[Preprocessing NW_003336375.1] Last: 0:00:00.005047 \tTotal: 0:00:53.542349\n",[m
[32m+[m[32m      "[Preprocessing NW_018394414.1] Last: 0:00:00.004950 \tTotal: 0:00:53.547320\n",[m
[32m+[m[32m      "[Preprocessing NW_008805551.1] Last: 0:00:00.005456 \tTotal: 0:00:53.552798\n",[m
[32m+[m[32m      "[Preprocessing NW_003337143.1] Last: 0:00:00.006432 \tTotal: 0:00:53.559252\n",[m
[32m+[m[32m      "[Preprocessing NW_003336866.1] Last: 0:00:00.004750 \tTotal: 0:00:53.564025\n",[m
[32m+[m[32m      "[Preprocessing NW_003336494.1] Last: 0:00:00.005315 \tTotal: 0:00:53.569362\n",[m
[32m+[m[32m      "[Preprocessing NW_003336185.1] Last: 0:00:00.005100 \tTotal: 0:00:53.574482\n",[m
[32m+[m[32m      "[Preprocessing NW_003335163.1] Last: 0:00:00.004941 \tTotal: 0:00:53.579442\n",[m
[32m+[m[32m      "[Preprocessing NW_003336169.1] Last: 0:00:00.005498 \tTotal: 0:00:53.584958\n",[m
[32m+[m[32m      "[Preprocessing NW_008805442.1] Last: 0:00:00.004609 \tTotal: 0:00:53.589586\n",[m
[32m+[m[32m      "[Preprocessing NW_003334236.1] Last: 0:00:00.005144 \tTotal: 0:00:53.594751\n",[m
[32m+[m[32m      "[Preprocessing NW_003337222.1] Last: 0:00:00.005171 \tTotal: 0:00:53.599942\n",[m
[32m+[m[32m      "[Preprocessing NW_018394415.1] Last: 0:00:00.004879 \tTotal: 0:00:53.604841\n",[m
[32m+[m[32m      "[Preprocessing NW_003337091.2] Last: 0:00:00.005753 \tTotal: 0:00:53.610615\n",[m
[32m+[m[32m      "[Preprocessing NW_003335757.1] Last: 0:00:00.006192 \tTotal: 0:00:53.616830\n",[m
[32m+[m[32m      "[Preprocessing NW_003336744.1] Last: 0:00:00.007785 \tTotal: 0:00:53.624638\n",[m
[32m+[m[32m      "[Preprocessing NW_003337107.1] Last: 0:00:00.006278 \tTotal: 0:00:53.630935\n",[m
[32m+[m[32m      "[Preprocessing NW_003336869.1] Last: 0:00:00.007921 \tTotal: 0:00:53.638878\n",[m
[32m+[m[32m      "[Preprocessing NW_018394416.1] Last: 0:00:00.008311 \tTotal: 0:00:53.647212\n",[m
[32m+[m[32m      "[Preprocessing NW_018394417.1] Last: 0:00:00.005797 \tTotal: 0:00:53.653028\n",[m
[32m+[m[32m      "[Preprocessing NW_003335350.1] Last: 0:00:00.005762 \tTotal: 0:00:53.658812\n",[m
[32m+[m[32m      "[Preprocessing NW_003334686.1] Last: 0:00:00.004504 \tTotal: 0:00:53.663336\n",[m
[32m+[m[32m      "[Preprocessing NW_018394418.1] Last: 0:00:00.004358 \tTotal: 0:00:53.667715\n",[m
[32m+[m[32m      "[Preprocessing NW_008805367.1] Last: 0:00:00.004562 \tTotal: 0:00:53.672298\n",[m
[32m+[m[32m      "[Preprocessing NW_003335249.1] Last: 0:00:00.004373 \tTotal: 0:00:53.676691\n",[m
[32m+[m[32m      "[Preprocessing NW_008805380.1] Last: 0:00:00.004364 \tTotal: 0:00:53.681074\n",[m
[32m+[m[32m      "[Preprocessing NW_018394419.1] Last: 0:00:00.004182 \tTotal: 0:00:53.685275\n",[m
[32m+[m[32m      "[Preprocessing NW_003337232.1] Last: 0:00:00.005330 \tTotal: 0:00:53.690626\n",[m
[32m+[m[32m      "[Preprocessing NW_003336288.1] Last: 0:00:00.005684 \tTotal: 0:00:53.696333\n",[m
[32m+[m[32m      "[Preprocessing NW_003336492.1] Last: 0:00:00.007206 \tTotal: 0:00:53.703562\n",[m
[32m+[m[32m      "[Preprocessing NW_003335113.1] Last: 0:00:00.004933 \tTotal: 0:00:53.708521\n",[m
[32m+[m[32m      "[Preprocessing NW_003336627.1] Last: 0:00:00.004807 \tTotal: 0:00:53.713353\n",[m
[32m+[m[32m      "[Preprocessing NW_003335654.1] Last: 0:00:00.005715 \tTotal: 0:00:53.719095\n",[m
[32m+[m[32m      "[Preprocessing NW_008805553.1] Last: 0:00:00.003893 \tTotal: 0:00:53.723011\n",[m
[32m+[m[32m      "[Preprocessing NW_003336293.1] Last: 0:00:00.003408 \tTotal: 0:00:53.726440\n",[m
[32m+[m[32m      "[Preprocessing NW_003334684.1] Last: 0:00:00.004073 \tTotal: 0:00:53.730532\n",[m
[32m+[m[32m      "[Preprocessing NW_003337099.1] Last: 0:00:00.003720 \tTotal: 0:00:53.734272\n",[m
[32m+[m[32m      "[Preprocessing NW_003336918.1] Last: 0:00:00.005106 \tTotal: 0:00:53.739400\n",[m
[32m+[m[32m      "[Preprocessing NW_003336290.1] Last: 0:00:00.003806 \tTotal: 0:00:53.743229\n",[m
[32m+[m[32m      "[Preprocessing NW_003336254.1] Last: 0:00:00.004107 \tTotal: 0:00:53.747356\n",[m
[32m+[m[32m      "[Preprocessing NW_003334519.2] Last: 0:00:00.004202 \tTotal: 0:00:53.751576\n",[m
[32m+[m[32m      "[Preprocessing NW_003336282.1] Last: 0:00:00.003752 \tTotal: 0:00:53.755348\n",[m
[32m+[m[32m      "[Preprocessing NW_003337029.1] Last: 0:00:00.004271 \tTotal: 0:00:53.759638\n",[m
[32m+[m[32m      "[Preprocessing NW_003039384.4] Last: 0:00:00.013860 \tTotal: 0:00:53.773519\n",[m
[32m+[m[32m      "[Preprocessing NW_003336385.1] Last: 0:00:00.004332 \tTotal: 0:00:53.777870\n",[m
[32m+[m[32m      "[Preprocessing NW_008805493.1] Last: 0:00:00.003808 \tTotal: 0:00:53.781696\n",[m
[32m+[m[32m      "[Preprocessing NW_003336874.1] Last: 0:00:00.003843 \tTotal: 0:00:53.785558\n",[m
[32m+[m[32m      "[Preprocessing NW_003334673.3] Last: 0:00:00.007634 \tTotal: 0:00:53.793212\n",[m
[32m+[m[32m      "[Preprocessing NW_003336574.1] Last: 0:00:00.004222 \tTotal: 0:00:53.797452\n",[m
[32m+[m[32m      "[Preprocessing NW_003336326.1] Last: 0:00:00.003936 \tTotal: 0:00:53.801406\n",[m
[32m+[m[32m      "[Preprocessing NW_003336371.1] Last: 0:00:00.003688 \tTotal: 0:00:53.805112\n",[m
[32m+[m[32m      "[Preprocessing NW_003337247.1] Last: 0:00:00.004151 \tTotal: 0:00:53.809286\n",[m
[32m+[m[32m      "[Preprocessing NW_008805440.1] Last: 0:00:00.003632 \tTotal: 0:00:53.812945\n",[m
[32m+[m[32m      "[Preprocessing NW_003337242.1] Last: 0:00:00.004016 \tTotal: 0:00:53.816984\n",[m
[32m+[m[32m      "[Preprocessing NW_018394420.1] Last: 0:00:00.003535 \tTotal: 0:00:53.820537\n",[m
[32m+[m[32m      "[Preprocessing NW_018394421.1] Last: 0:00:00.004323 \tTotal: 0:00:53.824879\n",[m
[32m+[m[32m      "[Preprocessing NW_003336404.2] Last: 0:00:00.005108 \tTotal: 0:00:53.830009\n",[m
[32m+[m[32m      "[Preprocessing NW_003334668.1] Last: 0:00:00.003754 \tTotal: 0:00:53.833782\n",[m
[32m+[m[32m      "[Preprocessing NW_003337111.1] Last: 0:00:00.003732 \tTotal: 0:00:53.837534\n",[m
[32m+[m[32m      "[Preprocessing NW_018394422.1] Last: 0:00:00.003394 \tTotal: 0:00:53.840946\n",[m
[32m+[m[32m      "[Preprocessing NW_003334219.2] Last: 0:00:00.003823 \tTotal: 0:00:53.844789\n",[m
[32m+[m[32m      "[Preprocessing NW_018394423.1] Last: 0:00:00.003727 \tTotal: 0:00:53.848535\n",[m
[32m+[m[32m      "[Preprocessing NW_008805483.1] Last: 0:00:00.004141 \tTotal: 0:00:53.852697\n",[m
[32m+[m[32m      "[Preprocessing NW_003337256.1] Last: 0:00:00.003776 \tTotal: 0:00:53.856492\n",[m
[32m+[m[32m      "[Preprocessing NW_003334032.1] Last: 0:00:00.005297 \tTotal: 0:00:53.861809\n",[m
[32m+[m[32m      "[Preprocessing NW_018394424.1] Last: 0:00:00.003540 \tTotal: 0:00:53.865369\n",[m
[32m+[m[32m      "[Preprocessing NW_008805408.1] Last: 0:00:00.003465 \tTotal: 0:00:53.868863\n",[m
[32m+[m[32m      "[Preprocessing NW_003334182.1] Last: 0:00:00.003657 \tTotal: 0:00:53.872540\n",[m
[32m+[m[32m      "[Preprocessing NW_003336671.1] Last: 0:00:00.004336 \tTotal: 0:00:53.876895\n",[m
[32m+[m[32m      "[Preprocessing NW_003334902.1] Last: 0:00:00.004268 \tTotal: 0:00:53.881183\n",[m
[32m+[m[32m      "[Preprocessing NW_003336847.1] Last: 0:00:00.003461 \tTotal: 0:00:53.884662\n",[m
[32m+[m[32m      "[Preprocessing NW_003336732.1] Last: 0:00:00.008037 \tTotal: 0:00:53.892720\n",[m
[32m+[m[32m      "[Preprocessing NW_018394425.1] Last: 0:00:00.004283 \tTotal: 0:00:53.897024\n",[m
[32m+[m[32m      "[Preprocessing NW_008805462.1] Last: 0:00:00.003183 \tTotal: 0:00:53.900226\n",[m
[32m+[m[32m      "[Preprocessing NW_003337124.1] Last: 0:00:00.003991 \tTotal: 0:00:53.904237\n",[m
[32m+[m[32m      "[Preprocessing NW_003336571.1] Last: 0:00:00.004000 \tTotal: 0:00:53.908258\n",[m
[32m+[m[32m      "[Preprocessing NW_003335266.1] Last: 0:00:00.003635 \tTotal: 0:00:53.911912\n",[m
[32m+[m[32m      "[Preprocessing NW_003336523.1] Last: 0:00:00.003592 \tTotal: 0:00:53.915523\n",[m
[32m+[m[32m      "[Preprocessing NW_018394426.1] Last: 0:00:00.004550 \tTotal: 0:00:53.920092\n",[m
[32m+[m[32m      "[Preprocessing NW_003336837.1] Last: 0:00:00.003807 \tTotal: 0:00:53.923916\n",[m
[32m+[m[32m      "[Preprocessing NW_003336782.1] Last: 0:00:00.003674 \tTotal: 0:00:53.927609\n",[m
[32m+[m[32m      "[Preprocessing NW_003336748.2] Last: 0:00:00.004388 \tTotal: 0:00:53.932016\n",[m
[32m+[m[32m      "[Preprocessing NW_003336333.2] Last: 0:00:00.005842 \tTotal: 0:00:53.937881\n",[m
[32m+[m[32m      "[Preprocessing NW_018394427.1] Last: 0:00:00.004208 \tTotal: 0:00:53.942113\n",[m
[32m+[m[32m      "[Preprocessing NW_003337250.1] Last: 0:00:00.004001 \tTotal: 0:00:53.946135\n",[m
[32m+[m[32m      "[Preprocessing NW_003337137.1] Last: 0:00:00.004191 \tTotal: 0:00:53.950346\n",[m
[32m+[m[32m      "[Preprocessing NW_003336301.1] Last: 0:00:00.003808 \tTotal: 0:00:53.954174\n",[m
[32m+[m[32m      "[Preprocessing NW_003336550.1] Last: 0:00:00.004621 \tTotal: 0:00:53.958816\n",[m
[32m+[m[32m      "[Preprocessing NW_003337164.1] Last: 0:00:00.003635 \tTotal: 0:00:53.962472\n",[m
[32m+[m[32m      "[Preprocessing NW_003336858.1] Last: 0:00:00.005166 \tTotal: 0:00:53.967658\n",[m
[32m+[m[32m      "[Preprocessing NW_003336889.1] Last: 0:00:00.003396 \tTotal: 0:00:53.971073\n",[m
[32m+[m[32m      "[Preprocessing NW_003336684.1] Last: 0:00:00.003604 \tTotal: 0:00:53.974696\n",[m
[32m+[m[32m      "[Preprocessing NW_008805540.1] Last: 0:00:00.003775 \tTotal: 0:00:53.978490\n",[m
[32m+[m[32m      "[Preprocessing NW_003336969.1] Last: 0:00:00.004597 \tTotal: 0:00:53.983107\n",[m
[32m+[m[32m      "[Preprocessing NW_018394428.1] Last: 0:00:00.003553 \tTotal: 0:00:53.986681\n",[m
[32m+[m[32m      "[Preprocessing NW_003336674.1] Last: 0:00:00.003769 \tTotal: 0:00:53.990471\n",[m
[32m+[m[32m      "[Preprocessing NW_003336176.2] Last: 0:00:00.003840 \tTotal: 0:00:53.994331\n",[m
[32m+[m[32m      "[Preprocessing NW_008805419.1] Last: 0:00:00.003596 \tTotal: 0:00:53.997947\n",[m
[32m+[m[32m      "[Preprocessing NW_003336895.1] Last: 0:00:00.004455 \tTotal: 0:00:54.002423\n",[m
[32m+[m[32m      "[Preprocessing NW_008805349.1] Last: 0:00:00.006202 \tTotal: 0:00:54.008648\n",[m
[32m+[m[32m      "[Preprocessing NW_008805495.1] Last: 0:00:00.003533 \tTotal: 0:00:54.012202\n",[m
[32m+[m[32m      "[Preprocessing NW_008805573.1] Last: 0:00:00.005212 \tTotal: 0:00:54.017435\n",[m
[32m+[m[32m      "[Preprocessing NW_008805552.1] Last: 0:00:00.005070 \tTotal: 0:00:54.022527\n",[m
[32m+[m[32m      "[Preprocessing NW_018394429.1] Last: 0:00:00.004687 \tTotal: 0:00:54.027233\n",[m
[32m+[m[32m      "[Preprocessing NW_003337202.1] Last: 0:00:00.003934 \tTotal: 0:00:54.031187\n",[m
[32m+[m[32m      "[Preprocessing NW_003335166.2] Last: 0:00:00.003962 \tTotal: 0:00:54.035170\n",[m
[32m+[m[32m      "[Preprocessing NW_003336321.1] Last: 0:00:00.004031 \tTotal: 0:00:54.039221\n",[m
[32m+[m[32m      "[Preprocessing NW_008805523.1] Last: 0:00:00.003895 \tTotal: 0:00:54.043135\n",[m
[32m+[m[32m      "[Preprocessing NW_003334215.1] Last: 0:00:00.003512 \tTotal: 0:00:54.046665\n",[m
[32m+[m[32m      "[Preprocessing NW_003336365.1] Last: 0:00:00.005572 \tTotal: 0:00:54.052258\n",[m
[32m+[m[32m      "[Preprocessing NW_003336701.2] Last: 0:00:00.003668 \tTotal: 0:00:54.055946\n",[m
[32m+[m[32m      "[Preprocessing NW_018394430.1] Last: 0:00:00.003146 \tTotal: 0:00:54.059109\n",[m
[32m+[m[32m      "[Preprocessing NW_003337097.1] Last: 0:00:00.004392 \tTotal: 0:00:54.063521\n",[m
[32m+[m[32m      "[Preprocessing NW_003334505.1] Last: 0:00:00.003245 \tTotal: 0:00:54.066783\n",[m
[32m+[m[32m      "[Preprocessing NW_003337083.1] Last: 0:00:00.004352 \tTotal: 0:00:54.071154\n",[m
[32m+[m[32m      "[Preprocessing NW_003336480.1] Last: 0:00:00.004870 \tTotal: 0:00:54.076044\n",[m
[32m+[m[32m      "[Preprocessing NW_003336772.2] Last: 0:00:00.003663 \tTotal: 0:00:54.079727\n",[m
[32m+[m[32m      "[Preprocessing NW_003337052.1] Last: 0:00:00.003821 \tTotal: 0:00:54.083568\n",[m
[32m+[m[32m      "[Preprocessing NW_018394431.1] Last: 0:00:00.003416 \tTotal: 0:00:54.087003\n",[m
[32m+[m[32m      "[Preprocessing NW_003337151.1] Last: 0:00:00.003607 \tTotal: 0:00:54.090629\n",[m
[32m+[m[32m      "[Preprocessing NW_008805400.1] Last: 0:00:00.003748 \tTotal: 0:00:54.094397\n",[m
[32m+[m[32m      "[Preprocessing NW_003334814.2] Last: 0:00:00.003937 \tTotal: 0:00:54.098354\n",[m
[32m+[m[32m      "[Preprocessing NW_018394432.1] Last: 0:00:00.004475 \tTotal: 0:00:54.102852\n",[m
[32m+[m[32m      "[Preprocessing NW_008805529.1] Last: 0:00:00.003885 \tTotal: 0:00:54.106760\n",[m
[32m+[m[32m      "[Preprocessing NW_003336436.1] Last: 0:00:00.006416 \tTotal: 0:00:54.113199\n",[m
[32m+[m[32m      "[Preprocessing NW_003337101.1] Last: 0:00:00.005618 \tTotal: 0:00:54.118839\n",[m
[32m+[m[32m      "[Preprocessing NW_003336316.1] Last: 0:00:00.007577 \tTotal: 0:00:54.126438\n",[m
[32m+[m[32m      "[Preprocessing NW_003336458.1] Last: 0:00:00.003780 \tTotal: 0:00:54.130240\n",[m
[32m+[m[32m      "[Preprocessing NW_008805498.1] Last: 0:00:00.004123 \tTotal: 0:00:54.134391\n",[m
[32m+[m[32m      "[Preprocessing NW_018394433.1] Last: 0:00:00.003860 \tTotal: 0:00:54.138270\n",[m
[32m+[m[32m      "[Preprocessing NW_003337044.1] Last: 0:00:00.004165 \tTotal: 0:00:54.142454\n",[m
[32m+[m[32m      "[Preprocessing NW_018394434.1] Last: 0:00:00.003821 \tTotal: 0:00:54.146293\n",[m
[32m+[m[32m      "[Preprocessing NW_003334499.2] Last: 0:00:00.006045 \tTotal: 0:00:54.152357\n",[m
[32m+[m[32m      "[Preprocessing NW_008805463.1] Last: 0:00:00.004269 \tTotal: 0:00:54.156645\n",[m
[32m+[m[32m      "[Preprocessing NW_003336509.1] Last: 0:00:00.005499 \tTotal: 0:00:54.162165\n",[m
[32m+[m[32m      "[Preprocessing NW_003337249.1] Last: 0:00:00.003788 \tTotal: 0:00:54.165976\n",[m
[32m+[m[32m      "[Preprocessing NW_003337078.1] Last: 0:00:00.004348 \tTotal: 0:00:54.170344\n",[m
[32m+[m[32m      "[Preprocessing NW_008805510.1] Last: 0:00:00.003627 \tTotal: 0:00:54.173992\n",[m
[32m+[m[32m      "[Preprocessing NW_003337038.1] Last: 0:00:00.003806 \tTotal: 0:00:54.177818\n",[m
[32m+[m[32m      "[Preprocessing NW_018394435.1] Last: 0:00:00.003754 \tTotal: 0:00:54.181592\n",[m
[32m+[m[32m      "[Preprocessing NW_008805430.1] Last: 0:00:00.003183 \tTotal: 0:00:54.184793\n",[m
[32m+[m[32m      "[Preprocessing NW_003337255.1] Last: 0:00:00.004435 \tTotal: 0:00:54.189247\n",[m
[32m+[m[32m      "[Preprocessing NW_018394436.1] Last: 0:00:00.004260 \tTotal: 0:00:54.193526\n",[m
[32m+[m[32m      "[Preprocessing NW_003336328.1] Last: 0:00:00.003880 \tTotal: 0:00:54.197424\n",[m
[32m+[m[32m      "[Preprocessing NW_003337106.1] Last: 0:00:00.003951 \tTotal: 0:00:54.201394\n",[m
[32m+[m[32m      "[Preprocessing NW_003335906.1] Last: 0:00:00.005311 \tTotal: 0:00:54.206726\n",[m
[32m+[m[32m      "[Preprocessing NW_003336659.1] Last: 0:00:00.004065 \tTotal: 0:00:54.210812\n",[m
[32m+[m[32m      "[Preprocessing NW_018394437.1] Last: 0:00:00.003386 \tTotal: 0:00:54.214218\n",[m
[32m+[m[32m      "[Preprocessing NW_008805465.1] Last: 0:00:00.003874 \tTotal: 0:00:54.218114\n",[m
[32m+[m[32m      "[Preprocessing NW_003336689.1] Last: 0:00:00.003602 \tTotal: 0:00:54.221735\n",[m
[32m+[m[32m      "[Preprocessing NW_003336699.1] Last: 0:00:00.004170 \tTotal: 0:00:54.225925\n",[m
[32m+[m[32m      "[Preprocessing NW_003336743.1] Last: 0:00:00.003617 \tTotal: 0:00:54.229561\n",[m
[32m+[m[32m      "[Preprocessing NW_003336274.1] Last: 0:00:00.004246 \tTotal: 0:00:54.233827\n",[m
[32m+[m[32m      "[Preprocessing NW_008805420.1] Last: 0:00:00.003699 \tTotal: 0:00:54.237544\n",[m
[32m+[m[32m      "[Preprocessing NW_003336845.1] Last: 0:00:00.003708 \tTotal: 0:00:54.241271\n",[m
[32m+[m[32m      "[Preprocessing NW_003334453.1] Last: 0:00:00.003788 \tTotal: 0:00:54.245078\n",[m
[32m+[m[32m      "[Preprocessing NW_003336073.1] Last: 0:00:00.003673 \tTotal: 0:00:54.248771\n",[m
[32m+[m[32m      "[Preprocessing NW_003337028.1] Last: 0:00:00.004118 \tTotal: 0:00:54.252907\n",[m
[32m+[m[32m      "[Preprocessing NW_003337060.1] Last: 0:00:00.005821 \tTotal: 0:00:54.258749\n",[m
[32m+[m[32m      "[Preprocessing NW_008805466.1] Last: 0:00:00.003432 \tTotal: 0:00:54.262200\n",[m
[32m+[m[32m      "[Preprocessing NW_003337131.2] Last: 0:00:00.003987 \tTotal: 0:00:54.266205\n",[m
[32m+[m[32m      "[Preprocessing NW_003335638.2] Last: 0:00:00.003604 \tTotal: 0:00:54.269830\n",[m
[32m+[m[32m      "[Preprocessing NW_003336921.1] Last: 0:00:00.004073 \tTotal: 0:00:54.273923\n",[m
[32m+[m[32m      "[Preprocessing NW_008805535.1] Last: 0:00:00.004494 \tTotal: 0:00:54.278436\n",[m
[32m+[m[32m      "[Preprocessing NW_003336493.1] Last: 0:00:00.003908 \tTotal: 0:00:54.282363\n",[m
[32m+[m[32m      "[Preprocessing NW_003334669.1] Last: 0:00:00.004015 \tTotal: 0:00:54.286397\n",[m
[32m+[m[32m      "[Preprocessing NW_003337136.1] Last: 0:00:00.003597 \tTotal: 0:00:54.290013\n",[m
[32m+[m[32m      "[Preprocessing NW_003336457.1] Last: 0:00:00.003755 \tTotal: 0:00:54.293787\n",[m
[32m+[m[32m      "[Preprocessing NW_008805448.1] Last: 0:00:00.003292 \tTotal: 0:00:54.297097\n",[m
[32m+[m[32m      "[Preprocessing NW_003336649.1] Last: 0:00:00.003415 \tTotal: 0:00:54.300534\n",[m
[32m+[m[32m      "[Preprocessing NW_018394438.1] Last: 0:00:00.004090 \tTotal: 0:00:54.304644\n",[m
[32m+[m[32m      "[Preprocessing NW_003337080.1] Last: 0:00:00.003163 \tTotal: 0:00:54.307827\n",[m
[32m+[m[32m      "[Preprocessing NW_003335691.1] Last: 0:00:00.003767 \tTotal: 0:00:54.311614\n",[m
[32m+[m[32m      "[Preprocessing NW_003335184.2] Last: 0:00:00.003253 \tTotal: 0:00:54.314885\n",[m
[32m+[m[32m      "[Preprocessing NW_003337154.1] Last: 0:00:00.003600 \tTotal: 0:00:54.318504\n",[m
[32m+[m[32m      "[Preprocessing NW_003336721.1] Last: 0:00:00.003336 \tTotal: 0:00:54.321859\n",[m
[32m+[m[32m      "[Preprocessing NW_018394439.1] Last: 0:00:00.003579 \tTotal: 0:00:54.325457\n",[m
[32m+[m[32m      "[Preprocessing NW_008805398.1] Last: 0:00:00.004320 \tTotal: 0:00:54.329796\n",[m
[32m+[m[32m      "[Preprocessing NW_018394440.1] Last: 0:00:00.003698 \tTotal: 0:00:54.333517\n",[m
[32m+[m[32m      "[Preprocessing NW_003337204.1] Last: 0:00:00.006474 \tTotal: 0:00:54.340019\n",[m
[32m+[m[32m      "[Preprocessing NW_003336392.1] Last: 0:00:00.004171 \tTotal: 0:00:54.344214\n",[m
[32m+[m[32m      "[Preprocessing NW_003336948.1] Last: 0:00:00.003932 \tTotal: 0:00:54.348166\n",[m
[32m+[m[32m      "[Preprocessing NW_003337160.1] Last: 0:00:00.003983 \tTotal: 0:00:54.352168\n",[m
[32m+[m[32m      "[Preprocessing NW_018394441.1] Last: 0:00:00.003320 \tTotal: 0:00:54.355507\n",[m
[32m+[m[32m      "[Preprocessing NW_018394442.1] Last: 0:00:00.003591 \tTotal: 0:00:54.359116\n",[m
[32m+[m[32m      "[Preprocessing NW_003337258.1] Last: 0:00:00.007220 \tTotal: 0:00:54.366356\n",[m
[32m+[m[32m      "[Preprocessing NW_018394443.1] Last: 0:00:00.003152 \tTotal: 0:00:54.369527\n",[m
[32m+[m[32m      "[Preprocessing NW_003336415.1] Last: 0:00:00.004066 \tTotal: 0:00:54.373611\n",[m
[32m+[m[32m      "[Preprocessing NW_003335185.2] Last: 0:00:00.004002 \tTotal: 0:00:54.377634\n",[m
[32m+[m[32m      "[Preprocessing NW_003336815.1] Last: 0:00:00.003452 \tTotal: 0:00:54.381106\n",[m
[32m+[m[32m      "[Preprocessing NW_003335384.1] Last: 0:00:00.004489 \tTotal: 0:00:54.385617\n",[m
[32m+[m[32m      "[Preprocessing NW_003334656.2] Last: 0:00:00.005478 \tTotal: 0:00:54.391117\n",[m
[32m+[m[32m      "[Preprocessing NW_003336843.1] Last: 0:00:00.005516 \tTotal: 0:00:54.396656\n",[m
[32m+[m[32m      "[Preprocessing NW_003336937.1] Last: 0:00:00.004430 \tTotal: 0:00:54.401106\n",[m
[32m+[m[32m      "[Preprocessing NW_003337186.1] Last: 0:00:00.003471 \tTotal: 0:00:54.404596\n",[m
[32m+[m[32m      "[Preprocessing NW_003336299.1] Last: 0:00:00.005049 \tTotal: 0:00:54.409665\n",[m
[32m+[m[32m      "[Preprocessing NW_003335051.1] Last: 0:00:00.003527 \tTotal: 0:00:54.413211\n",[m
[32m+[m[32m      "[Preprocessing NW_003336746.1] Last: 0:00:00.003971 \tTotal: 0:00:54.417202\n",[m
[32m+[m[32m      "[Preprocessing NW_018394444.1] Last: 0:00:00.003251 \tTotal: 0:00:54.420473\n",[m
[32m+[m[32m      "[Preprocessing NW_003337123.1] Last: 0:00:00.004148 \tTotal: 0:00:54.424640\n",[m
[32m+[m[32m      "[Preprocessing NW_003336614.1] Last: 0:00:00.003539 \tTotal: 0:00:54.428199\n",[m
[32m+[m[32m      "[Preprocessing NW_003337122.1] Last: 0:00:00.003865 \tTotal: 0:00:54.432084\n",[m
[32m+[m[32m      "[Preprocessing NW_003337010.1] Last: 0:00:00.004679 \tTotal: 0:00:54.436784\n",[m
[32m+[m[32m      "[Preprocessing NW_008805387.1] Last: 0:00:00.004352 \tTotal: 0:00:54.441155\n",[m
[32m+[m[32m      "[Preprocessing NW_003334683.1] Last: 0:00:00.006519 \tTotal: 0:00:54.447695\n",[m
[32m+[m[32m      "[Preprocessing NW_008805351.2] Last: 0:00:00.003602 \tTotal: 0:00:54.451316\n",[m
[32m+[m[32m      "[Preprocessing NW_003336876.1] Last: 0:00:00.004110 \tTotal: 0:00:54.455449\n",[m
[32m+[m[32m      "[Preprocessing NW_003336088.1] Last: 0:00:00.004615 \tTotal: 0:00:54.460099\n",[m
[32m+[m[32m      "[Preprocessing NW_003336703.1] Last: 0:00:00.006789 \tTotal: 0:00:54.466918\n",[m
[32m+[m[32m      "[Preprocessing NW_003337116.1] Last: 0:00:00.005536 \tTotal: 0:00:54.472476\n",[m
[32m+[m[32m      "[Preprocessing NW_003336370.1] Last: 0:00:00.004369 \tTotal: 0:00:54.476866\n",[m
[32m+[m[32m      "[Preprocessing NW_008805394.1] Last: 0:00:00.004739 \tTotal: 0:00:54.481626\n",[m
[32m+[m[32m      "[Preprocessing NW_003337241.1] Last: 0:00:00.006025 \tTotal: 0:00:54.487674\n",[m
[32m+[m[32m      "[Preprocessing NW_008805409.1] Last: 0:00:00.003370 \tTotal: 0:00:54.491064\n",[m
[32m+[m[32m      "[Preprocessing NW_008805532.1] Last: 0:00:00.003811 \tTotal: 0:00:54.494894\n",[m
[32m+[m[32m      "[Preprocessing NW_003336281.1] Last: 0:00:00.004218 \tTotal: 0:00:54.499132\n",[m
[32m+[m[32m      "[Preprocessing NW_003336974.1] Last: 0:00:00.005738 \tTotal: 0:00:54.504891\n",[m
[32m+[m[32m      "[Preprocessing NW_003336915.1] Last: 0:00:00.003545 \tTotal: 0:00:54.508458\n",[m
[32m+[m[32m      "[Preprocessing NW_003336957.1] Last: 0:00:00.008331 \tTotal: 0:00:54.516811\n",[m
[32m+[m[32m      "[Preprocessing NW_003335355.2] Last: 0:00:00.004221 \tTotal: 0:00:54.521052\n",[m
[32m+[m[32m      "[Preprocessing NW_003336343.1] Last: 0:00:00.003953 \tTotal: 0:00:54.525024\n",[m
[32m+[m[32m      "[Preprocessing NW_003335319.1] Last: 0:00:00.004973 \tTotal: 0:00:54.530016\n",[m
[32m+[m[32m      "[Preprocessing NW_003337198.1] Last: 0:00:00.003977 \tTotal: 0:00:54.534012\n",[m
[32m+[m[32m      "[Preprocessing NW_018394445.1] Last: 0:00:00.003761 \tTotal: 0:00:54.537792\n",[m
[32m+[m[32m      "[Preprocessing NW_003334832.2] Last: 0:00:00.004364 \tTotal: 0:00:54.542175\n",[m
[32m+[m[32m      "[Preprocessing NW_003336802.1] Last: 0:00:00.003521 \tTotal: 0:00:54.545715\n",[m
[32m+[m[32m      "[Preprocessing NW_003337159.1] Last: 0:00:00.004340 \tTotal: 0:00:54.550074\n",[m
[32m+[m[32m      "[Preprocessing NW_003336917.1] Last: 0:00:00.003704 \tTotal: 0:00:54.553802\n",[m
[32m+[m[32m      "[Preprocessing NW_003336925.1] Last: 0:00:00.004529 \tTotal: 0:00:54.558353\n",[m
[32m+[m[32m      "[Preprocessing NW_003336831.1] Last: 0:00:00.004587 \tTotal: 0:00:54.562960\n",[m
[32m+[m[32m      "[Preprocessing NW_003336940.1] Last: 0:00:00.005313 \tTotal: 0:00:54.568296\n",[m
[32m+[m[32m      "[Preprocessing NW_003336667.1] Last: 0:00:00.003971 \tTotal: 0:00:54.572290\n",[m
[32m+[m[32m      "[Preprocessing NW_003336666.1] Last: 0:00:00.003830 \tTotal: 0:00:54.576141\n",[m
[32m+[m[32m      "[Preprocessing NW_003335161.1] Last: 0:00:00.003721 \tTotal: 0:00:54.579882\n",[m
[32m+[m[32m      "[Preprocessing NW_003336430.1] Last: 0:00:00.003456 \tTotal: 0:00:54.583358\n",[m
[32m+[m[32m      "[Preprocessing NW_003336764.1] Last: 0:00:00.004493 \tTotal: 0:00:54.587872\n",[m
[32m+[m[32m      "[Preprocessing NW_008805514.1] Last: 0:00:00.003601 \tTotal: 0:00:54.591493\n",[m
[32m+[m[32m      "[Preprocessing NW_003334034.2] Last: 0:00:00.004736 \tTotal: 0:00:54.596250\n",[m
[32m+[m[32m      "[Preprocessing NW_003336507.1] Last: 0:00:00.004020 \tTotal: 0:00:54.600292\n",[m
[32m+[m[32m      "[Preprocessing NW_003336336.1] Last: 0:00:00.004135 \tTotal: 0:00:54.604448\n",[m
[32m+[m[32m      "[Preprocessing NW_008805559.1] Last: 0:00:00.003702 \tTotal: 0:00:54.608171\n",[m
[32m+[m[32m      "[Preprocessing NW_003337062.1] Last: 0:00:00.004627 \tTotal: 0:00:54.612821\n",[m
[32m+[m[32m      "[Preprocessing NW_003336990.1] Last: 0:00:00.003987 \tTotal: 0:00:54.616829\n",[m
[32m+[m[32m      "[Preprocessing NW_003336715.1] Last: 0:00:00.003943 \tTotal: 0:00:54.620811\n",[m
[32m+[m[32m      "[Preprocessing NW_003337071.1] Last: 0:00:00.004101 \tTotal: 0:00:54.624932\n",[m
[32m+[m[32m      "[Preprocessing NW_003336294.1] Last: 0:00:00.004968 \tTotal: 0:00:54.629920\n",[m
[32m+[m[32m      "[Preprocessing NW_003337196.1] Last: 0:00:00.004254 \tTotal: 0:00:54.634194\n",[m
[32m+[m[32m      "[Preprocessing NW_003336387.2] Last: 0:00:00.004013 \tTotal: 0:00:54.638226\n",[m
[32m+[m[32m      "[Preprocessing NW_003336632.1] Last: 0:00:00.003594 \tTotal: 0:00:54.641838\n",[m
[32m+[m[32m      "[Preprocessing NW_003337120.1] Last: 0:00:00.004383 \tTotal: 0:00:54.646239\n",[m
[32m+[m[32m      "[Preprocessing NW_003337138.1] Last: 0:00:00.004158 \tTotal: 0:00:54.650416\n",[m
[32m+[m[32m      "[Preprocessing NW_003336864.1] Last: 0:00:00.003573 \tTotal: 0:00:54.654007\n",[m
[32m+[m[32m      "[Preprocessing NW_008805480.1] Last: 0:00:00.003862 \tTotal: 0:00:54.657891\n",[m
[32m+[m[32m      "[Preprocessing NW_003336698.1] Last: 0:00:00.003620 \tTotal: 0:00:54.661530\n",[m
[32m+[m[32m      "[Preprocessing NW_003336561.2] Last: 0:00:00.004250 \tTotal: 0:00:54.665800\n",[m
[32m+[m[32m      "[Preprocessing NW_003336997.1] Last: 0:00:00.004751 \tTotal: 0:00:54.670571\n",[m
[32m+[m[32m      "[Preprocessing NW_003336490.1] Last: 0:00:00.004447 \tTotal: 0:00:54.675038\n",[m
[32m+[m[32m      "[Preprocessing NW_003334536.1] Last: 0:00:00.004211 \tTotal: 0:00:54.679268\n",[m
[32m+[m[32m      "[Preprocessing NW_003335922.2] Last: 0:00:00.005916 \tTotal: 0:00:54.685203\n",[m
[32m+[m[32m      "[Preprocessing NW_003334666.3] Last: 0:00:00.004806 \tTotal: 0:00:54.690026\n",[m
[32m+[m[32m      "[Preprocessing NW_018394446.1] Last: 0:00:00.004309 \tTotal: 0:00:54.694355\n",[m
[32m+[m[32m      "[Preprocessing NW_003337068.1] Last: 0:00:00.003657 \tTotal: 0:00:54.698033\n",[m
[32m+[m[32m      "[Preprocessing NW_018394447.1] Last: 0:00:00.004474 \tTotal: 0:00:54.702528\n",[m
[32m+[m[32m      "[Preprocessing NW_003336376.1] Last: 0:00:00.004601 \tTotal: 0:00:54.707148\n",[m
[32m+[m[32m      "[Preprocessing NW_003337205.1] Last: 0:00:00.005876 \tTotal: 0:00:54.713045\n",[m
[32m+[m[32m      "[Preprocessing NW_003335385.1] Last: 0:00:00.006559 \tTotal: 0:00:54.719626\n",[m
[32m+[m[32m      "[Preprocessing NW_003336867.1] Last: 0:00:00.004950 \tTotal: 0:00:54.724598\n",[m
[32m+[m[32m      "[Preprocessing NW_003336461.1] Last: 0:00:00.005356 \tTotal: 0:00:54.729973\n",[m
[32m+[m[32m      "[Preprocessing NW_003337046.1] Last: 0:00:00.007798 \tTotal: 0:00:54.737791\n",[m
[32m+[m[32m      "[Preprocessing NW_003336978.1] Last: 0:00:00.004067 \tTotal: 0:00:54.741879\n",[m
[32m+[m[32m      "[Preprocessing NW_018394448.1] Last: 0:00:00.004185 \tTotal: 0:00:54.746084\n",[m
[32m+[m[32m      "[Preprocessing NW_003337188.1] Last: 0:00:00.004312 \tTotal: 0:00:54.750415\n",[m
[32m+[m[32m      "[Preprocessing NW_003337220.1] Last: 0:00:00.004702 \tTotal: 0:00:54.755137\n",[m
[32m+[m[32m      "[Preprocessing NW_003337199.1] Last: 0:00:00.004326 \tTotal: 0:00:54.759484\n",[m
[32m+[m[32m      "[Preprocessing NW_008805579.1] Last: 0:00:00.005800 \tTotal: 0:00:54.765306\n",[m
[32m+[m[32m      "[Preprocessing NW_003336586.1] Last: 0:00:00.006479 \tTotal: 0:00:54.771808\n",[m
[32m+[m[32m      "[Preprocessing NW_003337096.1] Last: 0:00:00.005440 \tTotal: 0:00:54.777270\n",[m
[32m+[m[32m      "[Preprocessing NW_003336633.1] Last: 0:00:00.005766 \tTotal: 0:00:54.783057\n",[m
[32m+[m[32m      "[Preprocessing NW_018394449.1] Last: 0:00:00.005040 \tTotal: 0:00:54.788117\n",[m
[32m+[m[32m      "[Preprocessing NW_003334452.1] Last: 0:00:00.005759 \tTotal: 0:00:54.793895\n",[m
[32m+[m[32m      "[Preprocessing NW_008805508.1] Last: 0:00:00.005582 \tTotal: 0:00:54.799512\n",[m
[32m+[m[32m      "[Preprocessing NW_003336946.1] Last: 0:00:00.004281 \tTotal: 0:00:54.803815\n",[m
[32m+[m[32m      "[Preprocessing NW_003336903.1] Last: 0:00:00.004747 \tTotal: 0:00:54.808583\n",[m
[32m+[m[32m      "[Preprocessing NW_003336665.1] Last: 0:00:00.004585 \tTotal: 0:00:54.813187\n",[m
[32m+[m[32m      "[Preprocessing NW_003336848.1] Last: 0:00:00.005407 \tTotal: 0:00:54.818614\n",[m
[32m+[m[32m      "[Preprocessing NW_003336996.1] Last: 0:00:00.004689 \tTotal: 0:00:54.823322\n",[m
[32m+[m[32m      "[Preprocessing NW_018394450.1] Last: 0:00:00.005470 \tTotal: 0:00:54.828811\n",[m
[32m+[m[32m      "[Preprocessing NW_008805563.1] Last: 0:00:00.004658 \tTotal: 0:00:54.833487\n",[m
[32m+[m[32m      "[Preprocessing NW_003337200.1] Last: 0:00:00.006842 \tTotal: 0:00:54.840348\n",[m
[32m+[m[32m      "[Preprocessing NW_003337041.1] Last: 0:00:00.005006 \tTotal: 0:00:54.845387\n",[m
[32m+[m[32m      "[Preprocessing NW_008805423.1] Last: 0:00:00.004246 \tTotal: 0:00:54.849654\n",[m
[32m+[m[32m      "[Preprocessing NW_003337006.1] Last: 0:00:00.006393 \tTotal: 0:00:54.856067\n",[m
[32m+[m[32m      "[Preprocessing NW_003336437.1] Last: 0:00:00.004397 \tTotal: 0:00:54.860485\n",[m
[32m+[m[32m      "[Preprocessing NW_003335146.1] Last: 0:00:00.003676 \tTotal: 0:00:54.864181\n",[m
[32m+[m[32m      "[Preprocessing NW_003334875.1] Last: 0:00:00.005105 \tTotal: 0:00:54.869306\n",[m
[32m+[m[32m      "[Preprocessing NW_003335043.1] Last: 0:00:00.007782 \tTotal: 0:00:54.877107\n",[m
[32m+[m[32m      "[Preprocessing NW_003337144.1] Last: 0:00:00.005360 \tTotal: 0:00:54.882488\n",[m
[32m+[m[32m      "[Preprocessing NW_001884381.4] Last: 0:00:00.008536 \tTotal: 0:00:54.891045\n",[m
[32m+[m[32m      "[Preprocessing NW_003336591.1] Last: 0:00:00.004561 \tTotal: 0:00:54.895626\n",[m
[32m+[m[32m      "[Preprocessing NW_003336834.1] Last: 0:00:00.003687 \tTotal: 0:00:54.899331\n",[m
[32m+[m[32m      "[Preprocessing NW_003334243.2] Last: 0:00:00.004928 \tTotal: 0:00:54.904277\n",[m
[32m+[m[32m      "[Preprocessing NW_003336311.1] Last: 0:00:00.004598 \tTotal: 0:00:54.908897\n",[m
[32m+[m[32m      "[Preprocessing NW_003337125.1] Last: 0:00:00.004975 \tTotal: 0:00:54.913894\n",[m
[32m+[m[32m      "[Preprocessing NW_003336663.1] Last: 0:00:00.006903 \tTotal: 0:00:54.920818\n",[m
[32m+[m[32m      "[Preprocessing NW_008805406.1] Last: 0:00:00.003862 \tTotal: 0:00:54.924701\n",[m
[32m+[m[32m      "[Preprocessing NW_003336878.3] Last: 0:00:00.004584 \tTotal: 0:00:54.929303\n",[m
[32m+[m[32m      "[Preprocessing NW_003334899.1] Last: 0:00:00.005241 \tTotal: 0:00:54.934564\n",[m
[32m+[m[32m      "[Preprocessing NW_003337203.1] Last: 0:00:00.006406 \tTotal: 0:00:54.940991\n",[m
[32m+[m[32m      "[Preprocessing NW_003336543.1] Last: 0:00:00.006339 \tTotal: 0:00:54.947352\n",[m
[32m+[m[32m      "[Preprocessing NW_003336886.1] Last: 0:00:00.004122 \tTotal: 0:00:54.951495\n",[m
[32m+[m[32m      "[Preprocessing NW_008805424.1] Last: 0:00:00.004081 \tTotal: 0:00:54.955596\n",[m
[32m+[m[32m      "[Preprocessing NW_003334852.2] Last: 0:00:00.004376 \tTotal: 0:00:54.959993\n",[m
[32m+[m[32m      "[Preprocessing NW_003337156.1] Last: 0:00:00.004452 \tTotal: 0:00:54.964467\n",[m
[32m+[m[32m      "[Preprocessing NW_003336959.1] Last: 0:00:00.004742 \tTotal: 0:00:54.969231\n",[m
[32m+[m[32m      "[Preprocessing NW_003336563.1] Last: 0:00:00.005508 \tTotal: 0:00:54.974760\n",[m
[32m+[m[32m      "[Preprocessing NW_003335149.2] Last: 0:00:00.005144 \tTotal: 0:00:54.979925\n",[m
[32m+[m[32m      "[Preprocessing NW_003336989.1] Last: 0:00:00.003793 \tTotal: 0:00:54.983738\n",[m
[32m+[m[32m      "[Preprocessing NW_003336670.1] Last: 0:00:00.005277 \tTotal: 0:00:54.989036\n",[m
[32m+[m[32m      "[Preprocessing NW_003336808.1] Last: 0:00:00.004929 \tTotal: 0:00:54.993987\n",[m
[32m+[m[32m      "[Preprocessing NW_003336066.1] Last: 0:00:00.004168 \tTotal: 0:00:54.998176\n",[m
[32m+[m[32m      "[Preprocessing NW_003337233.1] Last: 0:00:00.005081 \tTotal: 0:00:55.003277\n",[m
[32m+[m[32m      "[Preprocessing NW_003336308.1] Last: 0:00:00.004709 \tTotal: 0:00:55.008005\n",[m
[32m+[m[32m      "[Preprocessing NW_018394451.1] Last: 0:00:00.005076 \tTotal: 0:00:55.013102\n",[m
[32m+[m[32m      "[Preprocessing NW_018394452.1] Last: 0:00:00.004139 \tTotal: 0:00:55.017263\n",[m
[32m+[m[32m      "[Preprocessing NW_003337002.1] Last: 0:00:00.004569 \tTotal: 0:00:55.021853\n",[m
[32m+[m[32m      "[Preprocessing NW_008805478.1] Last: 0:00:00.004278 \tTotal: 0:00:55.026151\n",[m
[32m+[m[32m      "[Preprocessing NW_003336724.1] Last: 0:00:00.004415 \tTotal: 0:00:55.030587\n",[m
[32m+[m[32m      "[Preprocessing NW_018394453.1] Last: 0:00:00.003842 \tTotal: 0:00:55.034448\n",[m
[32m+[m[32m      "[Preprocessing NW_003337259.1] Last: 0:00:00.004189 \tTotal: 0:00:55.038656\n",[m
[32m+[m[32m      "[Preprocessing NW_003337067.1] Last: 0:00:00.004402 \tTotal: 0:00:55.043079\n",[m
[32m+[m[32m      "[Preprocessing NW_003336685.1] Last: 0:00:00.005382 \tTotal: 0:00:55.048481\n",[m
[32m+[m[32m      "[Preprocessing NW_008805379.1] Last: 0:00:00.005107 \tTotal: 0:00:55.053608\n",[m
[32m+[m[32m      "[Preprocessing NW_003336712.1] Last: 0:00:00.005030 \tTotal: 0:00:55.058657\n",[m
[32m+[m[32m      "[Preprocessing NW_003335907.1] Last: 0:00:00.006071 \tTotal: 0:00:55.064750\n",[m
[32m+[m[32m      "[Preprocessing NW_003336849.1] Last: 0:00:00.005576 \tTotal: 0:00:55.070347\n",[m
[32m+[m[32m      "[Preprocessing NW_003336358.1] Last: 0:00:00.009686 \tTotal: 0:00:55.080055\n",[m
[32m+[m[32m      "[Preprocessing NW_003335647.1] Last: 0:00:00.004115 \tTotal: 0:00:55.084191\n",[m
[32m+[m[32m      "[Preprocessing NW_018394454.1] Last: 0:00:00.004141 \tTotal: 0:00:55.088353\n",[m
[32m+[m[32m      "[Preprocessing NW_003334026.1] Last: 0:00:00.006502 \tTotal: 0:00:55.094877\n",[m
[32m+[m[32m      "[Preprocessing NW_003335052.1] Last: 0:00:00.005091 \tTotal: 0:00:55.099989\n",[m
[32m+[m[32m      "[Preprocessing NW_003336654.1] Last: 0:00:00.006478 \tTotal: 0:00:55.106489\n",[m
[32m+[m[32m      "[Preprocessing NW_003337175.1] Last: 0:00:00.007203 \tTotal: 0:00:55.113715\n",[m
[32m+[m[32m      "[Preprocessing NW_008805541.1] Last: 0:00:00.004437 \tTotal: 0:00:55.118173\n",[m
[32m+[m[32m      "[Preprocessing NW_008805487.1] Last: 0:00:00.005255 \tTotal: 0:00:55.123449\n",[m
[32m+[m[32m      "[Preprocessing NW_003336973.1] Last: 0:00:00.004280 \tTotal: 0:00:55.127750\n",[m
[32m+[m[32m      "[Preprocessing NW_008805438.1] Last: 0:00:00.004442 \tTotal: 0:00:55.132211\n",[m
[32m+[m[32m      "[Preprocessing NW_003336851.1] Last: 0:00:00.004781 \tTotal: 0:00:55.137013\n",[m
[32m+[m[32m      "[Preprocessing NW_008805494.1] Last: 0:00:00.004017 \tTotal: 0:00:55.141049\n",[m
[32m+[m[32m      "[Preprocessing NW_003337115.1] Last: 0:00:00.004665 \tTotal: 0:00:55.145735\n",[m
[32m+[m[32m      "[Preprocessing NW_003336846.1] Last: 0:00:00.004388 \tTotal: 0:00:55.150142\n",[m
[32m+[m[32m      "[Preprocessing NW_003337098.1] Last: 0:00:00.004384 \tTotal: 0:00:55.154546\n",[m
[32m+[m[32m      "[Preprocessing NW_003334071.2] Last: 0:00:00.004673 \tTotal: 0:00:55.159239\n",[m
[32m+[m[32m      "[Preprocessing NW_018394455.1] Last: 0:00:00.003688 \tTotal: 0:00:55.162945\n",[m
[32m+[m[32m      "[Preprocessing NW_003336422.1] Last: 0:00:00.005489 \tTotal: 0:00:55.168454\n",[m
[32m+[m[32m      "[Preprocessing NW_003336580.1] Last: 0:00:00.004430 \tTotal: 0:00:55.172905\n",[m
[32m+[m[32m      "[Preprocessing NW_008805371.1] Last: 0:00:00.004442 \tTotal: 0:00:55.177368\n",[m
[32m+[m[32m      "[Preprocessing NW_008805570.1] Last: 0:00:00.004796 \tTotal: 0:00:55.182194\n",[m
[32m+[m[32m      "[Preprocessing NW_008805539.1] Last: 0:00:00.004496 \tTotal: 0:00:55.186708\n",[m
[32m+[m[32m      "[Preprocessing NW_003336264.2] Last: 0:00:00.004739 \tTotal: 0:00:55.191467\n",[m
[32m+[m[32m      "[Preprocessing NW_018394456.1] Last: 0:00:00.008553 \tTotal: 0:00:55.200042\n",[m
[32m+[m[32m      "[Preprocessing NW_018394457.1] Last: 0:00:00.004620 \tTotal: 0:00:55.204682\n",[m
[32m+[m[32m      "[Preprocessing NW_018394458.1] Last: 0:00:00.024780 \tTotal: 0:00:55.229484\n",[m
[32m+[m[32m      "[Preprocessing NW_018394459.1] Last: 0:00:00.007502 \tTotal: 0:00:55.237007\n",[m
[32m+[m[32m      "[Preprocessing NW_001884386.4] Last: 0:00:00.007639 \tTotal: 0:00:55.244667\n",[m
[32m+[m[32m      "[Preprocessing NW_001879289.5] Last: 0:00:00.008609 \tTotal: 0:00:55.253298\n",[m
[32m+[m[32m      "[Preprocessing NW_001884442.4] Last: 0:00:00.004187 \tTotal: 0:00:55.257504\n",[m
[32m+[m[32m      "[Preprocessing NW_001878128.4] Last: 0:00:00.011970 \tTotal: 0:00:55.269496\n",[m
[32m+[m[32m      "[Preprocessing NW_003040715.4] Last: 0:00:00.016380 \tTotal: 0:00:55.285899\n",[m
[32m+[m[32m      "[Preprocessing NW_001878118.5] Last: 0:00:00.010931 \tTotal: 0:00:55.296853\n",[m
[32m+[m[32m      "[Preprocessing NW_003336270.3] Last: 0:00:00.009299 \tTotal: 0:00:55.306176\n",[m
[32m+[m[32m      "[Preprocessing NW_001878780.5] Last: 0:00:00.010122 \tTotal: 0:00:55.316323\n",[m
[32m+[m[32m      "[Preprocessing NW_003039389.3] Last: 0:00:00.034136 \tTotal: 0:00:55.350487\n",[m
[32m+[m[32m      "[Preprocessing NW_003044888.3] Last: 0:00:00.021173 \tTotal: 0:00:55.371688\n",[m
[32m+[m[32m      "[Preprocessing NW_001884400.4] Last: 0:00:00.008637 \tTotal: 0:00:55.380352\n",[m
[32m+[m[32m      "[Preprocessing NW_001884413.3] Last: 0:00:00.014338 \tTotal: 0:00:55.394717\n",[m
[32m+[m[32m      "[Preprocessing NW_001884452.4] Last: 0:00:00.009722 \tTotal: 0:00:55.404463\n",[m
[32m+[m[32m      "[Preprocessing NW_001878251.4] Last: 0:00:00.008938 \tTotal: 0:00:55.413425\n",[m
[32m+[m[32m      "[Preprocessing NW_001884427.4] Last: 0:00:00.011542 \tTotal: 0:00:55.424990\n",[m
[32m+[m[32m      "[Preprocessing NW_001884533.5] Last: 0:00:00.011475 \tTotal: 0:00:55.436488\n",[m
[32m+[m[32m      "[Preprocessing NW_001884441.4] Last: 0:00:00.005942 \tTotal: 0:00:55.442453\n",[m
[32m+[m[32m      "[Preprocessing NW_018394460.1] Last: 0:00:00.013378 \tTotal: 0:00:55.455854\n",[m
[32m+[m[32m      "[Preprocessing NW_018394461.1] Last: 0:00:00.014900 \tTotal: 0:00:55.470778\n",[m
[32m+[m[32m      "[Preprocessing NW_018394462.1] Last: 0:00:00.013879 \tTotal: 0:00:55.484681\n",[m
[32m+[m[32m      "[Preprocessing NW_018394463.1] Last: 0:00:00.014874 \tTotal: 0:00:55.499581\n",[m
[32m+[m[32m      "[Preprocessing NW_018394464.1] Last: 0:00:00.011503 \tTotal: 0:00:55.511109\n",[m
[32m+[m[32m      "[Preprocessing NW_018394465.1] Last: 0:00:00.012381 \tTotal: 0:00:55.523514\n",[m
[32m+[m[32m      "[Preprocessing NW_018394466.1] Last: 0:00:00.009485 \tTotal: 0:00:55.533024\n",[m
[32m+[m[32m      "[Preprocessing NW_018394467.1] Last: 0:00:00.013586 \tTotal: 0:00:55.546633\n",[m
[32m+[m[32m      "[Preprocessing NW_018394468.1] Last: 0:00:00.012418 \tTotal: 0:00:55.559074\n",[m
[32m+[m[32m      "[Preprocessing NW_018394469.1] Last: 0:00:00.014885 \tTotal: 0:00:55.573984\n",[m
[32m+[m[32m      "[Preprocessing NW_018394470.1] Last: 0:00:00.016375 \tTotal: 0:00:55.590393\n",[m
[32m+[m[32m      "[Preprocessing NW_018394471.1] Last: 0:00:00.011309 \tTotal: 0:00:55.601727\n",[m
[32m+[m[32m      "[Preprocessing NW_018394472.1] Last: 0:00:00.012569 \tTotal: 0:00:55.614322\n",[m
[32m+[m[32m      "[Preprocessing NW_018394473.1] Last: 0:00:00.018487 \tTotal: 0:00:55.632835\n",[m
[32m+[m[32m      "[Preprocessing NW_018394474.1] Last: 0:00:00.013738 \tTotal: 0:00:55.646598\n",[m
[32m+[m[32m      "[Preprocessing NW_018394475.1] Last: 0:00:00.016816 \tTotal: 0:00:55.663440\n",[m
[32m+[m[32m      "[Preprocessing NW_018394476.1] Last: 0:00:00.015472 \tTotal: 0:00:55.678940\n",[m
[32m+[m[32m      "[Preprocessing NW_018394477.1] Last: 0:00:00.012843 \tTotal: 0:00:55.691809\n",[m
[32m+[m[32m      "[Preprocessing NW_018394478.1] Last: 0:00:00.012112 \tTotal: 0:00:55.703945\n",[m
[32m+[m[32m      "[Preprocessing NW_018394479.1] Last: 0:00:00.013486 \tTotal: 0:00:55.717458\n",[m
[32m+[m[32m      "[Preprocessing NW_018394480.1] Last: 0:00:00.010151 \tTotal: 0:00:55.727636\n",[m
[32m+[m[32m      "[Preprocessing NW_018394481.1] Last: 0:00:00.016041 \tTotal: 0:00:55.743704\n",[m
[32m+[m[32m      "[Preprocessing NW_018394482.1] Last: 0:00:00.015295 \tTotal: 0:00:55.759024\n",[m
[32m+[m[32m      "[Preprocessing NW_018394483.1] Last: 0:00:00.023325 \tTotal: 0:00:55.782393\n",[m
[32m+[m[32m      "[Preprocessing NW_018394484.1] Last: 0:00:00.017752 \tTotal: 0:00:55.800181\n",[m
[32m+[m[32m      "[Preprocessing NW_018394485.1] Last: 0:00:00.014416 \tTotal: 0:00:55.814626\n",[m
[32m+[m[32m      "[Preprocessing NW_018394486.1] Last: 0:00:00.015157 \tTotal: 0:00:55.829808\n",[m
[32m+[m[32m      "[Preprocessing NW_018394487.1] Last: 0:00:00.013442 \tTotal: 0:00:55.843275\n",[m
[32m+[m[32m      "[Preprocessing NW_018394488.1] Last: 0:00:00.012133 \tTotal: 0:00:55.855434\n",[m
[32m+[m[32m      "[Preprocessing NW_018394489.1] Last: 0:00:00.013416 \tTotal: 0:00:55.868874\n",[m
[32m+[m[32m      "[Preprocessing NW_018394490.1] Last: 0:00:00.014771 \tTotal: 0:00:55.883673\n",[m
[32m+[m[32m      "[Preprocessing NW_018394491.1] Last: 0:00:00.016903 \tTotal: 0:00:55.900604\n",[m
[32m+[m[32m      "[Preprocessing NW_018394492.1] Last: 0:00:00.014120 \tTotal: 0:00:55.914750\n",[m
[32m+[m[32m      "[Preprocessing NW_018394493.1] Last: 0:00:00.019567 \tTotal: 0:00:55.934344\n",[m
[32m+[m[32m      "[Preprocessing NW_018394494.1] Last: 0:00:00.014920 \tTotal: 0:00:55.949290\n",[m
[32m+[m[32m      "[Preprocessing NW_018394495.1] Last: 0:00:00.013310 \tTotal: 0:00:55.962627\n",[m
[32m+[m[32m      "[Preprocessing NW_018394496.1] Last: 0:00:00.010606 \tTotal: 0:00:55.973261\n",[m
[32m+[m[32m      "[Preprocessing NW_018394497.1] Last: 0:00:00.016057 \tTotal: 0:00:55.989345\n",[m
[32m+[m[32m      "[Preprocessing NW_018394498.1] Last: 0:00:00.010414 \tTotal: 0:00:55.999785\n",[m
[32m+[m[32m      "[Preprocessing NW_018394499.1] Last: 0:00:00.009772 \tTotal: 0:00:56.009585\n",[m
[32m+[m[32m      "[Preprocessing NW_018394500.1] Last: 0:00:00.013500 \tTotal: 0:00:56.023113\n",[m
[32m+[m[32m      "[Preprocessing NW_018394501.1] Last: 0:00:00.010597 \tTotal: 0:00:56.033736\n",[m
[32m+[m[32m      "[Preprocessing NW_018394502.1] Last: 0:00:00.010585 \tTotal: 0:00:56.044346\n",[m
[32m+[m[32m      "[Preprocessing NW_018394503.1] Last: 0:00:00.009224 \tTotal: 0:00:56.053595\n",[m
[32m+[m[32m      "[Preprocessing NW_018394504.1] Last: 0:00:00.016442 \tTotal: 0:00:56.070060\n",[m
[32m+[m[32m      "[Preprocessing NW_018394505.1] Last: 0:00:00.008609 \tTotal: 0:00:56.078691\n",[m
[32m+[m[32m      "[Preprocessing NW_018394506.1] Last: 0:00:00.021133 \tTotal: 0:00:56.099854\n",[m
[32m+[m[32m      "[Preprocessing NW_018394507.1] Last: 0:00:00.016794 \tTotal: 0:00:56.116681\n",[m
[32m+[m[32m      "[Preprocessing NW_018394508.1] Last: 0:00:00.014951 \tTotal: 0:00:56.131662\n",[m
[32m+[m[32m      "[Preprocessing NW_018394509.1] Last: 0:00:00.012364 \tTotal: 0:00:56.144052\n",[m
[32m+[m[32m      "[Preprocessing NW_018394510.1] Last: 0:00:00.013796 \tTotal: 0:00:56.157873\n",[m
[32m+[m[32m      "[Preprocessing NW_018394511.1] Last: 0:00:00.014572 \tTotal: 0:00:56.172469\n",[m
[32m+[m[32m      "[Preprocessing NW_018394512.1] Last: 0:00:00.014413 \tTotal: 0:00:56.186907\n",[m
[32m+[m[32m      "[Preprocessing NW_018394513.1] Last: 0:00:00.015093 \tTotal: 0:00:56.202025\n",[m
[32m+[m[32m      "[Preprocessing NW_018394514.1] Last: 0:00:00.011571 \tTotal: 0:00:56.213622\n",[m
[32m+[m[32m      "[Preprocessing NW_018394515.1] Last: 0:00:00.015852 \tTotal: 0:00:56.229499\n",[m
[32m+[m[32m      "[Preprocessing NW_018394545.1] Last: 0:00:00.014443 \tTotal: 0:00:56.243966\n",[m
[32m+[m[32m      "[Preprocessing NW_018394516.1] Last: 0:00:00.008680 \tTotal: 0:00:56.252669\n",[m
[32m+[m[32m      "[Preprocessing NW_018394517.1] Last: 0:00:00.013009 \tTotal: 0:00:56.265701\n",[m
[32m+[m[32m      "[Preprocessing NW_018394518.1] Last: 0:00:00.009161 \tTotal: 0:00:56.274883\n",[m
[32m+[m[32m      "[Preprocessing NW_018394519.1] Last: 0:00:00.008480 \tTotal: 0:00:56.283393\n",[m
[32m+[m[32m      "[Preprocessing NW_018394546.1] Last: 0:00:00.015313 \tTotal: 0:00:56.298730\n",[m
[32m+[m[32m      "[Preprocessing NW_018394520.1] Last: 0:00:00.011872 \tTotal: 0:00:56.310626\n",[m
[32m+[m[32m      "[Preprocessing NW_018394521.1] Last: 0:00:00.010772 \tTotal: 0:00:56.321421\n",[m
[32m+[m[32m      "[Preprocessing NW_018394522.1] Last: 0:00:00.009477 \tTotal: 0:00:56.330922\n",[m
[32m+[m[32m      "[Preprocessing NW_018394523.1] Last: 0:00:00.012971 \tTotal: 0:00:56.343916\n",[m
[32m+[m[32m      "[Preprocessing NW_018394524.1] Last: 0:00:00.013646 \tTotal: 0:00:56.357589\n",[m
[32m+[m[32m      "[Preprocessing NW_018394525.1] Last: 0:00:00.015325 \tTotal: 0:00:56.372940\n",[m
[32m+[m[32m      "[Preprocessing NW_018394526.1] Last: 0:00:00.009890 \tTotal: 0:00:56.382857\n",[m
[32m+[m[32m      "[Preprocessing NW_018394527.1] Last: 0:00:00.018912 \tTotal: 0:00:56.401794\n",[m
[32m+[m[32m      "[Preprocessing NW_018394528.1] Last: 0:00:00.006189 \tTotal: 0:00:56.408008\n",[m
[32m+[m[32m      "[Preprocessing NW_018394529.1] Last: 0:00:00.013126 \tTotal: 0:00:56.421158\n",[m
[32m+[m[32m      "[Preprocessing NW_018394530.1] Last: 0:00:00.028149 \tTotal: 0:00:56.449332\n",[m
[32m+[m[32m      "[Preprocessing NW_018394531.1] Last: 0:00:00.014828 \tTotal: 0:00:56.464186\n",[m
[32m+[m[32m      "[Preprocessing NW_018394532.1] Last: 0:00:00.015576 \tTotal: 0:00:56.479786\n",[m
[32m+[m[32m      "[Preprocessing NW_018394533.1] Last: 0:00:00.018507 \tTotal: 0:00:56.498318\n",[m
[32m+[m[32m      "[Preprocessing NW_018394534.1] Last: 0:00:00.010957 \tTotal: 0:00:56.509302\n",[m
[32m+[m[32m      "[Preprocessing NW_018394535.1] Last: 0:00:00.014704 \tTotal: 0:00:56.524033\n",[m
[32m+[m[32m      "[Preprocessing NW_018394541.1] Last: 0:00:00.011693 \tTotal: 0:00:56.535754\n",[m
[32m+[m[32m      "[Preprocessing NW_018394536.1] Last: 0:00:00.014518 \tTotal: 0:00:56.550301\n",[m
[32m+[m[32m      "[Preprocessing NW_018394537.1] Last: 0:00:00.010743 \tTotal: 0:00:56.561071\n",[m
[32m+[m[32m      "[Preprocessing NW_018394538.1] Last: 0:00:00.012972 \tTotal: 0:00:56.574068\n",[m
[32m+[m[32m      "[Preprocessing NW_018394539.1] Last: 0:00:00.017652 \tTotal: 0:00:56.591744\n",[m
[32m+[m[32m      "[Preprocessing NW_018394540.1] Last: 0:00:00.011292 \tTotal: 0:00:56.603063\n",[m
[32m+[m[32m      "[Preprocessing NW_018394542.1] Last: 0:00:00.015042 \tTotal: 0:00:56.618134\n",[m
[32m+[m[32m      "[Preprocessing NW_018394543.1] Last: 0:00:00.011629 \tTotal: 0:00:56.629790\n",[m
[32m+[m[32m      "[Preprocessing NW_018394544.1] Last: 0:00:00.011017 \tTotal: 0:00:56.640833\n",[m
[32m+[m[32m      "[Preprocessing NW_018394547.1] Last: 0:00:00.007317 \tTotal: 0:00:56.648174\n",[m
[32m+[m[32m      "[Preprocessing NW_018394548.1] Last: 0:00:00.014555 \tTotal: 0:00:56.662756\n",[m
[32m+[m[32m      "[Preprocessing NW_018394549.1] Last: 0:00:00.013506 \tTotal: 0:00:56.676286\n",[m
[32m+[m[32m      "[Preprocessing NW_018394550.1] Last: 0:00:00.013210 \tTotal: 0:00:56.689521\n",[m
[32m+[m[32m      "[Preprocessing NW_018394551.1] Last: 0:00:00.018318 \tTotal: 0:00:56.707870\n",[m
[32m+[m[32m      "[Preprocessing NW_018394552.1] Last: 0:00:00.014502 \tTotal: 0:00:56.722409\n",[m
[32m+[m[32m      "[Preprocessing NW_018394553.1] Last: 0:00:00.013653 \tTotal: 0:00:56.736095\n",[m
[32m+[m[32m      "[Preprocessing NW_018394554.1] Last: 0:00:00.012746 \tTotal: 0:00:56.748867\n",[m
[32m+[m[32m      "[Preprocessing NW_018394555.1] Last: 0:00:00.011803 \tTotal: 0:00:56.760696\n",[m
[32m+[m[32m      "[Preprocessing NW_018394556.1] Last: 0:00:00.015721 \tTotal: 0:00:56.776443\n",[m
[32m+[m[32m      "[Preprocessing NW_018394557.1] Last: 0:00:00.010519 \tTotal: 0:00:56.786988\n",[m
[32m+[m[32m      "[Preprocessing NW_018394558.1] Last: 0:00:00.013148 \tTotal: 0:00:56.800161\n",[m
[32m+[m[32m      "[Preprocessing NW_018394559.1] Last: 0:00:00.015123 \tTotal: 0:00:56.815310\n",[m
[32m+[m[32m      "[Preprocessing NW_018394560.1] Last: 0:00:00.011427 \tTotal: 0:00:56.826762\n",[m
[32m+[m[32m      "[Preprocessing NW_018394561.1] Last: 0:00:00.009147 \tTotal: 0:00:56.835934\n",[m
[32m+[m[32m      "[Preprocessing NW_018394562.1] Last: 0:00:00.011860 \tTotal: 0:00:56.847820\n",[m
[32m+[m[32m      "[Preprocessing NW_018394563.1] Last: 0:00:00.010664 \tTotal: 0:00:56.858509\n",[m
[32m+[m[32m      "[Preprocessing NW_018394564.1] Last: 0:00:00.016228 \tTotal: 0:00:56.874765\n",[m
[32m+[m[32m      "[Preprocessing NW_018394565.1] Last: 0:00:00.011028 \tTotal: 0:00:56.885819\n",[m
[32m+[m[32m      "[Preprocessing NW_018394566.1] Last: 0:00:00.012149 \tTotal: 0:00:56.897994\n",[m
[32m+[m[32m      "[Preprocessing NW_018394567.1] Last: 0:00:00.012359 \tTotal: 0:00:56.910385\n",[m
[32m+[m[32m      "[Preprocessing NW_018394568.1] Last: 0:00:00.011453 \tTotal: 0:00:56.921861\n",[m
[32m+[m[32m      "[Preprocessing NW_018394569.1] Last: 0:00:00.016529 \tTotal: 0:00:56.938415\n",[m
[32m+[m[32m      "[Preprocessing NW_018394570.1] Last: 0:00:00.015023 \tTotal: 0:00:56.953463\n",[m
[32m+[m[32m      "[Preprocessing NW_018394571.1] Last: 0:00:00.015971 \tTotal: 0:00:56.969458\n",[m
[32m+[m[32m      "[Preprocessing NW_018394572.1] Last: 0:00:00.016790 \tTotal: 0:00:56.986273\n",[m
[32m+[m[32m      "[Preprocessing NW_018394573.1] Last: 0:00:00.013134 \tTotal: 0:00:56.999431\n",[m
[32m+[m[32m      "[Preprocessing NW_018394574.1] Last: 0:00:00.014334 \tTotal: 0:00:57.013788\n",[m
[32m+[m[32m      "[Preprocessing NW_018394575.1] Last: 0:00:00.014285 \tTotal: 0:00:57.028097\n",[m
[32m+[m[32m      "[Preprocessing NW_018394576.1] Last: 0:00:00.016372 \tTotal: 0:00:57.044494\n",[m
[32m+[m[32m      "[Preprocessing NW_018394577.1] Last: 0:00:00.015766 \tTotal: 0:00:57.060284\n",[m
[32m+[m[32m      "[Preprocessing NW_018394578.1] Last: 0:00:00.015622 \tTotal: 0:00:57.075931\n",[m
[32m+[m[32m      "[Preprocessing NW_018394579.1] Last: 0:00:00.009776 \tTotal: 0:00:57.085731\n",[m
[32m+[m[32m      "[Preprocessing NW_018394580.1] Last: 0:00:00.014058 \tTotal: 0:00:57.099812\n",[m
[32m+[m[32m      "[Preprocessing NW_018394581.1] Last: 0:00:00.009297 \tTotal: 0:00:57.109134\n",[m
[32m+[m[32m      "[Preprocessing NW_018394582.1] Last: 0:00:00.010431 \tTotal: 0:00:57.119590\n",[m
[32m+[m[32m      "[Preprocessing NW_018394583.1] Last: 0:00:00.014650 \tTotal: 0:00:57.134266\n",[m
[32m+[m[32m      "[Preprocessing NW_018394584.1] Last: 0:00:00.013515 \tTotal: 0:00:57.147805\n",[m
[32m+[m[32m      "[Preprocessing NW_018394585.1] Last: 0:00:00.012513 \tTotal: 0:00:57.160342\n",[m
[32m+[m[32m      "[Preprocessing NW_018394586.1] Last: 0:00:00.019672 \tTotal: 0:00:57.180038\n",[m
[32m+[m[32m      "[Preprocessing NW_018394587.1] Last: 0:00:00.011317 \tTotal: 0:00:57.191386\n",[m
[32m+[m[32m      "[Preprocessing NW_018394588.1] Last: 0:00:00.025288 \tTotal: 0:00:57.216705\n",[m
[32m+[m[32m      "[Preprocessing NW_018394589.1] Last: 0:00:00.012324 \tTotal: 0:00:57.229059\n",[m
[32m+[m[32m      "[Preprocessing NW_018394590.1] Last: 0:00:00.012190 \tTotal: 0:00:57.241275\n",[m
[32m+[m[32m      "[Preprocessing NW_018394591.1] Last: 0:00:00.015033 \tTotal: 0:00:57.256335\n",[m
[32m+[m[32m      "[Preprocessing NW_018394592.1] Last: 0:00:00.019427 \tTotal: 0:00:57.275789\n",[m
[32m+[m[32m      "[Preprocessing NW_018394593.1] Last: 0:00:00.010426 \tTotal: 0:00:57.286239\n",[m
[32m+[m[32m      "[Preprocessing NW_018394594.1] Last: 0:00:00.012991 \tTotal: 0:00:57.299253\n",[m
[32m+[m[32m      "[Preprocessing NW_018394595.1] Last: 0:00:00.020673 \tTotal: 0:00:57.319951\n",[m
[32m+[m[32m      "[Preprocessing NW_018394596.1] Last: 0:00:00.015457 \tTotal: 0:00:57.335432\n",[m
[32m+[m[32m      "[Preprocessing NW_018394597.1] Last: 0:00:00.012416 \tTotal: 0:00:57.347873\n",[m
[32m+[m[32m      "[Preprocessing NW_018394598.1] Last: 0:00:00.024351 \tTotal: 0:00:57.372249\n",[m
[32m+[m[32m      "[Preprocessing NW_018394599.1] Last: 0:00:00.017389 \tTotal: 0:00:57.389663\n",[m
[32m+[m[32m      "[Preprocessing NW_018394600.1] Last: 0:00:00.009925 \tTotal: 0:00:57.399612\n",[m
[32m+[m[32m      "[Preprocessing NW_018394601.1] Last: 0:00:00.015553 \tTotal: 0:00:57.415190\n",[m
[32m+[m[32m      "[Preprocessing NW_018394602.1] Last: 0:00:00.018045 \tTotal: 0:00:57.433261\n",[m
[32m+[m[32m      "[Preprocessing NW_018394603.1] Last: 0:00:00.014821 \tTotal: 0:00:57.448107\n",[m
[32m+[m[32m      "[Preprocessing NW_018394604.1] Last: 0:00:00.013977 \tTotal: 0:00:57.462107\n",[m
[32m+[m[32m      "[Preprocessing NW_018394605.1] Last: 0:00:00.010361 \tTotal: 0:00:57.472492\n",[m
[32m+[m[32m      "[Preprocessing NW_018394606.1] Last: 0:00:00.008921 \tTotal: 0:00:57.481438\n",[m
[32m+[m[32m      "[Preprocessing NW_018394607.1] Last: 0:00:00.011892 \tTotal: 0:00:57.493355\n",[m
[32m+[m[32m      "[Preprocessing NW_018394608.1] Last: 0:00:00.009968 \tTotal: 0:00:57.503348\n",[m
[32m+[m[32m      "[Preprocessing NW_018394609.1] Last: 0:00:00.047316 \tTotal: 0:00:57.550691\n",[m
[32m+[m[32m      "[Preprocessing NW_018394610.1] Last: 0:00:00.017209 \tTotal: 0:00:57.567929\n",[m
[32m+[m[32m      "[Preprocessing NW_018394611.1] Last: 0:00:00.017369 \tTotal: 0:00:57.585325\n",[m
[32m+[m[32m      "[Preprocessing NW_018394612.1] Last: 0:00:00.012420 \tTotal: 0:00:57.597771\n",[m
[32m+[m[32m      "[Preprocessing NW_018394613.1] Last: 0:00:00.011798 \tTotal: 0:00:57.609594\n",[m
[32m+[m[32m      "[Preprocessing NW_018394614.1] Last: 0:00:00.013390 \tTotal: 0:00:57.623012\n",[m
[32m+[m[32m      "[Preprocessing NW_018394615.1] Last: 0:00:00.011871 \tTotal: 0:00:57.634910\n",[m
[32m+[m[32m      "[Preprocessing NW_018394616.1] Last: 0:00:00.012398 \tTotal: 0:00:57.647335\n",[m
[32m+[m[32m      "[Preprocessing NW_018394617.1] Last: 0:00:00.017525 \tTotal: 0:00:57.664889\n",[m
[32m+[m[32m      "[Preprocessing NW_018394618.1] Last: 0:00:00.010369 \tTotal: 0:00:57.675283\n",[m
[32m+[m[32m      "[Preprocessing NW_018394619.1] Last: 0:00:00.011966 \tTotal: 0:00:57.687274\n",[m
[32m+[m[32m      "[Preprocessing NW_018394620.1] Last: 0:00:00.010690 \tTotal: 0:00:57.697987\n",[m
[32m+[m[32m      "[Preprocessing NW_018394621.1] Last: 0:00:00.009395 \tTotal: 0:00:57.707404\n",[m
[32m+[m[32m      "[Preprocessing NW_018394622.1] Last: 0:00:00.008999 \tTotal: 0:00:57.716428\n",[m
[32m+[m[32m      "[Preprocessing NW_018394623.1] Last: 0:00:00.010708 \tTotal: 0:00:57.727160\n",[m
[32m+[m[32m      "[Preprocessing NW_018394624.1] Last: 0:00:00.017755 \tTotal: 0:00:57.744941\n",[m
[32m+[m[32m      "[Preprocessing NW_018394625.1] Last: 0:00:00.011578 \tTotal: 0:00:57.756544\n",[m
[32m+[m[32m      "[Preprocessing NW_018394626.1] Last: 0:00:00.012730 \tTotal: 0:00:57.769306\n",[m
[32m+[m[32m      "[Preprocessing NW_018394627.1] Last: 0:00:00.012497 \tTotal: 0:00:57.781828\n",[m
[32m+[m[32m      "[Preprocessing NW_018394628.1] Last: 0:00:00.010190 \tTotal: 0:00:57.792041\n",[m
[32m+[m[32m      "[Preprocessing NW_018394629.1] Last: 0:00:00.013595 \tTotal: 0:00:57.805659\n",[m
[32m+[m[32m      "[Preprocessing NW_018394630.1] Last: 0:00:00.017192 \tTotal: 0:00:57.822876\n",[m
[32m+[m[32m      "[Preprocessing NW_018394631.1] Last: 0:00:00.013811 \tTotal: 0:00:57.836711\n",[m
[32m+[m[32m      "[Preprocessing NW_018394636.1] Last: 0:00:00.013327 \tTotal: 0:00:57.850063\n",[m
[32m+[m[32m      "[Preprocessing NW_018394637.1] Last: 0:00:00.030642 \tTotal: 0:00:57.880735\n",[m
[32m+[m[32m      "[Preprocessing NW_018394638.1] Last: 0:00:00.014931 \tTotal: 0:00:57.895695\n",[m
[32m+[m[32m      "[Preprocessing NW_018394639.1] Last: 0:00:00.010654 \tTotal: 0:00:57.906382\n",[m
[32m+[m[32m      "[Preprocessing NW_018394633.1] Last: 0:00:00.018598 \tTotal: 0:00:57.925007\n",[m
[32m+[m[32m      "[Preprocessing NW_018394634.1] Last: 0:00:00.010295 \tTotal: 0:00:57.935327\n",[m
[32m+[m[32m      "[Preprocessing NW_018394635.1] Last: 0:00:00.020589 \tTotal: 0:00:57.955941\n",[m
[32m+[m[32m      "[Preprocessing NW_018394632.1] Last: 0:00:00.013404 \tTotal: 0:00:57.969369\n",[m
[32m+[m[32m      "[Preprocessing NW_018394640.1] Last: 0:00:00.014844 \tTotal: 0:00:57.984254\n",[m
[32m+[m[32m      "[Preprocessing NW_018394641.1] Last: 0:00:00.011868 \tTotal: 0:00:57.996151\n",[m
[32m+[m[32m      "[Preprocessing NW_018394642.1] Last: 0:00:00.014067 \tTotal: 0:00:58.010245\n",[m
[32m+[m[32m      "[Preprocessing NW_018394643.1] Last: 0:00:00.014934 \tTotal: 0:00:58.025204\n",[m
[32m+[m[32m      "[Preprocessing NW_018394644.1] Last: 0:00:00.011307 \tTotal: 0:00:58.036534\n",[m
[32m+[m[32m      "[Preprocessing NW_018394645.1] Last: 0:00:00.022179 \tTotal: 0:00:58.058738\n",[m
[32m+[m[32m      "[Preprocessing NW_018394646.1] Last: 0:00:00.022030 \tTotal: 0:00:58.080795\n",[m
[32m+[m[32m      "[Preprocessing NW_018394647.1] Last: 0:00:00.014526 \tTotal: 0:00:58.095347\n",[m
[32m+[m[32m      "[Preprocessing NW_018394648.1] Last: 0:00:00.013225 \tTotal: 0:00:58.108597\n",[m
[32m+[m[32m      "[Preprocessing NW_018394649.1] Last: 0:00:00.010586 \tTotal: 0:00:58.119209\n",[m
[32m+[m[32m      "[Preprocessing NW_018394650.1] Last: 0:00:00.018731 \tTotal: 0:00:58.137970\n",[m
[32m+[m[32m      "[Preprocessing NW_018394651.1] Last: 0:00:00.014315 \tTotal: 0:00:58.152314\n",[m
[32m+[m[32m      "[Preprocessing NW_018394652.1] Last: 0:00:00.012289 \tTotal: 0:00:58.164631\n",[m
[32m+[m[32m      "[Preprocessing NW_018394653.1] Last: 0:00:00.014122 \tTotal: 0:00:58.178780\n",[m
[32m+[m[32m      "[Preprocessing NW_018394654.1] Last: 0:00:00.015434 \tTotal: 0:00:58.194240\n",[m
[32m+[m[32m      "[Preprocessing NW_018394655.1] Last: 0:00:00.018700 \tTotal: 0:00:58.212968\n",[m
[32m+[m[32m      "[Preprocessing NW_018394656.1] Last: 0:00:00.013110 \tTotal: 0:00:58.226105\n",[m
[32m+[m[32m      "[Preprocessing NW_018394657.1] Last: 0:00:00.014935 \tTotal: 0:00:58.241066\n",[m
[32m+[m[32m      "[Preprocessing NW_018394658.1] Last: 0:00:00.011424 \tTotal: 0:00:58.252515\n",[m
[32m+[m[32m      "[Preprocessing NW_018394659.1] Last: 0:00:00.018796 \tTotal: 0:00:58.271336\n",[m
[32m+[m[32m      "[Preprocessing NW_018394660.1] Last: 0:00:00.009829 \tTotal: 0:00:58.281191\n",[m
[32m+[m[32m      "[Preprocessing NW_018394661.1] Last: 0:00:00.012556 \tTotal: 0:00:58.293773\n",[m
[32m+[m[32m      "[Preprocessing NW_018394662.1] Last: 0:00:00.015111 \tTotal: 0:00:58.308914\n",[m
[32m+[m[32m      "[Preprocessing NW_018394663.1] Last: 0:00:00.012644 \tTotal: 0:00:58.321588\n",[m
[32m+[m[32m      "[Preprocessing NW_018394664.1] Last: 0:00:00.015852 \tTotal: 0:00:58.337467\n",[m
[32m+[m[32m      "[Preprocessing NW_018394665.1] Last: 0:00:00.011476 \tTotal: 0:00:58.348970\n",[m
[32m+[m[32m      "[Preprocessing NW_018394666.1] Last: 0:00:00.015735 \tTotal: 0:00:58.364730\n",[m
[32m+[m[32m      "[Preprocessing NW_018394667.1] Last: 0:00:00.013602 \tTotal: 0:00:58.378358\n",[m
[32m+[m[32m      "[Preprocessing NW_018394668.1] Last: 0:00:00.017441 \tTotal: 0:00:58.395824\n",[m
[32m+[m[32m      "[Preprocessing NW_018394669.1] Last: 0:00:00.015368 \tTotal: 0:00:58.411217\n",[m
[32m+[m[32m      "[Preprocessing NW_018394670.1] Last: 0:00:00.013956 \tTotal: 0:00:58.425196\n",[m
[32m+[m[32m      "[Preprocessing NW_018394671.1] Last: 0:00:00.011887 \tTotal: 0:00:58.437105\n",[m
[32m+[m[32m      "[Preprocessing NW_018394672.1] Last: 0:00:00.015305 \tTotal: 0:00:58.452434\n",[m
[32m+[m[32m      "[Preprocessing NW_018394673.1] Last: 0:00:00.012161 \tTotal: 0:00:58.464620\n",[m
[32m+[m[32m      "[Preprocessing NW_018394674.1] Last: 0:00:00.009761 \tTotal: 0:00:58.474407\n",[m
[32m+[m[32m      "[Preprocessing NW_018394675.1] Last: 0:00:00.008407 \tTotal: 0:00:58.482839\n",[m
[32m+[m[32m      "[Preprocessing NW_018394676.1] Last: 0:00:00.012862 \tTotal: 0:00:58.495729\n",[m
[32m+[m[32m      "[Preprocessing NW_018394677.1] Last: 0:00:00.008018 \tTotal: 0:00:58.503772\n",[m
[32m+[m[32m      "[Preprocessing NW_018394678.1] Last: 0:00:00.011084 \tTotal: 0:00:58.514883\n",[m
[32m+[m[32m      "[Preprocessing NW_018394679.1] Last: 0:00:00.011059 \tTotal: 0:00:58.525967\n",[m
[32m+[m[32m      "[Preprocessing NW_018394680.1] Last: 0:00:00.017136 \tTotal: 0:00:58.543127\n",[m
[32m+[m[32m      "[Preprocessing NW_018394681.1] Last: 0:00:00.011559 \tTotal: 0:00:58.554708\n",[m
[32m+[m[32m      "[Preprocessing NW_018394682.1] Last: 0:00:00.010479 \tTotal: 0:00:58.565212\n",[m
[32m+[m[32m      "[Preprocessing NW_018394683.1] Last: 0:00:00.014245 \tTotal: 0:00:58.579482\n",[m
[32m+[m[32m      "[Preprocessing NW_018394684.1] Last: 0:00:00.012828 \tTotal: 0:00:58.592333\n",[m
[32m+[m[32m      "[Preprocessing NW_018394685.1] Last: 0:00:00.013830 \tTotal: 0:00:58.606188\n",[m
[32m+[m[32m      "[Preprocessing NW_018394686.1] Last: 0:00:00.010381 \tTotal: 0:00:58.616595\n",[m
[32m+[m[32m      "[Preprocessing NW_018394687.1] Last: 0:00:00.012984 \tTotal: 0:00:58.629603\n",[m
[32m+[m[32m      "[Preprocessing NW_018394688.1] Last: 0:00:00.016965 \tTotal: 0:00:58.646593\n",[m
[32m+[m[32m      "[Preprocessing NW_018394689.1] Last: 0:00:00.013133 \tTotal: 0:00:58.659751\n",[m
[32m+[m[32m      "[Preprocessing NW_018394690.1] Last: 0:00:00.013570 \tTotal: 0:00:58.673346\n",[m
[32m+[m[32m      "[Preprocessing NW_018394691.1] Last: 0:00:00.014786 \tTotal: 0:00:58.688160\n",[m
[32m+[m[32m      "[Preprocessing NW_018394692.1] Last: 0:00:00.013178 \tTotal: 0:00:58.701367\n",[m
[32m+[m[32m      "[Preprocessing NW_018394693.1] Last: 0:00:00.011934 \tTotal: 0:00:58.713344\n",[m
[32m+[m[32m      "[Preprocessing NW_018394694.1] Last: 0:00:00.020477 \tTotal: 0:00:58.733857\n",[m
[32m+[m[32m      "[Preprocessing NW_018394695.1] Last: 0:00:00.011384 \tTotal: 0:00:58.745271\n",[m
[32m+[m[32m      "[Preprocessing NW_018394696.1] Last: 0:00:00.015079 \tTotal: 0:00:58.760384\n",[m
[32m+[m[32m      "[Preprocessing NW_018394697.1] Last: 0:00:00.014859 \tTotal: 0:00:58.775269\n",[m
[32m+[m[32m      "[Preprocessing NW_018394698.1] Last: 0:00:00.015969 \tTotal: 0:00:58.791263\n",[m
[32m+[m[32m      "[Preprocessing NW_018394699.1] Last: 0:00:00.017096 \tTotal: 0:00:58.808393\n",[m
[32m+[m[32m      "[Preprocessing NW_018394700.1] Last: 0:00:00.025770 \tTotal: 0:00:58.834196\n",[m
[32m+[m[32m      "[Preprocessing NW_018394701.1] Last: 0:00:00.015149 \tTotal: 0:00:58.849375\n",[m
[32m+[m[32m      "[Preprocessing NW_018394702.1] Last: 0:00:00.017133 \tTotal: 0:00:58.866555\n",[m
[32m+[m[32m      "[Preprocessing NW_018394703.1] Last: 0:00:00.020821 \tTotal: 0:00:58.887404\n",[m
[32m+[m[32m      "[Preprocessing NW_018394715.1] Last: 0:00:00.015659 \tTotal: 0:00:58.903091\n",[m
[32m+[m[32m      "[Preprocessing NW_018394704.1] Last: 0:00:00.015235 \tTotal: 0:00:58.918360\n",[m
[32m+[m[32m      "[Preprocessing NW_018394705.1] Last: 0:00:00.017113 \tTotal: 0:00:58.935505\n",[m
[32m+[m[32m      "[Preprocessing NW_018394706.1] Last: 0:00:00.014208 \tTotal: 0:00:58.949740\n",[m
[32m+[m[32m      "[Preprocessing NW_018394707.1] Last: 0:00:00.019959 \tTotal: 0:00:58.969725\n",[m
[32m+[m[32m      "[Preprocessing NW_018394708.1] Last: 0:00:00.017907 \tTotal: 0:00:58.987663\n",[m
[32m+[m[32m      "[Preprocessing NW_018394709.1] Last: 0:00:00.021125 \tTotal: 0:00:59.008820\n",[m
[32m+[m[32m      "[Preprocessing NW_018394710.1] Last: 0:00:00.016163 \tTotal: 0:00:59.025015\n",[m
[32m+[m[32m      "[Preprocessing NW_018394711.1] Last: 0:00:00.010702 \tTotal: 0:00:59.035747\n",[m
[32m+[m[32m      "[Preprocessing NW_018394712.1] Last: 0:00:00.023117 \tTotal: 0:00:59.058891\n",[m
[32m+[m[32m      "[Preprocessing NW_018394713.1] Last: 0:00:00.013720 \tTotal: 0:00:59.072640\n",[m
[32m+[m[32m      "[Preprocessing NW_018394714.1] Last: 0:00:00.012400 \tTotal: 0:00:59.085067\n",[m
[32m+[m[32m      "[Preprocessing NW_018394716.1] Last: 0:00:00.011439 \tTotal: 0:00:59.096531\n",[m
[32m+[m[32m      "[Preprocessing NW_018394717.1] Last: 0:00:00.017107 \tTotal: 0:00:59.113663\n",[m
[32m+[m[32m      "[Preprocessing NW_018394718.1] Last: 0:00:00.016412 \tTotal: 0:00:59.130099\n",[m
[32m+[m[32m      "[Preprocessing NW_018394719.1] Last: 0:00:00.014334 \tTotal: 0:00:59.144457\n",[m
[32m+[m[32m      "[Preprocessing NW_018394720.1] Last: 0:00:00.012203 \tTotal: 0:00:59.156685\n",[m
[32m+[m[32m      "[Preprocessing NW_018394721.1] Last: 0:00:00.017066 \tTotal: 0:00:59.173775\n",[m
[32m+[m[32m      "[Preprocessing NW_018394722.1] Last: 0:00:00.011843 \tTotal: 0:00:59.185643\n",[m
[32m+[m[32m      "[Preprocessing NW_018394723.1] Last: 0:00:00.013461 \tTotal: 0:00:59.199129\n",[m
[32m+[m[32m      "[Preprocessing NW_018394724.1] Last: 0:00:00.014059 \tTotal: 0:00:59.213212\n",[m
[32m+[m[32m      "[Preprocessing NW_018394725.1] Last: 0:00:00.017212 \tTotal: 0:00:59.230449\n",[m
[32m+[m[32m      "[Preprocessing NW_018394726.1] Last: 0:00:00.019671 \tTotal: 0:00:59.250146\n",[m
[32m+[m[32m      "[Preprocessing NW_018394727.1] Last: 0:00:00.032092 \tTotal: 0:00:59.282267\n",[m
[32m+[m[32m      "[Preprocessing NW_018394728.1] Last: 0:00:00.010775 \tTotal: 0:00:59.293070\n",[m
[32m+[m[32m      "[Preprocessing NW_018394729.1] Last: 0:00:00.017513 \tTotal: 0:00:59.310611\n",[m
[32m+[m[32m      "[Preprocessing NW_018394730.1] Last: 0:00:00.018413 \tTotal: 0:00:59.329056\n",[m
[32m+[m[32m      "[Preprocessing NW_018394731.1] Last: 0:00:00.013053 \tTotal: 0:00:59.342139\n",[m
[32m+[m[32m      "[Preprocessing NW_018394732.1] Last: 0:00:00.017152 \tTotal: 0:00:59.359317\n",[m
[32m+[m[32m      "[Preprocessing NW_018394733.1] Last: 0:00:00.018333 \tTotal: 0:00:59.377675\n",[m
[32m+[m[32m      "[Preprocessing NW_018394734.1] Last: 0:00:00.018201 \tTotal: 0:00:59.395901\n",[m
[32m+[m[32m      "[Preprocessing NW_018394735.1] Last: 0:00:00.016942 \tTotal: 0:00:59.412868\n",[m
[32m+[m[32m      "[Preprocessing NW_018394736.1] Last: 0:00:00.014475 \tTotal: 0:00:59.427368\n",[m
[32m+[m[32m      "[Preprocessing NW_018394737.1] Last: 0:00:00.022537 \tTotal: 0:00:59.449946\n",[m
[32m+[m[32m      "[Preprocessing NW_018394738.1] Last: 0:00:00.018403 \tTotal: 0:00:59.468382\n",[m
[32m+[m[32m      "[Preprocessing NW_018394739.1] Last: 0:00:00.017079 \tTotal: 0:00:59.485485\n",[m
[32m+[m[32m      "[Preprocessing NW_018394740.1] Last: 0:00:00.015244 \tTotal: 0:00:59.500753\n",[m
[32m+[m[32m      "[Preprocessing NW_018394741.1] Last: 0:00:00.016689 \tTotal: 0:00:59.517466\n",[m
[32m+[m[32m      "[Preprocessing NW_018394742.1] Last: 0:00:00.015395 \tTotal: 0:00:59.532886\n",[m
[32m+[m[32m      "[Preprocessing NW_018394743.1] Last: 0:00:00.022421 \tTotal: 0:00:59.555334\n",[m
[32m+[m[32m      "[Preprocessing NW_018394744.1] Last: 0:00:00.020857 \tTotal: 0:00:59.576219\n",[m
[32m+[m[32m      "[Preprocessing NW_018394745.1] Last: 0:00:00.022484 \tTotal: 0:00:59.598732\n",[m
[32m+[m[32m      "[Preprocessing NW_018394746.1] Last: 0:00:00.014838 \tTotal: 0:00:59.613597\n",[m
[32m+[m[32m      "[Preprocessing NW_018394747.1] Last: 0:00:00.014352 \tTotal: 0:00:59.627974\n",[m
[32m+[m[32m      "[Preprocessing NW_018394748.1] Last: 0:00:00.014639 \tTotal: 0:00:59.642637\n",[m
[32m+[m[32m      "[Preprocessing NW_018394749.1] Last: 0:00:00.011752 \tTotal: 0:00:59.654414\n",[m
[32m+[m[32m      "[Preprocessing NW_018394750.1] Last: 0:00:00.015793 \tTotal: 0:00:59.670233\n",[m
[32m+[m[32m      "[Preprocessing NW_018394751.1] Last: 0:00:00.018366 \tTotal: 0:00:59.688626\n",[m
[32m+[m[32m      "[Preprocessing NW_018394752.1] Last: 0:00:00.016257 \tTotal: 0:00:59.704907\n",[m
[32m+[m[32m      "[Preprocessing NW_018394753.1] Last: 0:00:00.018703 \tTotal: 0:00:59.723636\n",[m
[32m+[m[32m      "[Preprocessing NW_018394754.1] Last: 0:00:00.012312 \tTotal: 0:00:59.735972\n",[m
[32m+[m[32m      "[Preprocessing NW_018394755.1] Last: 0:00:00.016385 \tTotal: 0:00:59.752388\n",[m
[32m+[m[32m      "[Preprocessing NW_018394756.1] Last: 0:00:00.010399 \tTotal: 0:00:59.762812\n",[m
[32m+[m[32m      "[Preprocessing NW_018394757.1] Last: 0:00:00.013243 \tTotal: 0:00:59.776079\n",[m
[32m+[m[32m      "[Preprocessing NW_018394758.1] Last: 0:00:00.009968 \tTotal: 0:00:59.786071\n",[m
[32m+[m[32m      "[Preprocessing NW_018394759.1] Last: 0:00:00.014534 \tTotal: 0:00:59.800630\n",[m
[32m+[m[32m      "[Preprocessing NW_018394760.1] Last: 0:00:00.021884 \tTotal: 0:00:59.822538\n",[m
[32m+[m[32m      "[Preprocessing NW_018394761.1] Last: 0:00:00.014854 \tTotal: 0:00:59.837419\n",[m
[32m+[m[32m      "[Preprocessing NW_018394762.1] Last: 0:00:00.007707 \tTotal: 0:00:59.845150\n",[m
[32m+[m[32m      "[Preprocessing NW_018394799.1] Last: 0:00:00.005225 \tTotal: 0:00:59.850398\n",[m
[32m+[m[32m      "[Preprocessing NW_018394763.1] Last: 0:00:00.010433 \tTotal: 0:00:59.860854\n",[m
[32m+[m[32m      "[Preprocessing NW_018394764.1] Last: 0:00:00.012310 \tTotal: 0:00:59.873186\n",[m
[32m+[m[32m      "[Preprocessing NW_018394765.1] Last: 0:00:00.011686 \tTotal: 0:00:59.884894\n",[m
[32m+[m[32m      "[Preprocessing NW_018394766.1] Last: 0:00:00.009090 \tTotal: 0:00:59.894008\n",[m
[32m+[m[32m      "[Preprocessing NW_018394768.1] Last: 0:00:00.011210 \tTotal: 0:00:59.905241\n",[m
[32m+[m[32m      "[Preprocessing NW_018394769.1] Last: 0:00:00.010577 \tTotal: 0:00:59.915841\n",[m
[32m+[m[32m      "[Preprocessing NW_018394770.1] Last: 0:00:00.011869 \tTotal: 0:00:59.927733\n",[m
[32m+[m[32m      "[Preprocessing NW_018394767.1] Last: 0:00:00.005699 \tTotal: 0:00:59.933453\n",[m
[32m+[m[32m      "[Preprocessing NW_018394771.1] Last: 0:00:00.011758 \tTotal: 0:00:59.945233\n",[m
[32m+[m[32m      "[Preprocessing NW_018394772.1] Last: 0:00:00.013547 \tTotal: 0:00:59.958802\n",[m
[32m+[m[32m      "[Preprocessing NW_018394773.1] Last: 0:00:00.014423 \tTotal: 0:00:59.973248\n",[m
[32m+[m[32m      "[Preprocessing NW_018394774.1] Last: 0:00:00.015302 \tTotal: 0:00:59.988573\n",[m
[32m+[m[32m      "[Preprocessing NW_018394775.1] Last: 0:00:00.015738 \tTotal: 0:01:00.004336\n",[m
[32m+[m[32m      "[Preprocessing NW_018394776.1] Last: 0:00:00.013339 \tTotal: 0:01:00.017699\n",[m
[32m+[m[32m      "[Preprocessing NW_018394777.1] Last: 0:00:00.009412 \tTotal: 0:01:00.027135\n",[m
[32m+[m[32m      "[Preprocessing NW_018394778.1] Last: 0:00:00.008338 \tTotal: 0:01:00.035499\n",[m
[32m+[m[32m      "[Preprocessing NW_018394779.1] Last: 0:00:00.011432 \tTotal: 0:01:00.046954\n",[m
[32m+[m[32m      "[Preprocessing NW_018394780.1] Last: 0:00:00.020145 \tTotal: 0:01:00.067122\n",[m
[32m+[m[32m      "[Preprocessing NW_018394781.1] Last: 0:00:00.013262 \tTotal: 0:01:00.080410\n",[m
[32m+[m[32m      "[Preprocessing NW_018394782.1] Last: 0:00:00.018573 \tTotal: 0:01:00.099010\n",[m
[32m+[m[32m      "[Preprocessing NW_018394783.1] Last: 0:00:00.011425 \tTotal: 0:01:00.110459\n",[m
[32m+[m[32m      "[Preprocessing NW_018394784.1] Last: 0:00:00.020764 \tTotal: 0:01:00.131248\n",[m
[32m+[m[32m      "[Preprocessing NW_018394785.1] Last: 0:00:00.020852 \tTotal: 0:01:00.152125\n",[m
[32m+[m[32m      "[Preprocessing NW_018394786.1] Last: 0:00:00.017779 \tTotal: 0:01:00.169931\n",[m
[32m+[m[32m      "[Preprocessing NW_018394787.1] Last: 0:00:00.016204 \tTotal: 0:01:00.186161\n",[m
[32m+[m[32m      "[Preprocessing NW_018394788.1] Last: 0:00:00.014898 \tTotal: 0:01:00.201084\n",[m
[32m+[m[32m      "[Preprocessing NW_018394789.1] Last: 0:00:00.014440 \tTotal: 0:01:00.215549\n",[m
[32m+[m[32m      "[Preprocessing NW_018394790.1] Last: 0:00:00.011080 \tTotal: 0:01:00.226653\n",[m
[32m+[m[32m      "[Preprocessing NW_018394791.1] Last: 0:00:00.011256 \tTotal: 0:01:00.237932\n",[m
[32m+[m[32m      "[Preprocessing NW_018394792.1] Last: 0:00:00.008313 \tTotal: 0:01:00.246268\n",[m
[32m+[m[32m      "[Preprocessing NW_018394793.1] Last: 0:00:00.026698 \tTotal: 0:01:00.272996\n",[m
[32m+[m[32m      "[Preprocessing NW_018394794.1] Last: 0:00:00.009459 \tTotal: 0:01:00.282482\n",[m
[32m+[m[32m      "[Preprocessing NW_018394795.1] Last: 0:00:00.015418 \tTotal: 0:01:00.297927\n",[m
[32m+[m[32m      "[Preprocessing NW_018394796.1] Last: 0:00:00.010990 \tTotal: 0:01:00.308942\n",[m
[32m+[m[32m      "[Preprocessing NW_018394797.1] Last: 0:00:00.012862 \tTotal: 0:01:00.321828\n",[m
[32m+[m[32m      "[Preprocessing NW_018394798.1] Last: 0:00:00.011510 \tTotal: 0:01:00.333362\n",[m
[32m+[m[32m      "[Preprocessing NW_018394800.1] Last: 0:00:00.014373 \tTotal: 0:01:00.347762\n",[m
[32m+[m[32m      "[Preprocessing NW_018394801.1] Last: 0:00:00.010367 \tTotal: 0:01:00.358156\n",[m
[32m+[m[32m      "[Preprocessing NW_018394802.1] Last: 0:00:00.016246 \tTotal: 0:01:00.374425\n",[m
[32m+[m[32m      "[Preprocessing NW_018394803.1] Last: 0:00:00.009571 \tTotal: 0:01:00.384019\n",[m
[32m+[m[32m      "[Preprocessing NW_018394804.1] Last: 0:00:00.017917 \tTotal: 0:01:00.401959\n",[m
[32m+[m[32m      "[Preprocessing NW_018394805.1] Last: 0:00:00.010834 \tTotal: 0:01:00.412818\n",[m
[32m+[m[32m      "[Preprocessing NW_018394828.1] Last: 0:00:00.009059 \tTotal: 0:01:00.421901\n",[m
[32m+[m[32m      "[Preprocessing NW_018394806.1] Last: 0:00:00.012978 \tTotal: 0:01:00.434901\n",[m
[32m+[m[32m      "[Preprocessing NW_018394807.1] Last: 0:00:00.012055 \tTotal: 0:01:00.446981\n",[m
[32m+[m[32m      "[Preprocessing NW_018394808.1] Last: 0:00:00.017728 \tTotal: 0:01:00.464734\n",[m
[32m+[m[32m      "[Preprocessing NW_018394809.1] Last: 0:00:00.025254 \tTotal: 0:01:00.490018\n",[m
[32m+[m[32m      "[Preprocessing NW_018394810.1] Last: 0:00:00.019554 \tTotal: 0:01:00.509604\n",[m
[32m+[m[32m      "[Preprocessing NW_018394811.1] Last: 0:00:00.017079 \tTotal: 0:01:00.526714\n",[m
[32m+[m[32m      "[Preprocessing NW_018394812.1] Last: 0:00:00.017857 \tTotal: 0:01:00.544600\n",[m
[32m+[m[32m      "[Preprocessing NW_018394813.1] Last: 0:00:00.018660 \tTotal: 0:01:00.563288\n",[m
[32m+[m[32m      "[Preprocessing NW_018394814.1] Last: 0:00:00.019165 \tTotal: 0:01:00.582481\n",[m
[32m+[m[32m      "[Preprocessing NW_018394815.1] Last: 0:00:00.011388 \tTotal: 0:01:00.593895\n",[m
[32m+[m[32m      "[Preprocessing NW_018394816.1] Last: 0:00:00.013159 \tTotal: 0:01:00.607079\n",[m
[32m+[m[32m      "[Preprocessing NW_018394817.1] Last: 0:00:00.011024 \tTotal: 0:01:00.618128\n",[m
[32m+[m[32m      "[Preprocessing NW_018394818.1] Last: 0:00:00.011419 \tTotal: 0:01:00.629571\n",[m
[32m+[m[32m      "[Preprocessing NW_018394819.1] Last: 0:00:00.012622 \tTotal: 0:01:00.642217\n",[m
[32m+[m[32m      "[Preprocessing NW_018394820.1] Last: 0:00:00.012807 \tTotal: 0:01:00.655047\n",[m
[32m+[m[32m      "[Preprocessing NW_018394821.1] Last: 0:00:00.014473 \tTotal: 0:01:00.669543\n",[m
[32m+[m[32m      "[Preprocessing NW_018394822.1] Last: 0:00:00.016543 \tTotal: 0:01:00.686111\n",[m
[32m+[m[32m      "[Preprocessing NW_018394823.1] Last: 0:00:00.010911 \tTotal: 0:01:00.697046\n",[m
[32m+[m[32m      "[Preprocessing NW_018394824.1] Last: 0:00:00.016964 \tTotal: 0:01:00.714038\n",[m
[32m+[m[32m      "[Preprocessing NW_018394825.1] Last: 0:00:00.014353 \tTotal: 0:01:00.728420\n",[m
[32m+[m[32m      "[Preprocessing NW_018394826.1] Last: 0:00:00.015636 \tTotal: 0:01:00.744081\n",[m
[32m+[m[32m      "[Preprocessing NW_018394827.1] Last: 0:00:00.011110 \tTotal: 0:01:00.755214\n",[m
[32m+[m[32m      "[Preprocessing NW_018394829.1] Last: 0:00:00.009163 \tTotal: 0:01:00.764400\n",[m
[32m+[m[32m      "[Preprocessing NW_018394830.1] Last: 0:00:00.011696 \tTotal: 0:01:00.776120\n",[m
[32m+[m[32m      "[Preprocessing NW_018394831.1] Last: 0:00:00.015569 \tTotal: 0:01:00.791712\n",[m
[32m+[m[32m      "[Preprocessing NW_018394832.1] Last: 0:00:00.012078 \tTotal: 0:01:00.803814\n",[m
[32m+[m[32m      "[Preprocessing NW_018394833.1] Last: 0:00:00.014800 \tTotal: 0:01:00.818638\n",[m
[32m+[m[32m      "[Preprocessing NW_018394834.1] Last: 0:00:00.008683 \tTotal: 0:01:00.827344\n",[m
[32m+[m[32m      "[Preprocessing NW_018394835.1] Last: 0:00:00.030582 \tTotal: 0:01:00.857955\n",[m
[32m+[m[32m      "[Preprocessing NW_018394836.1] Last: 0:00:00.017788 \tTotal: 0:01:00.875770\n",[m
[32m+[m[32m      "[Preprocessing NW_018394837.1] Last: 0:00:00.013611 \tTotal: 0:01:00.889407\n",[m
[32m+[m[32m      "[Preprocessing NW_018394838.1] Last: 0:00:00.010980 \tTotal: 0:01:00.900410\n",[m
[32m+[m[32m      "[Preprocessing NW_018394839.1] Last: 0:00:00.020084 \tTotal: 0:01:00.920516\n",[m
[32m+[m[32m      "[Preprocessing NW_018394840.1] Last: 0:00:00.020656 \tTotal: 0:01:00.941199\n",[m
[32m+[m[32m      "[Preprocessing NW_018394841.1] Last: 0:00:00.011280 \tTotal: 0:01:00.952504\n",[m
[32m+[m[32m      "[Preprocessing NW_018394842.1] Last: 0:00:00.017464 \tTotal: 0:01:00.969995\n",[m
[32m+[m[32m      "[Preprocessing NW_018394843.1] Last: 0:00:00.015797 \tTotal: 0:01:00.985822\n",[m
[32m+[m[32m      "[Preprocessing NW_018394844.1] Last: 0:00:00.011917 \tTotal: 0:01:00.997767\n",[m
[32m+[m[32m      "[Preprocessing NW_018394845.1] Last: 0:00:00.017508 \tTotal: 0:01:01.015300\n",[m
[32m+[m[32m      "[Preprocessing NW_018394846.1] Last: 0:00:00.011022 \tTotal: 0:01:01.026345\n",[m
[32m+[m[32m      "[Preprocessing NW_018394847.1] Last: 0:00:00.020648 \tTotal: 0:01:01.047021\n",[m
[32m+[m[32m      "[Preprocessing NW_018394848.1] Last: 0:00:00.013507 \tTotal: 0:01:01.060558\n",[m
[32m+[m[32m      "[Preprocessing NW_018394849.1] Last: 0:00:00.017913 \tTotal: 0:01:01.078501\n",[m
[32m+[m[32m      "[Preprocessing NW_018394850.1] Last: 0:00:00.015588 \tTotal: 0:01:01.094116\n",[m
[32m+[m[32m      "[Preprocessing NW_018394851.1] Last: 0:00:00.014847 \tTotal: 0:01:01.108995\n",[m
[32m+[m[32m      "[Preprocessing NW_018394852.1] Last: 0:00:00.012270 \tTotal: 0:01:01.121294\n",[m
[32m+[m[32m      "[Preprocessing NW_018394853.1] Last: 0:00:00.013979 \tTotal: 0:01:01.135299\n",[m
[32m+[m[32m      "[Preprocessing NW_018394854.1] Last: 0:00:00.014646 \tTotal: 0:01:01.149969\n",[m
[32m+[m[32m      "[Preprocessing NW_018394855.1] Last: 0:00:00.013887 \tTotal: 0:01:01.163879\n",[m
[32m+[m[32m      "[Preprocessing NW_018394856.1] Last: 0:00:00.022484 \tTotal: 0:01:01.186393\n",[m
[32m+[m[32m      "[Preprocessing NW_018394858.1] Last: 0:00:00.013029 \tTotal: 0:01:01.199445\n",[m
[32m+[m[32m      "[Preprocessing NW_018394857.1] Last: 0:00:00.008378 \tTotal: 0:01:01.207846\n",[m
[32m+[m[32m      "[Preprocessing NW_018394859.1] Last: 0:00:00.011780 \tTotal: 0:01:01.219649\n",[m
[32m+[m[32m      "[Preprocessing NW_018394860.1] Last: 0:00:00.011990 \tTotal: 0:01:01.231663\n",[m
[32m+[m[32m      "[Preprocessing NW_018394861.1] Last: 0:00:00.010207 \tTotal: 0:01:01.241894\n",[m
[32m+[m[32m      "[Preprocessing NW_018394862.1] Last: 0:00:00.012212 \tTotal: 0:01:01.254130\n",[m
[32m+[m[32m      "[Preprocessing NW_018394863.1] Last: 0:00:00.016316 \tTotal: 0:01:01.270479\n",[m
[32m+[m[32m      "[Preprocessing NW_018394864.1] Last: 0:00:00.017598 \tTotal: 0:01:01.288110\n",[m
[32m+[m[32m      "[Preprocessing NW_018394865.1] Last: 0:00:00.019891 \tTotal: 0:01:01.308033\n",[m
[32m+[m[32m      "[Preprocessing NW_018394866.1] Last: 0:00:00.013355 \tTotal: 0:01:01.321418\n",[m
[32m+[m[32m      "[Preprocessing NW_018394867.1] Last: 0:00:00.011868 \tTotal: 0:01:01.333314\n",[m
[32m+[m[32m      "[Preprocessing NW_018394868.1] Last: 0:00:00.019637 \tTotal: 0:01:01.352982\n",[m
[32m+[m[32m      "[Preprocessing NW_018394869.1] Last: 0:00:00.012588 \tTotal: 0:01:01.365600\n",[m
[32m+[m[32m      "[Preprocessing NW_018394870.1] Last: 0:00:00.008831 \tTotal: 0:01:01.374458\n",[m
[32m+[m[32m      "[Preprocessing NW_018394871.1] Last: 0:00:00.010849 \tTotal: 0:01:01.385333\n",[m
[32m+[m[32m      "[Preprocessing NW_018394872.1] Last: 0:00:00.012800 \tTotal: 0:01:01.398157\n",[m
[32m+[m[32m      "[Preprocessing NW_018394873.1] Last: 0:00:00.029058 \tTotal: 0:01:01.427244\n",[m
[32m+[m[32m      "[Preprocessing NW_018394874.1] Last: 0:00:00.015062 \tTotal: 0:01:01.442340\n",[m
[32m+[m[32m      "[Preprocessing NW_018394875.1] Last: 0:00:00.013507 \tTotal: 0:01:01.455877\n",[m
[32m+[m[32m      "[Preprocessing NW_018394876.1] Last: 0:00:00.014017 \tTotal: 0:01:01.469922\n",[m
[32m+[m[32m      "[Preprocessing NW_018394877.1] Last: 0:00:00.017251 \tTotal: 0:01:01.487214\n",[m
[32m+[m[32m      "[Preprocessing NW_018394878.1] Last: 0:00:00.009824 \tTotal: 0:01:01.497079\n",[m
[32m+[m[32m      "[Preprocessing NW_018394879.1] Last: 0:00:00.015388 \tTotal: 0:01:01.512500\n",[m
[32m+[m[32m      "[Preprocessing NW_018394880.1] Last: 0:00:00.011044 \tTotal: 0:01:01.523572\n",[m
[32m+[m[32m      "[Preprocessing NW_018394881.1] Last: 0:00:00.019629 \tTotal: 0:01:01.543231\n",[m
[32m+[m[32m      "[Preprocessing NW_018394882.1] Last: 0:00:00.012889 \tTotal: 0:01:01.556147\n",[m
[32m+[m[32m      "[Preprocessing NW_018394883.1] Last: 0:00:00.020259 \tTotal: 0:01:01.576435\n",[m
[32m+[m[32m      "[Preprocessing NW_018394884.1] Last: 0:00:00.017918 \tTotal: 0:01:01.594392\n",[m
[32m+[m[32m      "[Preprocessing NW_018394885.1] Last: 0:00:00.017585 \tTotal: 0:01:01.612012\n",[m
[32m+[m[32m      "[Preprocessing NW_018394886.1] Last: 0:00:00.011961 \tTotal: 0:01:01.624013\n",[m
[32m+[m[32m      "[Preprocessing NW_018394887.1] Last: 0:00:00.010375 \tTotal: 0:01:01.634422\n",[m
[32m+[m[32m      "[Preprocessing NW_018394888.1] Last: 0:00:00.009177 \tTotal: 0:01:01.643628\n",[m
[32m+[m[32m      "[Preprocessing NW_018394889.1] Last: 0:00:00.009291 \tTotal: 0:01:01.652944\n",[m
[32m+[m[32m      "[Preprocessing NW_018394890.1] Last: 0:00:00.012059 \tTotal: 0:01:01.665029\n",[m
[32m+[m[32m      "[Preprocessing NW_018394891.1] Last: 0:00:00.009912 \tTotal: 0:01:01.674968\n",[m
[32m+[m[32m      "[Preprocessing NW_018394892.1] Last: 0:00:00.012380 \tTotal: 0:01:01.687388\n",[m
[32m+[m[32m      "[Preprocessing NW_018394893.1] Last: 0:00:00.018704 \tTotal: 0:01:01.706128\n",[m
[32m+[m[32m      "[Preprocessing NW_018394894.1] Last: 0:00:00.013579 \tTotal: 0:01:01.719737\n",[m
[32m+[m[32m      "[Preprocessing NW_018394895.1] Last: 0:00:00.011203 \tTotal: 0:01:01.730967\n",[m
[32m+[m[32m      "[Preprocessing NW_018394896.1] Last: 0:00:00.014682 \tTotal: 0:01:01.745680\n",[m
[32m+[m[32m      "[Preprocessing NW_018394897.1] Last: 0:00:00.021407 \tTotal: 0:01:01.767117\n",[m
[32m+[m[32m      "[Preprocessing NW_018394898.1] Last: 0:00:00.015740 \tTotal: 0:01:01.782886\n",[m
[32m+[m[32m      "[Preprocessing NW_018394899.1] Last: 0:00:00.010050 \tTotal: 0:01:01.792961\n",[m
[32m+[m[32m      "[Preprocessing NW_018394900.1] Last: 0:00:00.018162 \tTotal: 0:01:01.811149\n",[m
[32m+[m[32m      "[Preprocessing NW_018394901.1] Last: 0:00:00.009039 \tTotal: 0:01:01.820215\n",[m
[32m+[m[32m      "[Preprocessing NW_018394902.1] Last: 0:00:00.016640 \tTotal: 0:01:01.836882\n",[m
[32m+[m[32m      "[Preprocessing NW_018394903.1] Last: 0:00:00.018874 \tTotal: 0:01:01.855784\n",[m
[32m+[m[32m      "[Preprocessing NW_018394904.1] Last: 0:00:00.021262 \tTotal: 0:01:01.877077\n",[m
[32m+[m[32m      "[Preprocessing NW_018394905.1] Last: 0:00:00.015042 \tTotal: 0:01:01.892147\n",[m
[32m+[m[32m      "[Preprocessing NW_018394906.1] Last: 0:00:00.009351 \tTotal: 0:01:01.901530\n",[m
[32m+[m[32m      "[Preprocessing NW_018394907.1] Last: 0:00:00.012155 \tTotal: 0:01:01.913718\n",[m
[32m+[m[32m      "[Preprocessing NW_018394908.1] Last: 0:00:00.015641 \tTotal: 0:01:01.929397\n",[m
[32m+[m[32m      "[Preprocessing NW_018394909.1] Last: 0:00:00.024291 \tTotal: 0:01:01.953721\n",[m
[32m+[m[32m      "[Preprocessing NW_018394910.1] Last: 0:00:00.026528 \tTotal: 0:01:01.980284\n",[m
[32m+[m[32m      "[Preprocessing NW_018394911.1] Last: 0:00:00.012359 \tTotal: 0:01:01.992675\n",[m
[32m+[m[32m      "[Preprocessing NW_018394912.1] Last: 0:00:00.015235 \tTotal: 0:01:02.007939\n",[m
[32m+[m[32m      "[Preprocessing NW_018394913.1] Last: 0:00:00.013642 \tTotal: 0:01:02.021609\n",[m
[32m+[m[32m      "[Preprocessing NW_018394914.1] Last: 0:00:00.016832 \tTotal: 0:01:02.038472\n",[m
[32m+[m[32m      "[Preprocessing NW_018394915.1] Last: 0:00:00.014810 \tTotal: 0:01:02.053319\n",[m
[32m+[m[32m      "[Preprocessing NW_018394916.1] Last: 0:00:00.015839 \tTotal: 0:01:02.069192\n",[m
[32m+[m[32m      "[Preprocessing NW_018394917.1] Last: 0:00:00.016063 \tTotal: 0:01:02.085290\n",[m
[32m+[m[32m      "[Preprocessing NW_018394918.1] Last: 0:00:00.012992 \tTotal: 0:01:02.098312\n",[m
[32m+[m[32m      "[Preprocessing NW_018394919.1] Last: 0:00:00.011487 \tTotal: 0:01:02.109828\n",[m
[32m+[m[32m      "[Preprocessing NW_018394920.1] Last: 0:00:00.009537 \tTotal: 0:01:02.119399\n",[m
[32m+[m[32m      "[Preprocessing NW_018394921.1] Last: 0:00:00.015904 \tTotal: 0:01:02.135330\n",[m
[32m+[m[32m      "[Preprocessing NW_018394922.1] Last: 0:00:00.009171 \tTotal: 0:01:02.144529\n",[m
[32m+[m[32m      "[Preprocessing NW_018394923.1] Last: 0:00:00.013146 \tTotal: 0:01:02.157701\n",[m
[32m+[m[32m      "[Preprocessing NW_018394924.1] Last: 0:00:00.037970 \tTotal: 0:01:02.195698\n",[m
[32m+[m[32m      "[Preprocessing NW_018394925.1] Last: 0:00:00.017173 \tTotal: 0:01:02.212896\n",[m
[32m+[m[32m      "[Preprocessing NW_018394926.1] Last: 0:00:00.008140 \tTotal: 0:01:02.221066\n",[m
[32m+[m[32m      "[Preprocessing NW_018394927.1] Last: 0:00:00.015005 \tTotal: 0:01:02.236101\n",[m
[32m+[m[32m      "[Preprocessing NW_018394928.1] Last: 0:00:00.013636 \tTotal: 0:01:02.249764\n",[m
[32m+[m[32m      "[Preprocessing NW_018394929.1] Last: 0:00:00.011128 \tTotal: 0:01:02.260916\n",[m
[32m+[m[32m      "[Preprocessing NW_018394930.1] Last: 0:00:00.013795 \tTotal: 0:01:02.274736\n",[m
[32m+[m[32m      "[Preprocessing NW_018394931.1] Last: 0:00:00.008462 \tTotal: 0:01:02.283222\n",[m
[32m+[m[32m      "[Preprocessing NW_018394932.1] Last: 0:00:00.011582 \tTotal: 0:01:02.294827\n",[m
[32m+[m[32m      "[Preprocessing NW_018394933.1] Last: 0:00:00.009453 \tTotal: 0:01:02.304303\n",[m
[32m+[m[32m      "[Preprocessing NW_018394934.1] Last: 0:00:00.014381 \tTotal: 0:01:02.318710\n",[m
[32m+[m[32m      "[Preprocessing NW_018394935.1] Last: 0:00:00.009217 \tTotal: 0:01:02.327952\n",[m
[32m+[m[32m      "[Preprocessing NW_018394936.1] Last: 0:00:00.007760 \tTotal: 0:01:02.335734\n",[m
[32m+[m[32m      "[Preprocessing NW_018394937.1] Last: 0:00:00.009786 \tTotal: 0:01:02.345543\n",[m
[32m+[m[32m      "[Preprocessing NW_018394938.1] Last: 0:00:00.016558 \tTotal: 0:01:02.362125\n",[m
[32m+[m[32m      "[Preprocessing NW_018394939.1] Last: 0:00:00.015688 \tTotal: 0:01:02.377837\n",[m
[32m+[m[32m      "[Preprocessing NW_018394940.1] Last: 0:00:00.011342 \tTotal: 0:01:02.389202\n",[m
[32m+[m[32m      "[Preprocessing NW_018394941.1] Last: 0:00:00.011881 \tTotal: 0:01:02.401108\n",[m
[32m+[m[32m      "[Preprocessing NW_018394942.1] Last: 0:00:00.010704 \tTotal: 0:01:02.411835\n",[m
[32m+[m[32m      "[Preprocessing NW_018394943.1] Last: 0:00:00.014651 \tTotal: 0:01:02.426513\n",[m
[32m+[m[32m      "[Preprocessing NW_018394944.1] Last: 0:00:00.020364 \tTotal: 0:01:02.446905\n",[m
[32m+[m[32m      "[Preprocessing NW_018394945.1] Last: 0:00:00.018658 \tTotal: 0:01:02.465587\n",[m
[32m+[m[32m      "[Preprocessing NW_018394946.1] Last: 0:00:00.021829 \tTotal: 0:01:02.487442\n",[m
[32m+[m[32m      "[Preprocessing NW_018394947.1] Last: 0:00:00.021957 \tTotal: 0:01:02.509430\n",[m
[32m+[m[32m      "[Preprocessing NW_018394948.1] Last: 0:00:00.010677 \tTotal: 0:01:02.520138\n",[m
[32m+[m[32m      "[Preprocessing NW_018394949.1] Last: 0:00:00.015785 \tTotal: 0:01:02.535956\n",[m
[32m+[m[32m      "[Preprocessing NW_018394950.1] Last: 0:00:00.013810 \tTotal: 0:01:02.549803\n",[m
[32m+[m[32m      "[Preprocessing NW_018394951.1] Last: 0:00:00.014140 \tTotal: 0:01:02.563975\n",[m
[32m+[m[32m      "[Preprocessing NW_018394952.1] Last: 0:00:00.008452 \tTotal: 0:01:02.572457\n",[m
[32m+[m[32m      "[Preprocessing NW_018394953.1] Last: 0:00:00.010031 \tTotal: 0:01:02.582519\n",[m
[32m+[m[32m      "[Preprocessing NW_018394954.1] Last: 0:00:00.007874 \tTotal: 0:01:02.590422\n",[m
[32m+[m[32m      "[Preprocessing NW_018394955.1] Last: 0:00:00.011767 \tTotal: 0:01:02.602216\n",[m
[32m+[m[32m      "[Preprocessing NW_018394956.1] Last: 0:00:00.012897 \tTotal: 0:01:02.615150\n",[m
[32m+[m[32m      "[Preprocessing NW_018394957.1] Last: 0:00:00.030385 \tTotal: 0:01:02.645578\n",[m
[32m+[m[32m      "[Preprocessing NW_018394958.1] Last: 0:00:00.009003 \tTotal: 0:01:02.654618\n",[m
[32m+[m[32m      "[Preprocessing NW_018394959.1] Last: 0:00:00.010166 \tTotal: 0:01:02.664817\n",[m
[32m+[m[32m      "[Preprocessing NW_018394960.1] Last: 0:00:00.012244 \tTotal: 0:01:02.677094\n",[m
[32m+[m[32m      "[Preprocessing NW_018394961.1] Last: 0:00:00.013942 \tTotal: 0:01:02.691068\n",[m
[32m+[m[32m      "[Preprocessing NW_018394962.1] Last: 0:00:00.014757 \tTotal: 0:01:02.705857\n",[m
[32m+[m[32m      "[Preprocessing NW_018394963.1] Last: 0:00:00.008206 \tTotal: 0:01:02.714094\n",[m
[32m+[m[32m      "[Preprocessing NW_018394964.1] Last: 0:00:00.015096 \tTotal: 0:01:02.729228\n",[m
[32m+[m[32m      "[Preprocessing NW_018394965.1] Last: 0:00:00.015889 \tTotal: 0:01:02.745155\n",[m
[32m+[m[32m      "[Preprocessing NW_018394966.1] Last: 0:00:00.011640 \tTotal: 0:01:02.756829\n",[m
[32m+[m[32m      "[Preprocessing NW_018394967.1] Last: 0:00:00.016659 \tTotal: 0:01:02.773522\n",[m
[32m+[m[32m      "[Preprocessing NW_018394968.1] Last: 0:00:00.011091 \tTotal: 0:01:02.784643\n",[m
[32m+[m[32m      "[Preprocessing NW_018394969.1] Last: 0:00:00.013249 \tTotal: 0:01:02.797921\n",[m
[32m+[m[32m      "[Preprocessing NW_018394970.1] Last: 0:00:00.024118 \tTotal: 0:01:02.822071\n",[m
[32m+[m[32m      "[Preprocessing NW_018394971.1] Last: 0:00:00.014631 \tTotal: 0:01:02.836738\n",[m
[32m+[m[32m      "[Preprocessing NW_018394972.1] Last: 0:00:00.014538 \tTotal: 0:01:02.851315\n",[m
[32m+[m[32m      "[Preprocessing NW_018394973.1] Last: 0:00:00.011044 \tTotal: 0:01:02.862401\n",[m
[32m+[m[32m      "[Preprocessing NW_018394974.1] Last: 0:00:00.011818 \tTotal: 0:01:02.874249\n",[m
[32m+[m[32m      "[Preprocessing NW_018394975.1] Last: 0:00:00.009585 \tTotal: 0:01:02.883862\n",[m
[32m+[m[32m      "[Preprocessing NW_018394976.1] Last: 0:00:00.011829 \tTotal: 0:01:02.895717\n",[m
[32m+[m[32m      "[Preprocessing NW_018394977.1] Last: 0:00:00.011711 \tTotal: 0:01:02.907454\n",[m
[32m+[m[32m      "[Preprocessing NW_018394978.1] Last: 0:00:00.012134 \tTotal: 0:01:02.919613\n",[m
[32m+[m[32m      "[Preprocessing NW_018394979.1] Last: 0:00:00.016699 \tTotal: 0:01:02.936338\n",[m
[32m+[m[32m      "[Preprocessing NW_018394980.1] Last: 0:00:00.013135 \tTotal: 0:01:02.949516\n",[m
[32m+[m[32m      "[Preprocessing NW_018394981.1] Last: 0:00:00.015740 \tTotal: 0:01:02.965281\n",[m
[32m+[m[32m      "[Preprocessing NW_018394982.1] Last: 0:00:00.013507 \tTotal: 0:01:02.978812\n",[m
[32m+[m[32m      "[Preprocessing NW_018394983.1] Last: 0:00:00.011924 \tTotal: 0:01:02.990759\n",[m
[32m+[m[32m      "[Preprocessing NW_018394984.1] Last: 0:00:00.011069 \tTotal: 0:01:03.001851\n",[m
[32m+[m[32m      "[Preprocessing NW_018394985.1] Last: 0:00:00.012792 \tTotal: 0:01:03.014665\n",[m
[32m+[m[32m      "[Preprocessing NW_018394986.1] Last: 0:00:00.020436 \tTotal: 0:01:03.035128\n",[m
[32m+[m[32m      "[Preprocessing NW_018394987.1] Last: 0:00:00.013434 \tTotal: 0:01:03.048587\n",[m
[32m+[m[32m      "[Preprocessing NW_018394988.1] Last: 0:00:00.022736 \tTotal: 0:01:03.071348\n",[m
[32m+[m[32m      "[Preprocessing NW_018394989.1] Last: 0:00:00.010676 \tTotal: 0:01:03.082049\n",[m
[32m+[m[32m      "[Preprocessing NW_018394990.1] Last: 0:00:00.011325 \tTotal: 0:01:03.093399\n",[m
[32m+[m[32m      "[Preprocessing NW_018394991.1] Last: 0:00:00.014332 \tTotal: 0:01:03.107757\n",[m
[32m+[m[32m      "[Preprocessing NW_018394992.1] Last: 0:00:00.015157 \tTotal: 0:01:03.122942\n",[m
[32m+[m[32m      "[Preprocessing NW_018394993.1] Last: 0:00:00.015960 \tTotal: 0:01:03.138932\n",[m
[32m+[m[32m      "[Preprocessing NW_018394994.1] Last: 0:00:00.011584 \tTotal: 0:01:03.150547\n",[m
[32m+[m[32m      "[Preprocessing NW_018394995.1] Last: 0:00:00.022866 \tTotal: 0:01:03.173447\n",[m
[32m+[m[32m      "[Preprocessing NW_018394996.1] Last: 0:00:00.013677 \tTotal: 0:01:03.187160\n",[m
[32m+[m[32m      "[Preprocessing NW_018394997.1] Last: 0:00:00.026517 \tTotal: 0:01:03.213719\n",[m
[32m+[m[32m      "[Preprocessing NW_018394998.1] Last: 0:00:00.021911 \tTotal: 0:01:03.235671\n",[m
[32m+[m[32m      "[Preprocessing NW_018394999.1] Last: 0:00:00.009666 \tTotal: 0:01:03.245372\n",[m
[32m+[m[32m      "[Preprocessing NW_018395000.1] Last: 0:00:00.010993 \tTotal: 0:01:03.256404\n",[m
[32m+[m[32m      "[Preprocessing NW_018395001.1] Last: 0:00:00.012187 \tTotal: 0:01:03.268623\n",[m
[32m+[m[32m      "[Preprocessing NW_018395002.1] Last: 0:00:00.008621 \tTotal: 0:01:03.277274\n",[m
[32m+[m[32m      "[Preprocessing NW_018395003.1] Last: 0:00:00.013896 \tTotal: 0:01:03.291197\n",[m
[32m+[m[32m      "[Preprocessing NW_018395004.1] Last: 0:00:00.008211 \tTotal: 0:01:03.299434\n",[m
[32m+[m[32m      "[Preprocessing NW_018395005.1] Last: 0:00:00.016701 \tTotal: 0:01:03.316164\n",[m
[32m+[m[32m      "[Preprocessing NW_018395006.1] Last: 0:00:00.017178 \tTotal: 0:01:03.333368\n",[m
[32m+[m[32m      "[Preprocessing NW_018395007.1] Last: 0:00:00.013096 \tTotal: 0:01:03.346498\n",[m
[32m+[m[32m      "[Preprocessing NW_018395008.1] Last: 0:00:00.009862 \tTotal: 0:01:03.356393\n",[m
[32m+[m[32m      "[Preprocessing NW_018395009.1] Last: 0:00:00.011759 \tTotal: 0:01:03.368176\n",[m
[32m+[m[32m      "[Preprocessing NW_018395010.1] Last: 0:00:00.012873 \tTotal: 0:01:03.381075\n",[m
[32m+[m[32m      "[Preprocessing NW_018395011.1] Last: 0:00:00.008629 \tTotal: 0:01:03.389728\n",[m
[32m+[m[32m      "[Preprocessing NW_018395012.1] Last: 0:00:00.010003 \tTotal: 0:01:03.399755\n",[m
[32m+[m[32m      "[Preprocessing NW_018395013.1] Last: 0:00:00.010573 \tTotal: 0:01:03.410353\n",[m
[32m+[m[32m      "[Preprocessing NW_018395014.1] Last: 0:00:00.020938 \tTotal: 0:01:03.431315\n",[m
[32m+[m[32m      "[Preprocessing NW_018395015.1] Last: 0:00:00.016831 \tTotal: 0:01:03.448171\n",[m
[32m+[m[32m      "[Preprocessing NW_018395016.1] Last: 0:00:00.009601 \tTotal: 0:01:03.457795\n",[m
[32m+[m[32m      "[Preprocessing NW_018395017.1] Last: 0:00:00.024271 \tTotal: 0:01:03.482091\n",[m
[32m+[m[32m      "[Preprocessing NW_018395018.1] Last: 0:00:00.017138 \tTotal: 0:01:03.499256\n",[m
[32m+[m[32m      "[Preprocessing NW_018395019.1] Last: 0:00:00.017626 \tTotal: 0:01:03.516911\n",[m
[32m+[m[32m      "[Preprocessing NW_018395020.1] Last: 0:00:00.023261 \tTotal: 0:01:03.540204\n",[m
[32m+[m[32m      "[Preprocessing NW_018395021.1] Last: 0:00:00.015744 \tTotal: 0:01:03.555977\n",[m
[32m+[m[32m      "[Preprocessing NW_018395022.1] Last: 0:00:00.023586 \tTotal: 0:01:03.579589\n",[m
[32m+[m[32m      "[Preprocessing NW_018395023.1] Last: 0:00:00.015888 \tTotal: 0:01:03.595503\n",[m
[32m+[m[32m      "[Preprocessing NW_018395024.1] Last: 0:00:00.014769 \tTotal: 0:01:03.610296\n",[m
[32m+[m[32m      "[Preprocessing NW_018395025.1] Last: 0:00:00.015348 \tTotal: 0:01:03.625670\n",[m
[32m+[m[32m      "[Preprocessing NW_018395026.1] Last: 0:00:00.012675 \tTotal: 0:01:03.638370\n",[m
[32m+[m[32m      "[Preprocessing NW_018395027.1] Last: 0:00:00.016197 \tTotal: 0:01:03.654600\n",[m
[32m+[m[32m      "[Preprocessing NW_018395028.1] Last: 0:00:00.014176 \tTotal: 0:01:03.668802\n",[m
[32m+[m[32m      "[Preprocessing NW_018395029.1] Last: 0:00:00.013260 \tTotal: 0:01:03.682091\n",[m
[32m+[m[32m      "[Preprocessing NW_018395030.1] Last: 0:00:00.012768 \tTotal: 0:01:03.694889\n",[m
[32m+[m[32m      "[Preprocessing NW_018395031.1] Last: 0:00:00.017646 \tTotal: 0:01:03.712564\n",[m
[32m+[m[32m      "[Preprocessing NW_018395032.1] Last: 0:00:00.011322 \tTotal: 0:01:03.723913\n",[m
[32m+[m[32m      "[Preprocessing NW_018395033.1] Last: 0:00:00.013869 \tTotal: 0:01:03.737808\n",[m
[32m+[m[32m      "[Preprocessing NW_018395034.1] Last: 0:00:00.010464 \tTotal: 0:01:03.748299\n",[m
[32m+[m[32m      "[Preprocessing NW_018395035.1] Last: 0:00:00.010279 \tTotal: 0:01:03.758604\n",[m
[32m+[m[32m      "[Preprocessing NW_018395036.1] Last: 0:00:00.019125 \tTotal: 0:01:03.777757\n",[m
[32m+[m[32m      "[Preprocessing NW_018395037.1] Last: 0:00:00.014124 \tTotal: 0:01:03.791910\n",[m
[32m+[m[32m      "[Preprocessing NW_018395038.1] Last: 0:00:00.009232 \tTotal: 0:01:03.801167\n",[m
[32m+[m[32m      "[Preprocessing NW_018395039.1] Last: 0:00:00.010178 \tTotal: 0:01:03.811371\n",[m
[32m+[m[32m      "[Preprocessing NW_018395040.1] Last: 0:00:00.012546 \tTotal: 0:01:03.823952\n",[m
[32m+[m[32m      "[Preprocessing NW_018395041.1] Last: 0:00:00.013599 \tTotal: 0:01:03.837577\n",[m
[32m+[m[32m      "[Preprocessing NW_018395042.1] Last: 0:00:00.062582 \tTotal: 0:01:03.900198\n",[m
[32m+[m[32m      "[Preprocessing NW_018395043.1] Last: 0:00:00.092216 \tTotal: 0:01:03.992453\n",[m
[32m+[m[32m      "[Preprocessing NW_018395044.1] Last: 0:00:00.085077 \tTotal: 0:01:04.077564\n",[m
[32m+[m[32m      "[Preprocessing NW_018395045.1] Last: 0:00:00.111993 \tTotal: 0:01:04.189597\n",[m
[32m+[m[32m      "[Preprocessing NW_018395046.1] Last: 0:00:00.077901 \tTotal: 0:01:04.267538\n",[m
[32m+[m[32m      "[Preprocessing NW_018395047.1] Last: 0:00:00.077048 \tTotal: 0:01:04.344628\n",[m
[32m+[m[32m      "[Preprocessing NW_018395048.1] Last: 0:00:00.081883 \tTotal: 0:01:04.426553\n",[m
[32m+[m[32m      "[Preprocessing NW_018395049.1] Last: 0:00:00.079025 \tTotal: 0:01:04.505619\n",[m
[32m+[m[32m      "[Preprocessing NW_018395050.1] Last: 0:00:00.087022 \tTotal: 0:01:04.592683\n",[m
[32m+[m[32m      "[Preprocessing NW_018395051.1] Last: 0:00:00.081390 \tTotal: 0:01:04.674112\n",[m
[32m+[m[32m      "[Preprocessing NW_018395052.1] Last: 0:00:00.131660 \tTotal: 0:01:04.805824\n",[m
[32m+[m[32m      "[Preprocessing NW_018395053.1] Last: 0:00:00.091789 \tTotal: 0:01:04.897660\n",[m
[32m+[m[32m      "[Preprocessing NW_018395054.1] Last: 0:00:00.077929 \tTotal: 0:01:04.975628\n",[m
[32m+[m[32m      "[Preprocessing NW_018395055.1] Last: 0:00:00.084872 \tTotal: 0:01:05.060541\n",[m
[32m+[m[32m      "[Preprocessing NW_018395056.1] Last: 0:00:00.078663 \tTotal: 0:01:05.139243\n",[m
[32m+[m[32m      "[Preprocessing NW_018395057.1] Last: 0:00:00.081168 \tTotal: 0:01:05.220451\n",[m
[32m+[m[32m      "[Preprocessing NW_018395058.1] Last: 0:00:00.152243 \tTotal: 0:01:05.372733\n",[m
[32m+[m[32m      "[Preprocessing NW_018395059.1] Last: 0:00:00.135958 \tTotal: 0:01:05.508733\n",[m
[32m+[m[32m      "[Preprocessing NW_018395060.1] Last: 0:00:00.178597 \tTotal: 0:01:05.687367\n",[m
[32m+[m[32m      "[Preprocessing NW_018395061.1] Last: 0:00:00.177090 \tTotal: 0:01:05.864500\n",[m
[32m+[m[32m      "[Preprocessing NW_018395062.1] Last: 0:00:00.120278 \tTotal: 0:01:05.984815\n",[m
[32m+[m[32m      "[Preprocessing NW_018395063.1] Last: 0:00:00.095734 \tTotal: 0:01:06.080589\n",[m
[32m+[m[32m      "[Preprocessing NW_018395064.1] Last: 0:00:00.092019 \tTotal: 0:01:06.172647\n",[m
[32m+[m[32m      "[Preprocessing NW_018395065.1] Last: 0:00:00.119510 \tTotal: 0:01:06.292200\n",[m
[32m+[m[32m      "[Preprocessing NW_018395066.1] Last: 0:00:00.109431 \tTotal: 0:01:06.401735\n",[m
[32m+[m[32m      "[Preprocessing NW_018395067.1] Last: 0:00:00.083093 \tTotal: 0:01:06.484873\n",[m
[32m+[m[32m      "[Preprocessing NW_018395068.1] Last: 0:00:00.088304 \tTotal: 0:01:06.573222\n",[m
[32m+[m[32m      "[Preprocessing NW_018395069.1] Last: 0:00:00.090996 \tTotal: 0:01:06.664261\n",[m
[32m+[m[32m      "[Preprocessing NW_018395070.1] Last: 0:00:00.094457 \tTotal: 0:01:06.758765\n",[m
[32m+[m[32m      "[Preprocessing NW_018395071.1] Last: 0:00:00.080016 \tTotal: 0:01:06.838824\n",[m
[32m+[m[32m      "[Preprocessing NW_018395072.1] Last: 0:00:00.118881 \tTotal: 0:01:06.957749\n",[m
[32m+[m[32m      "[Preprocessing NW_018395073.1] Last: 0:00:00.081494 \tTotal: 0:01:07.039300\n",[m
[32m+[m[32m      "[Preprocessing NW_018395074.1] Last: 0:00:00.108172 \tTotal: 0:01:07.147514\n",[m
[32m+[m[32m      "[Preprocessing NW_018395075.1] Last: 0:00:00.088513 \tTotal: 0:01:07.236069\n",[m
[32m+[m[32m      "[Preprocessing NW_018395076.1] Last: 0:00:00.122620 \tTotal: 0:01:07.358733\n",[m
[32m+[m[32m      "[Preprocessing NW_018395077.1] Last: 0:00:00.085696 \tTotal: 0:01:07.444499\n",[m
[32m+[m[32m      "[Preprocessing NW_018395078.1] Last: 0:00:00.083012 \tTotal: 0:01:07.527555\n",[m
[32m+[m[32m      "[Preprocessing NW_018395079.1] Last: 0:00:00.087044 \tTotal: 0:01:07.614639\n",[m
[32m+[m[32m      "[Preprocessing NW_018395080.1] Last: 0:00:00.081800 \tTotal: 0:01:07.696480\n",[m
[32m+[m[32m      "[Preprocessing NW_018395081.1] Last: 0:00:00.091705 \tTotal: 0:01:07.788219\n",[m
[32m+[m[32m      "[Preprocessing NW_018395082.1] Last: 0:00:00.081879 \tTotal: 0:01:07.870139\n",[m
[32m+[m[32m      "[Preprocessing NW_018395083.1] Last: 0:00:00.110257 \tTotal: 0:01:07.980441\n",[m
[32m+[m[32m      "[Preprocessing NW_018395084.1] Last: 0:00:00.077868 \tTotal: 0:01:08.058357\n",[m
[32m+[m[32m      "[Preprocessing NW_018395085.1] Last: 0:00:00.091879 \tTotal: 0:01:08.150282\n",[m
[32m+[m[32m      "[Preprocessing NW_018395086.1] Last: 0:00:00.088831 \tTotal: 0:01:08.239152\n",[m
[32m+[m[32m      "[Preprocessing NW_018395087.1] Last: 0:00:00.106964 \tTotal: 0:01:08.346162\n",[m
[32m+[m[32m      "[Preprocessing NW_018395088.1] Last: 0:00:00.081748 \tTotal: 0:01:08.427954\n",[m
[32m+[m[32m      "[Preprocessing NW_018395089.1] Last: 0:00:00.105329 \tTotal: 0:01:08.533323\n",[m
[32m+[m[32m      "[Preprocessing NW_018395090.1] Last: 0:00:00.090004 \tTotal: 0:01:08.623367\n",[m
[32m+[m[32m      "[Preprocessing NW_018395091.1] Last: 0:00:00.100694 \tTotal: 0:01:08.724133\n",[m
[32m+[m[32m      "[Preprocessing NW_018395092.1] Last: 0:00:00.079078 \tTotal: 0:01:08.803250\n",[m
[32m+[m[32m      "[Preprocessing NW_018395093.1] Last: 0:00:00.084078 \tTotal: 0:01:08.887370\n",[m
[32m+[m[32m      "[Preprocessing NW_018395094.1] Last: 0:00:00.123934 \tTotal: 0:01:09.011364\n",[m
[32m+[m[32m      "[Preprocessing NW_018395095.1] Last: 0:00:00.089829 \tTotal: 0:01:09.101244\n",[m
[32m+[m[32m      "[Preprocessing NW_018395096.1] Last: 0:00:00.095320 \tTotal: 0:01:09.196641\n",[m
[32m+[m[32m      "[Preprocessing NW_018395097.1] Last: 0:00:00.102400 \tTotal: 0:01:09.299087\n",[m
[32m+[m[32m      "[Preprocessing NW_018395098.1] Last: 0:00:00.097693 \tTotal: 0:01:09.396820\n",[m
[32m+[m[32m      "[Preprocessing NW_018395099.1] Last: 0:00:00.096380 \tTotal: 0:01:09.493244\n",[m
[32m+[m[32m      "[Preprocessing NW_018395100.1] Last: 0:00:00.153768 \tTotal: 0:01:09.647049\n",[m
[32m+[m[32m      "[Preprocessing NW_018395101.1] Last: 0:00:00.085359 \tTotal: 0:01:09.732452\n",[m
[32m+[m[32m      "[Preprocessing NW_018395102.1] Last: 0:00:00.091543 \tTotal: 0:01:09.824038\n",[m
[32m+[m[32m      "[Preprocessing NW_018395103.1] Last: 0:00:00.104112 \tTotal: 0:01:09.928194\n",[m
[32m+[m[32m      "[Preprocessing NW_018395104.1] Last: 0:00:00.102098 \tTotal: 0:01:10.030333\n",[m
[32m+[m[32m      "[Preprocessing NW_018395105.1] Last: 0:00:00.130863 \tTotal: 0:01:10.161240\n",[m
[32m+[m[32m      "[Preprocessing NW_018395106.1] Last: 0:00:00.092654 \tTotal: 0:01:10.253933\n",[m
[32m+[m[32m      "[Preprocessing NW_018395107.1] Last: 0:00:00.133516 \tTotal: 0:01:10.387503\n",[m
[32m+[m[32m      "[Preprocessing NW_018395108.1] Last: 0:00:00.101470 \tTotal: 0:01:10.489017\n",[m
[32m+[m[32m      "[Preprocessing NW_018395109.1] Last: 0:00:00.093879 \tTotal: 0:01:10.582945\n",[m
[32m+[m[32m      "[Preprocessing NW_018395110.1] Last: 0:00:00.096157 \tTotal: 0:01:10.679145\n",[m
[32m+[m[32m      "[Preprocessing NW_018395111.1] Last: 0:00:00.154612 \tTotal: 0:01:10.833799\n",[m
[32m+[m[32m      "[Preprocessing NW_018395112.1] Last: 0:00:00.100947 \tTotal: 0:01:10.934791\n",[m
[32m+[m[32m      "[Preprocessing NW_018395126.1] Last: 0:00:00.091277 \tTotal: 0:01:11.026113\n",[m
[32m+[m[32m      "[Preprocessing NW_018395113.1] Last: 0:00:00.094008 \tTotal: 0:01:11.120166\n",[m
[32m+[m[32m      "[Preprocessing NW_018395114.1] Last: 0:00:00.142432 \tTotal: 0:01:11.262641\n",[m
[32m+[m[32m      "[Preprocessing NW_018395115.1] Last: 0:00:00.096402 \tTotal: 0:01:11.359083\n",[m
[32m+[m[32m      "[Preprocessing NW_018395116.1] Last: 0:00:00.092691 \tTotal: 0:01:11.451818\n",[m
[32m+[m[32m      "[Preprocessing NW_018395117.1] Last: 0:00:00.153176 \tTotal: 0:01:11.605041\n",[m
[32m+[m[32m      "[Preprocessing NW_018395118.1] Last: 0:00:00.098131 \tTotal: 0:01:11.703216\n",[m
[32m+[m[32m      "[Preprocessing NW_018395119.1] Last: 0:00:00.095294 \tTotal: 0:01:11.798558\n",[m
[32m+[m[32m      "[Preprocessing NW_018395120.1] Last: 0:00:00.097494 \tTotal: 0:01:11.896098\n",[m
[32m+[m[32m      "[Preprocessing NW_018395121.1] Last: 0:00:00.101180 \tTotal: 0:01:11.997325\n",[m
[32m+[m[32m      "[Preprocessing NW_018395122.1] Last: 0:00:00.090407 \tTotal: 0:01:12.087772\n",[m
[32m+[m[32m      "[Preprocessing NW_018395123.1] Last: 0:00:00.152880 \tTotal: 0:01:12.240696\n",[m
[32m+[m[32m      "[Preprocessing NW_018395124.1] Last: 0:00:00.094611 \tTotal: 0:01:12.335351\n",[m
[32m+[m[32m      "[Preprocessing NW_018395125.1] Last: 0:00:00.096856 \tTotal: 0:01:12.432254\n",[m
[32m+[m[32m      "[Preprocessing NW_018395127.1] Last: 0:00:00.095994 \tTotal: 0:01:12.528303\n",[m
[32m+[m[32m      "[Preprocessing NW_018395128.1] Last: 0:00:00.094808 \tTotal: 0:01:12.623160\n",[m
[32m+[m[32m      "[Preprocessing NW_018395129.1] Last: 0:00:00.095284 \tTotal: 0:01:12.718493\n",[m
[32m+[m[32m      "[Preprocessing NW_018395130.1] Last: 0:00:00.095185 \tTotal: 0:01:12.813722\n",[m
[32m+[m[32m      "[Preprocessing NW_018395132.1] Last: 0:00:00.158505 \tTotal: 0:01:12.972268\n",[m
[32m+[m[32m      "[Preprocessing NW_018395133.1] Last: 0:00:00.095376 \tTotal: 0:01:13.067684\n",[m
[32m+[m[32m      "[Preprocessing NW_018395134.1] Last: 0:00:00.093899 \tTotal: 0:01:13.161622\n",[m
[32m+[m[32m      "[Preprocessing NW_018395135.1] Last: 0:00:00.095188 \tTotal: 0:01:13.256853\n",[m
[32m+[m[32m      "[Preprocessing NW_018395136.1] Last: 0:00:00.101532 \tTotal: 0:01:13.358428\n",[m
[32m+[m[32m      "[Preprocessing NW_018395137.1] Last: 0:00:00.105862 \tTotal: 0:01:13.464336\n",[m
[32m+[m[32m      "[Preprocessing NW_018395138.1] Last: 0:00:00.147859 \tTotal: 0:01:13.612240\n",[m
[32m+[m[32m      "[Preprocessing NW_018395131.1] Last: 0:00:00.086501 \tTotal: 0:01:13.698783\n",[m
[32m+[m[32m      "[Preprocessing NW_018395139.1] Last: 0:00:00.074549 \tTotal: 0:01:13.773386\n",[m
[32m+[m[32m      "[Preprocessing NW_018395140.1] Last: 0:00:00.012424 \tTotal: 0:01:13.785844\n",[m
[32m+[m[32m      "[Preprocessing NW_018395141.1] Last: 0:00:00.015028 \tTotal: 0:01:13.800904\n",[m
[32m+[m[32m      "[Preprocessing NW_018395142.1] Last: 0:00:00.014238 \tTotal: 0:01:13.815170\n",[m
[32m+[m[32m      "[Preprocessing NW_018395143.1] Last: 0:00:00.019381 \tTotal: 0:01:13.834583\n",[m
[32m+[m[32m      "[Preprocessing NW_018395144.1] Last: 0:00:00.024019 \tTotal: 0:01:13.858633\n",[m
[32m+[m[32m      "[Preprocessing NW_018395145.1] Last: 0:00:00.020021 \tTotal: 0:01:13.878684\n",[m
[32m+[m[32m      "[Preprocessing NW_018395146.1] Last: 0:00:00.012327 \tTotal: 0:01:13.891042\n",[m
[32m+[m[32m      "[Preprocessing NW_018395147.1] Last: 0:00:00.008756 \tTotal: 0:01:13.899826\n",[m
[32m+[m[32m      "[Preprocessing NW_018395148.1] Last: 0:00:00.015281 \tTotal: 0:01:13.915135\n",[m
[32m+[m[32m      "[Preprocessing NW_018395149.1] Last: 0:00:00.009888 \tTotal: 0:01:13.925051\n",[m
[32m+[m[32m      "[Preprocessing NW_018395150.1] Last: 0:00:00.013349 \tTotal: 0:01:13.938430\n",[m
[32m+[m[32m      "[Preprocessing NW_018395151.1] Last: 0:00:00.013532 \tTotal: 0:01:13.951992\n",[m
[32m+[m[32m      "[Preprocessing NW_018395152.1] Last: 0:00:00.011087 \tTotal: 0:01:13.963107\n",[m
[32m+[m[32m      "[Preprocessing NW_018395153.1] Last: 0:00:00.012504 \tTotal: 0:01:13.975637\n",[m
[32m+[m[32m      "[Preprocessing NW_018395154.1] Last: 0:00:00.018595 \tTotal: 0:01:13.994262\n",[m
[32m+[m[32m      "[Preprocessing NW_018395155.1] Last: 0:00:00.022275 \tTotal: 0:01:14.016570\n",[m
[32m+[m[32m      "[Preprocessing NW_018395156.1] Last: 0:00:00.007107 \tTotal: 0:01:14.023708\n",[m
[32m+[m[32m      "[Preprocessing NW_018395157.1] Last: 0:00:00.013322 \tTotal: 0:01:14.037060\n",[m
[32m+[m[32m      "[Preprocessing NW_018395158.1] Last: 0:00:00.022669 \tTotal: 0:01:14.059760\n",[m
[32m+[m[32m      "[Preprocessing NW_018395159.1] Last: 0:00:00.018600 \tTotal: 0:01:14.078399\n",[m
[32m+[m[32m      "[Preprocessing NW_018395160.1] Last: 0:00:00.010799 \tTotal: 0:01:14.089227\n",[m
[32m+[m[32m      "[Preprocessing NW_018395161.1] Last: 0:00:00.014013 \tTotal: 0:01:14.103267\n",[m
[32m+[m[32m      "[Preprocessing NW_018395162.1] Last: 0:00:00.011250 \tTotal: 0:01:14.114542\n",[m
[32m+[m[32m      "[Preprocessing NW_018395163.1] Last: 0:00:00.006844 \tTotal: 0:01:14.121410\n",[m
[32m+[m[32m      "[Preprocessing NW_018395164.1] Last: 0:00:00.010182 \tTotal: 0:01:14.131617\n",[m
[32m+[m[32m      "[Preprocessing NW_018395165.1] Last: 0:00:00.015766 \tTotal: 0:01:14.147406\n",[m
[32m+[m[32m      "[Preprocessing NW_018395166.1] Last: 0:00:00.010870 \tTotal: 0:01:14.158301\n",[m
[32m+[m[32m      "[Preprocessing NW_018395167.1] Last: 0:00:00.014203 \tTotal: 0:01:14.172530\n",[m
[32m+[m[32m      "[Preprocessing NW_018395168.1] Last: 0:00:00.015171 \tTotal: 0:01:14.187729\n",[m
[32m+[m[32m      "[Preprocessing NW_018395169.1] Last: 0:00:00.015688 \tTotal: 0:01:14.203446\n",[m
[32m+[m[32m      "[Preprocessing NW_018395170.1] Last: 0:00:00.010637 \tTotal: 0:01:14.214113\n",[m
[32m+[m[32m      "[Preprocessing NW_018395171.1] Last: 0:00:00.017907 \tTotal: 0:01:14.232046\n",[m
[32m+[m[32m      "[Preprocessing NW_018395172.1] Last: 0:00:00.016140 \tTotal: 0:01:14.248212\n",[m
[32m+[m[32m      "[Preprocessing NW_018395173.1] Last: 0:00:00.014123 \tTotal: 0:01:14.262361\n",[m
[32m+[m[32m      "[Preprocessing NW_018395174.1] Last: 0:00:00.017134 \tTotal: 0:01:14.279521\n",[m
[32m+[m[32m      "[Preprocessing NW_018395175.1] Last: 0:00:00.009724 \tTotal: 0:01:14.289273\n",[m
[32m+[m[32m      "[Preprocessing NW_018395176.1] Last: 0:00:00.015385 \tTotal: 0:01:14.304685\n",[m
[32m+[m[32m      "[Preprocessing NW_018395177.1] Last: 0:00:00.011149 \tTotal: 0:01:14.315859\n",[m
[32m+[m[32m      "[Preprocessing NW_018395178.1] Last: 0:00:00.014876 \tTotal: 0:01:14.330762\n",[m
[32m+[m[32m      "[Preprocessing NW_018395179.1] Last: 0:00:00.019106 \tTotal: 0:01:14.349899\n",[m
[32m+[m[32m      "[Preprocessing NW_018395180.1] Last: 0:00:00.012420 \tTotal: 0:01:14.362352\n",[m
[32m+[m[32m      "[Preprocessing NW_018395181.1] Last: 0:00:00.012557 \tTotal: 0:01:14.374939\n",[m
[32m+[m[32m      "[Preprocessing NW_018395182.1] Last: 0:00:00.011076 \tTotal: 0:01:14.386043\n",[m
[32m+[m[32m      "[Preprocessing NW_018395183.1] Last: 0:00:00.010319 \tTotal: 0:01:14.396398\n",[m
[32m+[m[32m      "[Preprocessing NW_018395184.1] Last: 0:00:00.012664 \tTotal: 0:01:14.409089\n",[m
[32m+[m[32m      "[Preprocessing NW_018395185.1] Last: 0:00:00.014574 \tTotal: 0:01:14.423688\n",[m
[32m+[m[32m      "[Preprocessing NW_018395186.1] Last: 0:00:00.011974 \tTotal: 0:01:14.435688\n",[m
[32m+[m[32m      "[Preprocessing NW_018395187.1] Last: 0:00:00.009396 \tTotal: 0:01:14.445110\n",[m
[32m+[m[32m      "[Preprocessing NW_018395188.1] Last: 0:00:00.012591 \tTotal: 0:01:14.457725\n",[m
[32m+[m[32m      "[Preprocessing NW_018395189.1] Last: 0:00:00.010080 \tTotal: 0:01:14.467829\n",[m
[32m+[m[32m      "[Preprocessing NW_018395190.1] Last: 0:00:00.009661 \tTotal: 0:01:14.477514\n",[m
[32m+[m[32m      "[Preprocessing NW_018395191.1] Last: 0:00:00.009888 \tTotal: 0:01:14.487427\n",[m
[32m+[m[32m      "[Preprocessing NW_018395192.1] Last: 0:00:00.025795 \tTotal: 0:01:14.513252\n",[m
[32m+[m[32m      "[Preprocessing NW_018395193.1] Last: 0:00:00.011178 \tTotal: 0:01:14.524458\n",[m
[32m+[m[32m      "[Preprocessing NW_018395194.1] Last: 0:00:00.014542 \tTotal: 0:01:14.539032\n",[m
[32m+[m[32m      "[Preprocessing NW_018395195.1] Last: 0:00:00.014003 \tTotal: 0:01:14.553065\n",[m
[32m+[m[32m      "[Preprocessing NW_018395196.1] Last: 0:00:00.016070 \tTotal: 0:01:14.569166\n",[m
[32m+[m[32m      "[Preprocessing NW_018395197.1] Last: 0:00:00.015061 \tTotal: 0:01:14.584254\n",[m
[32m+[m[32m      "[Preprocessing NW_018395198.1] Last: 0:00:00.009017 \tTotal: 0:01:14.593297\n",[m
[32m+[m[32m      "[Preprocessing NW_018395199.1] Last: 0:00:00.011767 \tTotal: 0:01:14.605091\n",[m
[32m+[m[32m      "[Preprocessing NW_018395200.1] Last: 0:00:00.016090 \tTotal: 0:01:14.621208\n",[m
[32m+[m[32m      "[Preprocessing NW_018395201.1] Last: 0:00:00.012190 \tTotal: 0:01:14.633424\n",[m
[32m+[m[32m      "[Preprocessing NW_018395202.1] Last: 0:00:00.013140 \tTotal: 0:01:14.646590\n",[m
[32m+[m[32m      "[Preprocessing NW_018395203.1] Last: 0:00:00.026319 \tTotal: 0:01:14.672937\n",[m
[32m+[m[32m      "[Preprocessing NW_018395204.1] Last: 0:00:00.012005 \tTotal: 0:01:14.684971\n",[m
[32m+[m[32m      "[Preprocessing NW_018395205.1] Last: 0:00:00.030211 \tTotal: 0:01:14.715218\n",[m
[32m+[m[32m      "[Preprocessing NW_018395206.1] Last: 0:00:00.019896 \tTotal: 0:01:14.735142\n",[m
[32m+[m[32m      "[Preprocessing NW_018395207.1] Last: 0:00:00.016388 \tTotal: 0:01:14.751560\n",[m
[32m+[m[32m      "[Preprocessing NW_018395208.1] Last: 0:00:00.011550 \tTotal: 0:01:14.763141\n",[m
[32m+[m[32m      "[Preprocessing NW_018395209.1] Last: 0:00:00.016875 \tTotal: 0:01:14.780043\n",[m
[32m+[m[32m      "[Preprocessing NW_018395210.1] Last: 0:00:00.026690 \tTotal: 0:01:14.806763\n",[m
[32m+[m[32m      "[Preprocessing NW_018395211.1] Last: 0:00:00.014375 \tTotal: 0:01:14.821165\n",[m
[32m+[m[32m      "[Preprocessing NW_018395212.1] Last: 0:00:00.011725 \tTotal: 0:01:14.832916\n",[m
[32m+[m[32m      "[Preprocessing NW_018395213.1] Last: 0:00:00.023051 \tTotal: 0:01:14.855993\n",[m
[32m+[m[32m      "[Preprocessing NW_018395214.1] Last: 0:00:00.012015 \tTotal: 0:01:14.868035\n",[m
[32m+[m[32m      "[Preprocessing NW_018395215.1] Last: 0:00:00.011833 \tTotal: 0:01:14.879893\n",[m
[32m+[m[32m      "[Preprocessing NW_018395216.1] Last: 0:00:00.030367 \tTotal: 0:01:14.910288\n",[m
[32m+[m[32m      "[Preprocessing NW_018395217.1] Last: 0:00:00.011755 \tTotal: 0:01:14.922069\n",[m
[32m+[m[32m      "[Preprocessing NW_018395218.1] Last: 0:00:00.013310 \tTotal: 0:01:14.935405\n",[m
[32m+[m[32m      "[Preprocessing NW_018395219.1] Last: 0:00:00.011265 \tTotal: 0:01:14.946696\n",[m
[32m+[m[32m      "[Preprocessing NW_018395220.1] Last: 0:00:00.018100 \tTotal: 0:01:14.964824\n",[m
[32m+[m[32m      "[Preprocessing NW_018395221.1] Last: 0:00:00.018718 \tTotal: 0:01:14.983573\n",[m
[32m+[m[32m      "[Preprocessing NW_018395222.1] Last: 0:00:00.017092 \tTotal: 0:01:15.000694\n",[m
[32m+[m[32m      "[Preprocessing NW_018395223.1] Last: 0:00:00.019477 \tTotal: 0:01:15.020202\n",[m
[32m+[m[32m      "[Preprocessing NW_018395224.1] Last: 0:00:00.018354 \tTotal: 0:01:15.038584\n",[m
[32m+[m[32m      "[Preprocessing NW_018395225.1] Last: 0:00:00.016293 \tTotal: 0:01:15.054906\n",[m
[32m+[m[32m      "[Preprocessing NW_018395226.1] Last: 0:00:00.017269 \tTotal: 0:01:15.072204\n",[m
[32m+[m[32m      "[Preprocessing NW_018395227.1] Last: 0:00:00.021924 \tTotal: 0:01:15.094159\n",[m
[32m+[m[32m      "[Preprocessing NW_018395228.1] Last: 0:00:00.016834 \tTotal: 0:01:15.111022\n",[m
[32m+[m[32m      "[Preprocessing NW_018395229.1] Last: 0:00:00.011694 \tTotal: 0:01:15.122746\n",[m
[32m+[m[32m      "[Preprocessing NW_018395230.1] Last: 0:00:00.022717 \tTotal: 0:01:15.145492\n",[m
[32m+[m[32m      "[Preprocessing NW_018395231.1] Last: 0:00:00.088805 \tTotal: 0:01:15.234333\n",[m
[32m+[m[32m      "[Preprocessing NW_018395232.1] Last: 0:00:00.023194 \tTotal: 0:01:15.257560\n",[m
[32m+[m[32m      "[Preprocessing NW_018395233.1] Last: 0:00:00.017973 \tTotal: 0:01:15.275561\n",[m
[32m+[m[32m      "[Preprocessing NW_018395234.1] Last: 0:00:00.015818 \tTotal: 0:01:15.291408\n",[m
[32m+[m[32m      "[Preprocessing NW_018395235.1] Last: 0:00:00.012097 \tTotal: 0:01:15.303533\n",[m
[32m+[m[32m      "[Preprocessing NW_018395236.1] Last: 0:00:00.014821 \tTotal: 0:01:15.318392\n",[m
[32m+[m[32m      "[Preprocessing NW_018395237.1] Last: 0:00:00.011436 \tTotal: 0:01:15.329855\n",[m
[32m+[m[32m      "[Preprocessing NW_018395238.1] Last: 0:00:00.010255 \tTotal: 0:01:15.340136\n",[m
[32m+[m[32m      "[Preprocessing NW_018395239.1] Last: 0:00:00.008320 \tTotal: 0:01:15.348479\n",[m
[32m+[m[32m      "[Preprocessing NW_018395240.1] Last: 0:00:00.012316 \tTotal: 0:01:15.360820\n",[m
[32m+[m[32m      "[Preprocessing NW_018395241.1] Last: 0:00:00.013183 \tTotal: 0:01:15.374031\n",[m
[32m+[m[32m      "[Preprocessing NW_018395242.1] Last: 0:00:00.018166 \tTotal: 0:01:15.392228\n",[m
[32m+[m[32m      "[Preprocessing NW_018395243.1] Last: 0:00:00.009159 \tTotal: 0:01:15.401416\n",[m
[32m+[m[32m      "[Preprocessing NW_018395244.1] Last: 0:00:00.010943 \tTotal: 0:01:15.412395\n",[m
[32m+[m[32m      "[Preprocessing NW_018395245.1] Last: 0:00:00.010257 \tTotal: 0:01:15.422677\n",[m
[32m+[m[32m      "[Preprocessing NW_018395246.1] Last: 0:00:00.011177 \tTotal: 0:01:15.433878\n",[m
[32m+[m[32m      "[Preprocessing NW_018395247.1] Last: 0:00:00.012740 \tTotal: 0:01:15.446647\n",[m
[32m+[m[32m      "[Preprocessing NW_018395248.1] Last: 0:00:00.013759 \tTotal: 0:01:15.460430\n",[m
[32m+[m[32m      "[Preprocessing NW_018395249.1] Last: 0:00:00.022488 \tTotal: 0:01:15.482943\n",[m
[32m+[m[32m      "[Preprocessing NW_018395250.1] Last: 0:00:00.007399 \tTotal: 0:01:15.490368\n",[m
[32m+[m[32m      "[Preprocessing NW_018395252.1] Last: 0:00:00.022107 \tTotal: 0:01:15.512518\n",[m
[32m+[m[32m      "[Preprocessing NW_018395253.1] Last: 0:00:00.016813 \tTotal: 0:01:15.529356\n",[m
[32m+[m[32m      "[Preprocessing NW_018395251.1] Last: 0:00:00.019669 \tTotal: 0:01:15.549052\n",[m
[32m+[m[32m      "[Preprocessing NW_018395254.1] Last: 0:00:00.012874 \tTotal: 0:01:15.561952\n",[m
[32m+[m[32m      "[Preprocessing NW_018395255.1] Last: 0:00:00.014057 \tTotal: 0:01:15.576035\n",[m
[32m+[m[32m      "[Preprocessing NW_018395256.1] Last: 0:00:00.011409 \tTotal: 0:01:15.587470\n",[m
[32m+[m[32m      "[Preprocessing NW_018395257.1] Last: 0:00:00.010153 \tTotal: 0:01:15.597647\n",[m
[32m+[m[32m      "[Preprocessing NW_018395258.1] Last: 0:00:00.014385 \tTotal: 0:01:15.612056\n",[m
[32m+[m[32m      "[Preprocessing NW_018395259.1] Last: 0:00:00.018906 \tTotal: 0:01:15.630985\n",[m
[32m+[m[32m      "[Preprocessing NW_018395260.1] Last: 0:00:00.014019 \tTotal: 0:01:15.645030\n",[m
[32m+[m[32m      "[Preprocessing NW_018395261.1] Last: 0:00:00.015237 \tTotal: 0:01:15.660294\n",[m
[32m+[m[32m      "[Preprocessing NW_018395262.1] Last: 0:00:00.021902 \tTotal: 0:01:15.682225\n",[m
[32m+[m[32m      "[Preprocessing NW_018395263.1] Last: 0:00:00.020496 \tTotal: 0:01:15.702755\n",[m
[32m+[m[32m      "[Preprocessing NW_018395264.1] Last: 0:00:00.019359 \tTotal: 0:01:15.722146\n",[m
[32m+[m[32m      "[Preprocessing NW_018395265.1] Last: 0:00:00.014961 \tTotal: 0:01:15.737132\n",[m
[32m+[m[32m      "[Preprocessing NW_018395266.1] Last: 0:00:00.012698 \tTotal: 0:01:15.749854\n",[m
[32m+[m[32m      "[Preprocessing NW_018395267.1] Last: 0:00:00.009005 \tTotal: 0:01:15.758882\n",[m
[32m+[m[32m      "[Preprocessing NW_018395268.1] Last: 0:00:00.015517 \tTotal: 0:01:15.774423\n",[m
[32m+[m[32m      "[Preprocessing NW_018395269.1] Last: 0:00:00.017257 \tTotal: 0:01:15.791708\n",[m
[32m+[m[32m      "[Preprocessing NW_018395270.1] Last: 0:00:00.016559 \tTotal: 0:01:15.808295\n",[m
[32m+[m[32m      "[Preprocessing NW_018395271.1] Last: 0:00:00.010384 \tTotal: 0:01:15.818704\n",[m
[32m+[m[32m      "[Preprocessing NW_018395272.1] Last: 0:00:00.013442 \tTotal: 0:01:15.832177\n",[m
[32m+[m[32m      "[Preprocessing NW_018395273.1] Last: 0:00:00.013849 \tTotal: 0:01:15.846053\n",[m
[32m+[m[32m      "[Preprocessing NW_018395274.1] Last: 0:00:00.012471 \tTotal: 0:01:15.858550\n",[m
[32m+[m[32m      "[Preprocessing NW_018395275.1] Last: 0:00:00.011091 \tTotal: 0:01:15.869668\n",[m
[32m+[m[32m      "[Preprocessing NW_018395276.1] Last: 0:00:00.014313 \tTotal: 0:01:15.884007\n",[m
[32m+[m[32m      "[Preprocessing NW_018395277.1] Last: 0:00:00.015555 \tTotal: 0:01:15.899589\n",[m
[32m+[m[32m      "[Preprocessing NW_018395278.1] Last: 0:00:00.015077 \tTotal: 0:01:15.914692\n",[m
[32m+[m[32m      "[Preprocessing NW_018395279.1] Last: 0:00:00.019864 \tTotal: 0:01:15.934586\n",[m
[32m+[m[32m      "[Preprocessing NW_018395280.1] Last: 0:00:00.007836 \tTotal: 0:01:15.942449\n",[m
[32m+[m[32m      "[Preprocessing NW_018395281.1] Last: 0:00:00.013468 \tTotal: 0:01:15.955943\n",[m
[32m+[m[32m      "[Preprocessing NW_018395282.1] Last: 0:00:00.023828 \tTotal: 0:01:15.979797\n",[m
[32m+[m[32m      "[Preprocessing NW_018395283.1] Last: 0:00:00.011955 \tTotal: 0:01:15.991777\n",[m
[32m+[m[32m      "[Preprocessing NW_018395284.1] Last: 0:00:00.014782 \tTotal: 0:01:16.006583\n",[m
[32m+[m[32m      "[Preprocessing NW_018395285.1] Last: 0:00:00.016508 \tTotal: 0:01:16.023116\n",[m
[32m+[m[32m      "[Preprocessing NW_018395286.1] Last: 0:00:00.010017 \tTotal: 0:01:16.033157\n",[m
[32m+[m[32m      "[Preprocessing NW_018395287.1] Last: 0:00:00.011815 \tTotal: 0:01:16.044993\n",[m
[32m+[m[32m      "[Preprocessing NW_018395288.1] Last: 0:00:00.007792 \tTotal: 0:01:16.052807\n",[m
[32m+[m[32m      "[Preprocessing NW_018395289.1] Last: 0:00:00.022857 \tTotal: 0:01:16.075691\n",[m
[32m+[m[32m      "[Preprocessing NW_018395290.1] Last: 0:00:00.011718 \tTotal: 0:01:16.087435\n",[m
[32m+[m[32m      "[Preprocessing NW_018395291.1] Last: 0:00:00.010854 \tTotal: 0:01:16.098317\n",[m
[32m+[m[32m      "[Preprocessing NW_018395292.1] Last: 0:00:00.011224 \tTotal: 0:01:16.109568\n",[m
[32m+[m[32m      "[Preprocessing NW_018395293.1] Last: 0:00:00.015610 \tTotal: 0:01:16.125203\n",[m
[32m+[m[32m      "[Preprocessing NW_018395294.1] Last: 0:00:00.010504 \tTotal: 0:01:16.135732\n",[m
[32m+[m[32m      "[Preprocessing NW_018395295.1] Last: 0:00:00.017682 \tTotal: 0:01:16.153440\n",[m
[32m+[m[32m      "[Preprocessing NW_018395296.1] Last: 0:00:00.025332 \tTotal: 0:01:16.178803\n",[m
[32m+[m[32m      "[Preprocessing NW_018395297.1] Last: 0:00:00.012534 \tTotal: 0:01:16.191385\n",[m
[32m+[m[32m      "[Preprocessing NW_018395298.1] Last: 0:00:00.014569 \tTotal: 0:01:16.205983\n",[m
[32m+[m[32m      "[Preprocessing NW_018395299.1] Last: 0:00:00.009835 \tTotal: 0:01:16.215847\n",[m
[32m+[m[32m      "[Preprocessing NW_018395300.1] Last: 0:00:00.014658 \tTotal: 0:01:16.230531\n",[m
[32m+[m[32m      "[Preprocessing NW_018395301.1] Last: 0:00:00.025473 \tTotal: 0:01:16.256033\n",[m
[32m+[m[32m      "[Preprocessing NW_018395302.1] Last: 0:00:00.013308 \tTotal: 0:01:16.269371\n",[m
[32m+[m[32m      "[Preprocessing NW_018395303.1] Last: 0:00:00.013504 \tTotal: 0:01:16.282915\n",[m
[32m+[m[32m      "[Preprocessing NW_018395304.1] Last: 0:00:00.009693 \tTotal: 0:01:16.292635\n",[m
[32m+[m[32m      "[Preprocessing NW_018395305.1] Last: 0:00:00.012951 \tTotal: 0:01:16.305609\n",[m
[32m+[m[32m      "[Preprocessing NW_018395306.1] Last: 0:00:00.013016 \tTotal: 0:01:16.318652\n",[m
[32m+[m[32m      "[Preprocessing NW_018395307.1] Last: 0:00:00.011613 \tTotal: 0:01:16.330292\n",[m
[32m+[m[32m      "[Preprocessing NW_018395308.1] Last: 0:00:00.010923 \tTotal: 0:01:16.341240\n",[m
[32m+[m[32m      "[Preprocessing NW_018395309.1] Last: 0:00:00.014894 \tTotal: 0:01:16.356160\n",[m
[32m+[m[32m      "[Preprocessing NW_018395310.1] Last: 0:00:00.014783 \tTotal: 0:01:16.370970\n",[m
[32m+[m[32m      "[Preprocessing NW_018395311.1] Last: 0:00:00.013863 \tTotal: 0:01:16.384861\n",[m
[32m+[m[32m      "[Preprocessing NW_018395312.1] Last: 0:00:00.015393 \tTotal: 0:01:16.400280\n",[m
[32m+[m[32m      "[Preprocessing NW_018395313.1] Last: 0:00:00.012234 \tTotal: 0:01:16.412538\n",[m
[32m+[m[32m      "[Preprocessing NW_018395314.1] Last: 0:00:00.018913 \tTotal: 0:01:16.431476\n",[m
[32m+[m[32m      "[Preprocessing NW_018395315.1] Last: 0:00:00.013345 \tTotal: 0:01:16.444847\n",[m
[32m+[m[32m      "[Preprocessing NW_018395316.1] Last: 0:00:00.017223 \tTotal: 0:01:16.462097\n",[m
[32m+[m[32m      "[Preprocessing NW_018395317.1] Last: 0:00:00.012120 \tTotal: 0:01:16.474241\n",[m
[32m+[m[32m      "[Preprocessing NW_018395318.1] Last: 0:00:00.013535 \tTotal: 0:01:16.487802\n",[m
[32m+[m[32m      "[Preprocessing NW_018395319.1] Last: 0:00:00.014757 \tTotal: 0:01:16.502586\n",[m
[32m+[m[32m      "[Preprocessing NW_018395320.1] Last: 0:00:00.013332 \tTotal: 0:01:16.515944\n",[m
[32m+[m[32m      "[Preprocessing NW_018395321.1] Last: 0:00:00.010686 \tTotal: 0:01:16.526661\n",[m
[32m+[m[32m      "[Preprocessing NW_018395322.1] Last: 0:00:00.009448 \tTotal: 0:01:16.536138\n",[m
[32m+[m[32m      "[Preprocessing NW_018395323.1] Last: 0:00:00.018256 \tTotal: 0:01:16.554422\n",[m
[32m+[m[32m      "[Preprocessing NW_018395324.1] Last: 0:00:00.021392 \tTotal: 0:01:16.575842\n",[m
[32m+[m[32m      "[Preprocessing NW_018395325.1] Last: 0:00:00.008578 \tTotal: 0:01:16.584447\n",[m
[32m+[m[32m      "[Preprocessing NW_018395326.1] Last: 0:00:00.022415 \tTotal: 0:01:16.606893\n",[m
[32m+[m[32m      "[Preprocessing NW_018395327.1] Last: 0:00:00.013513 \tTotal: 0:01:16.620435\n",[m
[32m+[m[32m      "[Preprocessing NW_018395328.1] Last: 0:00:00.014474 \tTotal: 0:01:16.634937\n",[m
[32m+[m[32m      "[Preprocessing NW_018395329.1] Last: 0:00:00.010183 \tTotal: 0:01:16.645143\n",[m
[32m+[m[32m      "[Preprocessing NW_018395330.1] Last: 0:00:00.011558 \tTotal: 0:01:16.656727\n",[m
[32m+[m[32m      "[Preprocessing NW_018395331.1] Last: 0:00:00.016815 \tTotal: 0:01:16.673567\n",[m
[32m+[m[32m      "[Preprocessing NW_018395332.1] Last: 0:00:00.008561 \tTotal: 0:01:16.682156\n",[m
[32m+[m[32m      "[Preprocessing NW_018395333.1] Last: 0:00:00.014692 \tTotal: 0:01:16.696878\n",[m
[32m+[m[32m      "[Preprocessing NW_018395334.1] Last: 0:00:00.008212 \tTotal: 0:01:16.705117\n",[m
[32m+[m[32m      "[Preprocessing NW_018395335.1] Last: 0:00:00.018067 \tTotal: 0:01:16.723213\n",[m
[32m+[m[32m      "[Preprocessing NW_018395336.1] Last: 0:00:00.015176 \tTotal: 0:01:16.738418\n",[m
[32m+[m[32m      "[Preprocessing NW_018395337.1] Last: 0:00:00.009677 \tTotal: 0:01:16.748120\n",[m
[32m+[m[32m      "[Preprocessing NW_018395338.1] Last: 0:00:00.013242 \tTotal: 0:01:16.761392\n",[m
[32m+[m[32m      "[Preprocessing NW_018395339.1] Last: 0:00:00.032171 \tTotal: 0:01:16.793593\n",[m
[32m+[m[32m      "[Preprocessing NW_018395340.1] Last: 0:00:00.009865 \tTotal: 0:01:16.803488\n",[m
[32m+[m[32m      "[Preprocessing NW_018395341.1] Last: 0:00:00.021556 \tTotal: 0:01:16.825074\n",[m
[32m+[m[32m      "[Preprocessing NW_018395342.1] Last: 0:00:00.022252 \tTotal: 0:01:16.847355\n",[m
[32m+[m[32m      "[Preprocessing NW_018395343.1] Last: 0:00:00.010887 \tTotal: 0:01:16.858271\n",[m
[32m+[m[32m      "[Preprocessing NW_018395344.1] Last: 0:00:00.015266 \tTotal: 0:01:16.873564\n",[m
[32m+[m[32m      "[Preprocessing NW_018395345.1] Last: 0:00:00.010000 \tTotal: 0:01:16.883588\n",[m
[32m+[m[32m      "[Preprocessing NW_018395346.1] Last: 0:00:00.010647 \tTotal: 0:01:16.894260\n",[m
[32m+[m[32m      "[Preprocessing NW_018395347.1] Last: 0:00:00.013730 \tTotal: 0:01:16.908015\n",[m
[32m+[m[32m      "[Preprocessing NW_018395348.1] Last: 0:00:00.014270 \tTotal: 0:01:16.922309\n",[m
[32m+[m[32m      "[Preprocessing NW_018395349.1] Last: 0:00:00.019686 \tTotal: 0:01:16.942021\n",[m
[32m+[m[32m      "[Preprocessing NW_018395350.1] Last: 0:00:00.012646 \tTotal: 0:01:16.954691\n",[m
[32m+[m[32m      "[Preprocessing NW_018395351.1] Last: 0:00:00.009303 \tTotal: 0:01:16.964018\n",[m
[32m+[m[32m      "[Preprocessing NW_018395352.1] Last: 0:00:00.020609 \tTotal: 0:01:16.984651\n",[m
[32m+[m[32m      "[Preprocessing NW_018395353.1] Last: 0:00:00.014470 \tTotal: 0:01:16.999147\n",[m
[32m+[m[32m      "[Preprocessing NW_018395354.1] Last: 0:00:00.009381 \tTotal: 0:01:17.008552\n",[m
[32m+[m[32m      "[Preprocessing NW_018395355.1] Last: 0:00:00.009672 \tTotal: 0:01:17.018247\n",[m
[32m+[m[32m      "[Preprocessing NW_018395356.1] Last: 0:00:00.017910 \tTotal: 0:01:17.036181\n",[m
[32m+[m[32m      "[Preprocessing NW_018395357.1] Last: 0:00:00.017926 \tTotal: 0:01:17.054132\n",[m
[32m+[m[32m      "[Preprocessing NW_018395358.1] Last: 0:00:00.017747 \tTotal: 0:01:17.071902\n",[m
[32m+[m[32m      "[Preprocessing NW_018395359.1] Last: 0:00:00.012703 \tTotal: 0:01:17.084628\n",[m
[32m+[m[32m      "[Preprocessing NW_018395360.1] Last: 0:00:00.015390 \tTotal: 0:01:17.100042\n",[m
[32m+[m[32m      "[Preprocessing NW_018395361.1] Last: 0:00:00.014628 \tTotal: 0:01:17.114695\n",[m
[32m+[m[32m      "[Preprocessing NW_018395362.1] Last: 0:00:00.016858 \tTotal: 0:01:17.131577\n",[m
[32m+[m[32m      "[Preprocessing NW_018395363.1] Last: 0:00:00.010894 \tTotal: 0:01:17.142494\n",[m
[32m+[m[32m      "[Preprocessing NW_018395364.1] Last: 0:00:00.009574 \tTotal: 0:01:17.152091\n",[m
[32m+[m[32m      "[Preprocessing NW_018395365.1] Last: 0:00:00.007655 \tTotal: 0:01:17.159768\n",[m
[32m+[m[32m      "[Preprocessing NW_018395366.1] Last: 0:00:00.012931 \tTotal: 0:01:17.172722\n",[m
[32m+[m[32m      "[Preprocessing NW_018395367.1] Last: 0:00:00.011902 \tTotal: 0:01:17.184647\n",[m
[32m+[m[32m      "[Preprocessing NW_018395368.1] Last: 0:00:00.007957 \tTotal: 0:01:17.192628\n",[m
[32m+[m[32m      "[Preprocessing NW_018395369.1] Last: 0:00:00.017683 \tTotal: 0:01:17.210337\n",[m
[32m+[m[32m      "[Preprocessing NW_018395370.1] Last: 0:00:00.014439 \tTotal: 0:01:17.224800\n",[m
[32m+[m[32m      "[Preprocessing NW_018395371.1] Last: 0:00:00.013490 \tTotal: 0:01:17.238315\n",[m
[32m+[m[32m      "[Preprocessing NW_018395372.1] Last: 0:00:00.011720 \tTotal: 0:01:17.250059\n",[m
[32m+[m[32m      "[Preprocessing NW_018395373.1] Last: 0:00:00.016678 \tTotal: 0:01:17.266764\n",[m
[32m+[m[32m      "[Preprocessing NW_018395374.1] Last: 0:00:00.010335 \tTotal: 0:01:17.277125\n",[m
[32m+[m[32m      "[Preprocessing NW_018395375.1] Last: 0:00:00.013980 \tTotal: 0:01:17.291130\n",[m
[32m+[m[32m      "[Preprocessing NW_018395376.1] Last: 0:00:00.015548 \tTotal: 0:01:17.306705\n",[m
[32m+[m[32m      "[Preprocessing NW_018395377.1] Last: 0:00:00.010837 \tTotal: 0:01:17.317567\n",[m
[32m+[m[32m      "[Preprocessing NW_018395378.1] Last: 0:00:00.010207 \tTotal: 0:01:17.327798\n",[m
[32m+[m[32m      "[Preprocessing NW_018395379.1] Last: 0:00:00.009844 \tTotal: 0:01:17.337668\n",[m
[32m+[m[32m      "[Preprocessing NW_018395380.1] Last: 0:00:00.020291 \tTotal: 0:01:17.357985\n",[m
[32m+[m[32m      "[Preprocessing NW_018395381.1] Last: 0:00:00.015797 \tTotal: 0:01:17.373808\n",[m
[32m+[m[32m      "[Preprocessing NW_018395382.1] Last: 0:00:00.012932 \tTotal: 0:01:17.386769\n",[m
[32m+[m[32m      "[Preprocessing NW_018395383.1] Last: 0:00:00.021533 \tTotal: 0:01:17.408331\n",[m
[32m+[m[32m      "[Preprocessing NW_018395384.1] Last: 0:00:00.017958 \tTotal: 0:01:17.426324\n",[m
[32m+[m[32m      "[Preprocessing NW_018395385.1] Last: 0:00:00.015306 \tTotal: 0:01:17.441658\n",[m
[32m+[m[32m      "[Preprocessing NW_018395386.1] Last: 0:00:00.009547 \tTotal: 0:01:17.451229\n",[m
[32m+[m[32m      "[Preprocessing NW_018395387.1] Last: 0:00:00.019033 \tTotal: 0:01:17.470287\n",[m
[32m+[m[32m      "[Preprocessing NW_018395388.1] Last: 0:00:00.026283 \tTotal: 0:01:17.496600\n",[m
[32m+[m[32m      "[Preprocessing NW_018395389.1] Last: 0:00:00.010448 \tTotal: 0:01:17.507076\n",[m
[32m+[m[32m      "[Preprocessing NC_002333.2] Last: 0:00:00.004752 \tTotal: 0:01:17.511851\n",[m
[32m+[m[32m      "[Genome preprocessing] Last: 0:00:01.971386 \tTotal: 0:01:19.483273\n",[m
[32m+[m[32m      "[2024-03-04 10:12:46] Starting commands:\n",[m
[32m+[m[32m      "[2024-03-04 10:12:46] Launched: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_C2T.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_C2T\n",[m
[32m+[m[32m      "[2024-03-04 10:12:46] Launched: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_G2A.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_G2A\n",[m
[32m+[m[32m      "[2024-03-04 10:12:46] Launched: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_C2T.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_C2T\n",[m
[32m+[m[32m      "[2024-03-04 10:12:46] Launched: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_G2A.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_G2A\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Building a SMALL indexBuilding a SMALL index\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "[2024-03-04 11:41:52] Finished: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_C2T.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_C2T\n",[m
[32m+[m[32m      "[2024-03-04 11:41:52] Finished: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_G2A.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_G2A\n",[m
[32m+[m[32m      "[2024-03-04 11:41:52] Finished: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_C2T.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_C2T\n",[m
[32m+[m[32m      "[2024-03-04 11:41:52] Finished: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_G2A.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_G2A\n",[m
[32m+[m[32m      "[Done] Last: 1:29:07.223433 \tTotal: 1:30:26.706754\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# indexing reference genome for BSseeker\n",[m
[32m+[m[32m    "bs_seeker2-build.py -f /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta --aligner bowtie2 -d /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 73,[m
[32m+[m[32m   "id": "87ceea7a-e8fb-426e-a592-7ece16951025",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda deactivate"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 78,[m
[32m+[m[32m   "id": "4f1fa5aa-6d0f-40c9-869e-60edf5e0884d",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SBATCH_ARGS: --time 4-24:00:00 --mem 80G -c 8\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/004.alignments_BS/bis-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4484680\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_BS\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments_BS_tm\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${IN}/${NAME}\n",[m
[32m+[m[32m    "        COMMAND=\"bs_seeker2-align.py \\\n",[m
[32m+[m[32m    "            -i ${IN}/$NAME \\\n",[m
[32m+[m[32m    "            -r \\\n",[m
[32m+[m[32m    "            --aligner bowtie2 \\\n",[m
[32m+[m[32m    "            -o ${OUT}/${PREFIX}.bam \\\n",[m
[32m+[m[32m    "            -g ${GENOME}/GCF_000002035.6_GRCz11_genomic.fasta \\\n",[m
[32m+[m[32m    "            -d ${GENOME}/BSseeker2-index \\\n",[m
[32m+[m[32m    "            --temp_dir=${OUT}/TMP/ \\\n",[m
[32m+[m[32m    "            --bt2-p 4\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/BS-align --time 23:59:00 --mem 25G -c 1| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 80,[m
[32m+[m[32m   "id": "171e748c-3be6-4798-acae-d5491cf4756c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 77,[m
[32m+[m[32m   "id": "8224139f-0a0d-4c19-9ff9-e13de20e29e1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709585374.6389313-814009;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/004.alignments_BS_tm\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m1163/1163\u001b[0m  gn.sh\u001b[0m\n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           multiqc\u001b[0m | \u001b[33mNo analysis results found. Cleaning up..\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 004.alignments_BS_tm -i QC.alignments -o 005.qc.alignments_BS_tm"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "8ba5efaf-9458-4ca2-a44e-26a47128e3b0",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.1a.1 BSseeker methyl extraction"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "d214d3d5-3eb9-42cd-8c1d-4da3aaf75576",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5.2 Preparation of the genome BISMARK"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "id": "3783cab4-c6a2-4e83-87db-688ef8700f76",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/rgenome/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "id": "9865ab66-9e85-47fd-94a4-7ee2506b8ece",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "grep -e \">\" GCF_000002035.6_GRCz11_genomic.fna | awk 'sub(/^>/, \"\")' | sort -k1 > ZF_chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 30,[m
[32m+[m[32m   "id": "a0b8ad1c-f98b-4fe9-8439-90bf173e605c",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "NC_004387.1 Oryzias latipes mitochondrion, complete genome\n",[m
[32m+[m[32m      "NC_019859.2 Oryzias latipes chromosome 1, ASM223467v1\n",[m
[32m+[m[32m      "NC_019860.2 Oryzias latipes chromosome 2, ASM223467v1\n",[m
[32m+[m[32m      "NC_019861.2 Oryzias latipes chromosome 3, ASM223467v1\n",[m
[32m+[m[32m      "NC_019862.2 Oryzias latipes chromosome 4, ASM223467v1\n",[m
[32m+[m[32m      "NC_019863.2 Oryzias latipes chromosome 5, ASM223467v1\n",[m
[32m+[m[32m      "NC_019864.2 Oryzias latipes chromosome 6, ASM223467v1\n",[m
[32m+[m[32m      "NC_019865.2 Oryzias latipes chromosome 7, ASM223467v1\n",[m
[32m+[m[32m      "NC_019866.2 Oryzias latipes chromosome 8, ASM223467v1\n",[m
[32m+[m[32m      "NC_019867.2 Oryzias latipes chromosome 9, ASM223467v1\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "head ZF_chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 31,[m
[32m+[m[32m   "id": "d8a4f420-e299-4553-bfeb-e4fc22caff6b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load bismark/0.23.0"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 35,[m
[32m+[m[32m   "id": "602a0242-59d8-4f3c-9922-cf6ba82d0638",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Writing bisulfite genomes out into a single MFA (multi FastA) file\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bisulfite Genome Indexer version v0.23.0 (last modified: 14 April 2019)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step I - Prepare genome folders - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Calculating genomic frequencies (this may take several minutes depending on genome size) ...\n",[m
[32m+[m[32m      "====================================================================================================================================================================\n",[m
[32m+[m[32m      "Now reading in and storing sequence information of the genome specified in: /workspace/cfngle/raw-data/JM/rgenome/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "chr NC_019859.2 (37713152 bp)\n",[m
[32m+[m[32m      "chr NC_019860.2 (25379070 bp)\n",[m
[32m+[m[32m      "chr NC_019861.2 (38248663 bp)\n",[m
[32m+[m[32m      "chr NC_019862.2 (32868862 bp)\n",[m
[32m+[m[32m      "chr NC_019863.2 (33205099 bp)\n",[m
[32m+[m[32m      "chr NC_019864.2 (32246747 bp)\n",[m
[32m+[m[32m      "chr NC_019865.2 (34573382 bp)\n",[m
[32m+[m[32m      "chr NC_019866.2 (26239357 bp)\n",[m
[32m+[m[32m      "chr NC_019867.2 (33399407 bp)\n",[m
[32m+[m[32m      "chr NC_019868.2 (31218526 bp)\n",[m
[32m+[m[32m      "chr NC_019869.2 (28210532 bp)\n",[m
[32m+[m[32m      "chr NC_019870.2 (30543476 bp)\n",[m
[32m+[m[32m      "chr NC_019871.2 (33825776 bp)\n",[m
[32m+[m[32m      "chr NC_019872.2 (30598983 bp)\n",[m
[32m+[m[32m      "chr NC_019873.2 (30476034 bp)\n",[m
[32m+[m[32m      "chr NC_019874.2 (32958677 bp)\n",[m
[32m+[m[32m      "chr NC_019875.2 (31792230 bp)\n",[m
[32m+[m[32m      "chr NC_019876.2 (30918796 bp)\n",[m
[32m+[m[32m      "chr NC_019877.2 (25472880 bp)\n",[m
[32m+[m[32m      "chr NC_019878.2 (25942153 bp)\n",[m
[32m+[m[32m      "chr NC_019879.2 (31148813 bp)\n",[m
[32m+[m[32m      "chr NC_019880.2 (28976614 bp)\n",[m
[32m+[m[32m      "chr NC_019881.2 (24400806 bp)\n",[m
[32m+[m[32m      "chr NC_019882.2 (23682337 bp)\n",[m
[32m+[m[32m      "chr NC_004387.1 (16714 bp)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019869.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019864.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019861.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019866.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019879.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019874.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_004387.1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019871.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019881.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019876.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019877.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019873.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019865.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019882.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019880.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019870.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019859.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019878.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019872.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019867.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019863.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019875.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019860.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019868.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019862.2 <<\n",[m
[32m+[m[32m      "Writing genomic nucleotide frequencies to the file >/workspace/cfngle/raw-data/JM/rgenome/genomic_nucleotide_frequencies.txt< for future re-use\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: A\t216957530\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AA\t76267116\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AC\t41125942\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AG\t46339810\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AT\t53224515\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: C\t149808184\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CA\t54903461\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CC\t33648602\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CG\t14873895\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CT\t46382122\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: G\t149806542\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GA\t43510171\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GC\t31502622\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GG\t33674420\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GT\t41119214\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: T\t216993830\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TA\t42276625\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TC\t43530907\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TG\t54918326\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TT\t76267822\n",[m
[32m+[m[32m      "Finished processing genomic nucleotide frequencies\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total number of conversions performed:\n",[m
[32m+[m[32m      "C->T:\t149808184\n",[m
[32m+[m[32m      "G->A:\t149806542\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step II - Genome bisulfite conversions - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bismark Genome Preparation - Step III: Launching the Bowtie 2 indexer\n",[m
[32m+[m[32m      "Please be aware that this process can - depending on genome size - take several hours!\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_CT.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.CT_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_GA.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.GA_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:09\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:08\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "  Sorting block time: 00:09:56\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 366764072\n",[m
[32m+[m[32m      "fchr[G]: 516572256\n",[m
[32m+[m[32m      "fchr[T]: 516572256\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_GA.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_GA.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:10:47\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:03\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:00\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 216957530\n",[m
[32m+[m[32m      "fchr[G]: 216957530\n",[m
[32m+[m[32m      "fchr[T]: 366764072\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_CT.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_CT.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:12:34\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:03\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:01\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:09\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:18\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 366764072\n",[m
[32m+[m[32m      "fchr[G]: 516572256\n",[m
[32m+[m[32m      "fchr[T]: 516572256\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_GA.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_GA.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:10:54\n",[m
[32m+[m[32m      "  Sorting block time: 00:10:15\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 216957530\n",[m
[32m+[m[32m      "fchr[G]: 216957530\n",[m
[32m+[m[32m      "fchr[T]: 366764072\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_CT.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_CT.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:12:48\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "bismark_genome_preparation --genomic_composition /workspace/cfngle/raw-data/ZF/rgenome/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1c9fecb5-d184-4c1d-a649-f10c6badd0e1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.2.1a Alignments to genome (trim_galore)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "id": "0f373877-37ea-4284-8322-93f1233f1e50",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_001_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_002_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_003_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_004_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_005_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_006_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_007_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_008_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_009_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_010_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_011_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_012_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_013_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_014_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_015_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_016_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_017_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_018_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_019_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_020_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_021_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_022_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_023_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_024_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_025_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_026_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_027_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_028_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_029_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_030_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_031_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_032_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_033_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_034_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_035_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_036_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_037_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_038_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_039_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_040_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_041_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_042_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_043_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_044_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_045_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_046_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_047_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_048_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_049_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_050_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_051_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_052_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_053_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_054_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_055_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_056_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_057_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_058_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_059_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_060_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_061_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_062_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_063_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_064_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_065_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_066_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_067_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_068_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_069_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_070_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_071_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_072_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_073_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_074_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_075_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_076_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_077_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_078_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_079_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_080_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_081_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_082_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_083_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_084_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_085_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_086_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_087_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_088_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_089_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_090_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_091_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_092_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_093_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_094_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_095_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_096_trimmed.fq\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done #| abatch -j ${OUT}/bis-align --time 4-24:00:00 --mem 80G -c 5| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 61,[m
[32m+[m[32m   "id": "0fb9392b-2499-467a-8e01-919a6b277fd5",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) \n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709514265.9917593-353529;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/004.alignments\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m394/394\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 96 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mPrevious MultiQC output found! Adjusting filenames..\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mUse -f or --force to overwrite existing reports instead\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.qc.alignments/QC.alignments_multiqc_report_1.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.qc.alignments/QC.alignments_multiqc_report_data_1\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "multiqc 004.alignments -i QC.alignments -o 005.qc.alignments"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "d48e6d85-37bc-4f2d-9442-c9ccd4245a32",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.2.1b Alignments to genome (trimmomatic)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 49,[m
[32m+[m[32m   "id": "e9ec00ba-b4b8-4608-bbc4-89eb531e6993",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 4-24:00:00 --mem 80G -c 5\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/004.alignments_tm/bis-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4470508\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_tm\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fastq`\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align --time 4-24:00:00 --mem 80G -c 5| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 50,[m
[32m+[m[32m   "id": "a9e7ee5e-420f-4866-b7e5-cac41b01845c",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709498458.1787348-491733;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/004.alignments_tm\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m577/577\u001b[0m  0mnments_tm/bis-align/bis-align.sh\u001b[0m\n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 96 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.qc_alignments_tm/QC.alignments_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.qc_alignments_tm/QC.alignments_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "multiqc 004.alignments_tm -i QC.alignments -o 005.qc_alignments_tm"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "65d223b1-b295-4079-9d60-f94954bada33",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.2.3a Alignments to genome (trim_galore) bowtie2 LOCAL"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 113,[m
[32m+[m[32m   "id": "1d3f20bc-ee15-4b87-8d96-4c34d2bb8bd4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "bash: /workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_094_trimmed.fq: Permission denied\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional \\\n",[m
[32m+[m[32m    "                --local\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align-local-ZF --time 2-23:59:00 --mem 50G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "id": "37a2fd03-35bb-4977-86ef-4ef4ff6f8d5e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "aca35cfc-3b8a-4a37-98be-72039db781ff",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1710449226.4759724-715201;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/004.alignments_BM_local\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m396/396\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 96 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mPrevious MultiQC output found! Adjusting filenames..\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mUse -f or --force to overwrite existing reports instead\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.qc_alignments_BM_local/QC.alignments_multiqc_report_1.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.qc_alignments_BM_local/QC.alignments_multiqc_report_data_1\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 004.alignments_BM_local -i QC.alignments -o 005.qc_alignments_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 117,[m
[32m+[m[32m   "id": "847d2db5-4252-4cdf-8e87-506b89f3eb36",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 2-23:59:00 --mem 50G -c 1\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/004.alignments_BM_local/bis-align-local-ZF\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 2\n",[m
[32m+[m[32m      "Submitted batch job 4694940\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "#FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "FILES=(${IN}/*.fq)\n",[m
[32m+[m[32m    "FILES=(\"${FILES[93]}\" \"${FILES[94]}\")\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in \"${FILES[@]}\"\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional \\\n",[m
[32m+[m[32m    "                --local\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align-local-ZF --time 2-23:59:00 --mem 50G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1be44dfc-32ae-4e64-9145-0844b8093894",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 7. Methylation extraction"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "c256ca67-b590-445e-b71f-fc7eb8f29277",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 7.1 Methylation extraction bismark trim_galore"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "id": "765ab234-84b0-440b-b723-566a2b9a0836",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 5-01:00:00 --mem 50G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/007.meth_extraction/meth-extract\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 97\n",[m
[32m+[m[32m      "Submitted batch job 4468790\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "FILES=`find ${IN}/ -type f -name \"*.bam\"`\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "    #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark_methylation_extractor \\\n",[m
[32m+[m[32m    "                ${file} \\\n",[m
[32m+[m[32m    "                -s \\\n",[m
[32m+[m[32m    "                --merge_non_CpG \\\n",[m
[32m+[m[32m    "                --cytosine_report \\\n",[m
[32m+[m[32m    "                --scaffolds \\\n",[m
[32m+[m[32m    "                --genome_folder ${GENOME} \\\n",[m
[32m+[m[32m    "                -o ${OUT}\"\n",[m
[32m+[m[32m    "      echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/meth-extract --time 5-01:00:00 --mem 5G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "id": "75ad993d-03d5-4da9-b30a-343fa009c525",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "mkdir -p 007b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "id": "370cce18-c6db-4209-b0a3-1b52f8d2a79c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cp 007.meth_extraction/*CpG_report.txt 007b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "a6faa41b-2d40-4b6f-bd31-27f8fe353734",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/007.meth_extraction\n",[m
[32m+[m[32m    "for i in *CpG_report.txt; do awk '{if ($4 > 0) print}' $i > /workspace/cfngle/raw-data/ZF/007b.extraction_nonzero/$i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "8722c4b1-57b1-4c07-b9cb-1f0752ead141",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### Extracting all methylation sites"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 90,[m
[32m+[m[32m   "id": "934a5a83-a227-4fc9-a6eb-d392d780dc21",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "awk: fatal: cannot open file `ZF_013_trimmed_bismark_bt2.CpG_report.txt.nonzero-checkpoint.txt' for reading (No such file or directory)\n",[m
[32m+[m[32m      "awk: fatal: cannot open file `ZF_001_trimmed_bismark_bt2.CpG_report.txt.nonzero-checkpoint.txt' for reading (No such file or directory)\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "123",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/007b.extraction_nonzero\n",[m
[32m+[m[32m    "find . -name \"*.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "7b8a5dd6-ccef-4ef4-887a-9a89af50a758",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 7.2 Methylation extraction bismark trim_galore LOCAL"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "4777da78-cbb4-4066-b062-136e3bf0647e",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 23:59:00 --mem 10G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/007.meth_extraction_BM_local/meth-extract\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4710915\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "FILES=`find ${IN}/ -type f -name \"*.bam\"`\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "    #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark_methylation_extractor \\\n",[m
[32m+[m[32m    "                ${file} \\\n",[m
[32m+[m[32m    "                -s \\\n",[m
[32m+[m[32m    "                --merge_non_CpG \\\n",[m
[32m+[m[32m    "                --cytosine_report \\\n",[m
[32m+[m[32m    "                --scaffolds \\\n",[m
[32m+[m[32m    "                --genome_folder ${GENOME} \\\n",[m
[32m+[m[32m    "                -o ${OUT}\"\n",[m
[32m+[m[32m    "      echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/meth-extract --time 23:59:00 --mem 10G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "id": "58c24cf8-f3bc-4a40-ad94-a5d83fd48b55",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "mkdir -p 007b.meth_extraction_BM_local_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "7fd58b36-50f3-4e02-9794-8073db48e5d9",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cp /workspace/cfngle/scripts/extraction_conversion.sh 007b.meth_extraction_BM_local_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "id": "d677f2a1-dc10-4568-8f16-e6642e7f9d95",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# cp 007.meth_extraction_BM_local/*CpG_report.txt 007b.meth_extraction_BM_local_nonzeros"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "id": "31b990d7-77d2-44b1-b69e-5bfbdcc330cc",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/007.meth_extraction_BM_local\n",[m
[32m+[m[32m    "for i in *CpG_report.txt; do awk '{if ($4 > 0) print}' $i > /workspace/cfngle/raw-data/ZF/007b.meth_extraction_BM_local_nonzero/$i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "fc896a91-49c1-445f-bb1b-fc0625c57ee6",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### Extracting all methylation sites"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "id": "6c32958b-2a34-4ea5-bc75-1951b63aca6a",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/007b.meth_extraction_BM_local_nonzero\n",[m
[32m+[m[32m    "find . -name \"*.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "4680ec9f-5661-4290-bf1b-a97bb178c61c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/007b.meth_extraction_BM_local_nonzero\n",[m
[32m+[m[32m    "mv *MK.txt /workspace/cfngle/raw-data/JM/008.methylkit_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "f7068525-3f61-4fb0-8a1f-2a21c1698bc3",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1710469468.9877102-453458;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: MethylationExtraction_QC\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/007.meth_extraction_BM_local\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "multiqc 007.meth_extraction_BM_local/ -i MethylationExtraction_QC -o 007.meth_extraction_BM_local/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "72f534c2-84cc-4eb1-be55-146ea0301d17",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/00a_ZF_BSseeker2-checkpoint.sl b/.ipynb_checkpoints/00a_ZF_BSseeker2-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..a1978f0[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/00a_ZF_BSseeker2-checkpoint.sl[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m
[32m+[m[32m#SBATCH --job-name=indexBS[m
[32m+[m[32m#SBATCH --time=24:00:00[m
[32m+[m[32m#SBATCH --mem=20G[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/raw-data/JM/rgenome/output.log[m
[32m+[m
[32m+[m[32mPROJECT="/workspace/cfngle/raw-data/ZF"[m
[32m+[m[32mGENOME="/workspace/cfngle/raw-data/ZF/rgenome"[m
[32m+[m[32mOUT=$GENOME[m
[32m+[m
[32m+[m[32mmodule load conda[m
[32m+[m[32mconda deactivate[m
[32m+[m[32mconda activate cfngle_env-01[m
[32m+[m
[32m+[m[32mbs_seeker2-build.py \[m
[32m+[m[32m    -f ${GENOME}/GCF_000002035.6_GRCz11_genomic.fasta \[m
[32m+[m[32m    --aligner bowtie2 \[m
[32m+[m[32m    -r \[m
[32m+[m[32m    -d /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/01_AC_AS_EH_JM_ZF_extraction_v-1.7-checkpoint.R b/.ipynb_checkpoints/01_AC_AS_EH_JM_ZF_extraction_v-1.7-checkpoint.R[m
[1mnew file mode 100644[m
[1mindex 0000000..ca3d11c[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/01_AC_AS_EH_JM_ZF_extraction_v-1.7-checkpoint.R[m
[36m@@ -0,0 +1,402 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of sequences of methylation data for the AC, EH and AS[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32mbp_ext <- 1000 # this will be the length of the extracted sequences around the CpG[m[41m [m
[32m+[m[32msave_folder <- "/powerplant/workspace/cfngle/results-data/sequences/" # folder where extracted sequences will be saved[m
[32m+[m[32mfile_ext <- ".fasta" # which file extension will be used for the sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32m## function to fix overextending sequenced (see appendix)[m
[32m+[m[32m# in some cases extending the sequence width may lead to some sequences being positioned in nonexistent areas (negative, or number is greater than scaffold/chromosome).[m
[32m+[m[32m# This happens when they are close to the start/end and then being extended[m[41m [m
[32m+[m
[32m+[m[32m# function to fix this problem (see explanation at appendix)[m
[32m+[m[32mfix.seq <- function(seq, rgenome, seq_width) {[m
[32m+[m[32m  seq[seq@ranges@start <= 0] <- shift(seq[seq@ranges@start <= 0], -1*c(seq@ranges@start[seq@ranges@start <= 0])+1)[m
[32m+[m[32m  matching_rgenome <- rgenome[unique(rgenome@ranges@NAMES) %in% unique(seq@seqnames@values)][m
[32m+[m[32m  rg_max_length <- width(matching_rgenome[as.character(seqnames(seq))])[m
[32m+[m[32m  end(seq) <- pmin(end(seq), rg_max_length)[m
[32m+[m[32m  # start(seq[width(seq) < seq_width]) <- start(seq[width(seq) < seq_width]) - c(seq_width-width(seq[width(seq) < seq_width]))[m
[32m+[m[32m  return(seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## function to add the methylation coordinates to the name of the sequence file. "seqs" are the extracted sequences, "seqs_GR" are the ranges saved as a GRanges object, "methylsites" the GRanges object of the methylation coordinates (start=end; meaning one bp)and "name" is a string which is added between the existing name of seqs and the methylation coordinates[m
[32m+[m
[32m+[m[32m## NOT IN USE because the names get too long to convert aligned data (.sam) into .bam files. Other method (see below) is used instead[m
[32m+[m[32madd.Methylnames <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = "_"))[m
[32m+[m[32m  names(seqs) <- paste0(seq_names, "_", name, "_", concat_methyl_sites)[m
[32m+[m[32m  return(seqs)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## this creates a dataframe which stores the positions of the CpGs sites, the names of the seqs and the number of methylation sites per sequence[m
[32m+[m[32mcreate.MethylPos <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = ","))[m
[32m+[m[32m  df <- data.frame([m
[32m+[m[32m    seq = seq_names,[m
[32m+[m[32m    methyl_pos = concat_methyl_sites,[m
[32m+[m[32m    methyl_n = as.vector(table(queryHits(overlaps)))[m
[32m+[m[32m  )[m
[32m+[m[32m  return(df)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Loading data ####[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AS/BisRAD-CpGs-Snapper.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAS_rgenome <- readDNAStringSet("raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta")[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mAS_rgenome_nvec <- names(AS_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" size.*$", "", .)[m
[32m+[m[32mnames(AS_rgenome) <- AS_rgenome_nvec[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# JM_raw <- read.table("raw-data/JM/zzz-methyldata/01_JM_methylpos_66079_CpGs.csv", sep = ",", header = TRUE) #slower method. Loading Rdata files is faster[m
[32m+[m[32mJM_raw <- load("raw-data/JM/zzz-methyldata/00_JM_methylpos_243285_CpGs.Rdata")[m
[32m+[m[32mJM_raw <- JM_24_methyl_pos[m
[32m+[m[32mJM_rgenome <- readDNAStringSet("raw-data/JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fasta")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mJM_rgenome_nvec <- names(JM_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" Ory.*$", "", .)[m
[32m+[m[32mnames(JM_rgenome) <- JM_rgenome_nvec[m
[32m+[m
[32m+[m[32m## ZF[m
[32m+[m[32m# ZF_raw <- read.table("raw-data/ZF/zzz-methyldata/01_ZF_methylpos_66079_CpGs.csv", sep = ",", header = TRUE) #slower method. Loading Rdata files is faster[m
[32m+[m[32mZF_raw <- load("raw-data/ZF/zzz_methyldata/ZF_methylpos_88.RData")[m
[32m+[m[32mZF_raw <- ZF_methyl_pos[m
[32m+[m[32mZF_rgenome <- readDNAStringSet("raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mZF_rgenome_nvec <- names(ZF_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" Danio.*$", "", .)[m
[32m+[m[32mnames(ZF_rgenome) <- ZF_rgenome_nvec[m
[32m+[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = seqnames(EH_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(EH_methyl) - bp_ext/2, end = end(EH_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(EH_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mEH <- fix.seq(EH,EH_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AC_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AC_methyl) - bp_ext/2, end = end(AC_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AC_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mAC <- fix.seq(AC,AC_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AS_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AS_raw$start), end = c(AS_raw$end), names = 1:length(AS_raw$chr)),[m
[32m+[m[32m  strand = Rle(AS_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mAS <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AS_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AS_methyl) - bp_ext/2, end = end(AS_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AS_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mAS <- fix.seq(AS,AS_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAS <- reduce(AS)[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mJM_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(JM_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = JM_raw$chr_pos), end = c(JM_raw$chr_pos), names = 1:length(JM_raw$chr)),[m
[32m+[m[32m  strand = Rle(JM_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mJM <- GRanges([m
[32m+[m[32m  seqnames = seqnames(JM_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(JM_methyl) - bp_ext/2, end = end(JM_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(JM_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mJM <- fix.seq(JM,JM_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mJM <- GenomicRanges::reduce(JM)[m
[32m+[m
[32m+[m[32m## ZF[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mZF_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(ZF_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = ZF_raw$chr_pos), end = c(ZF_raw$chr_pos), names = 1:length(ZF_raw$chr)),[m
[32m+[m[32m  strand = Rle(ZF_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mZF <- GRanges([m
[32m+[m[32m  seqnames = seqnames(ZF_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(ZF_methyl) - bp_ext/2, end = end(ZF_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(ZF_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mZF <- fix.seq(ZF,ZF_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mZF <- GenomicRanges::reduce(ZF)[m
[32m+[m
[32m+[m[32m#### Check ####[m
[32m+[m[32m# this just makes sure all the sequenced locations are also represented in the rgenome[m
[32m+[m[32munique(AS_raw$chr) %in% names(AS_rgenome)[m
[32m+[m[32munique(AC_raw$chr) %in% names(AC_rgenome)[m
[32m+[m[32munique(EH_raw$chr) %in% names(EH_rgenome)[m
[32m+[m[32munique(JM_raw$chr) %in% names(JM_rgenome)[m
[32m+[m[32munique(ZF_raw$chr) %in% names(ZF_rgenome)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m### EH[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mEH_filename <- paste0(save_folder, "EH_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = EH_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mEH_metadata <- create.MethylPos(EH_seq, EH, EH_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mEH_metadata_filename <- paste0(save_folder, "EH_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(EH_metadata, EH_metadata_filename)[m
[32m+[m
[32m+[m[32m### AC[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAC_filename <- paste0(save_folder, "AC_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AC_seq, file = AC_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAC_metadata <- create.MethylPos(AC_seq, AC, AC_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mAC_metadata_filename <- paste0(save_folder, "AC_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AC_metadata, AC_metadata_filename)[m
[32m+[m
[32m+[m[32m### AS[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAS_seq <- getSeq(AS_rgenome, AS)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AS_seq) <- paste0("AS_", as.character(seqnames(AS)), "_", start(AS),":", end(AS))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAS_filename <- paste0(save_folder, "AS_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AS_seq, file = AS_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAS_metadata <- create.MethylPos(AS_seq, AS, AS_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mAS_metadata_filename <- paste0(save_folder, "AS_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AS_metadata, AS_metadata_filename)[m
[32m+[m
[32m+[m[32m### JM[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mJM_seq <- getSeq(JM_rgenome, JM)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(JM_seq) <- paste0("JM_", as.character(seqnames(JM)), "_", start(JM),":", end(JM))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mJM_filename <- paste0(save_folder, "JM_243285_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(JM_seq, file = JM_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mJM_metadata <- create.MethylPos(JM_seq, JM, JM_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mJM_metadata_filename <- paste0(save_folder, "JM_metadata_243285_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(JM_metadata, JM_metadata_filename)[m
[32m+[m
[32m+[m[32m### ZF[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mZF_seq <- getSeq(ZF_rgenome, ZF)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(ZF_seq) <- paste0("ZF_", as.character(seqnames(ZF)), "_", start(ZF),":", end(ZF))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mZF_filename <- paste0(save_folder, "ZF_757883_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(ZF_seq, file = ZF_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mZF_metadata <- create.MethylPos(ZF_seq, ZF, ZF_methyl)[m
[32m+[m
[32m+[m[32m# saving df[m
[32m+[m[32mZF_metadata_filename <- paste0(save_folder, "ZF_metadata_757883", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(ZF_metadata, ZF_metadata_filename)[m
[32m+[m
[32m+[m[32m#### Visualization and testing ####[m
[32m+[m
[32m+[m[32m# sequence width distribution[m
[32m+[m[32mdf_width <- data.frame([m
[32m+[m[32m  values = c(width(AC),width(AS),width(EH)),[m
[32m+[m[32m  species = factor(rep(c("AC", "AS", "EH"), times = c(length(width(AC)), length(width(AS)), length(width(EH))))))[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_width, aes(x = species, y = values, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Sequence lengths",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Length (bp)")[m
[32m+[m
[32m+[m[32m# distribution of CpGs[m[41m [m
[32m+[m[32m# extract methyl sites per sequence[m
[32m+[m[32mcount.Methyl <- function(seqs_GR, methylsites) {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  count_methyl <- table(queryHits(overlaps))[m
[32m+[m[32m  return(count_methyl)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdf_AC_methyl <- as.data.frame(count.Methyl(AC, AC_methyl))[m
[32m+[m[32mdf_AC_methyl$Var1 <- factor("AC")[m
[32m+[m
[32m+[m[32mdf_AS_methyl <- as.data.frame(count.Methyl(AS, AS_methyl))[m
[32m+[m[32mdf_AS_methyl$Var1 <- factor("AS")[m
[32m+[m
[32m+[m[32mdf_EH_methyl <- as.data.frame(count.Methyl(EH, EH_methyl))[m
[32m+[m[32mdf_EH_methyl$Var1 <- factor("EH")[m
[32m+[m
[32m+[m[32mdf_methyl <- rbind(df_AC_methyl, df_AS_methyl, df_EH_methyl)[m
[32m+[m[32mcolnames(df_methyl) <- c("species", "cpgs")[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_methyl, aes(x = species, y = cpgs, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  # scale_fill_distiller(palette = "Blues") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "CpGs per sequence",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Amount of CpGs")[m
[32m+[m
[32m+[m
[32m+[m[32m# sequence and CpG amount[m
[32m+[m[32mdf_seq_num <- data.frame([m
[32m+[m[32m  CpGs = c(length(AC_methyl), length(AS_methyl), length(EH_methyl)),[m
[32m+[m[32m  sequences = c(length(AC), length(AS), length(EH)),[m
[32m+[m[32m  species = factor(c("AC", "AS", "EH"))[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m# df_seq_num_long <- pivot_longer(df_seq_num, cols = c(sequences,CpGs), names_to = "variable", values_to = "value")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ggplot(df_seq_num_long, aes(x = species, fill = variable)) +[m
[32m+[m[32m#   geom_bar(position = "dodge") +[m
[32m+[m[32m#   facet_wrap( ~value)[m
[32m+[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m
[32m+[m[32m# EH_rev <- reverseComplement(EH_seq)[m
[32m+[m[32m# writeXStringSet(EH_seq, file = "/workspace/cfngle/results-data/EH_CpG_100bp_rev.fasta")[m
[32m+[m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m## function to fix out-of-boundary sequences[m
[32m+[m
[32m+[m[32m# # FIX start: this shifts the sequences which are out of range into the sequence range again so that it starts with 1[m
[32m+[m[32m# AS[AS@ranges@start <= 0] <- shift(AS[AS@ranges@start <= 0], -1*c(AS@ranges@start[AS@ranges@start <= 0])+1)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # FIX end: the same goes for the ends of the sequences. Some have reached beyond the reference genome[m
[32m+[m[32m# # filtering only the regions of the rgenome which are also in the methylation data[m
[32m+[m[32m# AS_matching <- AS_rgenome[unique(AS_rgenome@ranges@NAMES) %in% unique(AS@seqnames@values)][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # extracting the maximum possible sequence lengths for the methylation data[m
[32m+[m[32m# AS_max_length <- width(AS_matching[as.character(seqnames(AS))])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # updating the ends of AS[m
[32m+[m[32m# end(AS) <- pmin(end(AS), AS_max_length)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # adjusting length to bp_ext again[m
[32m+[m[32m# start(AS[width(AS) < bp_ext]) <- start(AS[width(AS) < bp_ext]) - c(bp_ext-width(AS[width(AS) < bp_ext]))[m
[32m+[m
[32m+[m
[32m+[m[32m#### Version log ####[m
[32m+[m[32m# 1.3 added function to fix overextended sequences[m[41m [m
[32m+[m[32m# 1.2 file names can be defined in the beginning as well as the amount of bp extension[m[41m [m
[32m+[m
[32m+[m
[1mdiff --git a/.ipynb_checkpoints/01a_alignments-checkpoint.ipynb b/.ipynb_checkpoints/01a_alignments-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..e652799[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/01a_alignments-checkpoint.ipynb[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# setting up aariables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw = /workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results = /workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# using bowtie to do alignments \n",[m
[32m+[m[32m    "### OPTIONS FOR BOWTIE ###\n",[m
[32m+[m[32m    "\"\n",[m
[32m+[m[32m    "-n: Sets the number of mismatches allowed in an alignment. By default, Bowtie allows up to 2 mismatches.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "-e: Sets the maximum number of mismatches allowed in the seed alignment. This option is useful for controlling the sensitivity of the alignment.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "-l: Specifies the length of the seed substrings used for alignment. Smaller seed lengths can result in faster alignment but may reduce sensitivity.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "-I and -X: Sets the minimum and maximum insert sizes, respectively, for paired-end alignment. These options are useful for filtering out spurious alignments caused by insert size outliers.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "-a: Performs all valid alignments for each read, rather than just the best alignment. This option can be useful for identifying potential multi-mapping reads.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "-y: Forces Bowtie to report only uniquely aligned reads. Reads with multiple valid alignments will be reported as unaligned.\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "-m: Sets the maximum number of valid alignments to report for each read. This option is useful for controlling the number of reported alignments, especially for reads with multiple valid alignments.\n",[m
[32m+[m[32m    "\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "bowtie2 -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -q -U /workspace/cfngle/raw-data/ZF/data/Z101_HL7CKDMXX_CTCGACTT_L002_R1.fastq -S /workspace/cfngle/results-data/ZF_ZF_align.sam"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/01a_alignments-v1.0-checkpoint.ipynb b/.ipynb_checkpoints/01a_alignments-v1.0-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..50dfca8[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/01a_alignments-v1.0-checkpoint.ipynb[m
[36m@@ -0,0 +1,410 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Currently Loaded Modulefiles:\n",[m
[32m+[m[32m      " 1) \u001b[46mpowerPlant/core\u001b[0m    5) \u001b[46mSlurm/21.08.8-2\u001b[0m      9) bowtie2/2.3.4.3  \n",[m
[32m+[m[32m      " 2) texlive/20230914   6) perlbrew/0.76       10) minimap2/2.22    \n",[m
[32m+[m[32m      " 3) pandoc/1.19.2      7) perl/5.36.0         11) cd-hit/4.6.1     \n",[m
[32m+[m[32m      " 4) git/2.21.0         8) slurm-utils/latest  \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Key:\n",[m
[32m+[m[32m      "\u001b[46msticky\u001b[0m  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "module load cd-hit\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# checking active \n",[m
[32m+[m[32m    "# module list"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 32,[m
[32m+[m[32m   "id": "3eec4422-fd71-4360-90d1-1fe9b4aaddfd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "AC_CpG_200bp.fasta\n",[m
[32m+[m[32m      "3\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "AS_CpG_200bp.fasta\n",[m
[32m+[m[32m      "2\n",[m
[32m+[m[32m      "EH_CpG_200bp.fasta\n",[m
[32m+[m[32m      "EH_CpG_200bp.fasta\n",[m
[32m+[m[32m      "1\n",[m
[32m+[m[32m      "AS_CpG_200bp.fasta\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "# 200 bp sequences\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp.fasta\" \"AS_CpG_200bp.fasta\" \"EH_CpG_200bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#seq_100bp=\"AC_CpG_100bp.fasta AS_CpG_100bp.fasta EH_CpG_100bp.fasta\"\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "n=${#seq_200bp[@]}\n",[m
[32m+[m[32m    "for i in ${seq_200bp[@]}; do\n",[m
[32m+[m[32m    "    echo $i\n",[m
[32m+[m[32m    "    echo $n\n",[m
[32m+[m[32m    "    echo \"${seq_200bp[n]}\"\n",[m
[32m+[m[32m    "    n=$((n-1))\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 40,[m
[32m+[m[32m   "id": "e6b03971-a762-4410-9d0c-7ea102ede3a4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AC_AS_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:09:47 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 13755\n",[m
[32m+[m[32m      "total seq in db2: 24535\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 14M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 98M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 114M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985739687\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared         13  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "24535 compared\t13 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 568.32\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AC_EH_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:11:04 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 13755\n",[m
[32m+[m[32m      "total seq in db2: 18337\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 12M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 112M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985900866\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared        128  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "18337 compared\t128 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 302.58\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AS_EH_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:11:47 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 24535\n",[m
[32m+[m[32m      "total seq in db2: 18337\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 16M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 100M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 117M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985269016\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........    20000  finished\n",[m
[32m+[m[32m      "..........        0  compared         69  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "18337 compared\t69 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1146.57\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AS_AC_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:14:23 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 24535\n",[m
[32m+[m[32m      "total seq in db2: 13755\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 13M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 114M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985713868\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........    20000  finished\n",[m
[32m+[m[32m      "..........        0  compared         60  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "13755 compared\t60 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1368.23\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/EH_AC_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:17:35 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 18337\n",[m
[32m+[m[32m      "total seq in db2: 13755\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 12M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 112M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985961999\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared        828  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "13755 compared\t828 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1651.21\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/EH_AS_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:21:22 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 18337\n",[m
[32m+[m[32m      "total seq in db2: 24535\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 17M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 117M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985355968\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared         81  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "24535 compared\t81 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 2545.62\n",[m
[32m+[m[32m      "bash: \n",[m
[32m+[m[32m      "for i in AC_CpG_200bp.fasta; do\n",[m
[32m+[m[32m      "    cd-hit-est-2d -i /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2 /workspace/cfngle/results-data/AC -o /workspace/cfngle/results-data/cd-hit/EH_CpG_200bp.fastacd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m      "done\n",[m
[32m+[m[32m      ": No such file or directory\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "127",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### CD-HIT ####\n",[m
[32m+[m[32m    "# clustering sequences with cd-hit\n",[m
[32m+[m[32m    "cdhit_opt=\"-p 1 -c 0.85 -n 6 -T 8 -M 8000\"\n",[m
[32m+[m[32m    "cdhit_nmsfx=\"_85\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# AC\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# AS\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# EH\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loop test\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "for i in $seq_200bp; do\n",[m
[32m+[m[32m    "    cd-hit-est-2d -i ${path_results}$i -i2 ${path_results}AC -o ${path_results}cd-hit/${i}cd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "2bf8e06c-ab45-472d-b55d-0384f38d0bcd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### BOWTIE2 ##### \n",[m
[32m+[m[32m    "for i in \n",[m
[32m+[m[32m    "bowtie2 -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_results}EH_CpG_200bp.fasta -S ${path_results}ZF_EH_200_bt2_N_1.sam -N 1"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}EH_CpG_200bp.fasta > ${path_results}ZF_EH_200_minimap.sam "[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/01a_alignments-v1.1s-checkpoint.ipynb b/.ipynb_checkpoints/01a_alignments-v1.1s-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..d8f42be[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/01a_alignments-v1.1s-checkpoint.ipynb[m
[36m@@ -0,0 +1,407 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Currently Loaded Modulefiles:\n",[m
[32m+[m[32m      " 1) \u001b[46mpowerPlant/core\u001b[0m    5) \u001b[46mSlurm/21.08.8-2\u001b[0m      9) bowtie2/2.3.4.3  \n",[m
[32m+[m[32m      " 2) texlive/20230914   6) perlbrew/0.76       10) minimap2/2.22    \n",[m
[32m+[m[32m      " 3) pandoc/1.19.2      7) perl/5.36.0         11) cd-hit/4.6.1     \n",[m
[32m+[m[32m      " 4) git/2.21.0         8) slurm-utils/latest  \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Key:\n",[m
[32m+[m[32m      "\u001b[46msticky\u001b[0m  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "module load cd-hit\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# checking active \n",[m
[32m+[m[32m    "# module list"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 41,[m
[32m+[m[32m   "id": "3eec4422-fd71-4360-90d1-1fe9b4aaddfd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "# 200 bp sequences\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp.fasta\" \"AS_CpG_200bp.fasta\" \"EH_CpG_200bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp.fasta\" \"AS_CpG_100bp.fasta\" \"EH_CpG_100bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "n=${#seq_200bp[@]}\n",[m
[32m+[m[32m    "for i in ${seq_200bp[@]}; do\n",[m
[32m+[m[32m    "    echo $i\n",[m
[32m+[m[32m    "    echo $n\n",[m
[32m+[m[32m    "    echo \"${seq_200bp[n]}\"\n",[m
[32m+[m[32m    "    n=$((n-1))\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 40,[m
[32m+[m[32m   "id": "e6b03971-a762-4410-9d0c-7ea102ede3a4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AC_AS_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:09:47 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 13755\n",[m
[32m+[m[32m      "total seq in db2: 24535\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 14M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 98M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 114M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985739687\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared         13  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "24535 compared\t13 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 568.32\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AC_EH_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:11:04 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 13755\n",[m
[32m+[m[32m      "total seq in db2: 18337\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 12M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 112M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985900866\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared        128  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "18337 compared\t128 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 302.58\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AS_EH_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:11:47 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 24535\n",[m
[32m+[m[32m      "total seq in db2: 18337\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 16M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 100M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 117M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985269016\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........    20000  finished\n",[m
[32m+[m[32m      "..........        0  compared         69  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "18337 compared\t69 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1146.57\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AS_AC_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:14:23 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 24535\n",[m
[32m+[m[32m      "total seq in db2: 13755\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 13M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 114M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985713868\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........    20000  finished\n",[m
[32m+[m[32m      "..........        0  compared         60  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "13755 compared\t60 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1368.23\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/EH_AC_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:17:35 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 18337\n",[m
[32m+[m[32m      "total seq in db2: 13755\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 12M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 112M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985961999\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared        828  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "13755 compared\t828 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1651.21\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/EH_AS_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:21:22 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 18337\n",[m
[32m+[m[32m      "total seq in db2: 24535\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 17M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 117M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985355968\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared         81  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "24535 compared\t81 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 2545.62\n",[m
[32m+[m[32m      "bash: \n",[m
[32m+[m[32m      "for i in AC_CpG_200bp.fasta; do\n",[m
[32m+[m[32m      "    cd-hit-est-2d -i /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2 /workspace/cfngle/results-data/AC -o /workspace/cfngle/results-data/cd-hit/EH_CpG_200bp.fastacd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m      "done\n",[m
[32m+[m[32m      ": No such file or directory\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "127",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### CD-HIT ####\n",[m
[32m+[m[32m    "# clustering sequences with cd-hit\n",[m
[32m+[m[32m    "cdhit_opt=\"-p 1 -c 0.75 -n 4 -T 0 -M 0\"\n",[m
[32m+[m[32m    "cdhit_nmsfx=\"_75\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# AC\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# AS\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# EH\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loop test\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "for i in $seq_200bp; do\n",[m
[32m+[m[32m    "    cd-hit-est-2d -i ${path_results}$i -i2 ${path_results}AC -o ${path_results}cd-hit/${i}cd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "2bf8e06c-ab45-472d-b55d-0384f38d0bcd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### BOWTIE2 ##### \n",[m
[32m+[m[32m    "#for i in \n",[m
[32m+[m[32m    "#bowtie2 -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_results}EH_CpG_200bp.fasta -S ${path_results}ZF_EH_200_bt2_N_1.sam -N 1"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[0]} > ${path_results}ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[0]} > ${path_results}ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[0]} > ${path_results}ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[0]} > ${path_results}ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[0]} > ${path_results}ZF_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[0]} > ${path_results}ZF_EH_100_minimap.sam "[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/01a_alignments-v1.2-checkpoint.ipynb b/.ipynb_checkpoints/01a_alignments-v1.2-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..9300408[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/01a_alignments-v1.2-checkpoint.ipynb[m
[36m@@ -0,0 +1,575 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Currently Loaded Modulefiles:\n",[m
[32m+[m[32m      " 1) \u001b[46mpowerPlant/core\u001b[0m    5) \u001b[46mSlurm/21.08.8-2\u001b[0m      9) bowtie2/2.3.4.3  \n",[m
[32m+[m[32m      " 2) texlive/20230914   6) perlbrew/0.76       10) minimap2/2.22    \n",[m
[32m+[m[32m      " 3) pandoc/1.19.2      7) perl/5.36.0         11) cd-hit/4.6.1     \n",[m
[32m+[m[32m      " 4) git/2.21.0         8) slurm-utils/latest  12) samtools/1.16    \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Key:\n",[m
[32m+[m[32m      "\u001b[46msticky\u001b[0m  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "module load cd-hit\n",[m
[32m+[m[32m    "module load samtools\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# checking active \n",[m
[32m+[m[32m    "module list"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "3eec4422-fd71-4360-90d1-1fe9b4aaddfd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp.fasta\" \"AS_CpG_100bp.fasta\" \"EH_CpG_100bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp.fasta\" \"AS_CpG_200bp.fasta\" \"EH_CpG_200bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp.fasta\" \"AS_CpG_500bp.fasta\" \"EH_CpG_500bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp.fasta\" \"AS_CpG_1000bp.fasta\" \"EH_CpG_1000bp.fasta\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "cd4afcc3-a0e0-4fae-a616-e9b8dd291e89",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### CD-HIT ####\n",[m
[32m+[m[32m    "# clustering sequences with cd-hit\n",[m
[32m+[m[32m    "cdhit_opt=\"-p 1 -c 0.75 -n 4 -T 0 -M 0\"\n",[m
[32m+[m[32m    "cdhit_nmsfx=\"_75\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# AC\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# AS\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# EH\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loop test\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "for i in $seq_200bp; do\n",[m
[32m+[m[32m    "    cd-hit-est-2d -i ${path_results}$i -i2 ${path_results}AC -o ${path_results}cd-hit/${i}cd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 41,[m
[32m+[m[32m   "id": "2bf8e06c-ab45-472d-b55d-0384f38d0bcd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "13900 reads; of these:\n",[m
[32m+[m[32m      "  13900 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    12449 (89.56%) aligned 0 times\n",[m
[32m+[m[32m      "    487 (3.50%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    964 (6.94%) aligned >1 times\n",[m
[32m+[m[32m      "10.44% overall alignment rate\n",[m
[32m+[m[32m      "27560 reads; of these:\n",[m
[32m+[m[32m      "  27560 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    26269 (95.32%) aligned 0 times\n",[m
[32m+[m[32m      "    643 (2.33%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    648 (2.35%) aligned >1 times\n",[m
[32m+[m[32m      "4.68% overall alignment rate\n",[m
[32m+[m[32m      "20018 reads; of these:\n",[m
[32m+[m[32m      "  20018 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    16588 (82.87%) aligned 0 times\n",[m
[32m+[m[32m      "    792 (3.96%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    2638 (13.18%) aligned >1 times\n",[m
[32m+[m[32m      "17.13% overall alignment rate\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### BOWTIE2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## modules\n",[m
[32m+[m[32m    "module load bowtie\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/bowtie2/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp\" \"AS_CpG_100bp\" \"EH_CpG_100bp\")\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp\" \"AS_CpG_200bp\" \"EH_CpG_200bp\")\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp\" \"AS_CpG_500bp\" \"EH_CpG_500bp\")\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp\" \"AS_CpG_1000bp\" \"EH_CpG_1000bp\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_all=($seq_100bp, $seq_200bp, $seq_500bp, $seq_1000bp,)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# file ending\n",[m
[32m+[m[32m    "suffix=\".fasta\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# arguments\n",[m
[32m+[m[32m    "bowtie2_args=\"--very-sensitive --local -p 8\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for (( i=0; i<${#seq_100bp[@]}; i++ )); \n",[m
[32m+[m[32m    "do \n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}ZF_${seq_100bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 42,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[0]} > ${path_results}minimap2/ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[0]} > ${path_results}minimap2/ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[1]} > ${path_results}minimap2/ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[1]} > ${path_results}minimap2/ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[2]} > ${path_results}minimap2/ZF_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[2]} > ${path_results}minimap2/ZF_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"AC/GCF_902167405.1_gadMor3.0_genomic.fasta\"\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AC_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AC_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AC_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AC_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AC_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AC_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"Chrysophrys_auratus.v.1.0.all.male.map.fasta\"\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AS_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AS_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AS_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AS_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AS_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AS_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"fMerMel2.1_cnag1.scaffolds.fa\"\n",[m
[32m+[m[32m    "#EH\\\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/EH_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/EH_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/EH_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/EH_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/EH_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/EH_EH_100_minimap.sam \n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "id": "ef724657-b0c3-4a76-b119-afe8bcbef7ad",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "173\n",[m
[32m+[m[32m      "415\n",[m
[32m+[m[32m      "1391\n",[m
[32m+[m[32m      "2680\n",[m
[32m+[m[32m      "265\n",[m
[32m+[m[32m      "497\n",[m
[32m+[m[32m      "1081\n",[m
[32m+[m[32m      "1975\n",[m
[32m+[m[32m      "456\n",[m
[32m+[m[32m      "926\n",[m
[32m+[m[32m      "2863\n",[m
[32m+[m[32m      "5472\n",[m
[32m+[m[32m      "16349\n",[m
[32m+[m[32m      "15460\n",[m
[32m+[m[32m      "14918\n",[m
[32m+[m[32m      "14480\n",[m
[32m+[m[32m      "1397\n",[m
[32m+[m[32m      "2073\n",[m
[32m+[m[32m      "3218\n",[m
[32m+[m[32m      "4906\n",[m
[32m+[m[32m      "10165\n",[m
[32m+[m[32m      "12835\n",[m
[32m+[m[32m      "18254\n",[m
[32m+[m[32m      "25553\n",[m
[32m+[m[32m      "844\n",[m
[32m+[m[32m      "1231\n",[m
[32m+[m[32m      "2149\n",[m
[32m+[m[32m      "3650\n",[m
[32m+[m[32m      "28688\n",[m
[32m+[m[32m      "24797\n",[m
[32m+[m[32m      "24642\n",[m
[32m+[m[32m      "24530\n",[m
[32m+[m[32m      "2261\n",[m
[32m+[m[32m      "3698\n",[m
[32m+[m[32m      "5642\n",[m
[32m+[m[32m      "8460\n",[m
[32m+[m[32m      "5126\n",[m
[32m+[m[32m      "7118\n",[m
[32m+[m[32m      "12052\n",[m
[32m+[m[32m      "18420\n",[m
[32m+[m[32m      "1588\n",[m
[32m+[m[32m      "2508\n",[m
[32m+[m[32m      "4191\n",[m
[32m+[m[32m      "6812\n",[m
[32m+[m[32m      "24022\n",[m
[32m+[m[32m      "21442\n",[m
[32m+[m[32m      "20341\n",[m
[32m+[m[32m      "19491\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## view how many alignments (multiple alignments)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##EH\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_1000_minimap.sam"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "id": "05689c53-68b5-42de-bd55-bf1a229e93b6",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "107\n",[m
[32m+[m[32m      "207\n",[m
[32m+[m[32m      "515\n",[m
[32m+[m[32m      "887\n",[m
[32m+[m[32m      "158\n",[m
[32m+[m[32m      "280\n",[m
[32m+[m[32m      "543\n",[m
[32m+[m[32m      "896\n",[m
[32m+[m[32m      "268\n",[m
[32m+[m[32m      "430\n",[m
[32m+[m[32m      "970\n",[m
[32m+[m[32m      "1662\n",[m
[32m+[m[32m      "13879\n",[m
[32m+[m[32m      "13755\n",[m
[32m+[m[32m      "13720\n",[m
[32m+[m[32m      "13641\n",[m
[32m+[m[32m      "802\n",[m
[32m+[m[32m      "1165\n",[m
[32m+[m[32m      "1861\n",[m
[32m+[m[32m      "2809\n",[m
[32m+[m[32m      "6253\n",[m
[32m+[m[32m      "7767\n",[m
[32m+[m[32m      "10012\n",[m
[32m+[m[32m      "12323\n",[m
[32m+[m[32m      "514\n",[m
[32m+[m[32m      "768\n",[m
[32m+[m[32m      "1277\n",[m
[32m+[m[32m      "2051\n",[m
[32m+[m[32m      "27538\n",[m
[32m+[m[32m      "24535\n",[m
[32m+[m[32m      "24489\n",[m
[32m+[m[32m      "24410\n",[m
[32m+[m[32m      "1252\n",[m
[32m+[m[32m      "1768\n",[m
[32m+[m[32m      "2666\n",[m
[32m+[m[32m      "3912\n",[m
[32m+[m[32m      "3888\n",[m
[32m+[m[32m      "5192\n",[m
[32m+[m[32m      "7301\n",[m
[32m+[m[32m      "9543\n",[m
[32m+[m[32m      "958\n",[m
[32m+[m[32m      "1467\n",[m
[32m+[m[32m      "2493\n",[m
[32m+[m[32m      "3817\n",[m
[32m+[m[32m      "19904\n",[m
[32m+[m[32m      "18329\n",[m
[32m+[m[32m      "18192\n",[m
[32m+[m[32m      "18049\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# view single alignments\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##EH\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_1000_minimap.sam | wc -l"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "id": "3eafa8c1-2bc0-4d30-ad71-4e09ca7bbb37",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[M::mm_idx_gen::32.235*1.63] collected minimizers\n",[m
[32m+[m[32m      "[M::mm_idx_gen::40.264*1.89] sorted minimizers\n",[m
[32m+[m[32m      "[M::main::40.266*1.89] loaded/built the index for 1923 target sequence(s)\n",[m
[32m+[m[32m      "[M::mm_mapopt_update::41.644*1.86] mid_occ = 848\n",[m
[32m+[m[32m      "[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1923\n",[m
[32m+[m[32m      "[M::mm_idx_stat::42.496*1.84] distinct minimizers: 66057654 (43.51% are singletons); average occurrences: 4.867; average spacing: 5.223; total length: 1679203469\n",[m
[32m+[m[32m      "[M::worker_pipeline::66.027*2.21] mapped 16751 sequences\n",[m
[32m+[m[32m      "[M::main] Version: 2.22-r1101\n",[m
[32m+[m[32m      "[M::main] CMD: minimap2 -ax map-ont /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna /workspace/cfngle/results-data/sequences/EH_CpG_5000bp.fasta\n",[m
[32m+[m[32m      "[M::main] Real time: 66.285 sec; CPU: 146.265 sec; Peak RSS: 6.608 GB\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}EH_CpG_5000bp.fasta > ${path_results}minimap2/ZF_EH_5000_minimap.sam"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "id": "6a2dff7d-0080-4bfd-909b-726e2f3eefd3",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "5557\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_5000_minimap.sam | wc -l"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "f18465a1-e736-45c5-8a1a-9f8c8355800b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MAFFT ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## modules\n",[m
[32m+[m[32m    "module load mafft\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/mafft/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# arguments\n",[m
[32m+[m[32m    "mafft_args=\"--auto --thread -1\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_100bp.fasta > ${path_results}AC_AS_EH_CpG_100bp.fasta \n",[m
[32m+[m[32m    "mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_200bp.fasta > ${path_results}AC_AS_EH_CpG_200bp.fasta \n",[m
[32m+[m[32m    "mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_500bp.fasta > ${path_results}AC_AS_EH_CpG_500bp.fasta \n",[m
[32m+[m[32m    "mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_1000bp.fasta > ${path_results}AC_AS_EH_CpG_1000bp.fasta "[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/01a_alignments-v1.3-checkpoint.ipynb b/.ipynb_checkpoints/01a_alignments-v1.3-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..ebadc3a[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/01a_alignments-v1.3-checkpoint.ipynb[m
[36m@@ -0,0 +1,984 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Currently Loaded Modulefiles:\n",[m
[32m+[m[32m      " 1) \u001b[46mpowerPlant/core\u001b[0m    5) \u001b[46mSlurm/21.08.8-2\u001b[0m      9) bowtie2/2.3.4.3  \n",[m
[32m+[m[32m      " 2) texlive/20230914   6) perlbrew/0.76       10) minimap2/2.22    \n",[m
[32m+[m[32m      " 3) pandoc/1.19.2      7) perl/5.36.0         11) cd-hit/4.6.1     \n",[m
[32m+[m[32m      " 4) git/2.21.0         8) slurm-utils/latest  12) samtools/1.16    \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Key:\n",[m
[32m+[m[32m      "\u001b[46msticky\u001b[0m  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "module load cd-hit\n",[m
[32m+[m[32m    "module load samtools\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# checking active \n",[m
[32m+[m[32m    "module list"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "3eec4422-fd71-4360-90d1-1fe9b4aaddfd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp.fasta\" \"AS_CpG_100bp.fasta\" \"EH_CpG_100bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp.fasta\" \"AS_CpG_200bp.fasta\" \"EH_CpG_200bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp.fasta\" \"AS_CpG_500bp.fasta\" \"EH_CpG_500bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp.fasta\" \"AS_CpG_1000bp.fasta\" \"EH_CpG_1000bp.fasta\")\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "cd4afcc3-a0e0-4fae-a616-e9b8dd291e89",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### CD-HIT ####\n",[m
[32m+[m[32m    "# clustering sequences with cd-hit\n",[m
[32m+[m[32m    "cdhit_opt=\"-p 1 -c 0.75 -n 4 -T 0 -M 0\"\n",[m
[32m+[m[32m    "cdhit_nmsfx=\"_75\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# AC\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# AS\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# EH\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loop test\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "for i in $seq_200bp; do\n",[m
[32m+[m[32m    "    cd-hit-est-2d -i ${path_results}$i -i2 ${path_results}AC -o ${path_results}cd-hit/${i}cd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 45,[m
[32m+[m[32m   "id": "02f20b45-2815-4c8f-83e8-e57cafa7b3a1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "13900 reads; of these:\n",[m
[32m+[m[32m      "  13900 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    12449 (89.56%) aligned 0 times\n",[m
[32m+[m[32m      "    487 (3.50%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    964 (6.94%) aligned >1 times\n",[m
[32m+[m[32m      "10.44% overall alignment rate\n",[m
[32m+[m[32m      "13755 reads; of these:\n",[m
[32m+[m[32m      "  13755 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    11497 (83.58%) aligned 0 times\n",[m
[32m+[m[32m      "    542 (3.94%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    1716 (12.48%) aligned >1 times\n",[m
[32m+[m[32m      "16.42% overall alignment rate\n",[m
[32m+[m[32m      "13720 reads; of these:\n",[m
[32m+[m[32m      "  13720 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    10136 (73.88%) aligned 0 times\n",[m
[32m+[m[32m      "    512 (3.73%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    3072 (22.39%) aligned >1 times\n",[m
[32m+[m[32m      "26.12% overall alignment rate\n",[m
[32m+[m[32m      "13641 reads; of these:\n",[m
[32m+[m[32m      "  13641 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    8586 (62.94%) aligned 0 times\n",[m
[32m+[m[32m      "    544 (3.99%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    4511 (33.07%) aligned >1 times\n",[m
[32m+[m[32m      "37.06% overall alignment rate\n",[m
[32m+[m[32m      "27560 reads; of these:\n",[m
[32m+[m[32m      "  27560 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    26269 (95.32%) aligned 0 times\n",[m
[32m+[m[32m      "    643 (2.33%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    648 (2.35%) aligned >1 times\n",[m
[32m+[m[32m      "4.68% overall alignment rate\n",[m
[32m+[m[32m      "24535 reads; of these:\n",[m
[32m+[m[32m      "  24535 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    22832 (93.06%) aligned 0 times\n",[m
[32m+[m[32m      "    700 (2.85%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    1003 (4.09%) aligned >1 times\n",[m
[32m+[m[32m      "6.94% overall alignment rate\n",[m
[32m+[m[32m      "24489 reads; of these:\n",[m
[32m+[m[32m      "  24489 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    21986 (89.78%) aligned 0 times\n",[m
[32m+[m[32m      "    794 (3.24%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    1709 (6.98%) aligned >1 times\n",[m
[32m+[m[32m      "10.22% overall alignment rate\n",[m
[32m+[m[32m      "24410 reads; of these:\n",[m
[32m+[m[32m      "  24410 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    21021 (86.12%) aligned 0 times\n",[m
[32m+[m[32m      "    919 (3.76%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    2470 (10.12%) aligned >1 times\n",[m
[32m+[m[32m      "13.88% overall alignment rate\n",[m
[32m+[m[32m      "20018 reads; of these:\n",[m
[32m+[m[32m      "  20018 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    16588 (82.87%) aligned 0 times\n",[m
[32m+[m[32m      "    792 (3.96%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    2638 (13.18%) aligned >1 times\n",[m
[32m+[m[32m      "17.13% overall alignment rate\n",[m
[32m+[m[32m      "18337 reads; of these:\n",[m
[32m+[m[32m      "  18337 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    13870 (75.64%) aligned 0 times\n",[m
[32m+[m[32m      "    782 (4.26%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    3685 (20.10%) aligned >1 times\n",[m
[32m+[m[32m      "24.36% overall alignment rate\n",[m
[32m+[m[32m      "18193 reads; of these:\n",[m
[32m+[m[32m      "  18193 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    12046 (66.21%) aligned 0 times\n",[m
[32m+[m[32m      "    777 (4.27%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    5370 (29.52%) aligned >1 times\n",[m
[32m+[m[32m      "33.79% overall alignment rate\n",[m
[32m+[m[32m      "18049 reads; of these:\n",[m
[32m+[m[32m      "  18049 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    10311 (57.13%) aligned 0 times\n",[m
[32m+[m[32m      "    815 (4.52%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    6923 (38.36%) aligned >1 times\n",[m
[32m+[m[32m      "42.87% overall alignment rate\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## BOWTIE2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## modules\n",[m
[32m+[m[32m    "module load bowtie\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/bowtie2/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp\" \"AS_CpG_100bp\" \"EH_CpG_100bp\")\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp\" \"AS_CpG_200bp\" \"EH_CpG_200bp\")\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp\" \"AS_CpG_500bp\" \"EH_CpG_500bp\")\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp\" \"AS_CpG_1000bp\" \"EH_CpG_1000bp\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# file ending\n",[m
[32m+[m[32m    "suffix=\".fasta\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# arguments\n",[m
[32m+[m[32m    "bowtie2_args=\"--very-sensitive --local -p 8\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## rgenome ZF\n",[m
[32m+[m[32m    "echo \"ZF\"\n",[m
[32m+[m[32m    "for (( i=0; i<${#seq_100bp[@]}; i++ )); \n",[m
[32m+[m[32m    "do \n",[m
[32m+[m[32m    "   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}ZF_${seq_100bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}ZF_${seq_200bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}ZF_${seq_500bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## rgenome AC\n",[m
[32m+[m[32m    "echo \"AC\"\n",[m
[32m+[m[32m    "for (( i=0; i<${#seq_100bp[@]}; i++ )); \n",[m
[32m+[m[32m    "do \n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}AC_${seq_100bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}AC_${seq_200bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}AC_${seq_500bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## rgenome AS\n",[m
[32m+[m[32m    "echo \"AS\"\n",[m
[32m+[m[32m    "for (( i=0; i<${#seq_100bp[@]}; i++ )); \n",[m
[32m+[m[32m    "do \n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}AS_${seq_100bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}AS_${seq_200bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}AS_${seq_500bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## rgenome EH\n",[m
[32m+[m[32m    "echo \"EH\"\n",[m
[32m+[m[32m    "for (( i=0; i<${#seq_100bp[@]}; i++ )); \n",[m
[32m+[m[32m    "do \n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}EH_${seq_100bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}EH_${seq_200bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}EH_${seq_500bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 46,[m
[32m+[m[32m   "id": "2183866e-6182-4acc-985b-0a4a03276aa4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"/workspace/cfngle/raw-data/AS/bowtie2-index/AS_bowtie2.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  /workspace/cfngle/raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:04\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 176668623\n",[m
[32m+[m[32m      "Using parameters --bmax 132501468 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 132501468 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:15\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:04\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:07\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.06674e+08 (target: 132501467)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 706674494 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:07:18\n",[m
[32m+[m[32m      "Returning block of 706674495 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 208442737\n",[m
[32m+[m[32m      "fchr[G]: 353300318\n",[m
[32m+[m[32m      "fchr[T]: 498179311\n",[m
[32m+[m[32m      "fchr[$]: 706674494\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 240273095 bytes to primary EBWT file: /workspace/cfngle/raw-data/AS/bowtie2-index/AS_bowtie2.1.bt2\n",[m
[32m+[m[32m      "Wrote 176668628 bytes to secondary EBWT file: /workspace/cfngle/raw-data/AS/bowtie2-index/AS_bowtie2.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 706674494\n",[m
[32m+[m[32m      "    bwtLen: 706674495\n",[m
[32m+[m[32m      "    sz: 176668624\n",[m
[32m+[m[32m      "    bwtSz: 176668624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44167156\n",[m
[32m+[m[32m      "    offsSz: 176668624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3680597\n",[m
[32m+[m[32m      "    numLines: 3680597\n",[m
[32m+[m[32m      "    ebwtTotLen: 235558208\n",[m
[32m+[m[32m      "    ebwtTotSz: 235558208\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:09:46\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:03\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:04\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:00\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 176668623\n",[m
[32m+[m[32m      "Using parameters --bmax 132501468 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 132501468 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:15\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:04\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:07\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.06674e+08 (target: 132501467)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 706674494 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:07:05\n",[m
[32m+[m[32m      "Returning block of 706674495 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 208442737\n",[m
[32m+[m[32m      "fchr[G]: 353300318\n",[m
[32m+[m[32m      "fchr[T]: 498179311\n",[m
[32m+[m[32m      "fchr[$]: 706674494\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 240273095 bytes to primary EBWT file: /workspace/cfngle/raw-data/AS/bowtie2-index/AS_bowtie2.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 176668628 bytes to secondary EBWT file: /workspace/cfngle/raw-data/AS/bowtie2-index/AS_bowtie2.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 706674494\n",[m
[32m+[m[32m      "    bwtLen: 706674495\n",[m
[32m+[m[32m      "    sz: 176668624\n",[m
[32m+[m[32m      "    bwtSz: 176668624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44167156\n",[m
[32m+[m[32m      "    offsSz: 176668624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3680597\n",[m
[32m+[m[32m      "    numLines: 3680597\n",[m
[32m+[m[32m      "    ebwtTotLen: 235558208\n",[m
[32m+[m[32m      "    ebwtTotSz: 235558208\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:09:30\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### Bowtie2 indexing ####\n",[m
[32m+[m[32m    "## modules\n",[m
[32m+[m[32m    "module load bowtie\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/bowtie2/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp\" \"AS_CpG_100bp\" \"EH_CpG_100bp\")\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp\" \"AS_CpG_200bp\" \"EH_CpG_200bp\")\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp\" \"AS_CpG_500bp\" \"EH_CpG_500bp\")\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp\" \"AS_CpG_1000bp\" \"EH_CpG_1000bp\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## ZF\n",[m
[32m+[m[32m    "#bowtie2-build ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2\n",[m
[32m+[m[32m    "## AC\n",[m
[32m+[m[32m    "#bowtie2-build ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_raw}AC/bowtie2-index/AC_bowtie2\n",[m
[32m+[m[32m    "## AS\n",[m
[32m+[m[32m    "#bowtie2-build ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_raw}AS/bowtie2-index/AS_bowtie2\n",[m
[32m+[m[32m    "## EH\n",[m
[32m+[m[32m    "#bowtie2-build ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_raw}EH/bowtie2-index/EH_bowtie2\n",[m
[32m+[m[32m    "## JM\n",[m
[32m+[m[32m    "#bowtie2-build ${path_raw}JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fna ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 42,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[0]} > ${path_results}minimap2/ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[0]} > ${path_results}minimap2/ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[1]} > ${path_results}minimap2/ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[1]} > ${path_results}minimap2/ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[2]} > ${path_results}minimap2/ZF_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[2]} > ${path_results}minimap2/ZF_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"AC/GCF_902167405.1_gadMor3.0_genomic.fasta\"\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AC_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AC_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AC_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AC_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AC_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AC_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"Chrysophrys_auratus.v.1.0.all.male.map.fasta\"\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AS_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AS_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AS_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AS_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AS_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AS_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"fMerMel2.1_cnag1.scaffolds.fa\"\n",[m
[32m+[m[32m    "#EH\\\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/EH_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/EH_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/EH_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/EH_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/EH_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/EH_EH_100_minimap.sam \n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "id": "ef724657-b0c3-4a76-b119-afe8bcbef7ad",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "173\n",[m
[32m+[m[32m      "415\n",[m
[32m+[m[32m      "1391\n",[m
[32m+[m[32m      "2680\n",[m
[32m+[m[32m      "265\n",[m
[32m+[m[32m      "497\n",[m
[32m+[m[32m      "1081\n",[m
[32m+[m[32m      "1975\n",[m
[32m+[m[32m      "456\n",[m
[32m+[m[32m      "926\n",[m
[32m+[m[32m      "2863\n",[m
[32m+[m[32m      "5472\n",[m
[32m+[m[32m      "16349\n",[m
[32m+[m[32m      "15460\n",[m
[32m+[m[32m      "14918\n",[m
[32m+[m[32m      "14480\n",[m
[32m+[m[32m      "1397\n",[m
[32m+[m[32m      "2073\n",[m
[32m+[m[32m      "3218\n",[m
[32m+[m[32m      "4906\n",[m
[32m+[m[32m      "10165\n",[m
[32m+[m[32m      "12835\n",[m
[32m+[m[32m      "18254\n",[m
[32m+[m[32m      "25553\n",[m
[32m+[m[32m      "844\n",[m
[32m+[m[32m      "1231\n",[m
[32m+[m[32m      "2149\n",[m
[32m+[m[32m      "3650\n",[m
[32m+[m[32m      "28688\n",[m
[32m+[m[32m      "24797\n",[m
[32m+[m[32m      "24642\n",[m
[32m+[m[32m      "24530\n",[m
[32m+[m[32m      "2261\n",[m
[32m+[m[32m      "3698\n",[m
[32m+[m[32m      "5642\n",[m
[32m+[m[32m      "8460\n",[m
[32m+[m[32m      "5126\n",[m
[32m+[m[32m      "7118\n",[m
[32m+[m[32m      "12052\n",[m
[32m+[m[32m      "18420\n",[m
[32m+[m[32m      "1588\n",[m
[32m+[m[32m      "2508\n",[m
[32m+[m[32m      "4191\n",[m
[32m+[m[32m      "6812\n",[m
[32m+[m[32m      "24022\n",[m
[32m+[m[32m      "21442\n",[m
[32m+[m[32m      "20341\n",[m
[32m+[m[32m      "19491\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## view how many alignments (multiple alignments)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##EH\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_1000_minimap.sam"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "id": "05689c53-68b5-42de-bd55-bf1a229e93b6",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "107\n",[m
[32m+[m[32m      "207\n",[m
[32m+[m[32m      "515\n",[m
[32m+[m[32m      "887\n",[m
[32m+[m[32m      "158\n",[m
[32m+[m[32m      "280\n",[m
[32m+[m[32m      "543\n",[m
[32m+[m[32m      "896\n",[m
[32m+[m[32m      "268\n",[m
[32m+[m[32m      "430\n",[m
[32m+[m[32m      "970\n",[m
[32m+[m[32m      "1662\n",[m
[32m+[m[32m      "13879\n",[m
[32m+[m[32m      "13755\n",[m
[32m+[m[32m      "13720\n",[m
[32m+[m[32m      "13641\n",[m
[32m+[m[32m      "802\n",[m
[32m+[m[32m      "1165\n",[m
[32m+[m[32m      "1861\n",[m
[32m+[m[32m      "2809\n",[m
[32m+[m[32m      "6253\n",[m
[32m+[m[32m      "7767\n",[m
[32m+[m[32m      "10012\n",[m
[32m+[m[32m      "12323\n",[m
[32m+[m[32m      "514\n",[m
[32m+[m[32m      "768\n",[m
[32m+[m[32m      "1277\n",[m
[32m+[m[32m      "2051\n",[m
[32m+[m[32m      "27538\n",[m
[32m+[m[32m      "24535\n",[m
[32m+[m[32m      "24489\n",[m
[32m+[m[32m      "24410\n",[m
[32m+[m[32m      "1252\n",[m
[32m+[m[32m      "1768\n",[m
[32m+[m[32m      "2666\n",[m
[32m+[m[32m      "3912\n",[m
[32m+[m[32m      "3888\n",[m
[32m+[m[32m      "5192\n",[m
[32m+[m[32m      "7301\n",[m
[32m+[m[32m      "9543\n",[m
[32m+[m[32m      "958\n",[m
[32m+[m[32m      "1467\n",[m
[32m+[m[32m      "2493\n",[m
[32m+[m[32m      "3817\n",[m
[32m+[m[32m      "19904\n",[m
[32m+[m[32m      "18329\n",[m
[32m+[m[32m      "18192\n",[m
[32m+[m[32m      "18049\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# view single alignments\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##EH\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_1000_minimap.sam | wc -l"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "id": "3eafa8c1-2bc0-4d30-ad71-4e09ca7bbb37",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[M::mm_idx_gen::32.235*1.63] collected minimizers\n",[m
[32m+[m[32m      "[M::mm_idx_gen::40.264*1.89] sorted minimizers\n",[m
[32m+[m[32m      "[M::main::40.266*1.89] loaded/built the index for 1923 target sequence(s)\n",[m
[32m+[m[32m      "[M::mm_mapopt_update::41.644*1.86] mid_occ = 848\n",[m
[32m+[m[32m      "[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1923\n",[m
[32m+[m[32m      "[M::mm_idx_stat::42.496*1.84] distinct minimizers: 66057654 (43.51% are singletons); average occurrences: 4.867; average spacing: 5.223; total length: 1679203469\n",[m
[32m+[m[32m      "[M::worker_pipeline::66.027*2.21] mapped 16751 sequences\n",[m
[32m+[m[32m      "[M::main] Version: 2.22-r1101\n",[m
[32m+[m[32m      "[M::main] CMD: minimap2 -ax map-ont /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna /workspace/cfngle/results-data/sequences/EH_CpG_5000bp.fasta\n",[m
[32m+[m[32m      "[M::main] Real time: 66.285 sec; CPU: 146.265 sec; Peak RSS: 6.608 GB\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}EH_CpG_5000bp.fasta > ${path_results}minimap2/ZF_EH_5000_minimap.sam"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "id": "6a2dff7d-0080-4bfd-909b-726e2f3eefd3",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "5557\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_5000_minimap.sam | wc -l"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 48,[m
[32m+[m[32m   "id": "f18465a1-e736-45c5-8a1a-9f8c8355800b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "OS = linux\n",[m
[32m+[m[32m      "The number of physical cores =  10\n",[m
[32m+[m[32m      "nthread = 10\n",[m
[32m+[m[32m      "stacksize: 8192 kb\n",[m
[32m+[m[32m      "generating a scoring matrix for nucleotide (dist=200) ... done\n",[m
[32m+[m[32m      "Gap Penalty = -1.53, +0.00, +0.00\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Making a distance matrix ..\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "There are 1751 ambiguous characters.\n",[m
[32m+[m[32m      "  401 / 402 (thread    6)\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Constructing a UPGMA tree (efffree=0) ... \n",[m
[32m+[m[32m      "  400 / 402\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Progressive alignment 1/2... \n",[m
[32m+[m[32m      "STEP   124 / 401 (thread    4)df\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 6014\n",[m
[32m+[m[32m      "STEP   252 / 401 (thread    6)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 7251\n",[m
[32m+[m[32m      "STEP   351 / 401 (thread    7)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 10612\n",[m
[32m+[m[32m      "STEP   360 / 401 (thread    9)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 12970\n",[m
[32m+[m[32m      "STEP   364 / 401 (thread    0)f\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 15349\n",[m
[32m+[m[32m      "STEP   363 / 401 (thread    9)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 16824\n",[m
[32m+[m[32m      "STEP   401 / 401 (thread    7)d\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Making a distance matrix from msa.. \n",[m
[32m+[m[32m      "  400 / 402 (thread    4)\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Constructing a UPGMA tree (efffree=1) ... \n",[m
[32m+[m[32m      "  400 / 402\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Progressive alignment 2/2... \n",[m
[32m+[m[32m      "STEP   160 / 401 (thread    3)f\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 5791\n",[m
[32m+[m[32m      "STEP   292 / 401 (thread    2)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 7741\n",[m
[32m+[m[32m      "STEP   356 / 401 (thread    6)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 10061\n",[m
[32m+[m[32m      "STEP   373 / 401 (thread    2)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 15183\n",[m
[32m+[m[32m      "STEP   378 / 401 (thread    8)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 16936\n",[m
[32m+[m[32m      "STEP   395 / 401 (thread    9)f\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 20028\n",[m
[32m+[m[32m      "STEP   401 / 401 (thread    1)d\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "disttbfast (nuc) Version 7.307 alg=A, model=DNA200 (2), 1.53 (4.59), -0.00 (-0.00), noshift, amax=0.0\n",[m
[32m+[m[32m      "10 thread(s)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "generating a scoring matrix for nucleotide (dist=200) ... done\n",[m
[32m+[m[32m      "  400 / 402 (thread    8)dndpre (nuc) Version 7.307 alg=X, model=DNA200 (2), 1.53 (4.59), 0.37 (1.11), noshift, amax=0.0\n",[m
[32m+[m[32m      "10 thread(s)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "minimumweight = 0.000010\n",[m
[32m+[m[32m      "autosubalignment = 0.000000\n",[m
[32m+[m[32m      "nthread = 10\n",[m
[32m+[m[32m      "randomseed = 0\n",[m
[32m+[m[32m      "blosum 62 / kimura 200\n",[m
[32m+[m[32m      "poffset = 0\n",[m
[32m+[m[32m      "niter = 2\n",[m
[32m+[m[32m      "sueff_global = 0.100000\n",[m
[32m+[m[32m      "generating a scoring matrix for nucleotide (dist=200) ... done\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  400 / 402\n",[m
[32m+[m[32m      "Segment   1/  1    1-15103\n",[m
[32m+[m[32m      "002-0653-0 (thread   10) better        \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MAFFT ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## modules\n",[m
[32m+[m[32m    "module load mafft\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# arguments\n",[m
[32m+[m[32m    "mafft_args=\"--auto --thread -1\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mafft $mafft_args ${path_results}02_conserved_seq/AC_AS_EH_1000_conserved.fasta > ${path_results}02_conserved_seq/AC_AS_EH_1000_conserved_MSA_mafft.fasta\n",[m
[32m+[m[32m    "#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_100bp.fasta > ${path_results}AC_AS_EH_CpG_100bp.fasta \n",[m
[32m+[m[32m    "#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_200bp.fasta > ${path_results}AC_AS_EH_CpG_200bp.fasta \n",[m
[32m+[m[32m    "#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_500bp.fasta > ${path_results}AC_AS_EH_CpG_500bp.fasta \n",[m
[32m+[m[32m    "#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_1000bp.fasta > ${path_results}AC_AS_EH_CpG_1000bp.fasta "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "1dbe01c7-dd09-4dd5-abdc-2cd289395391",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/01b_alignments-checkpoint.ipynb b/.ipynb_checkpoints/01b_alignments-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..fe3af15[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/01b_alignments-checkpoint.ipynb[m
[36m@@ -0,0 +1,77 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "18337 reads; of these:\n",[m
[32m+[m[32m      "  18337 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    18329 (99.96%) aligned 0 times\n",[m
[32m+[m[32m      "    4 (0.02%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    4 (0.02%) aligned >1 times\n",[m
[32m+[m[32m      "0.04% overall alignment rate\n",[m
[32m+[m[32m      "[M::mm_idx_gen::31.402*1.70] collected minimizers\n",[m
[32m+[m[32m      "[M::mm_idx_gen::39.414*1.95] sorted minimizers\n",[m
[32m+[m[32m      "[M::main::39.416*1.95] loaded/built the index for 1923 target sequence(s)\n",[m
[32m+[m[32m      "[M::mm_mapopt_update::40.801*1.92] mid_occ = 848\n",[m
[32m+[m[32m      "[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1923\n",[m
[32m+[m[32m      "[M::mm_idx_stat::41.661*1.90] distinct minimizers: 66057654 (43.51% are singletons); average occurrences: 4.867; average spacing: 5.223; total length: 1679203469\n",[m
[32m+[m[32m      "[M::worker_pipeline::42.111*1.91] mapped 18337 sequences\n",[m
[32m+[m[32m      "[M::main] Version: 2.22-r1101\n",[m
[32m+[m[32m      "[M::main] CMD: minimap2 -ax map-ont /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna /workspace/cfngle/results-data/EH_CpG_200bp.fasta\n",[m
[32m+[m[32m      "[M::main] Real time: 42.367 sec; CPU: 80.620 sec; Peak RSS: 6.609 GB\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# setting up aariables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### BOWTIE2 ##### \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "bowtie2 -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_results}EH_CpG_200bp.fasta -S ${path_results}ZF_EH_200_bt2_N_1.sam -N 1\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}EH_CpG_200bp.fasta > ${path_results}ZF_EH_200_minimap.sam "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/02_bowtie2_02-checkpoint.sl b/.ipynb_checkpoints/02_bowtie2_02-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..6d33092[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02_bowtie2_02-checkpoint.sl[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_01[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp" "AS_CpG_100bp" "EH_CpG_100bp")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp" "AS_CpG_200bp" "EH_CpG_200bp")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp" "AS_CpG_500bp" "EH_CpG_500bp")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp" "AS_CpG_1000bp" "EH_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 20"[m
[32m+[m
[32m+[m[32m## indexing[m
[32m+[m[32m# bowtie2-build ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_raw}EH/bowtie2-index/EH_bowtie2[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_100bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}EH_${seq_100bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}EH_${seq_200bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}EH_${seq_500bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/02_bowtie2_03_1000_all-checkpoint.sl b/.ipynb_checkpoints/02_bowtie2_03_1000_all-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..5d2a82a[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02_bowtie2_03_1000_all-checkpoint.sl[m
[36m@@ -0,0 +1,62 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp" "AS_CpG_100bp" "EH_CpG_100bp")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp" "AS_CpG_200bp" "EH_CpG_200bp")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp" "AS_CpG_500bp" "EH_CpG_500bp")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp" "AS_CpG_1000bp" "EH_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32m## rgenome ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/02_bowtie2_04_1000_JM-checkpoint.sl b/.ipynb_checkpoints/02_bowtie2_04_1000_JM-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..7c6d39f[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02_bowtie2_04_1000_JM-checkpoint.sl[m
[36m@@ -0,0 +1,44 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_JM[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp" "AS_CpG_100bp" "EH_CpG_100bp")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp" "AS_CpG_200bp" "EH_CpG_200bp")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp" "AS_CpG_500bp" "EH_CpG_500bp")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp" "AS_CpG_1000bp" "EH_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32mbowtie2-build ${path_raw}JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fna ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2[m
[32m+[m[32mecho "bowtie2 indexing for JM done"[m
[32m+[m
[32m+[m[32m## rgenome JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}JM_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/02_bowtie2_05_1000_all-checkpoint.sl b/.ipynb_checkpoints/02_bowtie2_05_1000_all-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..5d58ff1[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02_bowtie2_05_1000_all-checkpoint.sl[m
[36m@@ -0,0 +1,69 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp" "AS_CpG_100bp" "EH_CpG_100bp")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp" "AS_CpG_200bp" "EH_CpG_200bp")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp" "AS_CpG_500bp" "EH_CpG_500bp")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp" "AS_CpG_1000bp" "EH_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32m## rgenome ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}JM_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/02_bowtie2_06_1000_all_JM-checkpoint.sl b/.ipynb_checkpoints/02_bowtie2_06_1000_all_JM-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..6997257[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02_bowtie2_06_1000_all_JM-checkpoint.sl[m
[36m@@ -0,0 +1,66 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem=20G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 1                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_1000bp=("JM_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32m## rgenome ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}JM_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/02_bowtie2_07_1000_all_ZF-checkpoint.sl b/.ipynb_checkpoints/02_bowtie2_07_1000_all_ZF-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..dba8ded[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02_bowtie2_07_1000_all_ZF-checkpoint.sl[m
[36m@@ -0,0 +1,66 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=04:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem=20G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 2                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_1000bp=("ZF_757883_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32m## rgenome ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}JM_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/02_bowtie2_08_1000_all_ZF-checkpoint.sl b/.ipynb_checkpoints/02_bowtie2_08_1000_all_ZF-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..69c5acd[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02_bowtie2_08_1000_all_ZF-checkpoint.sl[m
[36m@@ -0,0 +1,37 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem=10G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 1                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_1000bp=("ZF_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m[32m## rgenome JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}JM_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/02_minimap2_04_ZF-checkpoint.sl b/.ipynb_checkpoints/02_minimap2_04_ZF-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..38f6277[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02_minimap2_04_ZF-checkpoint.sl[m
[36m@@ -0,0 +1,48 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:10:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m
[32m+[m[32m## ZF rgenome[m
[32m+[m[32mpath_rgenome=ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna[m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_1000bp[0]} > ${path_results}minimap2/ZF_AC_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_500bp[0]} > ${path_results}minimap2/ZF_AC_500_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_1000bp[1]} > ${path_results}minimap2/ZF_AS_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_500bp[1]} > ${path_results}minimap2/ZF_AS_500_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_1000bp[2]} > ${path_results}minimap2/ZF_EH_1000_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_500bp[2]} > ${path_results}minimap2/ZF_EH_500_minimap.sam -t 20[m[41m [m
[1mdiff --git a/.ipynb_checkpoints/02_minimap2_05_1000_JM-checkpoint.sl b/.ipynb_checkpoints/02_minimap2_05_1000_JM-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..13abd66[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02_minimap2_05_1000_JM-checkpoint.sl[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:10:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_1000bp=("JM_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32m#JM[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/ZF_JM_1000_minimap.sam[m
[32m+[m
[32m+[m[32mpath_rgenome="AC/GCF_902167405.1_gadMor3.0_genomic.fasta"[m
[32m+[m[32m#AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32m#JM[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/AC_JM_1000_minimap.sam[m
[32m+[m
[32m+[m[32mpath_rgenome="AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta"[m
[32m+[m[32m#AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32m#JM[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/AS_JM_1000_minimap.sam[m
[32m+[m
[32m+[m[32mpath_rgenome="EH/fMerMel2.1_cnag1.scaffolds.fa"[m
[32m+[m[32m#EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32m#JM[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/EH_JM_1000_minimap.sam[m
[32m+[m
[32m+[m[32mpath_rgenome="JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fna"[m
[32m+[m[32m#JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32m#JM[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/JM_JM_1000_minimap.sam[m
[1mdiff --git a/.ipynb_checkpoints/02_minimap2_05_1000_all-checkpoint.sl b/.ipynb_checkpoints/02_minimap2_05_1000_all-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..8b8b908[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02_minimap2_05_1000_all-checkpoint.sl[m
[36m@@ -0,0 +1,80 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:10:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/ZF_AC_1000_minimap.sam[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}${seq_1000bp[1]} > ${path_results}minimap2/ZF_AS_1000_minimap.sam[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}${seq_1000bp[2]} > ${path_results}minimap2/ZF_EH_1000_minimap.sam[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="AC/GCF_902167405.1_gadMor3.0_genomic.fasta"[m
[32m+[m[32m#AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/AC_AC_1000_minimap.sam[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[1]} > ${path_results}minimap2/AC_AS_1000_minimap.sam[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[2]} > ${path_results}minimap2/AC_EH_1000_minimap.sam[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta"[m
[32m+[m[32m#AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/AS_AC_1000_minimap.sam[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[1]} > ${path_results}minimap2/AS_AS_1000_minimap.sam[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[2]} > ${path_results}minimap2/AS_EH_1000_minimap.sam[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="EH/fMerMel2.1_cnag1.scaffolds.fa"[m
[32m+[m[32m#EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/EH_AC_1000_minimap.sam[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[1]} > ${path_results}minimap2/EH_AS_1000_minimap.sam[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[2]} > ${path_results}minimap2/EH_EH_1000_minimap.sam[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fna"[m
[32m+[m[32m#JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/JM_AC_1000_minimap.sam[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[1]} > ${path_results}minimap2/JM_AS_1000_minimap.sam[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[2]} > ${path_results}minimap2/JM_EH_1000_minimap.sam[m[41m [m
[1mdiff --git a/.ipynb_checkpoints/02a_extract_conserved_seq-checkpoint.ipynb b/.ipynb_checkpoints/02a_extract_conserved_seq-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..6dc58b5[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/02a_extract_conserved_seq-checkpoint.ipynb[m
[36m@@ -0,0 +1,377 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "22cc4be0-6889-46cb-9bc2-4c12611d9108",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Currently Loaded Modulefiles:\n",[m
[32m+[m[32m      " 1) \u001b[46mpowerPlant/core\u001b[0m    4) git/2.21.0        7) perl/5.36.0         \n",[m
[32m+[m[32m      " 2) texlive/20230914   5) \u001b[46mSlurm/21.08.8-2\u001b[0m   8) slurm-utils/latest  \n",[m
[32m+[m[32m      " 3) pandoc/1.19.2      6) perlbrew/0.76     9) samtools/1.16       \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Key:\n",[m
[32m+[m[32m      "\u001b[46msticky\u001b[0m  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load samtools\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# checking active \n",[m
[32m+[m[32m    "module list"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "id": "bfe7d9f7-6ee6-4b2c-a78d-2128970086be",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "# seqs\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp\" \"AS_CpG_100bp\" \"EH_CpG_100bp\")\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp\" \"AS_CpG_200bp\" \"EH_CpG_200bp\")\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp\" \"AS_CpG_500bp\" \"EH_CpG_500bp\")\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp\" \"AS_CpG_1000bp\" \"EH_CpG_1000bp\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# suffix\n",[m
[32m+[m[32m    "suffix=\".fasta\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "568595ba-6783-41a9-b03b-dd060f22ee60",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### samtools ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## indexing files (.fasta)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "samtools faidx ${path_results}02_conserved_seq/ZF_EH_100_bt2_conserved$suffix \n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "a2a802f9-52bf-496d-a996-996ad00186c2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### samtools ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## sort (.bam)\n",[m
[32m+[m[32m    "samtools sort ${path_results}02_conserved_seq/ZF_EH_100_bt2_conserved -o ${path_results}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## indexing files (.bam)\n",[m
[32m+[m[32m    "samtools faidx ${path_results}02_conserved_seq/ZF_EH_100_bt2_conserved$suffix "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "09ffc3ce-4b41-46f4-9aa1-9f232f844b8b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "indexed sorted_AC_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_EH_CpG_500bp_bt2_.bam\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "##03 index (.bam)\n",[m
[32m+[m[32m    "cd \"${path_results}bowtie2/\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for files in sorted*; do\n",[m
[32m+[m[32m    "    # Index\n",[m
[32m+[m[32m    "    samtools index \"$files\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    echo \"indexed $files\"\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "03bd0dc2-b92d-43fc-a902-90a5c6f032e5",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Sorted AC_AC_CpG_1000bp_bt2_.bam to sorted_AC_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AC_CpG_100bp_bt2_.bam to sorted_AC_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AC_CpG_200bp_bt2_.bam to sorted_AC_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AC_CpG_500bp_bt2_.bam to sorted_AC_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AS_CpG_1000bp_bt2_.bam to sorted_AC_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AS_CpG_100bp_bt2_.bam to sorted_AC_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AS_CpG_200bp_bt2_.bam to sorted_AC_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AS_CpG_500bp_bt2_.bam to sorted_AC_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_EH_CpG_1000bp_bt2_.bam to sorted_AC_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_EH_CpG_100bp_bt2_.bam to sorted_AC_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_EH_CpG_200bp_bt2_.bam to sorted_AC_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_EH_CpG_500bp_bt2_.bam to sorted_AC_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AC_CpG_1000bp_bt2_.bam to sorted_AS_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AC_CpG_100bp_bt2_.bam to sorted_AS_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AC_CpG_200bp_bt2_.bam to sorted_AS_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AC_CpG_500bp_bt2_.bam to sorted_AS_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AS_CpG_1000bp_bt2_.bam to sorted_AS_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AS_CpG_100bp_bt2_.bam to sorted_AS_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AS_CpG_200bp_bt2_.bam to sorted_AS_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AS_CpG_500bp_bt2_.bam to sorted_AS_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_EH_CpG_1000bp_bt2_.bam to sorted_AS_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_EH_CpG_100bp_bt2_.bam to sorted_AS_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_EH_CpG_200bp_bt2_.bam to sorted_AS_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_EH_CpG_500bp_bt2_.bam to sorted_AS_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AC_CpG_1000bp_bt2_.bam to sorted_EH_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AC_CpG_100bp_bt2_.bam to sorted_EH_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AC_CpG_200bp_bt2_.bam to sorted_EH_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AC_CpG_500bp_bt2_.bam to sorted_EH_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AS_CpG_1000bp_bt2_.bam to sorted_EH_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AS_CpG_100bp_bt2_.bam to sorted_EH_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AS_CpG_200bp_bt2_.bam to sorted_EH_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AS_CpG_500bp_bt2_.bam to sorted_EH_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_EH_CpG_1000bp_bt2_.bam to sorted_EH_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_EH_CpG_100bp_bt2_.bam to sorted_EH_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_EH_CpG_200bp_bt2_.bam to sorted_EH_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_EH_CpG_500bp_bt2_.bam to sorted_EH_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AC_CpG_1000bp_bt2_.bam to sorted_ZF_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AC_CpG_100bp_bt2_.bam to sorted_ZF_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AC_CpG_200bp_bt2_.bam to sorted_ZF_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AC_CpG_500bp_bt2_.bam to sorted_ZF_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AS_CpG_1000bp_bt2_.bam to sorted_ZF_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AS_CpG_100bp_bt2_.bam to sorted_ZF_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AS_CpG_200bp_bt2_.bam to sorted_ZF_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AS_CpG_500bp_bt2_.bam to sorted_ZF_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_EH_CpG_1000bp_bt2_.bam to sorted_ZF_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_EH_CpG_100bp_bt2_.bam to sorted_ZF_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_EH_CpG_200bp_bt2_.bam to sorted_ZF_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_EH_CpG_500bp_bt2_.bam to sorted_ZF_EH_CpG_500bp_bt2_.bam\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## sort (.bam)\n",[m
[32m+[m[32m    "cd \"${path_results}bowtie2/\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for bamfile in *.bam; do\n",[m
[32m+[m[32m    "    # Output is defined as bam file + \"sorted\"\n",[m
[32m+[m[32m    "    bamfile_sorted=\"sorted_$bamfile\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Sort bam files\n",[m
[32m+[m[32m    "    samtools sort \"$bamfile\" > \"$bamfile_sorted\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    echo \"Sorted $bamfile to $bamfile_sorted\"\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "id": "bbd0b598-e898-499f-8b72-e59c95ebf3f8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 2936\n",[m
[32m+[m[32m      "samtools view: error reading file \"AC_AC_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted AC_AC_CpG_1000bp_bt2_.sam to AC_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AC_CpG_100bp_bt2_.sam to AC_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AC_CpG_200bp_bt2_.sam to AC_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AC_CpG_500bp_bt2_.sam to AC_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 4740\n",[m
[32m+[m[32m      "samtools view: error reading file \"AC_AS_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted AC_AS_CpG_1000bp_bt2_.sam to AC_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AS_CpG_100bp_bt2_.sam to AC_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AS_CpG_200bp_bt2_.sam to AC_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AS_CpG_500bp_bt2_.sam to AC_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 245\n",[m
[32m+[m[32m      "samtools view: error reading file \"AC_EH_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted AC_EH_CpG_1000bp_bt2_.sam to AC_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_EH_CpG_100bp_bt2_.sam to AC_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_EH_CpG_200bp_bt2_.sam to AC_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_EH_CpG_500bp_bt2_.sam to AC_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 7266\n",[m
[32m+[m[32m      "samtools view: error reading file \"AS_AC_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted AS_AC_CpG_1000bp_bt2_.sam to AS_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AC_CpG_100bp_bt2_.sam to AS_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AC_CpG_200bp_bt2_.sam to AS_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AC_CpG_500bp_bt2_.sam to AS_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 8846\n",[m
[32m+[m[32m      "samtools view: error reading file \"AS_AS_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted AS_AS_CpG_1000bp_bt2_.sam to AS_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AS_CpG_100bp_bt2_.sam to AS_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AS_CpG_200bp_bt2_.sam to AS_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AS_CpG_500bp_bt2_.sam to AS_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 4591\n",[m
[32m+[m[32m      "samtools view: error reading file \"AS_EH_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted AS_EH_CpG_1000bp_bt2_.sam to AS_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_EH_CpG_100bp_bt2_.sam to AS_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_EH_CpG_200bp_bt2_.sam to AS_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_EH_CpG_500bp_bt2_.sam to AS_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 2947\n",[m
[32m+[m[32m      "samtools view: error reading file \"EH_AC_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted EH_AC_CpG_1000bp_bt2_.sam to EH_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AC_CpG_100bp_bt2_.sam to EH_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AC_CpG_200bp_bt2_.sam to EH_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AC_CpG_500bp_bt2_.sam to EH_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 4447\n",[m
[32m+[m[32m      "samtools view: error reading file \"EH_AS_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted EH_AS_CpG_1000bp_bt2_.sam to EH_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AS_CpG_100bp_bt2_.sam to EH_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AS_CpG_200bp_bt2_.sam to EH_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AS_CpG_500bp_bt2_.sam to EH_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 78\n",[m
[32m+[m[32m      "samtools view: error reading file \"EH_EH_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted EH_EH_CpG_1000bp_bt2_.sam to EH_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_EH_CpG_100bp_bt2_.sam to EH_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_EH_CpG_200bp_bt2_.sam to EH_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_EH_CpG_500bp_bt2_.sam to EH_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 2750\n",[m
[32m+[m[32m      "samtools view: error reading file \"JM_AC_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted JM_AC_CpG_1000bp_bt2_.sam to JM_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 4474\n",[m
[32m+[m[32m      "samtools view: error reading file \"JM_AS_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted JM_AS_CpG_1000bp_bt2_.sam to JM_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 67\n",[m
[32m+[m[32m      "samtools view: error reading file \"JM_EH_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted JM_EH_CpG_1000bp_bt2_.sam to JM_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 4552\n",[m
[32m+[m[32m      "samtools view: error reading file \"ZF_AC_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted ZF_AC_CpG_1000bp_bt2_.sam to ZF_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 6436\n",[m
[32m+[m[32m      "samtools view: error reading file \"ZF_AS_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted ZF_AS_CpG_1000bp_bt2_.sam to ZF_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "[E::sam_parse1] query name too long\n",[m
[32m+[m[32m      "[W::sam_read1_sam] Parse error at line 1941\n",[m
[32m+[m[32m      "samtools view: error reading file \"ZF_EH_CpG_1000bp_bt2_.sam\"\n",[m
[32m+[m[32m      "Converted ZF_EH_CpG_1000bp_bt2_.sam to ZF_EH_CpG_1000bp_bt2_.bam\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## converting .sam to .bam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "cd \"${path_results}bowtie2/\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Loop through all .sam files in the directory\n",[m
[32m+[m[32m    "for samfile in *.sam; do\n",[m
[32m+[m[32m    "    # Define the output BAM file name by replacing the .sam extension with .bam\n",[m
[32m+[m[32m    "    bamfile=\"${samfile%.sam}.bam\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Convert SAM to BAM\n",[m
[32m+[m[32m    "    samtools view -Sb \"$samfile\" > \"$bamfile\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    echo \"Converted $samfile to $bamfile\"\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "75ed680d-ebed-4ee0-bc32-330b371e8e5c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/03b.1_JM_ZF_read_methyl_data_v-1.0-checkpoint.ipynb b/.ipynb_checkpoints/03b.1_JM_ZF_read_methyl_data_v-1.0-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..b0d35f8[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/03b.1_JM_ZF_read_methyl_data_v-1.0-checkpoint.ipynb[m
[36m@@ -0,0 +1,145 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "203d8a2b-9396-4d9a-b731-c8c3414a0b35",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "library(methylKit)\n",[m
[32m+[m[32m    "library(tidyverse)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "setwd(\"/workspace/cfngle/raw-data/\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "7d8f99e0-c117-4ab2-9a81-ab803a4619ce",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Received list of locations.\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "ERROR",[m
[32m+[m[32m     "evalue": "Error in methRead(ZF_file_names, sample.id = ZF_sample_names, assembly = \"GRCz11\", : length of 'location'  and 'name' should be same\n\n",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "Error in methRead(ZF_file_names, sample.id = ZF_sample_names, assembly = \"GRCz11\", : length of 'location'  and 'name' should be same\n\nTraceback:\n",[m
[32m+[m[32m      "1. methRead(ZF_file_names, sample.id = ZF_sample_names, assembly = \"GRCz11\", \n .     header = TRUE, mincov = 1, treatment = ZF_treatment)",[m
[32m+[m[32m      "2. methRead(ZF_file_names, sample.id = ZF_sample_names, assembly = \"GRCz11\", \n .     header = TRUE, mincov = 1, treatment = ZF_treatment)",[m
[32m+[m[32m      "3. stop(\"length of 'location'  and 'name' should be same\\n\")"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "ZF_file_names <- list.files(\"ZF/008.methylkit_BM_local/\", pattern = \"*.txt\")\n",[m
[32m+[m[32m    "ZF_sample_names <- as.list(substr(ZF_file_names, start = 1, stop = 6))\n",[m
[32m+[m[32m    "ZF_file_names <- as.list(paste0(\"ZF/008.methylkit_BM_local/\", ZF_file_names))\n",[m
[32m+[m[32m    "ZF_treatment <- c(rep(c(0, 1), length.out = length(ZF_file_names)))\n",[m
[32m+[m[32m    "methyl_data_ZF <- methRead(ZF_file_names,\n",[m
[32m+[m[32m    "                            sample.id = ZF_sample_names,\n",[m
[32m+[m[32m    "                            assembly=\"GRCz11\",\n",[m
[32m+[m[32m    "                            header=TRUE, mincov = 1,\n",[m
[32m+[m[32m    "                            treatment = ZF_treatment)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "id": "b9256dce-3a46-4931-bdd6-7b2626343869",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "ERROR",[m
[32m+[m[32m     "evalue": "Error in save(metyl_data_ZF, \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2.RData\"): objects 'metyl_data_ZF', '/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2.RData' not found\n",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "Error in save(metyl_data_ZF, \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2.RData\"): objects 'metyl_data_ZF', '/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2.RData' not found\nTraceback:\n",[m
[32m+[m[32m      "1. save(metyl_data_ZF, \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2.RData\")",[m
[32m+[m[32m      "2. stop(sprintf(ngettext(n, \"object %s not found\", \"objects %s not found\"), \n .     paste(sQuote(list[!ok]), collapse = \", \")), domain = NA)"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "save(methyl_data_ZF, \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2_local.RData\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "0b177615-936e-4386-b732-a709cc840a44",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "JM_file_names <- list.files(\"JM/008.methylkit_BM_local/\", pattern = \"*.txt\")\n",[m
[32m+[m[32m    "JM_sample_names <- as.list(substr(JM_file_names, start = 1, stop = 6))\n",[m
[32m+[m[32m    "JM_file_names <- as.list(paste0(\"JM/008.methylkit_BM_local/\", JM_file_names))\n",[m
[32m+[m[32m    "JM_treatment <- c(rep(c(0, 1), length.out = length(JM_file_names)))\n",[m
[32m+[m[32m    "methyl_data_JM <- methRead(JM_file_names,\n",[m
[32m+[m[32m    "                            sample.id = JM_sample_names,\n",[m
[32m+[m[32m    "                            assembly=\"ASM223467v1\",\n",[m
[32m+[m[32m    "                            header=TRUE, mincov = 1,\n",[m
[32m+[m[32m    "                            treatment = JM_treatment)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "id": "96330d24-b8b5-4b09-b94f-c03f2a62bb9e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "save(methyl_data_JM, file = \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_JM_bt2_local.RData\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "3876475e-e54d-4269-9217-ca4852135749",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "R-3.5.2",[m
[32m+[m[32m   "language": "R",[m
[32m+[m[32m   "name": "ir3.5.2"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "r",[m
[32m+[m[32m   "file_extension": ".r",[m
[32m+[m[32m   "mimetype": "text/x-r-source",[m
[32m+[m[32m   "name": "R",[m
[32m+[m[32m   "pygments_lexer": "r",[m
[32m+[m[32m   "version": "3.5.2"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/03c.1_methyl_extraction_ZF_R-v.1.0-checkpoint.sl b/.ipynb_checkpoints/03c.1_methyl_extraction_ZF_R-v.1.0-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..d17d385[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/03c.1_methyl_extraction_ZF_R-v.1.0-checkpoint.sl[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J R_methyl_01[m
[32m+[m[32m#SBATCH --time=01:59:59        # Walltime[m
[32m+[m[32m#SBATCH --mem=70G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 1                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/raw-data/ZF/zzz_methyldata/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/raw-data/ZF/zzz_methyldata/err_%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32mmodule load R[m[41m [m
[32m+[m
[32m+[m[32mRscript /workspace/cfngle/scripts/03c.1_ZF_methylation_extraction_SLURM_v-1.2.R[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/03c_JM_ZF_methylation_extraction_v-1.0-checkpoint.R b/.ipynb_checkpoints/03c_JM_ZF_methylation_extraction_v-1.0-checkpoint.R[m
[1mnew file mode 100644[m
[1mindex 0000000..e284928[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/03c_JM_ZF_methylation_extraction_v-1.0-checkpoint.R[m
[36m@@ -0,0 +1,124 @@[m
[32m+[m[32m# Preparation of a single methylation matrix from several individual sample files. The process follows the standard procedure suggested by methylKit. After uniting the samples we find that very few CpGs are left and we re-iterate the process using only samples with initial >100.000 CpGs.[m
[32m+[m[32m# NOTE: for my setup methylKit seems to run properly only in R version below 3.5.3.[m
[32m+[m[32m# Input data: individual sample files in methylKit format.[m
[32m+[m[32m# Output data: a methylBase object from the methylKit package containing methylation data from all samples.[m
[32m+[m
[32m+[m[32m# 1. Prepare the environment[m
[32m+[m[32m# Load required packages[m
[32m+[m[32mlibrary(methylKit)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m# Set working directory: CHANGE TO YOUR WORKING DIRECTORY[m
[32m+[m[32msetwd("/workspace/cfngle/raw-data/")[m
[32m+[m
[32m+[m[32m# 2. Prepare data[m
[32m+[m[32m# INPUT: Read individual sample  files[m
[32m+[m[32m# List files names[m
[32m+[m[32mJM_file_names <- list.files("JM/008.methylkit/", pattern = "*.txt")[m[41m [m
[32m+[m[32mJM_sample_names <- as.list(substr(JM_file_names, start = 1, stop = 6))[m
[32m+[m[32mJM_file_names <- as.list(paste0("JM/008.methylkit/", JM_file_names))[m
[32m+[m
[32m+[m[32m# creating arbitrary vector of zeros and ones for the treatment parameter in methRead[m
[32m+[m[32mJM_treatment <- c(rep(c(0, 1), length.out = length(JM_file_names)))[m
[32m+[m
[32m+[m[32m# test <- read.csv(JM_file_names[[1]][[1]], sep = "\t")[m
[32m+[m[32m# test_methyl <- methRead(JM_file_names[[1]], sample.id = JM_sample_names[1], assembly="ASM223467v1", header=TRUE, mincov = 1, treatment = JM_treatment[1])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# str(JM_file_names)[m
[32m+[m
[32m+[m[32m# 3. Read files. List contains samples names and treatment vector is arbitrary since we don't have 2 groups only.[m
[32m+[m
[32m+[m[32m# does ot work for some reason[m
[32m+[m[32mmethyl_data_JM <- methRead(JM_file_names,[m
[32m+[m[32m                            sample.id = JM_sample_names,[m
[32m+[m[32m                            assembly="ASM223467v1",[m
[32m+[m[32m                            header=TRUE, mincov = 1,[m
[32m+[m[32m                            treatment = JM_treatment)[m
[32m+[m
[32m+[m[32m# workaround[m[41m [m
[32m+[m[32mJM_methylation_list <- lapply(seq_along(JM_file_names), function(i) {[m
[32m+[m[32m  methRead(JM_file_names[[i]],[m
[32m+[m[32m           sample.id = JM_sample_names[i],[m
[32m+[m[32m           treatment = JM_treatment[i],[m
[32m+[m[32m           assembly = "ASM223467v1",[m
[32m+[m[32m           mincov = 1,[m
[32m+[m[32m           header = TRUE)[m
[32m+[m[32m})[m
[32m+[m
[32m+[m[32mmethyl_data_JM <- methRead(JM_file_names[[1]][[1]], sample.id = JM_sample_names[1], assembly="ASM223467v1", treatment = JM_treatment[1])[m
[32m+[m
[32m+[m[32m# Check the object[m
[32m+[m[32mmethyl_data_JM[m
[32m+[m
[32m+[m[32m# 4. Filter for reads with very low number of reads (<10) and exceeding the 99.9% percentile[m
[32m+[m[32mfiltered = filterByCoverage(m.data, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9)[m[41m [m
[32m+[m[32m# Check the object[m
[32m+[m[32mfiltered[m
[32m+[m
[32m+[m[32m# 5. Normalize coverage across samples[m
[32m+[m[32mnorm = normalizeCoverage(filtered)[m
[32m+[m[32m# Check the object[m
[32m+[m[32mnorm[m
[32m+[m
[32m+[m[32m# 6. Keep CpGs present in all samples. This option has to be evaluated for each experimental design, here we start with the most conservative approach which is to only keep CpGs present in all samples.[m
[32m+[m[32mmeth = methylKit::unite(norm, destrand=FALSE)[m
[32m+[m[32m# Check object[m
[32m+[m[32mmeth[m
[32m+[m[32m# dim(meth)[m
[32m+[m[32m# 405 364[m
[32m+[m[32m# RESULT: Only 405 CpGs are left after the procedure. This is likely to occur if few samples have very low number of reads and are driving down all samples CpGs after the unite function. Our strategy in this case will be to identify these samples, eliminate them and start the process again.[m
[32m+[m
[32m+[m[32m# START AGAIN. 2. Prepare data[m
[32m+[m[32m# INPUT: Read individual sample  files[m
[32m+[m[32m# List files names[m
[32m+[m[32mfile.list <- list('102F.txt',	'106F.txt',	'107F.txt',	'111F.txt',	'118F.txt',	'123F.txt',	'124F.txt',	'12F.txt',	'136F.txt',	'140F.txt',	'144F.txt',	'148F.txt',	'154F.txt',	'155F.txt',	'158F.txt',	'15F.txt',	'169F.txt',	'175F.txt',	'181F.txt',	'183F.txt',	'190F.txt',	'195F.txt',	'196F.txt',	'214F.txt',	'223F.txt',	'228F.txt',	'22F.txt',	'238F.txt',	'242F.txt',	'247F.txt',	'248F.txt',	'249F.txt',	'250F.txt',	'37F.txt',	'43F.txt',	'48F.txt',	'53F.txt',	'57F.txt',	'58F.txt',	'60F.txt',	'65F.txt',	'6F.txt',	'71F.txt',	'72F.txt',	'74F.txt',	'75F.txt',	'76F.txt',	'7F.txt',	'81F.txt',	'82F.txt',	'92F.txt',	'96F.txt',	'97F.txt',	'9F.txt',	'275.txt',	'1.txt',	'2.txt',	'4.txt',	'5.txt',	'8.txt',	'38.txt',	'39.txt',	'40.txt',	'41.txt',	'47.txt',	'54.txt',	'56.txt',	'61.txt',	'62.txt',	'70.txt',	'79.txt',	'88.txt',	'90.txt',	'94.txt',	'98.txt',	'117.txt',	'141.txt',	'26.txt',	'52.txt',	'55.txt',	'63.txt',	'80.txt',	'112.txt',	'128.txt',	'151.txt',	'153.txt',	'167.txt',	'191.txt',	'193.txt',	'212.txt',	'222.txt',	'225.txt',	'21.txt',	'23.txt',	'28.txt',	'29.txt',	'83.txt',	'84.txt',	'127.txt',	'161.txt',	'163.txt',	'165.txt',	'166.txt',	'188.txt',	'199.txt',	'255.txt',	'257.txt',	'258.txt',	'261.txt',	'264.txt')[m[41m [m
[32m+[m
[32m+[m[32m# 3. Read files. List contains samples names and treatment vector is arbitrary since we don't have 2 groups only.[m
[32m+[m[32mm.data <- methRead(file.list, sample.id=list('y5s1', 'y1s1',	'y7s1',	'y3s1',	'y2s1',	'y1s2',	'y1s3',	'y3s2',	'y1s4',	'y1s5',	'y2s2',	'y3s3',	'y1s6',	'y1s7',	'y2s3',	'y2s4',	'y2s5',	'y1s8',	'y1s9',	'y1s10',	'y0s1',	'y0s2',	'y1s11',	'y4s1',	'y1s12',	'y1s13',	'y2s8',	'y4s2',	'y0s3',	'y4s3',	'y6s1',	'y5s3',	'y6s2',	'y1s14',	'y4s4',	'y7s2',	'y2s9',	'y2s10',	'y1s15',	'y3s6',	'y4s5',	'y0s4',	'y4s6',	'y3s7',	'y0s6',	'y4s7',	'y3s8',	'y5s4',	'y4s8',	'y5s5',	'y0s7',	'y4s9',	'y3s9',	'y3s10',	'y0s8',	'y1s16',	'y1s17',	'y1s18',	'y1s19',	'y1s20',	'y1s21',	'y1s22',	'y1s23',	'y1s24',	'y1s25',	'y1s26',	'y1s27',	'y1s28',	'y1s29',	'y1s30',	'y1s32',	'y1s33',	'y1s34',	'y1s35',	'y1s36',	'y1s37',	'y1s38',	'y2s11',	'y2s12',	'y2s13',	'y2s14',	'y2s15',	'y2s16',	'y2s17',	'y2s18',	'y2s19',	'y2s20',	'y2s21',	'y2s22',	'y2s23',	'y2s24',	'y2s25',	'y3s11',	'y3s12',	'y3s13',	'y3s14',	'y3s15',	'y3s16',	'y3s17',	'y3s19',	'y3s20',	'y3s21',	'y3s22',	'y3s24',	'y3s25',	'y4s10',	'y4s11',	'y4s12',	'y4s13',	'y4s14'),[m[41m  [m
[32m+[m[32m                                             assembly="cod", mincov = 1, treatment=c(0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1, 1))[m
[32m+[m[32m# Check the object[m
[32m+[m[32mm.data[m
[32m+[m
[32m+[m[32m# 4. Filter for reads with very low number of reads (<10) and exceeding the 99.9% percentile[m
[32m+[m[32mfiltered = filterByCoverage(m.data, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9)[m[41m [m
[32m+[m[32m# Check the object[m
[32m+[m[32mfiltered[m
[32m+[m
[32m+[m[32m# 5. Normalize coverage across samples[m
[32m+[m[32mnorm = normalizeCoverage(filtered)[m
[32m+[m[32m# Check the object[m
[32m+[m[32mnorm[m
[32m+[m
[32m+[m[32m# 6. Keep CpGs present in 48 samples per group. We relaxed this criterion to obtain more CpGs but later we will need to missing data.[m
[32m+[m[32mmeth = methylKit::unite(norm, destrand=FALSE, min.per.group=48L)[m
[32m+[m[32m# Check object[m
[32m+[m[32mmeth[m
[32m+[m[32m# dim(meth)[m
[32m+[m[32m# 85735   334[m
[32m+[m
[32m+[m[32m# 7. Save the object[m
[32m+[m[32msave(meth, file="meth-10cov-100000CpGs.Rdata")[m
[32m+[m
[32m+[m
[32m+[m[32m# Obtain percent methylation values[m
[32m+[m[32mperc.meth=percMethylation(meth)[m
[32m+[m[32m# Transpose dataframe to have samples as rows and CpGs as columns[m
[32m+[m[32mperc.meth.df <- as.data.frame(t(perc.meth))[m
[32m+[m[32m# Obtain the unique names of CpGs in the form of chromosome.start[m
[32m+[m[32mmeth.df <- as.data.frame(meth)[m
[32m+[m[32mcpg.df <- bind_cols(chr=meth$chr, start=meth$start)[m
[32m+[m[32mcpgs <- tidyr::unite(cpg.df, cpgs, chr:start, sep=".")[m
[32m+[m[32m# Add the unique CpG names as column names in the dataframe[m
[32m+[m[32mcolnames(perc.meth.df) <- t(cpgs)[m
[32m+[m[32m# Add the variables of interest. In this case we add "age" and "batch". Read the file containing this information in the following format with the samples ordered as in our dataframe (perc.meth.df):[m
[32m+[m[32msamples.age <- read.table("samples.txt", sep="\t", stringsAsFactors = FALSE, quote="", header=TRUE)[m[41m [m
[32m+[m[32mhead(samples.age)[m
[32m+[m[32m#filename sample_file age sample batch[m
[32m+[m[32m#1 102F.txt        102F   5   y5s1     1[m
[32m+[m[32m#2 106F.txt        106F   1   y1s1     1[m
[32m+[m[32m#3 107F.txt        107F   7   y7s1     1[m
[32m+[m[32m#4 111F.txt        111F   3   y3s1     1[m
[32m+[m[32m#5 118F.txt        118F   2   y2s1     1[m
[32m+[m[32m#6 123F.txt        123F   1   y1s2     1[m
[32m+[m[32m# Rownames of our dataframe (perc.meth.df) are in the same order[m
[32m+[m[32mmeth.age.df <- perc.meth.df %>% mutate(age=samples.age$age)[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/03c_JM_ZF_methylation_extraction_v-1.1-checkpoint.R b/.ipynb_checkpoints/03c_JM_ZF_methylation_extraction_v-1.1-checkpoint.R[m
[1mnew file mode 100644[m
[1mindex 0000000..737606e[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/03c_JM_ZF_methylation_extraction_v-1.1-checkpoint.R[m
[36m@@ -0,0 +1,156 @@[m
[32m+[m[32m# Preparation of a single methylation matrix from several individual sample files. The process follows the standard procedure suggested by methylKit. After uniting the samples we find that very few CpGs are left and we re-iterate the process using only samples with initial >100.000 CpGs.[m
[32m+[m[32m# NOTE: for my setup methylKit seems to run properly only in R version below 3.5.3.[m
[32m+[m[32m# Input data: individual sample files in methylKit format.[m
[32m+[m[32m# Output data: a methylBase object from the methylKit package containing methylation data from all samples.[m
[32m+[m
[32m+[m[32m# 1. Prepare the environment[m
[32m+[m[32m# Load required packages[m
[32m+[m[32mlibrary(methylKit)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m# Set working directory: CHANGE TO YOUR WORKING DIRECTORY[m
[32m+[m[32msetwd("/workspace/cfngle/raw-data/")[m
[32m+[m
[32m+[m[32m# 2. Prepare data[m
[32m+[m[32m# INPUT: Read individual sample  files[m
[32m+[m[32m# List files names[m
[32m+[m[32m# JM_file_names <- list.files("JM/008.methylkit/", pattern = "*.txt")[m[41m [m
[32m+[m[32m# JM_sample_names <- as.list(substr(JM_file_names, start = 1, stop = 6))[m
[32m+[m[32m# JM_file_names <- as.list(paste0("JM/008.methylkit/", JM_file_names))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # creating arbitrary vector of zeros and ones for the treatment parameter in methRead[m
[32m+[m[32m# JM_treatment <- c(rep(c(0, 1), length.out = length(JM_file_names)))[m
[32m+[m
[32m+[m[32m# test <- read.csv(JM_file_names[[1]][[1]], sep = "\t")[m
[32m+[m[32m# test_methyl <- methRead(JM_file_names[[1]], sample.id = JM_sample_names[1], assembly="ASM223467v1", header=TRUE, mincov = 1, treatment = JM_treatment[1])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# str(JM_file_names)[m
[32m+[m
[32m+[m[32m# 3. Read files. List contains samples names and treatment vector is arbitrary since we don't have 2 groups only.[m
[32m+[m
[32m+[m[32m# does not work for some reason. >>> This script ran in jupyter notebook and in version R 3.5.2[m[41m  [m
[32m+[m[32m# methyl_data_JM <- methRead(JM_file_names,[m
[32m+[m[32m#                             sample.id = JM_sample_names,[m
[32m+[m[32m#                             assembly="ASM223467v1",[m
[32m+[m[32m#                             header=TRUE, mincov = 1,[m
[32m+[m[32m#                             treatment = JM_treatment)[m
[32m+[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_JM_JN.RData")[m
[32m+[m
[32m+[m[32m# Check the object[m
[32m+[m[32mmethyl_data_JM[m
[32m+[m
[32m+[m[32m# 4. Filter for reads with very low number of reads (<10) and exceeding the 99.9% percentile[m
[32m+[m[32mfiltered = filterByCoverage(methyl_data_JM, lo.count=5, lo.perc=NULL, hi.count=100, hi.perc=NULL)[m[41m [m
[32m+[m
[32m+[m[32m# Check the object[m
[32m+[m[32mfiltered[m
[32m+[m
[32m+[m[32m# 5. Normalize coverage across samples[m
[32m+[m[32mnorm = normalizeCoverage(filtered)[m
[32m+[m[32m# Check the object[m
[32m+[m[32mnorm[m
[32m+[m[32msave(norm, file ="/workspace/cfngle/results-data/03_extracted_methyl/TMP_methyl_norm.RData")[m
[32m+[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/TMP_methyl_norm.RData")[m
[32m+[m
[32m+[m[32m# 6. Keep CpGs present in all samples. This option has to be evaluated for each experimental design, here we start with the most conservative approach which is to only keep CpGs present in all samples.[m
[32m+[m[32mmeth = methylKit::unite(norm, destrand=FALSE)[m
[32m+[m
[32m+[m[32m# Check object[m
[32m+[m[32mmeth[m
[32m+[m[32mdim(meth)[m
[32m+[m[32msave(meth, file ="/workspace/cfngle/results-data/03_extracted_methyl/TMP_JM_methyl_78621_CpGs.RData")[m
[32m+[m
[32m+[m[32m# creating df for overview[m[41m [m
[32m+[m[32moverview_CpGs <- c(6254, 54772, 66079, 78621)[m
[32m+[m[32moverview_min_grp <- c(23.5, 18, 17, 16)[m[41m [m
[32m+[m
[32m+[m[32mmetadata_CpGs <- data.frame(CpGs = overview_CpGs, included_samples = overview_min_grp*2, total_samples = 47, ratio_samples = (overview_min_grp*2)/47 )[m
[32m+[m[32mwrite.csv(metadata_CpGs, file ="/workspace/cfngle/results-data/03_extracted_methyl/TMP_JM_methyl_metadata.csv")[m
[32m+[m
[32m+[m
[32m+[m[32m# 4. Filter for reads with very low number of reads (<10) and exceeding the 99.9% percentile[m
[32m+[m[32mfiltered = filterByCoverage(m.data, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9)[m[41m [m
[32m+[m[32m# Check the object[m
[32m+[m[32mfiltered[m
[32m+[m
[32m+[m[32m# 5. Normalize coverage across samples[m
[32m+[m[32mnorm = normalizeCoverage(filtered)[m
[32m+[m[32m# Check the object[m
[32m+[m[32mnorm[m
[32m+[m
[32m+[m[32m# 6. Keep CpGs present in 48 samples per group. We relaxed this criterion to obtain more CpGs but later we will need to missing data.[m
[32m+[m[32mmeth = methylKit::unite(norm, destrand=FALSE, min.per.group=19L)[m
[32m+[m[32m# Check object[m
[32m+[m
[32m+[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/TMP_JM_methyl_66079_CpGs.RData")[m
[32m+[m[32mmeth[m
[32m+[m[32mdim(meth)[m
[32m+[m[32m# 85735   334[m
[32m+[m
[32m+[m[32m# 7. Save the object[m
[32m+[m[32m# save(meth, file="meth-10cov-100000CpGs.Rdata")[m
[32m+[m
[32m+[m
[32m+[m[32m# Obtain percent methylation values[m
[32m+[m[32mperc.meth=percMethylation(meth)[m
[32m+[m[32m# Transpose dataframe to have samples as rows and CpGs as columns[m
[32m+[m[32mperc.meth.df <- as.data.frame(t(perc.meth))[m
[32m+[m
[32m+[m
[32m+[m[32m# Obtain the unique names of CpGs in the form of chromosome.start[m
[32m+[m[32mmeth.df <- as.data.frame(meth)[m
[32m+[m[32mcpg.df <- bind_cols(chr=meth$chr, start=meth$start)[m
[32m+[m[32mcpgs <- tidyr::unite(cpg.df, cpgs, chr:start, sep=":")[m
[32m+[m[32m# Add the unique CpG names as column names in the dataframe[m
[32m+[m[32mcolnames(perc.meth.df) <- t(cpgs)[m
[32m+[m[32m# Add the variables of interest. In this case we add "age" and "batch". Read the file containing this information in the following format with the samples ordered as in our dataframe (perc.meth.df):[m
[32m+[m[32msamples.age <- read.csv("JM/raw-reads/00_metadata/00_JM_metadata.csv", sep=",")[m[41m [m
[32m+[m[32mhead(samples.age)[m
[32m+[m
[32m+[m[32mmeth.age.df <- perc.meth.df %>% mutate(age=samples.age$age, sex = samples.age$sex)[m
[32m+[m
[32m+[m[32mwrite.csv(meth.age.df, file = "JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m
[32m+[m[32m# Obtain a dataframe listing all the CpGs and their postion on the genome[m
[32m+[m[32mmeth_pos <- as.data.frame(bind_cols(chr = meth$chr, chr_pos = meth$start, strand = meth$strand, CpG_name = cpgs))[m
[32m+[m[32mwrite.csv(meth_pos, file = "JM/zzz-methyldata/01_JM_methylpos_66079_CpGs.csv")[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m
[32m+[m[32mmeth.extraction <- function(methyl_data, min_per_group = NULL, samples_age, lo.count=5, lo.perc=NULL, hi.count=NULL, hi.perc=99.9) {[m
[32m+[m[32m  temp = filterByCoverage(methyl_data, lo.count=lo.count, lo.perc=lo.perc, hi.count=hi.count, hi.perc=hi.perc)[m[41m [m
[32m+[m
[32m+[m[32m  temp = normalizeCoverage(temp)[m
[32m+[m[41m  [m
[32m+[m[32m  meth = methylKit::unite(temp, destrand=FALSE, min.per.group=paste0(min_per_group, "L"))[m
[32m+[m[41m  [m
[32m+[m[32m  # Obtain percent methylation values[m
[32m+[m[32m  perc.meth=percMethylation(meth)[m
[32m+[m[32m  # Transpose dataframe to have samples as rows and CpGs as columns[m
[32m+[m[32m  perc.meth.df <- as.data.frame(t(perc.meth))[m
[32m+[m[41m  [m
[32m+[m[32m  # Obtain the unique names of CpGs in the form of chromosome.start[m
[32m+[m[32m  meth.df <- as.data.frame(meth)[m
[32m+[m[32m  cpg.df <- bind_cols(chr=meth$chr, start=meth$start)[m
[32m+[m[32m  cpgs <- tidyr::unite(cpg.df, cpgs, chr:start, sep=":")[m
[32m+[m[32m  # Add the unique CpG names as column names in the dataframe[m
[32m+[m[32m  colnames(perc.meth.df) <- t(cpgs)[m
[32m+[m[32m  meth.percent.to[m
[32m+[m
[32m+[m[32m  meth.age.df <- perc.meth.df %>% mutate(age=samples_age$age, sex = samples_age$sex)[m
[32m+[m[41m  [m
[32m+[m[32m  # Obtain a dataframe listing all the CpGs and their position on the genome[m
[32m+[m[32m  meth_pos <- as.data.frame(bind_cols(chr = meth$chr, chr_pos = meth$start, strand = meth$strand, CpG_name = cpgs))[m
[32m+[m[32m  return(list(meth_pos,meth.age.df))[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mmeth.extraction(methyl_data_JM, samples_age = samples.age)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mwrite.csv(meth.age.df, file = "JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m
[1mdiff --git a/.ipynb_checkpoints/MAFFT_01-checkpoint.sl b/.ipynb_checkpoints/MAFFT_01-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..54f453b[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/MAFFT_01-checkpoint.sl[m
[36m@@ -0,0 +1,30 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_8[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 40                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m#### MAFFT ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load mafft[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/mafft/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mmafft_args="--auto --thread -1"[m
[32m+[m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_100bp.fasta > ${path_results}AC_AS_EH_CpG_100bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_200bp.fasta > ${path_results}AC_AS_EH_CpG_200bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_500bp.fasta > ${path_results}AC_AS_EH_CpG_500bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_1000bp.fasta > ${path_results}AC_AS_EH_CpG_1000bp.fasta[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/MAFFT_02-checkpoint.sl b/.ipynb_checkpoints/MAFFT_02-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..560804e[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/MAFFT_02-checkpoint.sl[m
[36m@@ -0,0 +1,30 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_8[m
[32m+[m[32m#SBATCH --time=15:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 40                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m#### MAFFT ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load mafft[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/mafft/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mmafft_args="--auto --thread -1"[m
[32m+[m
[32m+[m[32m#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_100bp.fasta > ${path_results}AC_AS_EH_CpG_100bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_200bp.fasta > ${path_results}AC_AS_EH_CpG_200bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_500bp.fasta > ${path_results}AC_AS_EH_CpG_500bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_1000bp.fasta > ${path_results}AC_AS_EH_CpG_1000bp.fasta[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/MAFFT_03_test_conserved-checkpoint.sl b/.ipynb_checkpoints/MAFFT_03_test_conserved-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..59c9a4f[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/MAFFT_03_test_conserved-checkpoint.sl[m
[36m@@ -0,0 +1,31 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J MAFFT_03[m
[32m+[m[32m#SBATCH --time=01:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 40                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m#### MAFFT ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load mafft[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mmafft_args="--auto --thread -1"[m
[32m+[m
[32m+[m[32mmafft $mafft_args ${path_results}02_conserved_seq/AC_AS_EH_1000_conserved.fasta > ${path_results}02_conserved_seq/AC_AS_EH_1000_conserved_MSA_mafft.fasta[m
[32m+[m[32m#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_100bp.fasta > ${path_results}AC_AS_EH_CpG_100bp.fasta[m[41m [m
[32m+[m[32m#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_200bp.fasta > ${path_results}AC_AS_EH_CpG_200bp.fasta[m[41m [m
[32m+[m[32m#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_500bp.fasta > ${path_results}AC_AS_EH_CpG_500bp.fasta[m[41m [m
[32m+[m[32m#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_1000bp.fasta > ${path_results}AC_AS_EH_CpG_1000bp.fasta[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/Untitled-checkpoint.ipynb b/.ipynb_checkpoints/Untitled-checkpoint.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..363fcab[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/Untitled-checkpoint.ipynb[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [],[m
[32m+[m[32m "metadata": {},[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/.ipynb_checkpoints/bowtie2_01-checkpoint.sl b/.ipynb_checkpoints/bowtie2_01-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..03920ef[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/bowtie2_01-checkpoint.sl[m
[36m@@ -0,0 +1,76 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_01[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_mafft%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_mafft%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp" "AS_CpG_100bp" "EH_CpG_100bp")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp" "AS_CpG_200bp" "EH_CpG_200bp")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp" "AS_CpG_500bp" "EH_CpG_500bp")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp" "AS_CpG_1000bp" "EH_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 20"[m
[32m+[m
[32m+[m[32m## indexing[m
[32m+[m[32mbowtie2-build ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_raw}EH/bowtie2-index/EH_bowtie2[m
[32m+[m
[32m+[m[32m## rgenome ZF[m
[32m+[m[32m#echo "ZF"[m
[32m+[m[32m#for (( i=0; i<${#seq_100bp[@]}; i++ ));[m[41m [m
[32m+[m[32m#do[m[41m [m
[32m+[m[32m#    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}ZF_${seq_100bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m#    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}ZF_${seq_200bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m#    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}ZF_${seq_500bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m#    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m# done[m
[32m+[m
[32m+[m[32m## rgenome AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32mfor (( i=0; i<${#seq_100bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}AC_${seq_100bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}AC_${seq_200bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}AC_${seq_500bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32mfor (( i=0; i<${#seq_100bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}AS_${seq_100bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}AS_${seq_200bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}AS_${seq_500bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_100bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/ -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}EH_${seq_100bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/ -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}EH_${seq_200bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/ -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}EH_${seq_500bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/ -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/cd_hit_01_75-checkpoint.sl b/.ipynb_checkpoints/cd_hit_01_75-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..73c5c58[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/cd_hit_01_75-checkpoint.sl[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_01_75[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32m# 200 bp sequences[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32m#### CD-HIT ####[m
[32m+[m[32m# clustering sequences with cd-hit[m
[32m+[m[32mcdhit_opt="-p 1 -c 0.75 -n 4 -T 0 -M 0"[m
[32m+[m[32mcdhit_nmsfx="_75"[m
[32m+[m
[32m+[m[32m# logging[m
[32m+[m[32mscript ${path_results}cd-hit/log${cdhit_nmsfx}.log[m
[32m+[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m
[32m+[m[32mexit[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/cd_hit_01_8-checkpoint.sl b/.ipynb_checkpoints/cd_hit_01_8-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..00593ad[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/cd_hit_01_8-checkpoint.sl[m
[36m@@ -0,0 +1,48 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_01_75[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m# ZF[m
[32m+[m[32m#### CD-HIT ####[m
[32m+[m[32m# clustering sequences with cd-hit variables[m
[32m+[m[32mcdhit_opt="-p 1 -c 0.8 -n 5 -T 0 -M 0"[m
[32m+[m[32mcdhit_nmsfx="_8"[m
[32m+[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[0]} -i2 ${path_results}${seq_100bp[1]} -o ${path_results}cd-hit/AC_AS_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[0]} -i2 ${path_results}${seq_100bp[2]} -o ${path_results}cd-hit/AC_EH_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[1]} -i2 ${path_results}${seq_100bp[2]} -o ${path_results}cd-hit/AS_EH_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[1]} -i2 ${path_results}${seq_100bp[0]} -o ${path_results}cd-hit/AS_AC_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[2]} -i2 ${path_results}${seq_100bp[0]} -o ${path_results}cd-hit/EH_AC_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[2]} -i2 ${path_results}${seq_100bp[1]} -o ${path_results}cd-hit/EH_AS_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[1mdiff --git a/.ipynb_checkpoints/cd_hit_100bp_8-checkpoint.sl b/.ipynb_checkpoints/cd_hit_100bp_8-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..3c897b6[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/cd_hit_100bp_8-checkpoint.sl[m
[36m@@ -0,0 +1,43 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_01_75[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32m# 200 bp sequences[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32m#### CD-HIT ####[m
[32m+[m[32m# clustering sequences with cd-hit[m
[32m+[m[32mcdhit_opt="-p 1 -c 0.8 -n 5 -T 0 -M 0"[m
[32m+[m[32mcdhit_nmsfx="_8"[m
[32m+[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[0]} -i2 ${path_results}${seq_100bp[1]} -o ${path_results}cd-hit/AC_AS_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[0]} -i2 ${path_results}${seq_100bp[2]} -o ${path_results}cd-hit/AC_EH_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[1]} -i2 ${path_results}${seq_100bp[2]} -o ${path_results}cd-hit/AS_EH_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[1]} -i2 ${path_results}${seq_100bp[0]} -o ${path_results}cd-hit/AS_AC_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[2]} -i2 ${path_results}${seq_100bp[0]} -o ${path_results}cd-hit/EH_AC_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[2]} -i2 ${path_results}${seq_100bp[1]} -o ${path_results}cd-hit/EH_AS_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/cd_hit_8-checkpoint.sl b/.ipynb_checkpoints/cd_hit_8-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..77f45d9[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/cd_hit_8-checkpoint.sl[m
[36m@@ -0,0 +1,82 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_8[m
[32m+[m[32m#SBATCH --time=20:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m# ZF[m
[32m+[m[32m#### CD-HIT ####[m
[32m+[m[32m# clustering sequences with cd-hit variables[m
[32m+[m[32mcdhit_opt="-p 1 -c 0.8 -n 5 -T 0 -M 0"[m
[32m+[m[32mcdhit_nmsfx="_8"[m
[32m+[m
[32m+[m[32m## 100[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[0]} -i2 ${path_sequences}${seq_100bp[1]} -o ${path_results}cd-hit/AC_AS_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[0]} -i2 ${path_sequences}${seq_100bp[2]} -o ${path_results}cd-hit/AC_EH_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[1]} -i2 ${path_sequences}${seq_100bp[2]} -o ${path_results}cd-hit/AS_EH_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[1]} -i2 ${path_sequences}${seq_100bp[0]} -o ${path_results}cd-hit/AS_AC_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[2]} -i2 ${path_sequences}${seq_100bp[0]} -o ${path_results}cd-hit/EH_AC_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[2]} -i2 ${path_sequences}${seq_100bp[1]} -o ${path_results}cd-hit/EH_AS_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m
[32m+[m[32m## 200[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[0]} -i2 ${path_sequences}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[0]} -i2 ${path_sequences}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[1]} -i2 ${path_sequences}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[1]} -i2 ${path_sequences}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[2]} -i2 ${path_sequences}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[2]} -i2 ${path_sequences}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m
[32m+[m[32m##500[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[0]} -i2 ${path_sequences}${seq_500bp[1]} -o ${path_results}cd-hit/AC_AS_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[0]} -i2 ${path_sequences}${seq_500bp[2]} -o ${path_results}cd-hit/AC_EH_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[1]} -i2 ${path_sequences}${seq_500bp[2]} -o ${path_results}cd-hit/AS_EH_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[1]} -i2 ${path_sequences}${seq_500bp[0]} -o ${path_results}cd-hit/AS_AC_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[2]} -i2 ${path_sequences}${seq_500bp[0]} -o ${path_results}cd-hit/EH_AC_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[2]} -i2 ${path_sequences}${seq_500bp[1]} -o ${path_results}cd-hit/EH_AS_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m
[32m+[m[32m##1000[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[0]} -i2 ${path_sequences}${seq_1000bp[1]} -o ${path_results}cd-hit/AC_AS_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[0]} -i2 ${path_sequences}${seq_1000bp[2]} -o ${path_results}cd-hit/AC_EH_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[1]} -i2 ${path_sequences}${seq_1000bp[2]} -o ${path_results}cd-hit/AS_EH_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[1]} -i2 ${path_sequences}${seq_1000bp[0]} -o ${path_results}cd-hit/AS_AC_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[2]} -i2 ${path_sequences}${seq_1000bp[0]} -o ${path_results}cd-hit/EH_AC_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[2]} -i2 ${path_sequences}${seq_1000bp[1]} -o ${path_results}cd-hit/EH_AS_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/cd_hit_8_conserved_test-checkpoint.sl b/.ipynb_checkpoints/cd_hit_8_conserved_test-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..fbf288d[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/cd_hit_8_conserved_test-checkpoint.sl[m
[36m@@ -0,0 +1,49 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_8[m
[32m+[m[32m#SBATCH --time=01:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m[32mpath_conserved=/workspace/cfngle/results-data/02_conserved_seq/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32mseq_conserved=("AC_1000_conserved.fasta" "AS_1000_conserved.fasta" "EH_1000_conserved.fasta")[m
[32m+[m
[32m+[m[32m# ZF[m
[32m+[m[32m#### CD-HIT ####[m
[32m+[m[32m# clustering sequences with cd-hit variables[m
[32m+[m[32mcdhit_opt="-p 1 -c 0.8 -n 5 -T 0 -M 0"[m
[32m+[m[32mcdhit_nmsfx="_conserved_8"[m
[32m+[m
[32m+[m[32m##1000[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[0]} -i2 ${path_conserved}${seq_conserved[1]} -o ${path_results}cd-hit/AC_AS_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[0]} -i2 ${path_conserved}${seq_conserved[2]} -o ${path_results}cd-hit/AC_EH_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[1]} -i2 ${path_conserved}${seq_conserved[2]} -o ${path_results}cd-hit/AS_EH_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[1]} -i2 ${path_conserved}${seq_conserved[0]} -o ${path_results}cd-hit/AS_AC_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[2]} -i2 ${path_conserved}${seq_conserved[0]} -o ${path_results}cd-hit/EH_AC_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[2]} -i2 ${path_conserved}${seq_conserved[1]} -o ${path_results}cd-hit/EH_AS_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/minimap2_01-checkpoint.sl b/.ipynb_checkpoints/minimap2_01-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..d24f3bb[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/minimap2_01-checkpoint.sl[m
[36m@@ -0,0 +1,40 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32m# 200 bp sequences[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[0]} > ${path_results}minimap2/ZF_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[0]} > ${path_results}minimap2/ZF_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[1]} > ${path_results}minimap2/ZF_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[1]} > ${path_results}minimap2/ZF_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[2]} > ${path_results}minimap2/ZF_EH_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[2]} > ${path_results}minimap2/ZF_EH_100_minimap.sam -t 20[m
\ No newline at end of file[m
[1mdiff --git a/.ipynb_checkpoints/minimap2_02-checkpoint.sl b/.ipynb_checkpoints/minimap2_02-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..2188a85[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/minimap2_02-checkpoint.sl[m
[36m@@ -0,0 +1,66 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/minimap2/job_output_%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/minimap2/job_output_%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32m# 200 bp sequences[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32mpath_rgenome="AC/GCF_902167405.1_gadMor3.0_genomic.fasta"[m
[32m+[m[32m#AC[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AC_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AC_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AC_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AC_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AC_EH_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AC_EH_100_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta"[m
[32m+[m[32m#AS[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AS_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AS_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AS_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AS_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AS_EH_200_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AS_EH_100_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="EH/fMerMel2.1_cnag1.scaffolds.fa"[m
[32m+[m[32m#EH\[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_200bp[0]} > ${path_results}minimap2/EH_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_100bp[0]} > ${path_results}minimap2/EH_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_200bp[1]} > ${path_results}minimap2/EH_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_100bp[1]} > ${path_results}minimap2/EH_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_200bp[2]} > ${path_results}minimap2/EH_EH_200_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_100bp[2]} > ${path_results}minimap2/EH_EH_100_minimap.sam -t 20[m[41m [m
[1mdiff --git a/.ipynb_checkpoints/minimap2_03-checkpoint.sl b/.ipynb_checkpoints/minimap2_03-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..be34bc2[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/minimap2_03-checkpoint.sl[m
[36m@@ -0,0 +1,83 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32mpath_rgenome="AC/GCF_902167405.1_gadMor3.0_genomic.fasta"[m
[32m+[m[32m## AC rgenome[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_1000bp[0]} > ${path_results}minimap2/AC_AC_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_500bp[0]} > ${path_results}minimap2/AC_AC_500_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_1000bp[1]} > ${path_results}minimap2/AC_AS_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_500bp[1]} > ${path_results}minimap2/AC_AS_500_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_1000bp[2]} > ${path_results}minimap2/AC_EH_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_500bp[2]} > ${path_results}minimap2/AC_EH_500_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta"[m
[32m+[m[32m## AS rgenome[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_1000bp[0]} > ${path_results}minimap2/AS_AC_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_500bp[0]} > ${path_results}minimap2/AS_AC_500_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_1000bp[1]} > ${path_results}minimap2/AS_AS_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_500bp[1]} > ${path_results}minimap2/AS_AS_500_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_1000bp[2]} > ${path_results}minimap2/AS_EH_1000_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_500bp[2]} > ${path_results}minimap2/AS_EH_500_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="EH/fMerMel2.1_cnag1.scaffolds.fa"[m
[32m+[m[32m## EH rgenome[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[0]} > ${path_results}minimap2/EH_AC_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[0]} > ${path_results}minimap2/EH_AC_500_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[1]} > ${path_results}minimap2/EH_AS_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[1]} > ${path_results}minimap2/EH_AS_500_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[2]} > ${path_results}minimap2/EH_EH_1000_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[2]} > ${path_results}minimap2/EH_EH_500_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32m## ZF rgenome[m
[32m+[m[32mpath_rgenome=ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna[m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[0]} > ${path_results}minimap2/ZF_AC_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[0]} > ${path_results}minimap2/ZF_AC_500_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[1]} > ${path_results}minimap2/ZF_AS_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[1]} > ${path_results}minimap2/ZF_AS_500_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[2]} > ${path_results}minimap2/ZF_EH_1000_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[2]} > ${path_results}minimap2/ZF_EH_500_minimap.sam -t 20[m[41m [m
[1mdiff --git a/.ipynb_checkpoints/zz_bowtie2_06_1000_human_all-checkpoint.sl b/.ipynb_checkpoints/zz_bowtie2_06_1000_human_all-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..49d5f3a[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/zz_bowtie2_06_1000_human_all-checkpoint.sl[m
[36m@@ -0,0 +1,38 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=05:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem=20G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 4                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_1000bp=("JM_243285_CpG_1000bp" "ZF_757883_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32m## rgenome Human[m
[32m+[m[32mecho "human reference genome"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m   bowtie2 $bowtie2_args -x /workspace/cfngle/raw-data/zzz_human_rgenome/bowtie2-index/human_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}human_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
[1mdiff --git a/.ipynb_checkpoints/zz_bowtie2_index_human-checkpoint.sl b/.ipynb_checkpoints/zz_bowtie2_index_human-checkpoint.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..1fe8860[m
[1m--- /dev/null[m
[1m+++ b/.ipynb_checkpoints/zz_bowtie2_index_human-checkpoint.sl[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_index_human[m
[32m+[m[32m#SBATCH --time=010:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem=10G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 1                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m
[32m+[m[32m## indexing[m
[32m+[m[32mbowtie2-build ${path_raw}zzz_human_rgenome/GRCh38.fa ${path_raw}zzz_human_rgenome/bowtie2-index/human_bowtie2[m
[1mdiff --git a/00_download_data.ipynb b/00_download_data.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..ba40d6d[m
[1m--- /dev/null[m
[1m+++ b/00_download_data.ipynb[m
[36m@@ -0,0 +1,185 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "bf78f16c-13d6-455d-b945-780d492e0260",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SRA cache dir set: /workspace/cfngle/.ncbi\n",[m
[32m+[m[32m      "spots read      : 6,878,446\n",[m
[32m+[m[32m      "reads read      : 13,756,892\n",[m
[32m+[m[32m      "reads written   : 6,878,446\n",[m
[32m+[m[32m      "reads 0-length  : 6,878,446\n",[m
[32m+[m[32m      "SRR18462635 done\n",[m
[32m+[m[32m      "spots read      : 9,655,168\n",[m
[32m+[m[32m      "reads read      : 19,310,336\n",[m
[32m+[m[32m      "reads written   : 9,655,168\n",[m
[32m+[m[32m      "reads 0-length  : 9,655,168\n",[m
[32m+[m[32m      "SRR18462642 done\n",[m
[32m+[m[32m      "spots read      : 6,438,585\n",[m
[32m+[m[32m      "reads read      : 12,877,170\n",[m
[32m+[m[32m      "reads written   : 6,438,585\n",[m
[32m+[m[32m      "reads 0-length  : 6,438,585\n",[m
[32m+[m[32m      "SRR18462634 done\n",[m
[32m+[m[32m      "spots read      : 7,783,619\n",[m
[32m+[m[32m      "reads read      : 15,567,238\n",[m
[32m+[m[32m      "reads written   : 7,783,619\n",[m
[32m+[m[32m      "reads 0-length  : 7,783,619\n",[m
[32m+[m[32m      "SRR18462644 done\n",[m
[32m+[m[32m      "spots read      : 6,900,366\n",[m
[32m+[m[32m      "reads read      : 13,800,732\n",[m
[32m+[m[32m      "reads written   : 6,900,366\n",[m
[32m+[m[32m      "reads 0-length  : 6,900,366\n",[m
[32m+[m[32m      "SRR18462653 done\n",[m
[32m+[m[32m      "spots read      : 8,208,443\n",[m
[32m+[m[32m      "reads read      : 16,416,886\n",[m
[32m+[m[32m      "reads written   : 8,208,443\n",[m
[32m+[m[32m      "reads 0-length  : 8,208,443\n",[m
[32m+[m[32m      "SRR18462636 done\n",[m
[32m+[m[32m      "spots read      : 6,139,229\n",[m
[32m+[m[32m      "reads read      : 12,278,458\n",[m
[32m+[m[32m      "reads written   : 6,139,229\n",[m
[32m+[m[32m      "reads 0-length  : 6,139,229\n",[m
[32m+[m[32m      "SRR18462637 done\n",[m
[32m+[m[32m      "spots read      : 6,316,438\n",[m
[32m+[m[32m      "reads read      : 12,632,876\n",[m
[32m+[m[32m      "reads written   : 6,316,438\n",[m
[32m+[m[32m      "reads 0-length  : 6,316,438\n",[m
[32m+[m[32m      "SRR18462638 done\n",[m
[32m+[m[32m      "spots read      : 7,446,943\n",[m
[32m+[m[32m      "reads read      : 14,893,886\n",[m
[32m+[m[32m      "reads written   : 7,446,943\n",[m
[32m+[m[32m      "reads 0-length  : 7,446,943\n",[m
[32m+[m[32m      "SRR18462639 done\n",[m
[32m+[m[32m      "spots read      : 8,156,543\n",[m
[32m+[m[32m      "reads read      : 16,313,086\n",[m
[32m+[m[32m      "reads written   : 8,156,543\n",[m
[32m+[m[32m      "reads 0-length  : 8,156,543\n",[m
[32m+[m[32m      "SRR18462643 done\n",[m
[32m+[m[32m      "spots read      : 6,571,203\n",[m
[32m+[m[32m      "reads read      : 13,142,406\n",[m
[32m+[m[32m      "reads written   : 6,571,203\n",[m
[32m+[m[32m      "reads 0-length  : 6,571,203\n",[m
[32m+[m[32m      "SRR18462654 done\n",[m
[32m+[m[32m      "spots read      : 4,388,108\n",[m
[32m+[m[32m      "reads read      : 8,776,216\n",[m
[32m+[m[32m      "reads written   : 4,388,108\n",[m
[32m+[m[32m      "reads 0-length  : 4,388,108\n",[m
[32m+[m[32m      "SRR18462655 done\n",[m
[32m+[m[32m      "spots read      : 9,355,753\n",[m
[32m+[m[32m      "reads read      : 18,711,506\n",[m
[32m+[m[32m      "reads written   : 9,355,753\n",[m
[32m+[m[32m      "reads 0-length  : 9,355,753\n",[m
[32m+[m[32m      "SRR18462645 done\n",[m
[32m+[m[32m      "spots read      : 6,876,486\n",[m
[32m+[m[32m      "reads read      : 13,752,972\n",[m
[32m+[m[32m      "reads written   : 6,876,486\n",[m
[32m+[m[32m      "reads 0-length  : 6,876,486\n",[m
[32m+[m[32m      "SRR18462646 done\n",[m
[32m+[m[32m      "spots read      : 5,567,999\n",[m
[32m+[m[32m      "reads read      : 11,135,998\n",[m
[32m+[m[32m      "reads written   : 5,567,999\n",[m
[32m+[m[32m      "reads 0-length  : 5,567,999\n",[m
[32m+[m[32m      "SRR18462640 done\n",[m
[32m+[m[32m      "spots read      : 7,234,168\n",[m
[32m+[m[32m      "reads read      : 14,468,336\n",[m
[32m+[m[32m      "reads written   : 7,234,168\n",[m
[32m+[m[32m      "reads 0-length  : 7,234,168\n",[m
[32m+[m[32m      "SRR18462641 done\n",[m
[32m+[m[32m      "spots read      : 6,309,665\n",[m
[32m+[m[32m      "reads read      : 12,619,330\n",[m
[32m+[m[32m      "reads written   : 6,309,665\n",[m
[32m+[m[32m      "reads 0-length  : 6,309,665\n",[m
[32m+[m[32m      "SRR18462648 done\n",[m
[32m+[m[32m      "spots read      : 7,063,363\n",[m
[32m+[m[32m      "reads read      : 14,126,726\n",[m
[32m+[m[32m      "reads written   : 7,063,363\n",[m
[32m+[m[32m      "reads 0-length  : 7,063,363\n",[m
[32m+[m[32m      "SRR18462649 done\n",[m
[32m+[m[32m      "spots read      : 8,048,435\n",[m
[32m+[m[32m      "reads read      : 16,096,870\n",[m
[32m+[m[32m      "reads written   : 8,048,435\n",[m
[32m+[m[32m      "reads 0-length  : 8,048,435\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### Download data for all the species ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "### Japanese medaka (JM)\n",[m
[32m+[m[32m    "#  Bioproject number: PRJNA716946\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# file accession numbers: \n",[m
[32m+[m[32m    "filenames=(\"SAMN21040263\" \"SAMN21040262\" \"SAMN21040261\" \"SAMN21040260\" \"SAMN21040259\" \"SAMN21040258\" \"SAMN21040257\" \"SAMN21040256\"\n",[m
[32m+[m[32m    "\"SAMN21040255\" \"SAMN21040254\" \"SAMN21040253\" \"SAMN21040252\" \"SAMN21040251\" \"SAMN21040250\" \"SAMN21040249\" \"SAMN21040248\"\n",[m
[32m+[m[32m    "\"SAMN21040247\" \"SAMN21040246\" \"SAMN21040245\" \"SAMN21040244\" \"SAMN21040243\" \"SAMN21040242\" \"SAMN21040241\" \"SAMN21040240\"\n",[m
[32m+[m[32m    "\"SAMN18472656\" \"SAMN18472655\" \"SAMN18472654\" \"SAMN18472653\" \"SAMN18472652\" \"SAMN18472651\" \"SAMN18472650\" \"SAMN18472649\"\n",[m
[32m+[m[32m    "\"SAMN18472648\" \"SAMN18472647\" \"SAMN18472646\" \"SAMN18472645\" \"SAMN18472644\" \"SAMN18472643\" \"SAMN18472642\" \"SAMN18472641\"\n",[m
[32m+[m[32m    "\"SAMN18472640\" \"SAMN18472639\" \"SAMN18472638\" \"SAMN18472637\" \"SAMN18472636\" \"SAMN18472635\" \"SAMN18472634\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# without the ones which were succesfully downloaded \n",[m
[32m+[m[32m    "filenames_1=(\n",[m
[32m+[m[32m    "\"SAMN18472656\" \"SAMN18472655\" \"SAMN18472654\" \"SAMN18472653\" \"SAMN18472652\" \"SAMN18472651\" \"SAMN18472650\" \"SAMN18472649\"\n",[m
[32m+[m[32m    "\"SAMN18472648\" \"SAMN18472647\" \"SAMN18472646\" \"SAMN18472645\" \"SAMN18472644\" \"SAMN18472643\" \"SAMN18472642\" \"SAMN18472641\"\n",[m
[32m+[m[32m    "\"SAMN18472640\" \"SAMN18472639\" \"SAMN18472638\" \"SAMN18472637\" \"SAMN18472636\" \"SAMN18472635\" \"SAMN18472634\")\n",[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "filenames_SRR=(\"SRR18462635\" \"SRR18462633\" \"SRR18462634\" \"SRR18462636\" \"SRR18462637\" \"SRR18462638\" \"SRR18462639\" \"SRR18462640\"\n",[m
[32m+[m[32m    "\"SRR18462641\" \"SRR18462642\" \"SRR18462643\" \"SRR18462644\" \"SRR18462645\" \"SRR18462646\" \"SRR18462647\" \"SRR18462648\"\n",[m
[32m+[m[32m    "\"SRR18462649\" \"SRR18462650\" \"SRR18462651\" \"SRR18462652\" \"SRR18462653\" \"SRR18462654\" \"SRR18462655\" \"SRR15669758\"\n",[m
[32m+[m[32m    "\"SRR15669759\" \"SRR15669760\" \"SRR15669761\" \"SRR15669762\" \"SRR15669763\" \"SRR15669764\" \"SRR15669765\" \"SRR15669766\"\n",[m
[32m+[m[32m    "\"SRR15669767\" \"SRR15669768\" \"SRR15669769\" \"SRR15669770\" \"SRR15669771\" \"SRR15669772\" \"SRR15669773\" \"SRR15669774\"\n",[m
[32m+[m[32m    "\"SRR15669775\" \"SRR15669776\" \"SRR15669777\" \"SRR15669778\" \"SRR15669779\" \"SRR15669780\" \"SRR15669781\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# without the ones which were succesfully downloaded \n",[m
[32m+[m[32m    "filenames_SRR_1=(\n",[m
[32m+[m[32m    "\"SRR18462635\" \"SRR18462642\" \"SRR18462634\" \"SRR18462644\" \"SRR18462653\" \"SRR18462636\" \"SRR18462637\" \"SRR18462638\"\n",[m
[32m+[m[32m    "\"SRR18462639\" \"SRR18462643\" \"SRR18462654\" \"SRR18462655\" \"SRR18462645\" \"SRR18462646\" \"SRR18462640\" \"SRR18462641\"\n",[m
[32m+[m[32m    "\"SRR18462648\" \"SRR18462649\" \"SRR18462647\" \"SRR18462650\" \"SRR18462651\" \"SRR18462652\" \"SRR18462633\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load sratoolkit\n",[m
[32m+[m[32m    "#vdb-config --interactive\n",[m
[32m+[m[32m    "for (( i=0; i<${#filenames_SRR_1[@]}; i++ )); \n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "    fasterq-dump --split-files \"${filenames_SRR_1[i]}\"\n",[m
[32m+[m[32m    "    echo \"${filenames_SRR_1[i]} done\"\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "b73e7710-924b-4d41-8bea-673a1744577e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/00a_JM_BSseeker2.sl b/00a_JM_BSseeker2.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..be0ebab[m
[1m--- /dev/null[m
[1m+++ b/00a_JM_BSseeker2.sl[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m
[32m+[m[32m#SBATCH --job-name=indexBS[m
[32m+[m[32m#SBATCH --time=24:00:00[m
[32m+[m[32m#SBATCH --mem=20G[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/raw-data/JM/rgenome/output.log[m
[32m+[m
[32m+[m[32mPROJECT="/workspace/cfngle/raw-data/ZF"[m
[32m+[m[32mGENOME="/workspace/cfngle/raw-data/ZF/rgenome"[m
[32m+[m[32mOUT=$GENOME[m
[32m+[m
[32m+[m[32mmodule load conda[m
[32m+[m[32mconda deactivate[m
[32m+[m[32mconda activate cfngle_env-01[m
[32m+[m
[32m+[m[32mbs_seeker2-build.py \[m
[32m+[m[32m    -f ${GENOME}/GCF_000002035.6_GRCz11_genomic.fasta \[m
[32m+[m[32m    --aligner bowtie2 \[m
[32m+[m[32m    -r \[m
[32m+[m[32m    -d /workspace/cfngle/raw-data/JM/rgenome/BSseeker2-index[m
\ No newline at end of file[m
[1mdiff --git a/00a_JM_fastqc.sl b/00a_JM_fastqc.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..1b1df74[m
[1m--- /dev/null[m
[1m+++ b/00a_JM_fastqc.sl[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m
[32m+[m[32m#SBATCH --time=01:00:00[m
[32m+[m[32m#SBATCH --mem=10G[m
[32m+[m[32m#SBATCH --cpus-per-task=2[m
[32m+[m[32m#SBATCH --array=1-47%10[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/raw-data/JM/fastqc_%A_%a.out[m
[32m+[m
[32m+[m[32m# Load the FastQC module[m
[32m+[m[32mmodule load FastQC[m
[32m+[m
[32m+[m[32m# Define your project directory[m
[32m+[m[32mPROJECT="/workspace/cfngle/raw-data/JM"[m
[32m+[m
[32m+[m[32m# Define input and output directories[m
[32m+[m[32mIN="${PROJECT}/raw-reads"[m
[32m+[m[32mOUT="${PROJECT}/001.fastqc_raw"[m
[32m+[m
[32m+[m[32m# Find all .fastq files and put them into an array[m
[32m+[m[32mFILES=($(find ${IN} -type f -name "*.fastq"))[m
[32m+[m
[32m+[m[32m# Calculate index for this task[m
[32m+[m[32mINDEX=$((SLURM_ARRAY_TASK_ID-1))[m
[32m+[m
[32m+[m[32m# Select file based on task array ID[m
[32m+[m[32mFILE=${FILES[$INDEX]}[m
[32m+[m
[32m+[m[32m# Define command to run FastQC on the selected file[m
[32m+[m[32mCOMMAND="fastqc --nogroup -q -t ${SLURM_CPUS_PER_TASK} -o ${OUT} ${FILE}"[m
[32m+[m
[32m+[m[32m# Execute the command[m
[32m+[m[32mecho "Executing: $COMMAND"[m
[32m+[m[32m$COMMAND[m
\ No newline at end of file[m
[1mdiff --git a/00a_RRBS.ipynb b/00a_RRBS.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..3eb5b22[m
[1m--- /dev/null[m
[1m+++ b/00a_RRBS.ipynb[m
[36m@@ -0,0 +1,2575 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "4d1f29d1-809b-4e6b-8aac-79fc09282f80",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# 00a RRBS data analysis\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Author: Gabriel Ecker Eckhofen (adapted from Dafni Anastasiadi)\n",[m
[32m+[m[32m    "Date: Febuary 2024"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "id": "f57139d3-47f2-44f6-8491-12363f3603d3",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load conda"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "58a14287-df70-48e9-84ce-23498633f59b",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Setting up conda envirnment and activating it\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# must be done in terminal \n",[m
[32m+[m[32m    "# conda install -c bioconda entrez-direct"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "id": "af2dd13e-3345-467c-8874-ea7f9dcb08dd",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SAMN21040240\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040241\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040242\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040243\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040244\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040245\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040246\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040247\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040248\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040249\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040250\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040251\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040252\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040253\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040254\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040255\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040256\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040257\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040258\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040259\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040260\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040261\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040262\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040263\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462633\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462634\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462635\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462636\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462637\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462638\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462639\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462640\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462641\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462642\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462643\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462644\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462645\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462646\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462647\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462648\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462649\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462650\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462651\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462652\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462653\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462654\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SRR18462655\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/raw-reads/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Fetch metadata for a specific BioSample ID\n",[m
[32m+[m[32m    "filenames=(\"SAMN21040240.fastq\" \"SAMN21040241.fastq\" \"SAMN21040242.fastq\" \"SAMN21040243.fastq\" \"SAMN21040244.fastq\" \"SAMN21040245.fastq\" \"SAMN21040246.fastq\" \n",[m
[32m+[m[32m    "\"SAMN21040247.fastq\" \"SAMN21040248.fastq\" \"SAMN21040249.fastq\" \"SAMN21040250.fastq\" \"SAMN21040251.fastq\" \"SAMN21040252.fastq\" \"SAMN21040253.fastq\" \"SAMN21040254.fastq\" \n",[m
[32m+[m[32m    "\"SAMN21040255.fastq\" \"SAMN21040256.fastq\" \"SAMN21040257.fastq\" \"SAMN21040258.fastq\" \"SAMN21040259.fastq\" \"SAMN21040260.fastq\" \"SAMN21040261.fastq\" \"SAMN21040262.fastq\" \"SAMN21040263.fastq\" \n",[m
[32m+[m[32m    "\"SRR18462633.fastq\" \"SRR18462634.fastq\" \"SRR18462635.fastq\" \"SRR18462636.fastq\" \"SRR18462637.fastq\" \"SRR18462638.fastq\" \"SRR18462639.fastq\" \"SRR18462640.fastq\" \n",[m
[32m+[m[32m    "\"SRR18462641.fastq\" \"SRR18462642.fastq\" \"SRR18462643.fastq\" \"SRR18462644.fastq\" \"SRR18462645.fastq\" \"SRR18462646.fastq\" \"SRR18462647.fastq\" \"SRR18462648.fastq\" \n",[m
[32m+[m[32m    "\"SRR18462649.fastq\" \"SRR18462650.fastq\" \"SRR18462651.fastq\" \"SRR18462652.fastq\" \"SRR18462653.fastq\" \"SRR18462654.fastq\" \"SRR18462655.fastq\" )\n",[m
[32m+[m[32m    "for (( i=0; i<${#filenames[@]}; i++ )); do\n",[m
[32m+[m[32m    "    # Index\n",[m
[32m+[m[32m    "    echo \"${filenames[i]%.fastq}\"\n",[m
[32m+[m[32m    "    esearch -db biosample -query ${filenames[i]%.fastq} | efetch -format native > ${filenames[i]}.txt\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "c1a0dbeb-7b6f-4cad-890e-01bd6ee3f2a1",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SAMN21040240.fastq\n",[m
[32m+[m[32m      "JM_001.fastq\n",[m
[32m+[m[32m      "SAMN21040241.fastq\n",[m
[32m+[m[32m      "JM_002.fastq\n",[m
[32m+[m[32m      "SAMN21040242.fastq\n",[m
[32m+[m[32m      "JM_003.fastq\n",[m
[32m+[m[32m      "SAMN21040243.fastq\n",[m
[32m+[m[32m      "JM_004.fastq\n",[m
[32m+[m[32m      "SAMN21040244.fastq\n",[m
[32m+[m[32m      "JM_005.fastq\n",[m
[32m+[m[32m      "SAMN21040245.fastq\n",[m
[32m+[m[32m      "JM_006.fastq\n",[m
[32m+[m[32m      "SAMN21040246.fastq\n",[m
[32m+[m[32m      "JM_007.fastq\n",[m
[32m+[m[32m      "SAMN21040247.fastq\n",[m
[32m+[m[32m      "JM_008.fastq\n",[m
[32m+[m[32m      "SAMN21040248.fastq\n",[m
[32m+[m[32m      "JM_009.fastq\n",[m
[32m+[m[32m      "SAMN21040249.fastq\n",[m
[32m+[m[32m      "JM_010.fastq\n",[m
[32m+[m[32m      "SAMN21040250.fastq\n",[m
[32m+[m[32m      "JM_011.fastq\n",[m
[32m+[m[32m      "SAMN21040251.fastq\n",[m
[32m+[m[32m      "JM_012.fastq\n",[m
[32m+[m[32m      "SAMN21040252.fastq\n",[m
[32m+[m[32m      "JM_013.fastq\n",[m
[32m+[m[32m      "SAMN21040253.fastq\n",[m
[32m+[m[32m      "JM_014.fastq\n",[m
[32m+[m[32m      "SAMN21040254.fastq\n",[m
[32m+[m[32m      "JM_015.fastq\n",[m
[32m+[m[32m      "SAMN21040255.fastq\n",[m
[32m+[m[32m      "JM_016.fastq\n",[m
[32m+[m[32m      "SAMN21040256.fastq\n",[m
[32m+[m[32m      "JM_017.fastq\n",[m
[32m+[m[32m      "SAMN21040257.fastq\n",[m
[32m+[m[32m      "JM_018.fastq\n",[m
[32m+[m[32m      "SAMN21040258.fastq\n",[m
[32m+[m[32m      "JM_019.fastq\n",[m
[32m+[m[32m      "SAMN21040259.fastq\n",[m
[32m+[m[32m      "JM_020.fastq\n",[m
[32m+[m[32m      "SAMN21040260.fastq\n",[m
[32m+[m[32m      "JM_021.fastq\n",[m
[32m+[m[32m      "SAMN21040261.fastq\n",[m
[32m+[m[32m      "JM_022.fastq\n",[m
[32m+[m[32m      "SAMN21040262.fastq\n",[m
[32m+[m[32m      "JM_023.fastq\n",[m
[32m+[m[32m      "SAMN21040263.fastq\n",[m
[32m+[m[32m      "JM_024.fastq\n",[m
[32m+[m[32m      "SRR18462633.fastq\n",[m
[32m+[m[32m      "JM_025.fastq\n",[m
[32m+[m[32m      "SRR18462634.fastq\n",[m
[32m+[m[32m      "JM_026.fastq\n",[m
[32m+[m[32m      "SRR18462635.fastq\n",[m
[32m+[m[32m      "JM_027.fastq\n",[m
[32m+[m[32m      "SRR18462636.fastq\n",[m
[32m+[m[32m      "JM_028.fastq\n",[m
[32m+[m[32m      "SRR18462637.fastq\n",[m
[32m+[m[32m      "JM_029.fastq\n",[m
[32m+[m[32m      "SRR18462638.fastq\n",[m
[32m+[m[32m      "JM_030.fastq\n",[m
[32m+[m[32m      "SRR18462639.fastq\n",[m
[32m+[m[32m      "JM_031.fastq\n",[m
[32m+[m[32m      "SRR18462640.fastq\n",[m
[32m+[m[32m      "JM_032.fastq\n",[m
[32m+[m[32m      "SRR18462641.fastq\n",[m
[32m+[m[32m      "JM_033.fastq\n",[m
[32m+[m[32m      "SRR18462642.fastq\n",[m
[32m+[m[32m      "JM_034.fastq\n",[m
[32m+[m[32m      "SRR18462643.fastq\n",[m
[32m+[m[32m      "JM_035.fastq\n",[m
[32m+[m[32m      "SRR18462644.fastq\n",[m
[32m+[m[32m      "JM_036.fastq\n",[m
[32m+[m[32m      "SRR18462645.fastq\n",[m
[32m+[m[32m      "JM_037.fastq\n",[m
[32m+[m[32m      "SRR18462646.fastq\n",[m
[32m+[m[32m      "JM_038.fastq\n",[m
[32m+[m[32m      "SRR18462647.fastq\n",[m
[32m+[m[32m      "JM_039.fastq\n",[m
[32m+[m[32m      "SRR18462648.fastq\n",[m
[32m+[m[32m      "JM_040.fastq\n",[m
[32m+[m[32m      "SRR18462649.fastq\n",[m
[32m+[m[32m      "JM_041.fastq\n",[m
[32m+[m[32m      "SRR18462650.fastq\n",[m
[32m+[m[32m      "JM_042.fastq\n",[m
[32m+[m[32m      "SRR18462651.fastq\n",[m
[32m+[m[32m      "JM_043.fastq\n",[m
[32m+[m[32m      "SRR18462652.fastq\n",[m
[32m+[m[32m      "JM_044.fastq\n",[m
[32m+[m[32m      "SRR18462653.fastq\n",[m
[32m+[m[32m      "JM_045.fastq\n",[m
[32m+[m[32m      "SRR18462654.fastq\n",[m
[32m+[m[32m      "JM_046.fastq\n",[m
[32m+[m[32m      "SRR18462655.fastq\n",[m
[32m+[m[32m      "JM_047.fastq\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# renaming \n",[m
[32m+[m[32m    "counter=1\n",[m
[32m+[m[32m    "for file in *.fastq; do\n",[m
[32m+[m[32m    "    newname=$(printf \"JM_%03d.fastq\" \"$counter\")\n",[m
[32m+[m[32m    "    mv \"$file\" \"$newname\"\n",[m
[32m+[m[32m    "    echo \"$file\"\n",[m
[32m+[m[32m    "    echo \"$newname\"\n",[m
[32m+[m[32m    "    ((counter++))\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "id": "e3b4904d-4e6c-4f68-84e5-66a992686127",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) filelist.txt\n",[m
[32m+[m[32m      "JM_001_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040240.fastq.txt\n",[m
[32m+[m[32m      "JM_002_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040241.fastq.txt\n",[m
[32m+[m[32m      "JM_003_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040242.fastq.txt\n",[m
[32m+[m[32m      "JM_004_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040243.fastq.txt\n",[m
[32m+[m[32m      "JM_005_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040244.fastq.txt\n",[m
[32m+[m[32m      "JM_006_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040245.fastq.txt\n",[m
[32m+[m[32m      "JM_007_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040246.fastq.txt\n",[m
[32m+[m[32m      "JM_008_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040247.fastq.txt\n",[m
[32m+[m[32m      "JM_009_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040248.fastq.txt\n",[m
[32m+[m[32m      "JM_010_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040249.fastq.txt\n",[m
[32m+[m[32m      "JM_011_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040250.fastq.txt\n",[m
[32m+[m[32m      "JM_012_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040251.fastq.txt\n",[m
[32m+[m[32m      "JM_013_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040252.fastq.txt\n",[m
[32m+[m[32m      "JM_014_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040253.fastq.txt\n",[m
[32m+[m[32m      "JM_015_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040254.fastq.txt\n",[m
[32m+[m[32m      "JM_016_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040255.fastq.txt\n",[m
[32m+[m[32m      "JM_017_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040256.fastq.txt\n",[m
[32m+[m[32m      "JM_018_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040257.fastq.txt\n",[m
[32m+[m[32m      "JM_019_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040258.fastq.txt\n",[m
[32m+[m[32m      "JM_020_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040259.fastq.txt\n",[m
[32m+[m[32m      "JM_021_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040260.fastq.txt\n",[m
[32m+[m[32m      "JM_022_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040261.fastq.txt\n",[m
[32m+[m[32m      "JM_023_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040262.fastq.txt\n",[m
[32m+[m[32m      "JM_024_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040263.fastq.txt\n",[m
[32m+[m[32m      "JM_025_metadata.txt\n",[m
[32m+[m[32m      "SRR18462633.fastq.txt\n",[m
[32m+[m[32m      "JM_026_metadata.txt\n",[m
[32m+[m[32m      "SRR18462634.fastq.txt\n",[m
[32m+[m[32m      "JM_027_metadata.txt\n",[m
[32m+[m[32m      "SRR18462635.fastq.txt\n",[m
[32m+[m[32m      "JM_028_metadata.txt\n",[m
[32m+[m[32m      "SRR18462636.fastq.txt\n",[m
[32m+[m[32m      "JM_029_metadata.txt\n",[m
[32m+[m[32m      "SRR18462637.fastq.txt\n",[m
[32m+[m[32m      "JM_030_metadata.txt\n",[m
[32m+[m[32m      "SRR18462638.fastq.txt\n",[m
[32m+[m[32m      "JM_031_metadata.txt\n",[m
[32m+[m[32m      "SRR18462639.fastq.txt\n",[m
[32m+[m[32m      "JM_032_metadata.txt\n",[m
[32m+[m[32m      "SRR18462640.fastq.txt\n",[m
[32m+[m[32m      "JM_033_metadata.txt\n",[m
[32m+[m[32m      "SRR18462641.fastq.txt\n",[m
[32m+[m[32m      "JM_034_metadata.txt\n",[m
[32m+[m[32m      "SRR18462642.fastq.txt\n",[m
[32m+[m[32m      "JM_035_metadata.txt\n",[m
[32m+[m[32m      "SRR18462643.fastq.txt\n",[m
[32m+[m[32m      "JM_036_metadata.txt\n",[m
[32m+[m[32m      "SRR18462644.fastq.txt\n",[m
[32m+[m[32m      "JM_037_metadata.txt\n",[m
[32m+[m[32m      "SRR18462645.fastq.txt\n",[m
[32m+[m[32m      "JM_038_metadata.txt\n",[m
[32m+[m[32m      "SRR18462646.fastq.txt\n",[m
[32m+[m[32m      "JM_039_metadata.txt\n",[m
[32m+[m[32m      "SRR18462647.fastq.txt\n",[m
[32m+[m[32m      "JM_040_metadata.txt\n",[m
[32m+[m[32m      "SRR18462648.fastq.txt\n",[m
[32m+[m[32m      "JM_041_metadata.txt\n",[m
[32m+[m[32m      "SRR18462649.fastq.txt\n",[m
[32m+[m[32m      "JM_042_metadata.txt\n",[m
[32m+[m[32m      "SRR18462650.fastq.txt\n",[m
[32m+[m[32m      "JM_043_metadata.txt\n",[m
[32m+[m[32m      "SRR18462651.fastq.txt\n",[m
[32m+[m[32m      "JM_044_metadata.txt\n",[m
[32m+[m[32m      "SRR18462652.fastq.txt\n",[m
[32m+[m[32m      "JM_045_metadata.txt\n",[m
[32m+[m[32m      "SRR18462653.fastq.txt\n",[m
[32m+[m[32m      "JM_046_metadata.txt\n",[m
[32m+[m[32m      "SRR18462654.fastq.txt\n",[m
[32m+[m[32m      "JM_047_metadata.txt\n",[m
[32m+[m[32m      "SRR18462655.fastq.txt\n",[m
[32m+[m[32m      "JM_048_metadata.txt\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# renaming \n",[m
[32m+[m[32m    "counter=1\n",[m
[32m+[m[32m    "for file in *.txt; do\n",[m
[32m+[m[32m    "    newname=$(printf \"JM_%03d_metadata.txt\" \"$counter\")\n",[m
[32m+[m[32m    "    mv \"$file\" \"$newname\"\n",[m
[32m+[m[32m    "    echo \"$file\"\n",[m
[32m+[m[32m    "    echo \"$newname\"\n",[m
[32m+[m[32m    "    ((counter++))\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "756caf22-eda3-4bd3-baf1-e4a0d3038865",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 1. Prepare data and directories\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Data was downloaded with SRAtoolkit "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "561d77eb-30d4-41e5-8254-62621e3c5a71",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/raw-reads"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "d7f1939d-faa8-4885-8605-0b7b624f3023",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find -type f -exec md5sum \"{}\" + > checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "7a8233e4-6b90-499c-a60a-9bcc5c52bfd7",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "./EC_3/EC_3_FKDN220184500-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_3/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_3/EC_3_FKDN220184500-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5K3KDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5K3KDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5GGLDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5GGLDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_1/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_1/WC_1_FKDN220184493-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_1/WC_1_FKDN220184493-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_6/WC_6_FKDN220184497-1A_H5GGJDSX3_L3_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_6/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_6/WC_6_FKDN220184497-1A_H5GGJDSX3_L3_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_6/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_6/EC_6_FKDN220184503-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_6/EC_6_FKDN220184503-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5GGLDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5GGLDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5K3KDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5K3KDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_5/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_5/EC_5_FKDN220184502-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_5/EC_5_FKDN220184502-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_3/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_3/WC_3_FKDN220184495-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_3/WC_3_FKDN220184495-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./checklist.chk: FAILED\n",[m
[32m+[m[32m      "./WC_5/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_5/WC_5_FKDN220184496-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_5/WC_5_FKDN220184496-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_2/WC_2_FKDN220184494-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_2/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_2/WC_2_FKDN220184494-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_1/EC_1_FKDN220184498-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_1/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_1/EC_1_FKDN220184498-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "md5sum: WARNING: 1 computed checksum did NOT match\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "md5sum -c checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "e30aaf24-3fbe-4346-b0e3-4c197d377e52",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Define Project Variables and create analysis directories:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "6c13cc36-5ae4-447e-9abe-32c08a774f48",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#Create analysis directories and define project variables\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the user as a variable\n",[m
[32m+[m[32m    "USER=\"cfngle\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the project directory and temp subdirectory as a variable\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/$USER/raw-data/JM"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "id": "810a60cc-673f-40fc-abe0-aab516ebcce4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "mkdir: missing operand\n",[m
[32m+[m[32m      "Try 'mkdir --help' for more information.\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Create analysis subdirectories\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $PROJECT\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/001.fastqc_raw\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/002.trimmomatic\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/003.fastq_trimmomatic\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/004.alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.b.stats_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.qc_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/006.deduplication\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/007.meth_extraction\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/008.methylkit\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/099.test"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "id": "111c44eb-dc86-48ea-bc08-cc4e9c9661e7",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfndxa/MarsdenObj1/Sequencing_WGBS"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "c5e17deb-bbbb-4bd7-910d-9d431cd550ee",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 1.1 FastQC RAW Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "id": "6563ed7d-f7b8-467a-9f26-f7b6617aa010",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "/workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/X201SC20071998-Z01-F001/01.RawData\n",[m
[32m+[m[32m      "/workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/001.fastqc_raw\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 01:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/001.fastqc_raw/fastqc_raw\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 26\n",[m
[32m+[m[32m      "Submitted batch job 1059579\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM/001.fastqc_raw/\"# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/X201SC20071998-Z01-F001/01.RawData\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/001.fastqc_raw\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`find -type f -name \"*.fq.gz\"`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc_raw --time 01:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "id": "0908f545-c305-4531-b535-a3a61771e65e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mmultiqc/1.11\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "id": "437edb0f-7d48-4a0e-9d2f-fcb49d2a2904",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1678927475.1725929-866276;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.14 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Raw\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/001.fastqc_raw\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m105/105\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 26 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 001.fastqc_raw/Fastqc-Raw_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 001.fastqc_raw/Fastqc-Raw_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 001.fastqc_raw -o 001.fastqc_raw -i Fastqc-Raw"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "50e04741-aff4-4af1-9279-0d6d60f29ae8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 2. Trimming"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 34,[m
[32m+[m[32m   "id": "5a155bfd-5e13-4f05-a07e-b71ffc78bfc4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "EC_1 EC_2 EC_3 EC_4 EC_5 EC_6 WC_1 WC_2 WC_3 WC_5 WC_6\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 01:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/002.trimmomatic/trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 11\n",[m
[32m+[m[32m      "Submitted batch job 1059719\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfndxa/Paua_clock/01_pilot_run\"# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/000.raw/merged\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "UNPAIRED=\"${OUT}/unpaired\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $IN\n",[m
[32m+[m[32m    "mkdir -p $OUT\n",[m
[32m+[m[32m    "mkdir -p $UNPAIRED\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Set the path to the adapter file:\n",[m
[32m+[m[32m    "CLIP=\"${OUT}/adapters.fasta\"\n",[m
[32m+[m[32m    "# Get the files to trim:\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "FILES=`basename -a ${IN}/*.fq.gz | sed 's/_[1,2].fq.gz//g'|sort -u `\n",[m
[32m+[m[32m    "#FILES=`ls ${IN}/*.fastq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5\"_\"$6}' | sort -u`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "echo $FILES\n",[m
[32m+[m[32m    "module load Trimmomatic\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for FILE in $FILES\n",[m
[32m+[m[32m    "     do\n",[m
[32m+[m[32m    "        In_File1=${IN}/${FILE}_1.fq.gz\n",[m
[32m+[m[32m    "        In_File2=${IN}/${FILE}_2.fq.gz\n",[m
[32m+[m[32m    "        echo $In_File1\n",[m
[32m+[m[32m    "        echo $In_File2\n",[m
[32m+[m[32m    "        Out_PAIRED_1=${OUT}/${FILE}_trimmomatic_R1.fastq\n",[m
[32m+[m[32m    "        Out_UNPAIRED_1=${UNPAIRED}/${FILE}_trimmomatic_unpaired_1.fastq\n",[m
[32m+[m[32m    "        Out_PAIRED_2=${OUT}/${FILE}_trimmomatic_R2.fastq\n",[m
[32m+[m[32m    "        Out_UNPAIRED_2=${UNPAIRED}/${FILE}_trimmomatic_unpaired_2.fastq\n",[m
[32m+[m[32m    "  #      echo $Out_PAIRED_1\n",[m
[32m+[m[32m    "  #      echo $Out_UNPAIRED_1\n",[m
[32m+[m[32m    "  #      echo $Out_PAIRED_2\n",[m
[32m+[m[32m    "  #      echo $Out_UNPAIRED_2\n",[m
[32m+[m[32m    "        COMMAND=\"java -jar -Xms8G -Xmx8G \\\n",[m
[32m+[m[32m    "                 ${TRIMMOMATIC} PE -threads 3 \\\n",[m
[32m+[m[32m    "                 ${In_File1} ${In_File2} \\\n",[m
[32m+[m[32m    "                 ${Out_PAIRED_1} ${Out_UNPAIRED_1} ${Out_PAIRED_2} ${Out_UNPAIRED_2} \\\n",[m
[32m+[m[32m    "                 ILLUMINACLIP:${CLIP}:2:30:10 SLIDINGWINDOW:5:20 MINLEN:50 HEADCROP:10 LEADING:5 TRAILING:5\" # headcrop suggested by Novogene due to library construction protocol\n",[m
[32m+[m[32m    "      # echo $COMMAND\n",[m
[32m+[m[32m    "done #| abatch -j ${OUT}/trimmomatic-logs --time 01:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1f93e76c-40f1-4c3b-9466-c6eaa788cd00",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1 FastQC TRIMMED Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "51ce841f-d25c-452a-be07-537f33193bbc",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 01:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/003.fastq_trimmomatic/fastqc-trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 22\n",[m
[32m+[m[32m      "Submitted batch job 1061325\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    " #!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfndxa/Paua_clock/01_pilot_run\"# Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/003.fastq_trimmomatic\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-trimmomatic-logs --time 01:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "165399e1-0c53-4375-9f83-ef419f9a256f",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mmultiqc/1.11\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "id": "aeae0461-94aa-48ef-bc35-44e85d8242ac",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1679006215.2262704-625372;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.14 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Trimmed\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /powerplant/workspace/cfndxa/MarsdenObj1/Sequencing_WGBS/003.fastq_trimmomatic\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m87/87\u001b[0m  \u001b[0m0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 21 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 003.fastq_trimmomatic -o 003.fastq_trimmomatic -i Fastqc-Trimmed"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "105a8a9b-d575-4ea9-8651-ab1d2eedc6eb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5. Alignment\n",[m
[32m+[m[32m    "Bismark user guide https://felixkrueger.github.io/Bismark/\n",[m
[32m+[m[32m    "### 5.1 Preparation of the genome\n",[m
[32m+[m[32m    "Hake assembly from CNAG. Unpublished and confidential."[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "id": "b0d6738f-fcaf-4e38-99f3-71603447c489",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd Hake_genome/Genoma_merluza"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "e7e5d3e0-1ae5-4b58-b0de-0a9686bbb058",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "grep -e \">\" fMerMel2.1_cnag1.scaffolds.fa | awk 'sub(/^>/, \"\")' | sort -k1 > chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "dfb354d0-c0c6-42c8-8fe2-60d1256d78ac",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr1\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr10\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr11\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr12\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr13\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr14\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr15\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr16\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr16_unloc_1\n",[m
[32m+[m[32m      "fMerMel2.1_cnag1_Chr16_unloc_2\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "head chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "id": "31bdff52-c31e-4e7e-8937-44177045ed93",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mbismark/0.20.0\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load bismark/0.23.0"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "fb0d2214-3c91-4125-a40d-51d0456ee89d",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "perl: warning: Setting locale failed.\n",[m
[32m+[m[32m      "perl: warning: Please check that your locale settings:\n",[m
[32m+[m[32m      "\tLANGUAGE = (unset),\n",[m
[32m+[m[32m      "\tLC_ALL = (unset),\n",[m
[32m+[m[32m      "\tLANG = \"en_NZ.UTF-8\"\n",[m
[32m+[m[32m      "    are supported and installed on your system.\n",[m
[32m+[m[32m      "perl: warning: Falling back to the standard locale (\"C\").\n",[m
[32m+[m[32m      "Writing bisulfite genomes out into a single MFA (multi FastA) file\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bisulfite Genome Indexer version v0.19.1 (last modified 26 April 2018)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step I - Prepare genome folders - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Calculating genomic frequencies (this may take several minutes depending on genome size) ...\n",[m
[32m+[m[32m      "====================================================================================================================================================================\n",[m
[32m+[m[32m      "Now reading in and storing sequence information of the genome specified in: /workspace/cfndxa/Hake_clock/Hake_genome/Genoma_merluza/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr1 (55177781 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr2 (50776625 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr3 (45020414 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr4 (35452080 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr7 (33414852 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr5 (33356331 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr6 (33253109 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr8 (32860176 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr9 (32531924 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr10 (32021586 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr11 (31397609 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr12 (30968743 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr13 (30809883 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr14 (30802331 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr15 (30368893 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr17 (29776308 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr18 (29194296 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr16 (28829120 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr19 (28611363 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr20 (28374871 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr21 (27346746 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr16_unloc_1 (901166 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr5_unloc_1 (317500 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr6_unloc_1 (254833 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_38 (198171 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr16_unloc_2 (189000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr5_unloc_2 (184715 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr6_unloc_2 (183079 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr5_unloc_3 (168000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr1_unloc_1 (163803 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr4_unloc_1 (150714 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_46 (146535 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_47 (142546 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr5_unloc_4 (136715 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr1_unloc_2 (128000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_51 (127531 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr9_unloc_1 (122420 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr16_unloc_3 (117390 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_Chr2_unloc_1 (107405 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_55 (94000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_56 (88000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_57 (84000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_58 (80000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_60 (71832 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_61 (71578 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_62 (66153 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_63 (65306 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_64 (65206 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_65 (64150 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_66 (60000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_67 (57219 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_68 (57037 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_69 (55112 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_70 (54687 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_71 (53000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_72 (52227 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_73 (50306 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_74 (50000 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_75 (49570 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_76 (33204 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_77 (22741 bp)\n",[m
[32m+[m[32m      "chr fMerMel2.1_cnag1_scaffold_78 (19000 bp)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr4_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_56 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr14 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr16_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_66 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr15 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_78 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr8 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr6 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr21 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr2_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_63 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr3 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr5_unloc_4 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr10 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_38 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_75 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_64 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_72 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_51 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_69 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr19 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr9 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr11 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr20 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_68 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr9_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_67 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr5_unloc_2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr6_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr13 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr16_unloc_3 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_58 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_57 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr12 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_71 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr1_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr1_unloc_2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr16 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_73 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_62 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr17 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_65 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_47 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_46 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr7 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_61 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr18 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr5 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_60 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr5_unloc_1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_70 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr5_unloc_3 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr16_unloc_2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_77 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr6_unloc_2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_76 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_55 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_scaffold_74 <<\n",[m
[32m+[m[32m      "Processing chromosome >> fMerMel2.1_cnag1_Chr4 <<\n",[m
[32m+[m[32m      "Writing genomic nucleotide frequencies to the file >/workspace/cfndxa/Hake_clock/Hake_genome/Genoma_merluza/genomic_nucleotide_frequencies.txt< for future re-use\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: A\t196302152\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AA\t54138017\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AC\t46487910\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AG\t45583225\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AT\t50092937\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: C\t161397773\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CA\t54843710\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CC\t39341466\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CG\t21533297\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CT\t45679258\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: G\t161278401\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GA\t42477620\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GC\t33016534\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GG\t39295088\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GT\t46489095\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: T\t196452166\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TA\t44842746\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TC\t42551796\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TG\t54866743\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TT\t54190804\n",[m
[32m+[m[32m      "Finished processing genomic nucleotide frequencies\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total number of conversions performed:\n",[m
[32m+[m[32m      "C->T:\t161397773\n",[m
[32m+[m[32m      "G->A:\t161278401\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step II - Genome bisulfite conversions - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bismark Genome Preparation - Step III: Launching the Bowtie 2 indexer\n",[m
[32m+[m[32m      "Please be aware that this process can - depending on genome size - take several hours!\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_CT.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.CT_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_GA.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.GA_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 178857623\n",[m
[32m+[m[32m      "Using parameters --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 178857623\n",[m
[32m+[m[32m      "Using parameters --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:21\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:21\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.1543e+08 (target: 134143217)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.1543e+08 (target: 134143217)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 715430492 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block of length 715430492 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:18\n",[m
[32m+[m[32m      "Returning block of 715430493 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 357580553\n",[m
[32m+[m[32m      "fchr[G]: 518978326\n",[m
[32m+[m[32m      "fchr[T]: 518978326\n",[m
[32m+[m[32m      "fchr[$]: 715430492\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 242676999 bytes to primary EBWT file: BS_GA.1.bt2\n",[m
[32m+[m[32m      "Wrote 178857628 bytes to secondary EBWT file: BS_GA.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 715430492\n",[m
[32m+[m[32m      "    bwtLen: 715430493\n",[m
[32m+[m[32m      "    sz: 178857623\n",[m
[32m+[m[32m      "    bwtSz: 178857624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44714406\n",[m
[32m+[m[32m      "    offsSz: 178857624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3726201\n",[m
[32m+[m[32m      "    numLines: 3726201\n",[m
[32m+[m[32m      "    ebwtTotLen: 238476864\n",[m
[32m+[m[32m      "    ebwtTotSz: 238476864\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:10:45\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:04\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:01\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 178857623\n",[m
[32m+[m[32m      "Using parameters --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  Sorting block time: 00:10:22\n",[m
[32m+[m[32m      "Returning block of 715430493 for bucket 1\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:21\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:06\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.1543e+08 (target: 134143217)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 715430492 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 196302152\n",[m
[32m+[m[32m      "fchr[G]: 196302152\n",[m
[32m+[m[32m      "fchr[T]: 357580553\n",[m
[32m+[m[32m      "fchr[$]: 715430492\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 242676999 bytes to primary EBWT file: BS_CT.1.bt2\n",[m
[32m+[m[32m      "Wrote 178857628 bytes to secondary EBWT file: BS_CT.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 715430492\n",[m
[32m+[m[32m      "    bwtLen: 715430493\n",[m
[32m+[m[32m      "    sz: 178857623\n",[m
[32m+[m[32m      "    bwtSz: 178857624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44714406\n",[m
[32m+[m[32m      "    offsSz: 178857624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3726201\n",[m
[32m+[m[32m      "    numLines: 3726201\n",[m
[32m+[m[32m      "    ebwtTotLen: 238476864\n",[m
[32m+[m[32m      "    ebwtTotSz: 238476864\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:12:53\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:04\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:00\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 178857623\n",[m
[32m+[m[32m      "Using parameters --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 134143218 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:22\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:09\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.1543e+08 (target: 134143217)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 715430492 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:25\n",[m
[32m+[m[32m      "Returning block of 715430493 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 357580553\n",[m
[32m+[m[32m      "fchr[G]: 518978326\n",[m
[32m+[m[32m      "fchr[T]: 518978326\n",[m
[32m+[m[32m      "fchr[$]: 715430492\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 242676999 bytes to primary EBWT file: BS_GA.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 178857628 bytes to secondary EBWT file: BS_GA.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 715430492\n",[m
[32m+[m[32m      "    bwtLen: 715430493\n",[m
[32m+[m[32m      "    sz: 178857623\n",[m
[32m+[m[32m      "    bwtSz: 178857624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44714406\n",[m
[32m+[m[32m      "    offsSz: 178857624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3726201\n",[m
[32m+[m[32m      "    numLines: 3726201\n",[m
[32m+[m[32m      "    ebwtTotLen: 238476864\n",[m
[32m+[m[32m      "    ebwtTotSz: 238476864\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:10:54\n",[m
[32m+[m[32m      "  Sorting block time: 00:10:26\n",[m
[32m+[m[32m      "Returning block of 715430493 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 196302152\n",[m
[32m+[m[32m      "fchr[G]: 196302152\n",[m
[32m+[m[32m      "fchr[T]: 357580553\n",[m
[32m+[m[32m      "fchr[$]: 715430492\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 242676999 bytes to primary EBWT file: BS_CT.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 178857628 bytes to secondary EBWT file: BS_CT.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 715430492\n",[m
[32m+[m[32m      "    bwtLen: 715430493\n",[m
[32m+[m[32m      "    sz: 178857623\n",[m
[32m+[m[32m      "    bwtSz: 178857624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44714406\n",[m
[32m+[m[32m      "    offsSz: 178857624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3726201\n",[m
[32m+[m[32m      "    numLines: 3726201\n",[m
[32m+[m[32m      "    ebwtTotLen: 238476864\n",[m
[32m+[m[32m      "    ebwtTotSz: 238476864\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:12:56\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "bismark_genome_preparation --genomic_composition /workspace/cfndxa/Hake_clock/Hake_genome/Genoma_merluza/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1c9fecb5-d184-4c1d-a649-f10c6badd0e1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5.2 Alignments to genome"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "id": "0f373877-37ea-4284-8322-93f1233f1e50",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 5-01:00:00 --mem 50G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfndxa/Hake_clock/bisRAD_Hake/006.alignments/bis-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 95\n",[m
[32m+[m[32m      "Submitted batch job 2003623\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfndxa/Hake_clock/bisRAD_Hake\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.dup_filter\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/006.alignments\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfndxa/Hake_clock/Hake_genome/Genoma_merluza\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq.gz | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_ALIGNMENTS\"}'`\n",[m
[32m+[m[32m    "        file1=\"${file}_1.1.1.fq.gz\"\n",[m
[32m+[m[32m    "        file2=\"${file}_2.2.2.fq.gz\"\n",[m
[32m+[m[32m    "#echo ${PREFIX}\n",[m
[32m+[m[32m    "#echo ${file1}\n",[m
[32m+[m[32m    "#echo ${file2}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                -1 ${file1} \\\n",[m
[32m+[m[32m    "                -2 ${file2} \\\n",[m
[32m+[m[32m    "                --o ${OUT} \\\n",[m
[32m+[m[32m    "                --non_directional\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align --time 5-01:00:00 --mem 50G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "a9e7ee5e-420f-4866-b7e5-cac41b01845c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1694665830.3449497-917231;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.15 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Alignments_QC\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /powerplant/workspace/cfndxa/Hake_clock/bisRAD_Hake/006b.relaxed.alignments\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m381/381\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 95 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 006b.relaxed.alignments/Alignments_QC_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 006b.relaxed.alignments/Alignments_QC_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 006b.relaxed.alignments/ -i Alignments_QC -o 006b.relaxed.alignments/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1be44dfc-32ae-4e64-9145-0844b8093894",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 7. Methylation extraction"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "id": "765ab234-84b0-440b-b723-566a2b9a0836",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 5-01:00:00 --mem 50G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfndxa/Hake_clock/bisRAD_Hake/008.extraction/meth-extract\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 95\n",[m
[32m+[m[32m      "Submitted batch job 2009829\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfndxa/Hake_clock/bisRAD_Hake\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/006b.relaxed.alignments\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/008.extraction\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfndxa/Hake_clock/Hake_genome/Genoma_merluza\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.bam`\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"bismark_methylation_extractor \\\n",[m
[32m+[m[32m    "                ${file} \\\n",[m
[32m+[m[32m    "                -p \\\n",[m
[32m+[m[32m    "                --merge_non_CpG \\\n",[m
[32m+[m[32m    "                --cytosine_report \\\n",[m
[32m+[m[32m    "                --scaffolds \\\n",[m
[32m+[m[32m    "                --genome_folder ${GENOME} \\\n",[m
[32m+[m[32m    "                -o ${OUT}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/meth-extract --time 5-01:00:00 --mem 50G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "id": "a79f72c3-4b64-4e6a-99b9-5850e8e030fb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "mkdir -p 008b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "bd0d2f6f-de65-4f03-a15b-ff4cf2fccaa9",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cp 008.extraction/*CpG_report.txt 008b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "id": "a6faa41b-2d40-4b6f-bd31-27f8fe353734",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for i in *CpG_report.txt; do awk '{if ($4 > 0) print}' $i > $i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "id": "934a5a83-a227-4fc9-a6eb-d392d780dc21",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find . -name \"*.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "id": "f7068525-3f61-4fb0-8a1f-2a21c1698bc3",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1708648365.609395-260321;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: MethylationExtraction_QC\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfndxa/Paua_clock/01_pilot_run/010.extraction\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m433/433\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 24 methextract reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 010.extraction/MethylationExtraction_QC_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 010.extraction/MethylationExtraction_QC_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 010.extraction/ -i MethylationExtraction_QC -o 010.extraction/"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/00a_RRBS_JM.ipynb b/00a_RRBS_JM.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..e3819db[m
[1m--- /dev/null[m
[1m+++ b/00a_RRBS_JM.ipynb[m
[36m@@ -0,0 +1,4008 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "4d1f29d1-809b-4e6b-8aac-79fc09282f80",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# 00a RRBS data analysis JM\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Author: Gabriel Ecker Eckhofen (adapted from Dafni Anastasiadi)\n",[m
[32m+[m[32m    "Date: Febuary 2024"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "id": "f57139d3-47f2-44f6-8491-12363f3603d3",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load conda"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "58a14287-df70-48e9-84ce-23498633f59b",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Setting up conda envirnment and activating it\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# must be done in terminal \n",[m
[32m+[m[32m    "# conda install -c bioconda entrez-direct"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "id": "af2dd13e-3345-467c-8874-ea7f9dcb08dd",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SAMN21040263\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040262\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040261\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specifiedtput: \n",[m
[32m+[m[32m      "No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040260\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040259\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040258\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040257\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: tput: No value for $TERM and no -T specifiedNo value for $TERM and no -T specified\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040256\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040255\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040254\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040253\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040252\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040251\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040250\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040249\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040248\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040247\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040246\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040245\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040244\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040243\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040242\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040241\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN21040240\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472656\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472655\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472654\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472653\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472652\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472651\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472650\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472649\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472648\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472647\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472646\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472645\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472644\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472643\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472642\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472641\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472640\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472639\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472638\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472637\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472636\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472635\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "SAMN18472634\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "tput: No value for $TERM and no -T specified\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/raw-reads/00_metadata\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Fetch metadata for a specific BioSample ID\n",[m
[32m+[m[32m    "filenames=(\"SAMN21040240.fastq\" \"SAMN21040241.fastq\" \"SAMN21040242.fastq\" \"SAMN21040243.fastq\" \"SAMN21040244.fastq\" \"SAMN21040245.fastq\" \"SAMN21040246.fastq\" \n",[m
[32m+[m[32m    "\"SAMN21040247.fastq\" \"SAMN21040248.fastq\" \"SAMN21040249.fastq\" \"SAMN21040250.fastq\" \"SAMN21040251.fastq\" \"SAMN21040252.fastq\" \"SAMN21040253.fastq\" \"SAMN21040254.fastq\" \n",[m
[32m+[m[32m    "\"SAMN21040255.fastq\" \"SAMN21040256.fastq\" \"SAMN21040257.fastq\" \"SAMN21040258.fastq\" \"SAMN21040259.fastq\" \"SAMN21040260.fastq\" \"SAMN21040261.fastq\" \"SAMN21040262.fastq\" \"SAMN21040263.fastq\" \n",[m
[32m+[m[32m    "\"SRR18462633.fastq\" \"SRR18462634.fastq\" \"SRR18462635.fastq\" \"SRR18462636.fastq\" \"SRR18462637.fastq\" \"SRR18462638.fastq\" \"SRR18462639.fastq\" \"SRR18462640.fastq\" \n",[m
[32m+[m[32m    "\"SRR18462641.fastq\" \"SRR18462642.fastq\" \"SRR18462643.fastq\" \"SRR18462644.fastq\" \"SRR18462645.fastq\" \"SRR18462646.fastq\" \"SRR18462647.fastq\" \"SRR18462648.fastq\" \n",[m
[32m+[m[32m    "\"SRR18462649.fastq\" \"SRR18462650.fastq\" \"SRR18462651.fastq\" \"SRR18462652.fastq\" \"SRR18462653.fastq\" \"SRR18462654.fastq\" \"SRR18462655.fastq\" )\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "filenames=(\"SAMN21040263\" \"SAMN21040262\" \"SAMN21040261\" \"SAMN21040260\" \"SAMN21040259\" \"SAMN21040258\" \"SAMN21040257\" \"SAMN21040256\"\n",[m
[32m+[m[32m    "\"SAMN21040255\" \"SAMN21040254\" \"SAMN21040253\" \"SAMN21040252\" \"SAMN21040251\" \"SAMN21040250\" \"SAMN21040249\" \"SAMN21040248\"\n",[m
[32m+[m[32m    "\"SAMN21040247\" \"SAMN21040246\" \"SAMN21040245\" \"SAMN21040244\" \"SAMN21040243\" \"SAMN21040242\" \"SAMN21040241\" \"SAMN21040240\"\n",[m
[32m+[m[32m    "\"SAMN18472656\" \"SAMN18472655\" \"SAMN18472654\" \"SAMN18472653\" \"SAMN18472652\" \"SAMN18472651\" \"SAMN18472650\" \"SAMN18472649\"\n",[m
[32m+[m[32m    "\"SAMN18472648\" \"SAMN18472647\" \"SAMN18472646\" \"SAMN18472645\" \"SAMN18472644\" \"SAMN18472643\" \"SAMN18472642\" \"SAMN18472641\"\n",[m
[32m+[m[32m    "\"SAMN18472640\" \"SAMN18472639\" \"SAMN18472638\" \"SAMN18472637\" \"SAMN18472636\" \"SAMN18472635\" \"SAMN18472634\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for (( i=0; i<${#filenames[@]}; i++ )); do\n",[m
[32m+[m[32m    "    # Index\n",[m
[32m+[m[32m    "    echo \"${filenames[i]%.fastq}\"\n",[m
[32m+[m[32m    "    esearch -db biosample -query ${filenames[i]%.fastq} | efetch -format native > ${filenames[i]}.txt\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 23,[m
[32m+[m[32m   "id": "bde928db-5685-43df-b3b6-4b53d96bdd4a",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda deactivate"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "c1a0dbeb-7b6f-4cad-890e-01bd6ee3f2a1",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SAMN21040240.fastq\n",[m
[32m+[m[32m      "JM_001.fastq\n",[m
[32m+[m[32m      "SAMN21040241.fastq\n",[m
[32m+[m[32m      "JM_002.fastq\n",[m
[32m+[m[32m      "SAMN21040242.fastq\n",[m
[32m+[m[32m      "JM_003.fastq\n",[m
[32m+[m[32m      "SAMN21040243.fastq\n",[m
[32m+[m[32m      "JM_004.fastq\n",[m
[32m+[m[32m      "SAMN21040244.fastq\n",[m
[32m+[m[32m      "JM_005.fastq\n",[m
[32m+[m[32m      "SAMN21040245.fastq\n",[m
[32m+[m[32m      "JM_006.fastq\n",[m
[32m+[m[32m      "SAMN21040246.fastq\n",[m
[32m+[m[32m      "JM_007.fastq\n",[m
[32m+[m[32m      "SAMN21040247.fastq\n",[m
[32m+[m[32m      "JM_008.fastq\n",[m
[32m+[m[32m      "SAMN21040248.fastq\n",[m
[32m+[m[32m      "JM_009.fastq\n",[m
[32m+[m[32m      "SAMN21040249.fastq\n",[m
[32m+[m[32m      "JM_010.fastq\n",[m
[32m+[m[32m      "SAMN21040250.fastq\n",[m
[32m+[m[32m      "JM_011.fastq\n",[m
[32m+[m[32m      "SAMN21040251.fastq\n",[m
[32m+[m[32m      "JM_012.fastq\n",[m
[32m+[m[32m      "SAMN21040252.fastq\n",[m
[32m+[m[32m      "JM_013.fastq\n",[m
[32m+[m[32m      "SAMN21040253.fastq\n",[m
[32m+[m[32m      "JM_014.fastq\n",[m
[32m+[m[32m      "SAMN21040254.fastq\n",[m
[32m+[m[32m      "JM_015.fastq\n",[m
[32m+[m[32m      "SAMN21040255.fastq\n",[m
[32m+[m[32m      "JM_016.fastq\n",[m
[32m+[m[32m      "SAMN21040256.fastq\n",[m
[32m+[m[32m      "JM_017.fastq\n",[m
[32m+[m[32m      "SAMN21040257.fastq\n",[m
[32m+[m[32m      "JM_018.fastq\n",[m
[32m+[m[32m      "SAMN21040258.fastq\n",[m
[32m+[m[32m      "JM_019.fastq\n",[m
[32m+[m[32m      "SAMN21040259.fastq\n",[m
[32m+[m[32m      "JM_020.fastq\n",[m
[32m+[m[32m      "SAMN21040260.fastq\n",[m
[32m+[m[32m      "JM_021.fastq\n",[m
[32m+[m[32m      "SAMN21040261.fastq\n",[m
[32m+[m[32m      "JM_022.fastq\n",[m
[32m+[m[32m      "SAMN21040262.fastq\n",[m
[32m+[m[32m      "JM_023.fastq\n",[m
[32m+[m[32m      "SAMN21040263.fastq\n",[m
[32m+[m[32m      "JM_024.fastq\n",[m
[32m+[m[32m      "SRR18462633.fastq\n",[m
[32m+[m[32m      "JM_025.fastq\n",[m
[32m+[m[32m      "SRR18462634.fastq\n",[m
[32m+[m[32m      "JM_026.fastq\n",[m
[32m+[m[32m      "SRR18462635.fastq\n",[m
[32m+[m[32m      "JM_027.fastq\n",[m
[32m+[m[32m      "SRR18462636.fastq\n",[m
[32m+[m[32m      "JM_028.fastq\n",[m
[32m+[m[32m      "SRR18462637.fastq\n",[m
[32m+[m[32m      "JM_029.fastq\n",[m
[32m+[m[32m      "SRR18462638.fastq\n",[m
[32m+[m[32m      "JM_030.fastq\n",[m
[32m+[m[32m      "SRR18462639.fastq\n",[m
[32m+[m[32m      "JM_031.fastq\n",[m
[32m+[m[32m      "SRR18462640.fastq\n",[m
[32m+[m[32m      "JM_032.fastq\n",[m
[32m+[m[32m      "SRR18462641.fastq\n",[m
[32m+[m[32m      "JM_033.fastq\n",[m
[32m+[m[32m      "SRR18462642.fastq\n",[m
[32m+[m[32m      "JM_034.fastq\n",[m
[32m+[m[32m      "SRR18462643.fastq\n",[m
[32m+[m[32m      "JM_035.fastq\n",[m
[32m+[m[32m      "SRR18462644.fastq\n",[m
[32m+[m[32m      "JM_036.fastq\n",[m
[32m+[m[32m      "SRR18462645.fastq\n",[m
[32m+[m[32m      "JM_037.fastq\n",[m
[32m+[m[32m      "SRR18462646.fastq\n",[m
[32m+[m[32m      "JM_038.fastq\n",[m
[32m+[m[32m      "SRR18462647.fastq\n",[m
[32m+[m[32m      "JM_039.fastq\n",[m
[32m+[m[32m      "SRR18462648.fastq\n",[m
[32m+[m[32m      "JM_040.fastq\n",[m
[32m+[m[32m      "SRR18462649.fastq\n",[m
[32m+[m[32m      "JM_041.fastq\n",[m
[32m+[m[32m      "SRR18462650.fastq\n",[m
[32m+[m[32m      "JM_042.fastq\n",[m
[32m+[m[32m      "SRR18462651.fastq\n",[m
[32m+[m[32m      "JM_043.fastq\n",[m
[32m+[m[32m      "SRR18462652.fastq\n",[m
[32m+[m[32m      "JM_044.fastq\n",[m
[32m+[m[32m      "SRR18462653.fastq\n",[m
[32m+[m[32m      "JM_045.fastq\n",[m
[32m+[m[32m      "SRR18462654.fastq\n",[m
[32m+[m[32m      "JM_046.fastq\n",[m
[32m+[m[32m      "SRR18462655.fastq\n",[m
[32m+[m[32m      "JM_047.fastq\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# renaming \n",[m
[32m+[m[32m    "counter=1\n",[m
[32m+[m[32m    "for file in *.fastq; do\n",[m
[32m+[m[32m    "    newname=$(printf \"JM_%03d.fastq\" \"$counter\")\n",[m
[32m+[m[32m    "    mv \"$file\" \"$newname\"\n",[m
[32m+[m[32m    "    echo \"$file\"\n",[m
[32m+[m[32m    "    echo \"$newname\"\n",[m
[32m+[m[32m    "    ((counter++))\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "id": "e3b4904d-4e6c-4f68-84e5-66a992686127",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) filelist.txt\n",[m
[32m+[m[32m      "JM_001_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040240.fastq.txt\n",[m
[32m+[m[32m      "JM_002_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040241.fastq.txt\n",[m
[32m+[m[32m      "JM_003_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040242.fastq.txt\n",[m
[32m+[m[32m      "JM_004_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040243.fastq.txt\n",[m
[32m+[m[32m      "JM_005_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040244.fastq.txt\n",[m
[32m+[m[32m      "JM_006_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040245.fastq.txt\n",[m
[32m+[m[32m      "JM_007_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040246.fastq.txt\n",[m
[32m+[m[32m      "JM_008_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040247.fastq.txt\n",[m
[32m+[m[32m      "JM_009_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040248.fastq.txt\n",[m
[32m+[m[32m      "JM_010_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040249.fastq.txt\n",[m
[32m+[m[32m      "JM_011_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040250.fastq.txt\n",[m
[32m+[m[32m      "JM_012_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040251.fastq.txt\n",[m
[32m+[m[32m      "JM_013_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040252.fastq.txt\n",[m
[32m+[m[32m      "JM_014_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040253.fastq.txt\n",[m
[32m+[m[32m      "JM_015_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040254.fastq.txt\n",[m
[32m+[m[32m      "JM_016_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040255.fastq.txt\n",[m
[32m+[m[32m      "JM_017_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040256.fastq.txt\n",[m
[32m+[m[32m      "JM_018_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040257.fastq.txt\n",[m
[32m+[m[32m      "JM_019_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040258.fastq.txt\n",[m
[32m+[m[32m      "JM_020_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040259.fastq.txt\n",[m
[32m+[m[32m      "JM_021_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040260.fastq.txt\n",[m
[32m+[m[32m      "JM_022_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040261.fastq.txt\n",[m
[32m+[m[32m      "JM_023_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040262.fastq.txt\n",[m
[32m+[m[32m      "JM_024_metadata.txt\n",[m
[32m+[m[32m      "SAMN21040263.fastq.txt\n",[m
[32m+[m[32m      "JM_025_metadata.txt\n",[m
[32m+[m[32m      "SRR18462633.fastq.txt\n",[m
[32m+[m[32m      "JM_026_metadata.txt\n",[m
[32m+[m[32m      "SRR18462634.fastq.txt\n",[m
[32m+[m[32m      "JM_027_metadata.txt\n",[m
[32m+[m[32m      "SRR18462635.fastq.txt\n",[m
[32m+[m[32m      "JM_028_metadata.txt\n",[m
[32m+[m[32m      "SRR18462636.fastq.txt\n",[m
[32m+[m[32m      "JM_029_metadata.txt\n",[m
[32m+[m[32m      "SRR18462637.fastq.txt\n",[m
[32m+[m[32m      "JM_030_metadata.txt\n",[m
[32m+[m[32m      "SRR18462638.fastq.txt\n",[m
[32m+[m[32m      "JM_031_metadata.txt\n",[m
[32m+[m[32m      "SRR18462639.fastq.txt\n",[m
[32m+[m[32m      "JM_032_metadata.txt\n",[m
[32m+[m[32m      "SRR18462640.fastq.txt\n",[m
[32m+[m[32m      "JM_033_metadata.txt\n",[m
[32m+[m[32m      "SRR18462641.fastq.txt\n",[m
[32m+[m[32m      "JM_034_metadata.txt\n",[m
[32m+[m[32m      "SRR18462642.fastq.txt\n",[m
[32m+[m[32m      "JM_035_metadata.txt\n",[m
[32m+[m[32m      "SRR18462643.fastq.txt\n",[m
[32m+[m[32m      "JM_036_metadata.txt\n",[m
[32m+[m[32m      "SRR18462644.fastq.txt\n",[m
[32m+[m[32m      "JM_037_metadata.txt\n",[m
[32m+[m[32m      "SRR18462645.fastq.txt\n",[m
[32m+[m[32m      "JM_038_metadata.txt\n",[m
[32m+[m[32m      "SRR18462646.fastq.txt\n",[m
[32m+[m[32m      "JM_039_metadata.txt\n",[m
[32m+[m[32m      "SRR18462647.fastq.txt\n",[m
[32m+[m[32m      "JM_040_metadata.txt\n",[m
[32m+[m[32m      "SRR18462648.fastq.txt\n",[m
[32m+[m[32m      "JM_041_metadata.txt\n",[m
[32m+[m[32m      "SRR18462649.fastq.txt\n",[m
[32m+[m[32m      "JM_042_metadata.txt\n",[m
[32m+[m[32m      "SRR18462650.fastq.txt\n",[m
[32m+[m[32m      "JM_043_metadata.txt\n",[m
[32m+[m[32m      "SRR18462651.fastq.txt\n",[m
[32m+[m[32m      "JM_044_metadata.txt\n",[m
[32m+[m[32m      "SRR18462652.fastq.txt\n",[m
[32m+[m[32m      "JM_045_metadata.txt\n",[m
[32m+[m[32m      "SRR18462653.fastq.txt\n",[m
[32m+[m[32m      "JM_046_metadata.txt\n",[m
[32m+[m[32m      "SRR18462654.fastq.txt\n",[m
[32m+[m[32m      "JM_047_metadata.txt\n",[m
[32m+[m[32m      "SRR18462655.fastq.txt\n",[m
[32m+[m[32m      "JM_048_metadata.txt\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# renaming \n",[m
[32m+[m[32m    "counter=1\n",[m
[32m+[m[32m    "for file in *.txt; do\n",[m
[32m+[m[32m    "    newname=$(printf \"JM_%03d_metadata.txt\" \"$counter\")\n",[m
[32m+[m[32m    "    mv \"$file\" \"$newname\"\n",[m
[32m+[m[32m    "    echo \"$file\"\n",[m
[32m+[m[32m    "    echo \"$newname\"\n",[m
[32m+[m[32m    "    ((counter++))\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "756caf22-eda3-4bd3-baf1-e4a0d3038865",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 1. Prepare data and directories\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Data was downloaded with SRAtoolkit "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "id": "561d77eb-30d4-41e5-8254-62621e3c5a71",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/raw-reads"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "d7f1939d-faa8-4885-8605-0b7b624f3023",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find -type f -exec md5sum \"{}\" + > checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "id": "7a8233e4-6b90-499c-a60a-9bcc5c52bfd7",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "./JM_031_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_002.fastq: OK\n",[m
[32m+[m[32m      "./JM_042_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_027_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_014.fastq: OK\n",[m
[32m+[m[32m      "./JM_004.fastq: OK\n",[m
[32m+[m[32m      "./JM_037_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_042.fastq: OK\n",[m
[32m+[m[32m      "./JM_008_metadata.txt: OK\n",[m
[32m+[m[32m      "./.ipynb_checkpoints/SAMN21040240.fastq-checkpoint.txt: OK\n",[m
[32m+[m[32m      "./.ipynb_checkpoints/SAMN21040242.fastq-checkpoint.txt: OK\n",[m
[32m+[m[32m      "./.ipynb_checkpoints/filelist-checkpoint.txt: OK\n",[m
[32m+[m[32m      "./.ipynb_checkpoints/SAMN21040241.fastq-checkpoint.txt: OK\n",[m
[32m+[m[32m      "./JM_012_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_033_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_048_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_025_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_010_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_017.fastq: OK\n",[m
[32m+[m[32m      "./JM_039.fastq: OK\n",[m
[32m+[m[32m      "./JM_045.fastq: OK\n",[m
[32m+[m[32m      "./JM_019.fastq: OK\n",[m
[32m+[m[32m      "./JM_018_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_023.fastq: OK\n",[m
[32m+[m[32m      "./JM_012.fastq: OK\n",[m
[32m+[m[32m      "./JM_027.fastq: OK\n",[m
[32m+[m[32m      "./JM_015.fastq: OK\n",[m
[32m+[m[32m      "./JM_009_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_033.fastq: OK\n",[m
[32m+[m[32m      "./JM_045_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_021_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_029.fastq: OK\n",[m
[32m+[m[32m      "./JM_026.fastq: OK\n",[m
[32m+[m[32m      "./JM_001.fastq: OK\n",[m
[32m+[m[32m      "./JM_039_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_003.fastq: OK\n",[m
[32m+[m[32m      "./JM_029_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_031.fastq: OK\n",[m
[32m+[m[32m      "./JM_011_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_011.fastq: OK\n",[m
[32m+[m[32m      "./JM_040.fastq: OK\n",[m
[32m+[m[32m      "./JM_041.fastq: OK\n",[m
[32m+[m[32m      "./JM_030_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_019_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_020.fastq: OK\n",[m
[32m+[m[32m      "./JM_024_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_022.fastq: OK\n",[m
[32m+[m[32m      "./JM_047_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_005.fastq: OK\n",[m
[32m+[m[32m      "./JM_001_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_026_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_036.fastq: OK\n",[m
[32m+[m[32m      "./JM_018.fastq: OK\n",[m
[32m+[m[32m      "./JM_043.fastq: OK\n",[m
[32m+[m[32m      "./JM_040_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_038_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_016_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_024.fastq: OK\n",[m
[32m+[m[32m      "./JM_017_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_028.fastq: OK\n",[m
[32m+[m[32m      "./JM_038.fastq: OK\n",[m
[32m+[m[32m      "./JM_010.fastq: OK\n",[m
[32m+[m[32m      "./JM_041_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_035_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_047.fastq: OK\n",[m
[32m+[m[32m      "./JM_032.fastq: OK\n",[m
[32m+[m[32m      "./JM_021.fastq: OK\n",[m
[32m+[m[32m      "./checklist.chk: FAILED\n",[m
[32m+[m[32m      "./JM_020_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_023_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_015_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_002_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_046.fastq: OK\n",[m
[32m+[m[32m      "./JM_013.fastq: OK\n",[m
[32m+[m[32m      "./JM_037.fastq: OK\n",[m
[32m+[m[32m      "./JM_032_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_044.fastq: OK\n",[m
[32m+[m[32m      "./JM_025.fastq: OK\n",[m
[32m+[m[32m      "./JM_028_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_036_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_014_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_009.fastq: OK\n",[m
[32m+[m[32m      "./JM_006.fastq: OK\n",[m
[32m+[m[32m      "./JM_030.fastq: OK\n",[m
[32m+[m[32m      "./JM_034_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_006_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_044_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_016.fastq: OK\n",[m
[32m+[m[32m      "./JM_013_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_007_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_046_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_022_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_003_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_005_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_043_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_008.fastq: OK\n",[m
[32m+[m[32m      "./JM_007.fastq: OK\n",[m
[32m+[m[32m      "./JM_004_metadata.txt: OK\n",[m
[32m+[m[32m      "./JM_034.fastq: OK\n",[m
[32m+[m[32m      "./JM_035.fastq: OK\n",[m
[32m+[m[32m      "md5sum: WARNING: 1 computed checksum did NOT match\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "md5sum -c checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "e30aaf24-3fbe-4346-b0e3-4c197d377e52",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Define Project Variables and create analysis directories:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "id": "6c13cc36-5ae4-447e-9abe-32c08a774f48",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#Create analysis directories and define project variables\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the user as a variable\n",[m
[32m+[m[32m    "USER=\"cfngle\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the project directory and temp subdirectory as a variable\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/$USER/raw-data/JM/\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "id": "810a60cc-673f-40fc-abe0-aab516ebcce4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Create analysis subdirectories\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM/\"\n",[m
[32m+[m[32m    "mkdir -p $PROJECT\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/001.fastqc_raw\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/002.trim_galore\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/002.trimmomatic\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/003.fastq_trim_galore\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/004.alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/004.alignments_tm\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.b.stats_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.qc_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/006.deduplication\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/007.meth_extraction\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/008.methylkit\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/099.test"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "c5e17deb-bbbb-4bd7-910d-9d431cd550ee",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 1.1 FastQC RAW Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 53,[m
[32m+[m[32m   "id": "6563ed7d-f7b8-467a-9f26-f7b6617aa010",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "./JM_002.fastq ./JM_014.fastq ./JM_004.fastq ./JM_042.fastq ./JM_017.fastq ./JM_039.fastq ./JM_045.fastq ./JM_019.fastq ./JM_023.fastq ./JM_012.fastq ./JM_027.fastq ./JM_015.fastq ./JM_033.fastq ./JM_029.fastq ./JM_026.fastq ./JM_001.fastq ./JM_003.fastq ./JM_031.fastq ./JM_011.fastq ./JM_040.fastq ./JM_041.fastq ./JM_020.fastq ./JM_022.fastq ./JM_005.fastq ./JM_036.fastq ./JM_018.fastq ./JM_043.fastq ./JM_024.fastq ./JM_028.fastq ./JM_038.fastq ./JM_010.fastq ./JM_047.fastq ./JM_032.fastq ./JM_021.fastq ./JM_046.fastq ./JM_013.fastq ./JM_037.fastq ./JM_044.fastq ./JM_025.fastq ./JM_009.fastq ./JM_006.fastq ./JM_030.fastq ./JM_016.fastq ./JM_008.fastq ./JM_007.fastq ./JM_034.fastq ./JM_035.fastq\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 01:00:00 --mem 20G -c 10\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/001.fastqc_raw/fastqc_raw\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4454082\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\" #Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/raw-reads\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/001.fastqc_raw\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "cd $IN\n",[m
[32m+[m[32m    "#  FILES=`find -type f -name \"*.fastq\"`\n",[m
[32m+[m[32m    "FILES=`find -type f -name \"*.fastq\"`\n",[m
[32m+[m[32m    "echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "         COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "         echo $COMMAND\n",[m
[32m+[m[32m    "        #echo $file\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc_raw --time 01:00:00 --mem 20G -c 10 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 26,[m
[32m+[m[32m   "id": "cdccf7b3-24ba-4c00-ac81-f9c5d586a83c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "id": "0908f545-c305-4531-b535-a3a61771e65e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "id": "437edb0f-7d48-4a0e-9d2f-fcb49d2a2904",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1708664591.5094242-395558;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Raw\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/001.fastqc_raw\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m97/97\u001b[0m  stqc_raw/JM_033_fastqc.html\u001b[0m.html\u001b[0m\n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 47 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 001.fastqc_raw/Fastqc-Raw_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 001.fastqc_raw/Fastqc-Raw_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 001.fastqc_raw -o 001.fastqc_raw -i Fastqc-Raw"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "50e04741-aff4-4af1-9279-0d6d60f29ae8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 2. Trimming"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "325e34ec-e56e-4cbc-bed9-28b65bda686b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1a Trim_galore"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "5a155bfd-5e13-4f05-a07e-b71ffc78bfc4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "JM_001.fastq JM_002.fastq JM_003.fastq JM_004.fastq JM_005.fastq JM_006.fastq JM_007.fastq JM_008.fastq JM_009.fastq JM_010.fastq JM_011.fastq JM_012.fastq JM_013.fastq JM_014.fastq JM_015.fastq JM_016.fastq JM_017.fastq JM_018.fastq JM_019.fastq JM_020.fastq JM_021.fastq JM_022.fastq JM_023.fastq JM_024.fastq JM_025.fastq JM_026.fastq JM_027.fastq JM_028.fastq JM_029.fastq JM_030.fastq JM_031.fastq JM_032.fastq JM_033.fastq JM_034.fastq JM_035.fastq JM_036.fastq JM_037.fastq JM_038.fastq JM_039.fastq JM_040.fastq JM_041.fastq JM_042.fastq JM_043.fastq JM_044.fastq JM_045.fastq JM_046.fastq JM_047.fastq\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 04:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/002.trim_galore/trim_galore-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 94\n",[m
[32m+[m[32m      "Submitted batch job 4464148\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/raw-reads\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $IN\n",[m
[32m+[m[32m    "mkdir -p $OUT\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the files to trim:\n",[m
[32m+[m[32m    "FILES=`basename -a ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load trim_galore\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for FILE in $FILES\n",[m
[32m+[m[32m    "     do\n",[m
[32m+[m[32m    "        In_File1=${IN}/${FILE}\n",[m
[32m+[m[32m    "        echo $In_File1\n",[m
[32m+[m[32m    "        Out=${OUT}/${FILE}_trimmed.fastq\n",[m
[32m+[m[32m    "        COMMAND=\"trim_galore --rrbs --quality 25 --clip_R1 4 --three_prime_clip_R1 2 $In_File1 --output_dir $OUT\"\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/trim_galore-logs --time 04:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "cab78171-b1c8-4bc8-894d-cc73252af1bf",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1b Trimmomatic"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "id": "b972d276-6313-4f3b-8e0b-4e0c19f53a75",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 04:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/002.trimmomatic//trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 94\n",[m
[32m+[m[32m      "Submitted batch job 4468474\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/raw-reads\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/002.trimmomatic/\"\n",[m
[32m+[m[32m    "ADAPTER=\"${PROJECT}/zzz.adapters/TruSeq3-SE.fa\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $IN\n",[m
[32m+[m[32m    "mkdir -p $OUT\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the files to trim:\n",[m
[32m+[m[32m    "FILES=`basename -a ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load Trimmomatic\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for FILE in $FILES\n",[m
[32m+[m[32m    "     do\n",[m
[32m+[m[32m    "        In_File1=${IN}/${FILE}\n",[m
[32m+[m[32m    "        echo $In_File1\n",[m
[32m+[m[32m    "        Out=${OUT}${FILE}_trimmoniac.fastq\n",[m
[32m+[m[32m    "        COMMAND=\"trimmomatic SE -phred33 ${In_File1} ${Out} ILLUMINACLIP:${ADAPTER}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36\"\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/trimmomatic-logs --time 04:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1f93e76c-40f1-4c3b-9466-c6eaa788cd00",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.2a FastQC TRIMMED Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "51ce841f-d25c-452a-be07-537f33193bbc",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Loading \u001b[1mFastQC/0.11.7\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[91mERROR\u001b[0m: Conflicting 'FastQC' is loaded\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 02:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/003.fastq_trim_galore/fastqc-trim_galore-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4465018\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\" # Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/003.fastq_trim_galore\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-trim_galore-logs --time 02:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "165399e1-0c53-4375-9f83-ef419f9a256f",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mmultiqc/1.11\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "id": "aeae0461-94aa-48ef-bc35-44e85d8242ac",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709088715.1051173-869333;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Trimmed\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/003.fastq_trim_galore\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m200/200\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 47 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 003.fastq_trim_galore/Fastqc-Trimmed_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 003.fastq_trim_galore/Fastqc-Trimmed_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM\n",[m
[32m+[m[32m    "multiqc 003.fastq_trim_galore -o 003.fastq_trim_galore -i Fastqc-Trimmed"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "030cba67-0c6d-41ea-b99d-ead2110c7803",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.2b FastQC TRIMMED Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 23,[m
[32m+[m[32m   "id": "51794245-fa9d-4b40-b403-2b78f22072a6",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Loading \u001b[1mFastQC/0.11.7\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[91mERROR\u001b[0m: Conflicting 'FastQC' is loaded\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 02:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/003.fastq_trimmomatic/fastqc-trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4468568\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\" # Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/003.fastq_trimmomatic\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-trimmomatic-logs --time 02:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "id": "22a2abf7-c41f-4f69-9789-f26d4941b705",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "id": "339514d2-0400-415b-bcb7-3825b08caa69",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709164268.7307322-895457;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Trimmed\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/003.fastq_trimmomatic\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m189/189\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 47 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM\n",[m
[32m+[m[32m    "multiqc 003.fastq_trimmomatic -o 003.fastq_trimmomatic -i Fastqc-Trimmed"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "105a8a9b-d575-4ea9-8651-ab1d2eedc6eb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 5. Alignment\n",[m
[32m+[m[32m    "Bismark user guide https://felixkrueger.github.io/Bismark/\n",[m
[32m+[m[32m    "### 5.1 Preparation of the genome\n",[m
[32m+[m[32m    "Japanese medaka rgenome v1 (ASM223467v1)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "id": "b0d6738f-fcaf-4e38-99f3-71603447c489",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd rgenome/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "id": "e7e5d3e0-1ae5-4b58-b0de-0a9686bbb058",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "grep -e \">\" GCF_002234675.1_ASM223467v1_genomic.fna | awk 'sub(/^>/, \"\")' | sort -k1 > JM_chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 30,[m
[32m+[m[32m   "id": "dfb354d0-c0c6-42c8-8fe2-60d1256d78ac",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "NC_004387.1 Oryzias latipes mitochondrion, complete genome\n",[m
[32m+[m[32m      "NC_019859.2 Oryzias latipes chromosome 1, ASM223467v1\n",[m
[32m+[m[32m      "NC_019860.2 Oryzias latipes chromosome 2, ASM223467v1\n",[m
[32m+[m[32m      "NC_019861.2 Oryzias latipes chromosome 3, ASM223467v1\n",[m
[32m+[m[32m      "NC_019862.2 Oryzias latipes chromosome 4, ASM223467v1\n",[m
[32m+[m[32m      "NC_019863.2 Oryzias latipes chromosome 5, ASM223467v1\n",[m
[32m+[m[32m      "NC_019864.2 Oryzias latipes chromosome 6, ASM223467v1\n",[m
[32m+[m[32m      "NC_019865.2 Oryzias latipes chromosome 7, ASM223467v1\n",[m
[32m+[m[32m      "NC_019866.2 Oryzias latipes chromosome 8, ASM223467v1\n",[m
[32m+[m[32m      "NC_019867.2 Oryzias latipes chromosome 9, ASM223467v1\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "head JM_chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 31,[m
[32m+[m[32m   "id": "31bdff52-c31e-4e7e-8937-44177045ed93",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load bismark/0.23.0"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 35,[m
[32m+[m[32m   "id": "fb0d2214-3c91-4125-a40d-51d0456ee89d",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Writing bisulfite genomes out into a single MFA (multi FastA) file\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bisulfite Genome Indexer version v0.23.0 (last modified: 14 April 2019)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step I - Prepare genome folders - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Calculating genomic frequencies (this may take several minutes depending on genome size) ...\n",[m
[32m+[m[32m      "====================================================================================================================================================================\n",[m
[32m+[m[32m      "Now reading in and storing sequence information of the genome specified in: /workspace/cfngle/raw-data/JM/rgenome/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "chr NC_019859.2 (37713152 bp)\n",[m
[32m+[m[32m      "chr NC_019860.2 (25379070 bp)\n",[m
[32m+[m[32m      "chr NC_019861.2 (38248663 bp)\n",[m
[32m+[m[32m      "chr NC_019862.2 (32868862 bp)\n",[m
[32m+[m[32m      "chr NC_019863.2 (33205099 bp)\n",[m
[32m+[m[32m      "chr NC_019864.2 (32246747 bp)\n",[m
[32m+[m[32m      "chr NC_019865.2 (34573382 bp)\n",[m
[32m+[m[32m      "chr NC_019866.2 (26239357 bp)\n",[m
[32m+[m[32m      "chr NC_019867.2 (33399407 bp)\n",[m
[32m+[m[32m      "chr NC_019868.2 (31218526 bp)\n",[m
[32m+[m[32m      "chr NC_019869.2 (28210532 bp)\n",[m
[32m+[m[32m      "chr NC_019870.2 (30543476 bp)\n",[m
[32m+[m[32m      "chr NC_019871.2 (33825776 bp)\n",[m
[32m+[m[32m      "chr NC_019872.2 (30598983 bp)\n",[m
[32m+[m[32m      "chr NC_019873.2 (30476034 bp)\n",[m
[32m+[m[32m      "chr NC_019874.2 (32958677 bp)\n",[m
[32m+[m[32m      "chr NC_019875.2 (31792230 bp)\n",[m
[32m+[m[32m      "chr NC_019876.2 (30918796 bp)\n",[m
[32m+[m[32m      "chr NC_019877.2 (25472880 bp)\n",[m
[32m+[m[32m      "chr NC_019878.2 (25942153 bp)\n",[m
[32m+[m[32m      "chr NC_019879.2 (31148813 bp)\n",[m
[32m+[m[32m      "chr NC_019880.2 (28976614 bp)\n",[m
[32m+[m[32m      "chr NC_019881.2 (24400806 bp)\n",[m
[32m+[m[32m      "chr NC_019882.2 (23682337 bp)\n",[m
[32m+[m[32m      "chr NC_004387.1 (16714 bp)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019869.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019864.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019861.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019866.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019879.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019874.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_004387.1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019871.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019881.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019876.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019877.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019873.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019865.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019882.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019880.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019870.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019859.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019878.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019872.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019867.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019863.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019875.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019860.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019868.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019862.2 <<\n",[m
[32m+[m[32m      "Writing genomic nucleotide frequencies to the file >/workspace/cfngle/raw-data/JM/rgenome/genomic_nucleotide_frequencies.txt< for future re-use\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: A\t216957530\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AA\t76267116\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AC\t41125942\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AG\t46339810\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AT\t53224515\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: C\t149808184\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CA\t54903461\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CC\t33648602\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CG\t14873895\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CT\t46382122\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: G\t149806542\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GA\t43510171\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GC\t31502622\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GG\t33674420\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GT\t41119214\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: T\t216993830\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TA\t42276625\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TC\t43530907\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TG\t54918326\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TT\t76267822\n",[m
[32m+[m[32m      "Finished processing genomic nucleotide frequencies\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total number of conversions performed:\n",[m
[32m+[m[32m      "C->T:\t149808184\n",[m
[32m+[m[32m      "G->A:\t149806542\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step II - Genome bisulfite conversions - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bismark Genome Preparation - Step III: Launching the Bowtie 2 indexer\n",[m
[32m+[m[32m      "Please be aware that this process can - depending on genome size - take several hours!\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_CT.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.CT_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_GA.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.GA_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:09\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:08\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "  Sorting block time: 00:09:56\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 366764072\n",[m
[32m+[m[32m      "fchr[G]: 516572256\n",[m
[32m+[m[32m      "fchr[T]: 516572256\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_GA.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_GA.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:10:47\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:03\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:00\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 216957530\n",[m
[32m+[m[32m      "fchr[G]: 216957530\n",[m
[32m+[m[32m      "fchr[T]: 366764072\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_CT.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_CT.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:12:34\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:03\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:01\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:09\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:18\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 366764072\n",[m
[32m+[m[32m      "fchr[G]: 516572256\n",[m
[32m+[m[32m      "fchr[T]: 516572256\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_GA.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_GA.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:10:54\n",[m
[32m+[m[32m      "  Sorting block time: 00:10:15\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 216957530\n",[m
[32m+[m[32m      "fchr[G]: 216957530\n",[m
[32m+[m[32m      "fchr[T]: 366764072\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_CT.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_CT.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:12:48\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "bismark_genome_preparation --genomic_composition /workspace/cfngle/raw-data/JM/rgenome/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1c9fecb5-d184-4c1d-a649-f10c6badd0e1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5.2 Alignments to genome"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "id": "0f373877-37ea-4284-8322-93f1233f1e50",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 4-24:00:00 --mem 80G -c 5\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/004.alignments/bis-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4465104\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "# echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align-local --time 23:00:00 --mem 25G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "e444f8a9-ffb0-4e86-b4a2-e96129533350",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.2.1 Alignments to genome trim_galore BISMARK --local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 83,[m
[32m+[m[32m   "id": "2a4f44ac-1fd2-4005-90dc-0c88f2d9e05e",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 2-23:59:00 --mem 25G -c 1\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/004.alignments_BS_local/bis-align_local\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4676246\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "# echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional \\\n",[m
[32m+[m[32m    "                --local\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align_local --time 2-23:59:00 --mem 25G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 84,[m
[32m+[m[32m   "id": "ecdc372d-e412-4323-aae6-2b8a1c9cbe7c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1710210739.8987062-991077;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/004.alignments_BS_local\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m190/190\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 47 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.qc_alignments_BS_local/QC.alignments_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.qc_alignments_BS_local/QC.alignments_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 004.alignments_BM_local -i QC.alignments -o 005.qc_alignments_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "467de58a-18ff-484d-a3ae-166efa68e6ed",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.2.1 Alignments to genome (Trimmomatic)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 74,[m
[32m+[m[32m   "id": "611a95cf-1b25-4632-a7db-556efecb462a",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 4-24:00:00 --mem 80G -c 8\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/004.alignments_tm/bis-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4483607\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_tm\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fastq`\n",[m
[32m+[m[32m    "# echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 4 \\\n",[m
[32m+[m[32m    "                --non_directional\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align --time 4-24:00:00 --mem 10G -c 1| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 75,[m
[32m+[m[32m   "id": "0e0dd3e6-e2fa-43a3-a012-11796117d48e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709671700.8706174-644690;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/004.alignments_tm\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m191/191\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 47 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.qc.alignments_tm/QC.alignments_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.qc.alignments_tm/QC.alignments_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 004.alignments_tm -i QC.alignments -o 005.qc.alignments_tm"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "6e6b06c2-ad91-431d-b625-e8efa8219abd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5.1a BSseeker"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "e3970845-a09e-4153-9bd7-c3a50a1dfad8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "##### BSseeker did not work with command line directly. A bioconda environment had to be set up and BSseeker 2 directly installed there. (conda install bioconda/label/cf201901::bs-seeker2).\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "bd839b4d-dc2a-43af-81ab-d9584c9a3450",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### Script for BS indexing (for .sh file) "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "2ebeae49-1865-4ffd-b132-2bd3046d0128",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#SBATCH --job-name=indexBS\n",[m
[32m+[m[32m    "#SBATCH --time=24:00:00\n",[m
[32m+[m[32m    "#SBATCH --mem=20G\n",[m
[32m+[m[32m    "#SBATCH --output=/workspace/cfngle/raw-data/JM/rgenome/output.log\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "OUT=$GENOME\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "bs_seeker2-build.py \\\n",[m
[32m+[m[32m    "    -f ${GENOME}/GCF_002234675.1_ASM223467v1_genomic.fasta \\\n",[m
[32m+[m[32m    "    --aligner bowtie2 \\\n",[m
[32m+[m[32m    "    -r \\\n",[m
[32m+[m[32m    "    -d /workspace/cfngle/raw-data/JM/rgenome/BSseeker2-index"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 54,[m
[32m+[m[32m   "id": "d895d3db-a3a2-4050-beb4-7763e24eb63c",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Collecting package metadata (current_repodata.json): done\n",[m
[32m+[m[32m      "Solving environment: done\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "==> WARNING: A newer version of conda exists. <==\n",[m
[32m+[m[32m      "  current version: 23.1.0\n",[m
[32m+[m[32m      "  latest version: 24.1.2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Please update conda by running\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    $ conda update -n base -c defaults conda\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Or to minimize the number of packages updated during conda update use\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "     conda install conda=24.1.2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "# All requested packages already installed.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda install bowtie2"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 55,[m
[32m+[m[32m   "id": "b1e9b088-37a7-4f0b-8af5-f511b863bae6",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Usage: bs_seeker2-build.py [options]\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Options:\n",[m
[32m+[m[32m      "  -h, --help            show this help message and exit\n",[m
[32m+[m[32m      "  -f FILE, --file=FILE  Input your reference genome file (fasta)\n",[m
[32m+[m[32m      "  --aligner=ALIGNER     Aligner program to perform the analysis: bowtie,\n",[m
[32m+[m[32m      "                        bowtie2, soap, rmap [Default: bowtie]\n",[m
[32m+[m[32m      "  -p PATH, --path=PATH  Path to the aligner program. Detected:\n",[m
[32m+[m[32m      "                        bowtie: None\n",[m
[32m+[m[32m      "                        bowtie2:\n",[m
[32m+[m[32m      "                        /workspace/appscratch/miniconda/cfngle_env-01/bin\n",[m
[32m+[m[32m      "                        rmap: None\n",[m
[32m+[m[32m      "                        soap: None\n",[m
[32m+[m[32m      "  -d DBPATH, --db=DBPATH\n",[m
[32m+[m[32m      "                        Path to the reference genome library (generated in\n",[m
[32m+[m[32m      "                        preprocessing genome) [Default: /powerplant/workspace/\n",[m
[32m+[m[32m      "                        appscratch/miniconda/cfngle_env-01/bin/bs_utils/refere\n",[m
[32m+[m[32m      "                        nce_genomes]\n",[m
[32m+[m[32m      "  -v, --version         show version of BS-Seeker2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  Reduced Representation Bisulfite Sequencing Options:\n",[m
[32m+[m[32m      "    Use this options with conjuction of -r [--rrbs]\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    -r, --rrbs          Build index specially for Reduced Representation\n",[m
[32m+[m[32m      "                        Bisulfite Sequencing experiments. Genome other than\n",[m
[32m+[m[32m      "                        certain fragments will be masked. [Default: False]\n",[m
[32m+[m[32m      "    -l LOW_BOUND, --low=LOW_BOUND\n",[m
[32m+[m[32m      "                        lower bound of fragment length (excluding recognition\n",[m
[32m+[m[32m      "                        sequence such as C-CGG) [Default: 20]\n",[m
[32m+[m[32m      "    -u UP_BOUND, --up=UP_BOUND\n",[m
[32m+[m[32m      "                        upper bound of fragment length (excluding recognition\n",[m
[32m+[m[32m      "                        sequence such as C-CGG ends) [Default: 500]\n",[m
[32m+[m[32m      "    -c CUT_FORMAT, --cut-site=CUT_FORMAT\n",[m
[32m+[m[32m      "                        Cut sites of restriction enzyme. Ex: MspI(C-CGG),\n",[m
[32m+[m[32m      "                        Mael:(C-TAG), double-enzyme MspI&Mael:(C-CGG,C-TAG).\n",[m
[32m+[m[32m      "                        [Default: C-CGG]\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "bs_seeker2-build.py -h"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "e6352cee-77ed-4a3d-8129-6b464c28747e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) \n",[m
[32m+[m[32m      "     BS-Seeker2 v2.1.7 - Oct. 23, 2018\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Reference genome file: /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta\n",[m
[32m+[m[32m      "Reduced Representation Bisulfite Sequencing: True\n",[m
[32m+[m[32m      "Short reads aligner you are using: bowtie2\n",[m
[32m+[m[32m      "Builder path: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# indexing reference genome for BSseeker\n",[m
[32m+[m[32m    "bs_seeker2-build.py -f /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta --aligner bowtie2 -r -d /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 76,[m
[32m+[m[32m   "id": "5ddcbb9f-2da3-43b1-a617-1066a35928f4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SBATCH_ARGS: --time 4-24:00:00 --mem 80G -c 8\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/004.alignments_BS_tm/BS-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4484673\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_BS_tm\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments_BS_tm\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${IN}/${NAME}\n",[m
[32m+[m[32m    "        COMMAND=\"bs_seeker2-align.py \\\n",[m
[32m+[m[32m    "            -i ${IN}/$NAME \\\n",[m
[32m+[m[32m    "            -r \\\n",[m
[32m+[m[32m    "            --aligner bowtie2 \\\n",[m
[32m+[m[32m    "            -o ${OUT}/${PREFIX}.bam \\\n",[m
[32m+[m[32m    "            -g ${GENOME}/GCF_002234675.1_ASM223467v1_genomic.fasta \\\n",[m
[32m+[m[32m    "            -d ${GENOME}/BSseeker2-index \\\n",[m
[32m+[m[32m    "            --temp_dir=${OUT}/TMP/ \\\n",[m
[32m+[m[32m    "            --bt2-p 4\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/BS-align --time 24:00:00 --mem 10G -c 1| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 81,[m
[32m+[m[32m   "id": "a2b29e12-8dda-4404-b5df-aae013e70a3c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 55,[m
[32m+[m[32m   "id": "b9aabc7b-1fb3-4d13-a010-4fb159ea9b58",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Loading \u001b[1mFastQC/0.11.7\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[91mERROR\u001b[0m: Conflicting 'FastQC' is loaded\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 02:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/005.fastq_BS_tm/fastqc-BS_tm-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4483213\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\" # Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments_BS_tm\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/005.fastq_BS_tm\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.bam`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-BS_tm-logs --time 02:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 58,[m
[32m+[m[32m   "id": "196e27c0-8347-44de-bc68-607daf9c15f1",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709586683.9206378-841825;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/JM/005.fastq_BS_tm\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m189/189\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 47 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.fastq_BS_tm/QC.alignments_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.fastq_BS_tm/QC.alignments_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 005.fastq_BS_tm -i QC.alignments -o 005.fastq_BS_tm"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 79,[m
[32m+[m[32m   "id": "8416d974-3e2b-489c-8763-464589e6a139",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SBATCH_ARGS: --time 24:00:00 --mem 20 -c 2\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/007.meth_extraction_BS_tm/BS_extract\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4505706\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments_BS_tm\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction_BS_tm\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.bam`\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_meth_extract_BS_tm\"}'`\n",[m
[32m+[m[32m    "        #echo $NAME\n",[m
[32m+[m[32m    "        COMMAND=\"bs_seeker2-call_methylation.py \\\n",[m
[32m+[m[32m    "            -i ${IN}/$NAME \\\n",[m
[32m+[m[32m    "            -o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "            -d ${GENOME}/BSseeker2-index/GCF_002234675.1_ASM223467v1_genomic.fasta_rrbs_20_500_bowtie2/\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/BS_extract --time 24:00:00 --mem 8G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1be44dfc-32ae-4e64-9145-0844b8093894",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 7. Methylation extraction"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 26,[m
[32m+[m[32m   "id": "765ab234-84b0-440b-b723-566a2b9a0836",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 5-01:00:00 --mem 20G -c 6\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/007.meth_extraction/meth-extract\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 47\n",[m
[32m+[m[32m      "Submitted batch job 4468888\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "FILES=`find ${IN}/ -type f -name \"*.bam\"`\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"bismark_methylation_extractor \\\n",[m
[32m+[m[32m    "                ${file} \\\n",[m
[32m+[m[32m    "                -s \\\n",[m
[32m+[m[32m    "                --merge_non_CpG \\\n",[m
[32m+[m[32m    "                --cytosine_report \\\n",[m
[32m+[m[32m    "                --scaffolds \\\n",[m
[32m+[m[32m    "                --genome_folder ${GENOME} \\\n",[m
[32m+[m[32m    "                --multicore 6 \\\n",[m
[32m+[m[32m    "                -o ${OUT}\"\n",[m
[32m+[m[32m    "      echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/meth-extract --time 5-01:00:00 --mem 4G -c 1| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "id": "a79f72c3-4b64-4e6a-99b9-5850e8e030fb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM\n",[m
[32m+[m[32m    "mkdir -p 007b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "id": "bd0d2f6f-de65-4f03-a15b-ff4cf2fccaa9",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cp 007.meth_extraction/*CpG_report.txt 007b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 38,[m
[32m+[m[32m   "id": "d0f06320-01ee-467d-9a82-5602a6fc2168",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/007b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 30,[m
[32m+[m[32m   "id": "a6faa41b-2d40-4b6f-bd31-27f8fe353734",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for i in *CpG_report.txt; do awk '{if ($4 > 0) print}' $i > $i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "67750aa2-a035-41fe-a473-5eaaa5ecd7de",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "##### Extracting all methylation sites"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 42,[m
[32m+[m[32m   "id": "934a5a83-a227-4fc9-a6eb-d392d780dc21",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "awk: fatal: cannot open file `JM_001_trimmed_bismark_bt2.CpG_report.txt.nonzero-checkpoint.txt' for reading (No such file or directory)\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "123",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find . -name \"*.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "id": "f7068525-3f61-4fb0-8a1f-2a21c1698bc3",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1708648365.609395-260321;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: MethylationExtraction_QC\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfndxa/Paua_clock/01_pilot_run/010.extraction\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m433/433\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 24 methextract reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 010.extraction/MethylationExtraction_QC_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 010.extraction/MethylationExtraction_QC_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 010.extraction/ -i MethylationExtraction_QC -o 010.extraction/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "a7020327-5aba-421e-9fcc-ceddac46cd7f",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Methyl extraction (LOCAL)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 111,[m
[32m+[m[32m   "id": "366f754b-e37b-48b3-aa23-bd4a6181b268",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "bismark_methylation_extractor cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam -s --merge_non_CpG --cytosine_report --scaffolds --genome_folder /workspace/cfngle/raw-data/JM/rgenome --multicore 6 -o /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#FILES=`find ${IN}/ -type f -name \"*.bam\"`\n",[m
[32m+[m[32m    "FILES=\"cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"bismark_methylation_extractor \\\n",[m
[32m+[m[32m    "                ${file} \\\n",[m
[32m+[m[32m    "                -s \\\n",[m
[32m+[m[32m    "                --merge_non_CpG \\\n",[m
[32m+[m[32m    "                --cytosine_report \\\n",[m
[32m+[m[32m    "                --scaffolds \\\n",[m
[32m+[m[32m    "                --genome_folder ${GENOME} \\\n",[m
[32m+[m[32m    "                --multicore 6 \\\n",[m
[32m+[m[32m    "                -o ${OUT}\"\n",[m
[32m+[m[32m    "      echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done #| abatch -j ${OUT}/meth-extract --time 23:59:00 --mem 10G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "c9750de8-acce-491d-87f5-27b0b1e11cf2",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      " *** Bismark methylation extractor version v0.23.0 ***\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Output will be written into the directory: /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/\n",[m
[32m+[m[32m      "Setting the option '--bedGraph' since this is required for the genome-wide cytosine report\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Summarising Bismark methylation extractor parameters:\n",[m
[32m+[m[32m      "===============================================================\n",[m
[32m+[m[32m      "Bismark single-end SAM format specified (default)\n",[m
[32m+[m[32m      "Number of cores to be used: 6\n",[m
[32m+[m[32m      "Merge CHG and CHH context to non-CpG context specified\n",[m
[32m+[m[32m      "Output path specified as: /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Summarising bedGraph parameters:\n",[m
[32m+[m[32m      "===============================================================\n",[m
[32m+[m[32m      "Generating additional output in bedGraph and coverage format\n",[m
[32m+[m[32m      "bedGraph format:\t<Chromosome> <Start Position> <End Position> <Methylation Percentage>\n",[m
[32m+[m[32m      "coverage format:\t<Chromosome> <Start Position> <End Position> <Methylation Percentage> <count methylated> <count non-methylated>\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Using a cutoff of 1 read(s) to report cytosine positions\n",[m
[32m+[m[32m      "Reporting and sorting cytosine methylation information in CpG context only (default)\n",[m
[32m+[m[32m      "The bedGraph UNIX sort command will use the following memory setting:\t'2G'. Temporary directory used for sorting is the output directory\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Summarising genome-wide cytosine methylation report parameters:\n",[m
[32m+[m[32m      "===============================================================\n",[m
[32m+[m[32m      "Generating comprehensive genome-wide cytosine report\n",[m
[32m+[m[32m      "(output format: <Chromosome> <Position> <Strand> <count methylated> <count non-methylated>  <C-context>  <trinucleotide context> )\n",[m
[32m+[m[32m      "Reporting cytosine methylation in CpG context only (default)\n",[m
[32m+[m[32m      "Using 1-based genomic coordinates (default)\n",[m
[32m+[m[32m      "Genome folder was specified as /workspace/cfngle/raw-data/JM/rgenome/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Checking file >>/workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam<< for signs of file truncation...\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in CpG context from the original top strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OT_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in CpG context from the complementary to original top strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOT_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in CpG context from the complementary to original bottom strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOB_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in CpG context from the original bottom strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OB_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in any other context from the original top strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OT_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in any other context from the complementary to original top strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOT_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in any other context from the complementary to original bottom strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOB_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "Writing result file containing methylation information for C in any other context from the original bottom strand to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OB_JM_036_trimmed_bismark_bt2.bam.txt\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in Bismark result file /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "skipping SAM header line:\t@HD\tVN:1.0\tSO:unsorted\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019859.2\tLN:37713152\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019860.2\tLN:25379070\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019861.2\tLN:38248663\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019862.2\tLN:32868862\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019863.2\tLN:33205099\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019864.2\tLN:32246747\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019865.2\tLN:34573382\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019866.2\tLN:26239357\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019867.2\tLN:33399407\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019868.2\tLN:31218526\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019869.2\tLN:28210532\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019870.2\tLN:30543476\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019871.2\tLN:33825776\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019872.2\tLN:30598983\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019873.2\tLN:30476034\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019874.2\tLN:32958677\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019875.2\tLN:31792230\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019876.2\tLN:30918796\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019877.2\tLN:25472880\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019878.2\tLN:25942153\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019879.2\tLN:31148813\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019880.2\tLN:28976614\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019881.2\tLN:24400806\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_019882.2\tLN:23682337\n",[m
[32m+[m[32m      "skipping SAM header line:\t@SQ\tSN:NC_004387.1\tLN:16714\n",[m
[32m+[m[32m      "skipping SAM header line:\t@PG\tID:Bismark\tVN:v0.23.0\tCL:\"bismark --genome /workspace/cfngle/raw-data/JM/rgenome /workspace/cfngle/raw-data/JM/002.trim_galore/JM_036_trimmed.fq --o /workspace/cfngle/raw-data/JM/004.alignments_BS_local/JM_036_Alignments --multicore 5 --non_directional --local\"\n",[m
[32m+[m[32m      "skipping SAM header line:\t@PG\tID:samtools\tPN:samtools\tPP:Bismark\tVN:1.10\tCL:/usr/bin/samtools view -bSh -\n",[m
[32m+[m[32m      "skipping SAM header line:\t@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.10\tCL:/usr/bin/samtools view -h /workspace/cfngle/raw-data/JM/004.alignments_BS_local/JM_036_Alignments/JM_036_trimmed.fq.temp.1_bismark_bt2.bam\n",[m
[32m+[m[32m      "skipping SAM header line:\t@PG\tID:samtools.2\tPN:samtools\tPP:samtools.1\tVN:1.10\tCL:/usr/bin/samtools view -bSh -\n",[m
[32m+[m[32m      "skipping SAM header line:\t@PG\tID:samtools.3\tPN:samtools\tPP:samtools.2\tVN:1.10\tCL:/usr/bin/samtools view -h /workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 500000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1000000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 1500000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2000000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 2500000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3000000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 3500000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4000000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 4500000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Processed lines: 5000000\n",[m
[32m+[m[32m      "Now waiting for all child processes to complete\n",[m
[32m+[m[32m      "Finished processing child process. Exiting..\n",[m
[32m+[m[32m      "Finished processing child process. Exiting..\n",[m
[32m+[m[32m      "Finished processing child process. Exiting..\n",[m
[32m+[m[32m      "Finished processing child process. Exiting..\n",[m
[32m+[m[32m      "Finished processing child process. Exiting..\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Merging individual splitting reports into overall report: '/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt'\n",[m
[32m+[m[32m      "Merging from these individual files:\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.1\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.2\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.3\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.4\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.5\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.6\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Processed 5255814 lines in total\n",[m
[32m+[m[32m      "Total number of methylation call strings processed: 5255814\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Final Cytosine Methylation Report\n",[m
[32m+[m[32m      "=================================\n",[m
[32m+[m[32m      "Total number of C's analysed:\t74159684\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total methylated C's in CpG context:\t6481638\n",[m
[32m+[m[32m      "Total methylated C's in CHG context:\t135681\n",[m
[32m+[m[32m      "Total methylated C's in CHH context:\t740682\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total C to T conversions in CpG context:\t4800346\n",[m
[32m+[m[32m      "Total C to T conversions in CHG context:\t17507335\n",[m
[32m+[m[32m      "Total C to T conversions in CHH context:\t44494002\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "C methylated in CpG context:\t57.5%\n",[m
[32m+[m[32m      "C methylated in non-CpG context:\t1.4%\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Merging individual M-bias reports into overall M-bias statistics from these 6 individual files:\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.1.mbias\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.2.mbias\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.3.mbias\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.4.mbias\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.5.mbias\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2_splitting_report.txt.6.mbias\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Determining maximum read length for M-Bias plot\n",[m
[32m+[m[32m      "Maximum read length of Read 1: 70\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Determining maximum read length for M-Bias plot\n",[m
[32m+[m[32m      "Maximum read length of Read 1: 70\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Deleting unused files ...\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OT_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOT_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOB_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OB_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OT_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOT_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOB_JM_036_trimmed_bismark_bt2.txt contains data ->\tkept\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OB_JM_036_trimmed_bismark_bt2.bam.txt contains data ->\tkept\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Using these input files: /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OT_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOT_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOB_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OB_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OT_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOT_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_CTOB_JM_036_trimmed_bismark_bt2.txt /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/Non_CpG_OB_JM_036_trimmed_bismark_bt2.bam.txt\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Summary of parameters for bismark2bedGraph conversion:\n",[m
[32m+[m[32m      "======================================================\n",[m
[32m+[m[32m      "bedGraph output:\t\tJM_036_trimmed_bismark_bt2.bedGraph.gz\n",[m
[32m+[m[32m      "output directory:\t\t>/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/<\n",[m
[32m+[m[32m      "remove whitespaces:\t\tno\n",[m
[32m+[m[32m      "CX context:\t\t\tno (CpG context only, default)\n",[m
[32m+[m[32m      "No-header selected:\t\tno\n",[m
[32m+[m[32m      "Sorting method:\t\t\tUnix sort-based (smaller memory footprint, but slower)\n",[m
[32m+[m[32m      "Sort buffer size:\t\t2G\n",[m
[32m+[m[32m      "Coverage threshold:\t\t1\n",[m
[32m+[m[32m      "=============================================================================\n",[m
[32m+[m[32m      "Methylation information will now be written into a bedGraph and coverage file\n",[m
[32m+[m[32m      "=============================================================================\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Using the following files as Input:\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OT_JM_036_trimmed_bismark_bt2.txt\t/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOT_JM_036_trimmed_bismark_bt2.txt\t/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_CTOB_JM_036_trimmed_bismark_bt2.txt\t/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/CpG_OB_JM_036_trimmed_bismark_bt2.txt\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Writing bedGraph to file: JM_036_trimmed_bismark_bt2.bedGraph.gz\n",[m
[32m+[m[32m      "Also writing out a coverage file including counts methylated and unmethylated residues to file: JM_036_trimmed_bismark_bt2.bismark.cov.gz\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Changed directory to /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/\n",[m
[32m+[m[32m      "The genome of interest was specified to contain gazillions of chromosomes or scaffolds. Merging all input files and sorting everything in memory instead of writing out individual chromosome files...\n",[m
[32m+[m[32m      "Writing all merged methylation calls to temp file JM_036_trimmed_bismark_bt2.bedGraph.gz.methylation_calls.merged\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Finished writing methylation calls from CpG_OT_JM_036_trimmed_bismark_bt2.txt to merged temp file\n",[m
[32m+[m[32m      "Finished writing methylation calls from CpG_CTOT_JM_036_trimmed_bismark_bt2.txt to merged temp file\n",[m
[32m+[m[32m      "Finished writing methylation calls from CpG_CTOB_JM_036_trimmed_bismark_bt2.txt to merged temp file\n",[m
[32m+[m[32m      "Finished writing methylation calls from CpG_OB_JM_036_trimmed_bismark_bt2.txt to merged temp file\n",[m
[32m+[m[32m      "Sorting input file JM_036_trimmed_bismark_bt2.bedGraph.gz.methylation_calls.merged by positions (using -S of 2G)\n",[m
[32m+[m[32m      "Successfully deleted the temporary input file JM_036_trimmed_bismark_bt2.bedGraph.gz.methylation_calls.merged\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Finished BedGraph conversion ...\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Output will be written into the directory: /workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/\n",[m
[32m+[m[32m      "Summary of parameters for genome-wide cytosine report:\n",[m
[32m+[m[32m      "==============================================================================\n",[m
[32m+[m[32m      "Coverage infile:\t\t\t\tJM_036_trimmed_bismark_bt2.bismark.cov.gz\n",[m
[32m+[m[32m      "Output directory:\t\t\t\t>/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/<\n",[m
[32m+[m[32m      "Parent directory:\t\t\t\t>/workspace/cfngle/raw-data/JM/007.meth_extraction_BM_local/<\n",[m
[32m+[m[32m      "Genome directory:\t\t\t\t>/workspace/cfngle/raw-data/JM/rgenome/<\n",[m
[32m+[m[32m      "Coverage threshold\t\t\t\t0 (all positions will be reported, default)\n",[m
[32m+[m[32m      "CX context:\t\t\t\t\tno (CpG context only, default)\n",[m
[32m+[m[32m      "Genome coordinates used:\t\t\t1-based (default)\n",[m
[32m+[m[32m      "GZIP compression:\t\t\t\tno\n",[m
[32m+[m[32m      "Split by chromosome:\t\t\t\tno\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now reading in and storing sequence information of the genome specified in: /workspace/cfngle/raw-data/JM/rgenome/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Couldn't find files ending in .fa, trying .fa.gz instead\n",[m
[32m+[m[32m      "chr NC_019859.2 (37713152 bp)\n",[m
[32m+[m[32m      "chr NC_019860.2 (25379070 bp)\n",[m
[32m+[m[32m      "chr NC_019861.2 (38248663 bp)\n",[m
[32m+[m[32m      "chr NC_019862.2 (32868862 bp)\n",[m
[32m+[m[32m      "chr NC_019863.2 (33205099 bp)\n",[m
[32m+[m[32m      "chr NC_019864.2 (32246747 bp)\n",[m
[32m+[m[32m      "chr NC_019865.2 (34573382 bp)\n",[m
[32m+[m[32m      "chr NC_019866.2 (26239357 bp)\n",[m
[32m+[m[32m      "chr NC_019867.2 (33399407 bp)\n",[m
[32m+[m[32m      "chr NC_019868.2 (31218526 bp)\n",[m
[32m+[m[32m      "chr NC_019869.2 (28210532 bp)\n",[m
[32m+[m[32m      "chr NC_019870.2 (30543476 bp)\n",[m
[32m+[m[32m      "chr NC_019871.2 (33825776 bp)\n",[m
[32m+[m[32m      "chr NC_019872.2 (30598983 bp)\n",[m
[32m+[m[32m      "chr NC_019873.2 (30476034 bp)\n",[m
[32m+[m[32m      "chr NC_019874.2 (32958677 bp)\n",[m
[32m+[m[32m      "chr NC_019875.2 (31792230 bp)\n",[m
[32m+[m[32m      "chr NC_019876.2 (30918796 bp)\n",[m
[32m+[m[32m      "chr NC_019877.2 (25472880 bp)\n",[m
[32m+[m[32m      "chr NC_019878.2 (25942153 bp)\n",[m
[32m+[m[32m      "chr NC_019879.2 (31148813 bp)\n",[m
[32m+[m[32m      "chr NC_019880.2 (28976614 bp)\n",[m
[32m+[m[32m      "chr NC_019881.2 (24400806 bp)\n",[m
[32m+[m[32m      "chr NC_019882.2 (23682337 bp)\n",[m
[32m+[m[32m      "chr NC_004387.1 (16714 bp)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Stored sequence information of 25 chromosomes/scaffolds in total\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "==============================================================================\n",[m
[32m+[m[32m      "Methylation information will now be written into a genome-wide cytosine report\n",[m
[32m+[m[32m      "==============================================================================\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Adding context-specific methylation summaries\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      ">>> Writing genome-wide cytosine report to: JM_036_trimmed_bismark_bt2.CpG_report.txt <<<\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      ">>> Writing all cytosine context summary file to: JM_036_trimmed_bismark_bt2.cytosine_context_summary.txt <<<\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Storing all covered cytosine positions for chromosome: NC_004387.1\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_004387.1 (stored 212 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019859.2 (stored 76806 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019860.2 (stored 63713 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019861.2 (stored 62867 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019862.2 (stored 55535 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019863.2 (stored 55690 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019864.2 (stored 54900 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019865.2 (stored 57554 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019866.2 (stored 58411 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019867.2 (stored 57391 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019868.2 (stored 50348 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019869.2 (stored 54578 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019870.2 (stored 63179 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019871.2 (stored 60561 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019872.2 (stored 51507 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019873.2 (stored 50313 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019874.2 (stored 57173 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019875.2 (stored 58525 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019876.2 (stored 63440 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019877.2 (stored 46607 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019878.2 (stored 44831 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019879.2 (stored 52465 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019880.2 (stored 63234 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for chromosome NC_019881.2 (stored 58193 different covered positions)\n",[m
[32m+[m[32m      "Writing cytosine report for last chromosome NC_019882.2 (stored 44357 different covered positions)\n",[m
[32m+[m[32m      "Finished writing out cytosine report for covered chromosomes (processed 25 chromosomes/scaffolds in total)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Now processing chromosomes that were not covered by any methylation calls in the coverage file...\n",[m
[32m+[m[32m      "All chromosomes in the genome were covered by at least some reads. coverage2cytosine processing complete.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Finished generating genome-wide cytosine report\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## verifying \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/JM\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/JM/rgenome\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#FILES=`find ${IN}/ -type f -name \"*.bam\"`\n",[m
[32m+[m[32m    "FILES=\"/workspace/cfngle/raw-data/JM/004.alignments_BM_local/JM_036_Alignments/JM_036_trimmed_bismark_bt2.bam\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "bismark_methylation_extractor ${FILES} -s --merge_non_CpG --cytosine_report --scaffolds --genome_folder ${GENOME} --multicore 6 -o ${OUT}\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "bc70ae95-e782-43fa-a3b5-162f4bc153ae",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM\n",[m
[32m+[m[32m    "mkdir -p 007b.extraction_nonzero_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 100,[m
[32m+[m[32m   "id": "c500480d-b0b0-4225-ad79-46c45f70edf6",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cp 007.meth_extraction_BM_local/*CpG_report.txt 007b.extraction_nonzero_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "id": "1fe08a6f-be76-4be0-9fe1-83e3fd389fbb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## cp 007.meth_extraction_BM_local/JM_036_trimmed_bismark_bt2.CpG_report.txt 007b.extraction_nonzero_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "cab380b6-fd58-4436-8c0f-919cb840f0b1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/JM/007b.extraction_nonzero_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 102,[m
[32m+[m[32m   "id": "c229e513-2d97-437c-a34c-7374f8a262e4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "for i in *CpG_report.txt; do awk '{if ($4 > 0) print}' $i > $i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "id": "ce7edb5a-1bc9-4d7a-bf5d-2c0726a6e9ea",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## for i in JM_036_trimmed_bismark_bt2.CpG_report.txt; do awk '{if ($4 > 0) print}' $i > $i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "6eaddbe1-bc50-4301-89a0-ef628d3b78d8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "##### Extracting all methylation sites"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 103,[m
[32m+[m[32m   "id": "956b482e-62ae-4e68-be42-6d2eed071bd2",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find . -name \"*nonzero.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "82da6888-28e6-44c9-a881-7a162410d87d",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find . -name \"JM_036_trimmed_bismark_bt2.CpG_report.txt.nonzero.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "b3bb9d3d-89bc-4fa5-8eaf-b0b45b83225b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "mv *MK.txt /workspace/cfngle/raw-data/JM/008.methylkit_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "e5bb52aa-11a0-4802-8ffb-c45a7926b618",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/00a_RRBS_ZF.ipynb b/00a_RRBS_ZF.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..0bcd024[m
[1m--- /dev/null[m
[1m+++ b/00a_RRBS_ZF.ipynb[m
[36m@@ -0,0 +1,4618 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "4d1f29d1-809b-4e6b-8aac-79fc09282f80",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# 00a RRBS data analysis ZF\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Author: Gabriel Ecker Eckhofen (adapted from Dafni Anastasiadi)\n",[m
[32m+[m[32m    "Date: Febuary 2024"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "id": "af2dd13e-3345-467c-8874-ea7f9dcb08dd",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Z528_HL7CKDMXX_CGCTACAT_L001_R1\n",[m
[32m+[m[32m      "Z532_HL7CKDMXX_CTCCTAGT_L001_R1\n",[m
[32m+[m[32m      "Z536_HL7CKDMXX_GTACACCT_L001_R1\n",[m
[32m+[m[32m      "Z548_HL7CKDMXX_ACGGACTT_L001_R1\n",[m
[32m+[m[32m      "Z552_HC5Y2DRXX_AACCAG_L001_R1\n",[m
[32m+[m[32m      "Z556_HL7CKDMXX_ACGCTTCT_L001_R1\n",[m
[32m+[m[32m      "Z27_HL7CKDMXX_TGCTGTGA_L001_R1\n",[m
[32m+[m[32m      "Z34_HL7CKDMXX_CAGGTTCA_L001_R1\n",[m
[32m+[m[32m      "Z55_HL7CKDMXX_GCCTTAAC_L001_R1\n",[m
[32m+[m[32m      "Z62_HL7CKDMXX_GCCAGAAT_L001_R1\n",[m
[32m+[m[32m      "Z83_HL7CKDMXX_TCCTGGTA_L001_R1\n",[m
[32m+[m[32m      "Z90_HL7CKDMXX_GACATCTC_L001_R1\n",[m
[32m+[m[32m      "Z201_HC5Y2DRXX_TGGTGA_L001_R1\n",[m
[32m+[m[32m      "Z205_HC5Y2DRXX_AGTGAG_L001_R1\n",[m
[32m+[m[32m      "Z209_HC5Y2DRXX_GCACTA_L001_R1\n",[m
[32m+[m[32m      "Z213_HC5Y2DRXX_ACCTCA_L001_R1\n",[m
[32m+[m[32m      "Z249_HL7CKDMXX_GAACCTTC_L001_R1\n",[m
[32m+[m[32m      "Z253_HL7CKDMXX_CTATCCAC_L001_R1\n",[m
[32m+[m[32m      "Z265_HC5Y2DRXX_GTGCTT_L001_R1\n",[m
[32m+[m[32m      "Z269_HL7CKDMXX_AGAACCAG_L001_R1\n",[m
[32m+[m[32m      "Z281_HL7CKDMXX_ATTCCGCT_L001_R1\n",[m
[32m+[m[32m      "Z285_HL7CKDMXX_AATGACGC_L001_R1\n",[m
[32m+[m[32m      "Z321_HC5Y2DRXX_AAGCCT_L001_R1\n",[m
[32m+[m[32m      "Z329_HL7CKDMXX_ACTGCACT_L001_R1\n",[m
[32m+[m[32m      "Z333_HL7CKDMXX_CGTCTAAC_L001_R1\n",[m
[32m+[m[32m      "Z353_HL7CKDMXX_GACTACGA_L001_R1\n",[m
[32m+[m[32m      "Z357_HL7CKDMXX_CGACCTAA_L001_R1\n",[m
[32m+[m[32m      "Z361_HL7CKDMXX_AACCGAAC_L001_R1\n",[m
[32m+[m[32m      "Z433_HL7CKDMXX_AAGTCCTC_L001_R1\n",[m
[32m+[m[32m      "Z441_HC5Y2DRXX_GTCGTA_L001_R1\n",[m
[32m+[m[32m      "Z445_HL7CKDMXX_CCACATTG_L001_R1\n",[m
[32m+[m[32m      "Z477_HL7CKDMXX_GAATGGCA_L001_R1\n",[m
[32m+[m[32m      "Z485_HL7CKDMXX_ATCGTGGT_L001_R1\n",[m
[32m+[m[32m      "Z489_HL7CKDMXX_GTACCACA_L001_R1\n",[m
[32m+[m[32m      "Z560_HL7CKDMXX_AGCAGACA_L001_R1\n",[m
[32m+[m[32m      "Z564_HC5Y2DRXX_AAGAGG_L001_R1\n",[m
[32m+[m[32m      "Z568_HL7CKDMXX_AACTCGGA_L001_R1\n",[m
[32m+[m[32m      "Z157_HL7CKDMXX_ACTCCTAC_L001_R1\n",[m
[32m+[m[32m      "Z165_HL7CKDMXX_TACATCGG_L001_R1\n",[m
[32m+[m[32m      "Z173_HL7CKDMXX_CCTTAGGT_L001_R1\n",[m
[32m+[m[32m      "Z180_HL7CKDMXX_CCACAACA_L001_R1\n",[m
[32m+[m[32m      "Z225_HL7CKDMXX_CAGTGCTT_L001_R1\n",[m
[32m+[m[32m      "Z229_HL7CKDMXX_TAGTGCCA_L001_R1\n",[m
[32m+[m[32m      "Z233_HL7CKDMXX_AGGCAATG_L001_R1\n",[m
[32m+[m[32m      "Z237_HL7CKDMXX_GCTACAAC_L001_R1\n",[m
[32m+[m[32m      "Z257_HL7CKDMXX_ACGATCAG_L001_R1\n",[m
[32m+[m[32m      "Z261_HL7CKDMXX_GAAGACTG_L001_R1\n",[m
[32m+[m[32m      "Z289_HL7CKDMXX_ACCAAGCA_L001_R1\n",[m
[32m+[m[32m      "Z293_HL7CKDMXX_GTCGAGAA_L001_R1\n",[m
[32m+[m[32m      "Z305_HC5Y2DRXX_GAGTCA_L001_R1\n",[m
[32m+[m[32m      "Z313_HC5Y2DRXX_CGTAGA_L001_R1\n",[m
[32m+[m[32m      "Z317_HL7CKDMXX_CCTATACC_L002_R1\n",[m
[32m+[m[32m      "Z385_HC5Y2DRXX_GGAGAA_L001_R1\n",[m
[32m+[m[32m      "Z389_HL7CKDMXX_TCACTCGA_L002_R1\n",[m
[32m+[m[32m      "Z393_HL7CKDMXX_TCGTGCAT_L002_R1\n",[m
[32m+[m[32m      "Z401_HL7CKDMXX_TAGGAGCT_L002_R1\n",[m
[32m+[m[32m      "Z405_HL7CKDMXX_TCTACGCA_L002_R1\n",[m
[32m+[m[32m      "Z409_HL7CKDMXX_TAACGTCG_L002_R1\n",[m
[32m+[m[32m      "Z449_HL7CKDMXX_TCTAGTCC_L002_R1\n",[m
[32m+[m[32m      "Z453_HL7CKDMXX_CTCTCAGA_L002_R1\n",[m
[32m+[m[32m      "Z12_HL7CKDMXX_ACAACAGC_L002_R1\n",[m
[32m+[m[32m      "Z20_HL7CKDMXX_ACCATCCT_L002_R1\n",[m
[32m+[m[32m      "Z41_HL7CKDMXX_CCAACACT_L002_R1\n",[m
[32m+[m[32m      "Z48_HL7CKDMXX_AACGCCTT_L002_R1\n",[m
[32m+[m[32m      "Z69_HL7CKDMXX_CCGGAATA_L002_R1\n",[m
[32m+[m[32m      "Z76_HL7CKDMXX_CTGACTAC_L002_R1\n",[m
[32m+[m[32m      "Z141_HL7CKDMXX_CTACATCC_L002_R1\n",[m
[32m+[m[32m      "Z145_HC5Y2DRXX_AGCATG_L001_R1\n",[m
[32m+[m[32m      "Z149_HL7CKDMXX_CTCCAATC_L002_R1\n",[m
[32m+[m[32m      "Z1_HL7CKDMXX_TCCAACTG_L002_R1\n",[m
[32m+[m[32m      "Z3_HL7CKDMXX_ATCTGACC_L002_R1\n",[m
[32m+[m[32m      "Z97_HL7CKDMXX_CGCAACTA_L002_R1\n",[m
[32m+[m[32m      "Z101_HL7CKDMXX_CTCGACTT_L002_R1\n",[m
[32m+[m[32m      "Z109_HL7CKDMXX_ACTCTGAG_L002_R1\n",[m
[32m+[m[32m      "Z133_HL7CKDMXX_ATGACAGG_L002_R1\n",[m
[32m+[m[32m      "Z241_HL7CKDMXX_CGTCCATT_L002_R1\n",[m
[32m+[m[32m      "Z273_HL7CKDMXX_TCTAGGAG_L002_R1\n",[m
[32m+[m[32m      "Z277_HL7CKDMXX_TCCATTGC_L002_R1\n",[m
[32m+[m[32m      "Z297_HL7CKDMXX_CCAAGTAG_L002_R1\n",[m
[32m+[m[32m      "Z301_HL7CKDMXX_GTGATCCA_L002_R1\n",[m
[32m+[m[32m      "Z341_HL7CKDMXX_CATACGGA_L002_R1\n",[m
[32m+[m[32m      "Z345_HL7CKDMXX_CATTCGTC_L002_R1\n",[m
[32m+[m[32m      "Z349_HL7CKDMXX_ACTCTCCA_L002_R1\n",[m
[32m+[m[32m      "Z369_HL7CKDMXX_AACACTGG_L002_R1\n",[m
[32m+[m[32m      "Z373_HL7CKDMXX_CTAGCTCA_L002_R1\n",[m
[32m+[m[32m      "Z377_HL7CKDMXX_GCTCAGTT_L002_R1\n",[m
[32m+[m[32m      "Z381_HL7CKDMXX_GCACACAA_L002_R1\n",[m
[32m+[m[32m      "Z421_HL7CKDMXX_AACTTGCC_L002_R1\n",[m
[32m+[m[32m      "Z425_HL7CKDMXX_CTCGAACA_L002_R1\n",[m
[32m+[m[32m      "Z429_HL7CKDMXX_CAAGCCAA_L002_R1\n",[m
[32m+[m[32m      "Z461_HL7CKDMXX_AAGGACCA_L002_R1\n",[m
[32m+[m[32m      "Z465_HL7CKDMXX_ACAGCAAG_L002_R1\n",[m
[32m+[m[32m      "Z469_HL7CKDMXX_TGCGTAAC_L002_R1\n",[m
[32m+[m[32m      "Z576_HL7CKDMXX_AGCCAACT_L002_R1\n",[m
[32m+[m[32m      "Z580_HL7CKDMXX_GTCTCATC_L002_R1\n",[m
[32m+[m[32m      "Z584_HL7CKDMXX_CCTGTCAA_L002_R1\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/raw-reads\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Fetch metadata for a specific BioSample ID\n",[m
[32m+[m[32m    "filenames=(\"Z528_HL7CKDMXX_CGCTACAT_L001_R1.fastq\" \"Z532_HL7CKDMXX_CTCCTAGT_L001_R1.fastq\" \"Z536_HL7CKDMXX_GTACACCT_L001_R1.fastq\" \"Z548_HL7CKDMXX_ACGGACTT_L001_R1.fastq\" \"Z552_HC5Y2DRXX_AACCAG_L001_R1.fastq\" \"Z556_HL7CKDMXX_ACGCTTCT_L001_R1.fastq\" \"Z27_HL7CKDMXX_TGCTGTGA_L001_R1.fastq\" \"Z34_HL7CKDMXX_CAGGTTCA_L001_R1.fastq\" \"Z55_HL7CKDMXX_GCCTTAAC_L001_R1.fastq\" \"Z62_HL7CKDMXX_GCCAGAAT_L001_R1.fastq\" \"Z83_HL7CKDMXX_TCCTGGTA_L001_R1.fastq\" \"Z90_HL7CKDMXX_GACATCTC_L001_R1.fastq\" \"Z201_HC5Y2DRXX_TGGTGA_L001_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z205_HC5Y2DRXX_AGTGAG_L001_R1.fastq\" \"Z209_HC5Y2DRXX_GCACTA_L001_R1.fastq\" \"Z213_HC5Y2DRXX_ACCTCA_L001_R1.fastq\" \"Z249_HL7CKDMXX_GAACCTTC_L001_R1.fastq\" \"Z253_HL7CKDMXX_CTATCCAC_L001_R1.fastq\" \"Z265_HC5Y2DRXX_GTGCTT_L001_R1.fastq\" \"Z269_HL7CKDMXX_AGAACCAG_L001_R1.fastq\" \"Z281_HL7CKDMXX_ATTCCGCT_L001_R1.fastq\" \"Z285_HL7CKDMXX_AATGACGC_L001_R1.fastq\" \"Z321_HC5Y2DRXX_AAGCCT_L001_R1.fastq\" \"Z329_HL7CKDMXX_ACTGCACT_L001_R1.fastq\" \"Z333_HL7CKDMXX_CGTCTAAC_L001_R1.fastq\" \"Z353_HL7CKDMXX_GACTACGA_L001_R1.fastq\" \"Z357_HL7CKDMXX_CGACCTAA_L001_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z361_HL7CKDMXX_AACCGAAC_L001_R1.fastq\" \"Z433_HL7CKDMXX_AAGTCCTC_L001_R1.fastq\" \"Z441_HC5Y2DRXX_GTCGTA_L001_R1.fastq\" \"Z445_HL7CKDMXX_CCACATTG_L001_R1.fastq\" \"Z477_HL7CKDMXX_GAATGGCA_L001_R1.fastq\" \"Z485_HL7CKDMXX_ATCGTGGT_L001_R1.fastq\" \"Z489_HL7CKDMXX_GTACCACA_L001_R1.fastq\" \"Z560_HL7CKDMXX_AGCAGACA_L001_R1.fastq\" \"Z564_HC5Y2DRXX_AAGAGG_L001_R1.fastq\" \"Z568_HL7CKDMXX_AACTCGGA_L001_R1.fastq\" \"Z157_HL7CKDMXX_ACTCCTAC_L001_R1.fastq\" \"Z165_HL7CKDMXX_TACATCGG_L001_R1.fastq\" \"Z173_HL7CKDMXX_CCTTAGGT_L001_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z180_HL7CKDMXX_CCACAACA_L001_R1.fastq\" \"Z225_HL7CKDMXX_CAGTGCTT_L001_R1.fastq\" \"Z229_HL7CKDMXX_TAGTGCCA_L001_R1.fastq\" \"Z233_HL7CKDMXX_AGGCAATG_L001_R1.fastq\" \"Z237_HL7CKDMXX_GCTACAAC_L001_R1.fastq\" \"Z257_HL7CKDMXX_ACGATCAG_L001_R1.fastq\" \"Z261_HL7CKDMXX_GAAGACTG_L001_R1.fastq\" \"Z289_HL7CKDMXX_ACCAAGCA_L001_R1.fastq\" \"Z293_HL7CKDMXX_GTCGAGAA_L001_R1.fastq\" \"Z305_HC5Y2DRXX_GAGTCA_L001_R1.fastq\" \"Z313_HC5Y2DRXX_CGTAGA_L001_R1.fastq\" \"Z317_HL7CKDMXX_CCTATACC_L002_R1.fastq\" \"Z385_HC5Y2DRXX_GGAGAA_L001_R1.fastq\" \"Z389_HL7CKDMXX_TCACTCGA_L002_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z393_HL7CKDMXX_TCGTGCAT_L002_R1.fastq\" \"Z401_HL7CKDMXX_TAGGAGCT_L002_R1.fastq\" \"Z405_HL7CKDMXX_TCTACGCA_L002_R1.fastq\" \"Z409_HL7CKDMXX_TAACGTCG_L002_R1.fastq\" \"Z449_HL7CKDMXX_TCTAGTCC_L002_R1.fastq\" \"Z453_HL7CKDMXX_CTCTCAGA_L002_R1.fastq\" \"Z12_HL7CKDMXX_ACAACAGC_L002_R1.fastq\" \"Z20_HL7CKDMXX_ACCATCCT_L002_R1.fastq\" \"Z41_HL7CKDMXX_CCAACACT_L002_R1.fastq\" \"Z48_HL7CKDMXX_AACGCCTT_L002_R1.fastq\" \"Z69_HL7CKDMXX_CCGGAATA_L002_R1.fastq\" \"Z76_HL7CKDMXX_CTGACTAC_L002_R1.fastq\" \"Z141_HL7CKDMXX_CTACATCC_L002_R1.fastq\" \"Z145_HC5Y2DRXX_AGCATG_L001_R1.fastq\" \"Z149_HL7CKDMXX_CTCCAATC_L002_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z1_HL7CKDMXX_TCCAACTG_L002_R1.fastq\" \"Z3_HL7CKDMXX_ATCTGACC_L002_R1.fastq\" \"Z97_HL7CKDMXX_CGCAACTA_L002_R1.fastq\" \"Z101_HL7CKDMXX_CTCGACTT_L002_R1.fastq\" \"Z109_HL7CKDMXX_ACTCTGAG_L002_R1.fastq\" \"Z133_HL7CKDMXX_ATGACAGG_L002_R1.fastq\" \"Z241_HL7CKDMXX_CGTCCATT_L002_R1.fastq\" \"Z273_HL7CKDMXX_TCTAGGAG_L002_R1.fastq\" \"Z277_HL7CKDMXX_TCCATTGC_L002_R1.fastq\" \"Z297_HL7CKDMXX_CCAAGTAG_L002_R1.fastq\" \"Z301_HL7CKDMXX_GTGATCCA_L002_R1.fastq\" \"Z341_HL7CKDMXX_CATACGGA_L002_R1.fastq\" \n",[m
[32m+[m[32m    "\"Z345_HL7CKDMXX_CATTCGTC_L002_R1.fastq\" \"Z349_HL7CKDMXX_ACTCTCCA_L002_R1.fastq\" \"Z369_HL7CKDMXX_AACACTGG_L002_R1.fastq\" \"Z373_HL7CKDMXX_CTAGCTCA_L002_R1.fastq\" \"Z377_HL7CKDMXX_GCTCAGTT_L002_R1.fastq\" \"Z381_HL7CKDMXX_GCACACAA_L002_R1.fastq\" \"Z421_HL7CKDMXX_AACTTGCC_L002_R1.fastq\" \"Z425_HL7CKDMXX_CTCGAACA_L002_R1.fastq\" \"Z429_HL7CKDMXX_CAAGCCAA_L002_R1.fastq\" \"Z461_HL7CKDMXX_AAGGACCA_L002_R1.fastq\" \"Z465_HL7CKDMXX_ACAGCAAG_L002_R1.fastq\" \"Z469_HL7CKDMXX_TGCGTAAC_L002_R1.fastq\" \"Z576_HL7CKDMXX_AGCCAACT_L002_R1.fastq\" \"Z580_HL7CKDMXX_GTCTCATC_L002_R1.fastq\" \"Z584_HL7CKDMXX_CCTGTCAA_L002_R1.fastq\" \n",[m
[32m+[m[32m    ")\n",[m
[32m+[m[32m    "for (( i=0; i<${#filenames[@]}; i++ )); do\n",[m
[32m+[m[32m    "    # Index\n",[m
[32m+[m[32m    "    echo \"${filenames[i]%.fastq}\"\n",[m
[32m+[m[32m    "    #esearch -db biosample -query ${filenames[i]%.fastq} | efetch -format native > ${filenames[i]}.txt\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "c1a0dbeb-7b6f-4cad-890e-01bd6ee3f2a1",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Z101_HL7CKDMXX_CTCGACTT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_001.fastq\n",[m
[32m+[m[32m      "Z109_HL7CKDMXX_ACTCTGAG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_002.fastq\n",[m
[32m+[m[32m      "Z12_HL7CKDMXX_ACAACAGC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_003.fastq\n",[m
[32m+[m[32m      "Z133_HL7CKDMXX_ATGACAGG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_004.fastq\n",[m
[32m+[m[32m      "Z141_HL7CKDMXX_CTACATCC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_005.fastq\n",[m
[32m+[m[32m      "Z145_HC5Y2DRXX_AGCATG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_006.fastq\n",[m
[32m+[m[32m      "Z149_HL7CKDMXX_CTCCAATC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_007.fastq\n",[m
[32m+[m[32m      "Z157_HL7CKDMXX_ACTCCTAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_008.fastq\n",[m
[32m+[m[32m      "Z165_HL7CKDMXX_TACATCGG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_009.fastq\n",[m
[32m+[m[32m      "Z173_HL7CKDMXX_CCTTAGGT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_010.fastq\n",[m
[32m+[m[32m      "Z180_HL7CKDMXX_CCACAACA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_011.fastq\n",[m
[32m+[m[32m      "Z1_HL7CKDMXX_TCCAACTG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_012.fastq\n",[m
[32m+[m[32m      "Z201_HC5Y2DRXX_TGGTGA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_013.fastq\n",[m
[32m+[m[32m      "Z205_HC5Y2DRXX_AGTGAG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_014.fastq\n",[m
[32m+[m[32m      "Z209_HC5Y2DRXX_GCACTA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_015.fastq\n",[m
[32m+[m[32m      "Z20_HL7CKDMXX_ACCATCCT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_016.fastq\n",[m
[32m+[m[32m      "Z213_HC5Y2DRXX_ACCTCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_017.fastq\n",[m
[32m+[m[32m      "Z225_HL7CKDMXX_CAGTGCTT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_018.fastq\n",[m
[32m+[m[32m      "Z229_HL7CKDMXX_TAGTGCCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_019.fastq\n",[m
[32m+[m[32m      "Z233_HL7CKDMXX_AGGCAATG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_020.fastq\n",[m
[32m+[m[32m      "Z237_HL7CKDMXX_GCTACAAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_021.fastq\n",[m
[32m+[m[32m      "Z241_HL7CKDMXX_CGTCCATT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_022.fastq\n",[m
[32m+[m[32m      "Z249_HL7CKDMXX_GAACCTTC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_023.fastq\n",[m
[32m+[m[32m      "Z253_HL7CKDMXX_CTATCCAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_024.fastq\n",[m
[32m+[m[32m      "Z257_HL7CKDMXX_ACGATCAG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_025.fastq\n",[m
[32m+[m[32m      "Z261_HL7CKDMXX_GAAGACTG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_026.fastq\n",[m
[32m+[m[32m      "Z265_HC5Y2DRXX_GTGCTT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_027.fastq\n",[m
[32m+[m[32m      "Z269_HL7CKDMXX_AGAACCAG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_028.fastq\n",[m
[32m+[m[32m      "Z273_HL7CKDMXX_TCTAGGAG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_029.fastq\n",[m
[32m+[m[32m      "Z277_HL7CKDMXX_TCCATTGC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_030.fastq\n",[m
[32m+[m[32m      "Z27_HL7CKDMXX_TGCTGTGA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_031.fastq\n",[m
[32m+[m[32m      "Z281_HL7CKDMXX_ATTCCGCT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_032.fastq\n",[m
[32m+[m[32m      "Z285_HL7CKDMXX_AATGACGC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_033.fastq\n",[m
[32m+[m[32m      "Z289_HL7CKDMXX_ACCAAGCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_034.fastq\n",[m
[32m+[m[32m      "Z293_HL7CKDMXX_GTCGAGAA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_035.fastq\n",[m
[32m+[m[32m      "Z297_HL7CKDMXX_CCAAGTAG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_036.fastq\n",[m
[32m+[m[32m      "Z301_HL7CKDMXX_GTGATCCA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_037.fastq\n",[m
[32m+[m[32m      "Z305_HC5Y2DRXX_GAGTCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_038.fastq\n",[m
[32m+[m[32m      "Z313_HC5Y2DRXX_CGTAGA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_039.fastq\n",[m
[32m+[m[32m      "Z317_HL7CKDMXX_CCTATACC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_040.fastq\n",[m
[32m+[m[32m      "Z321_HC5Y2DRXX_AAGCCT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_041.fastq\n",[m
[32m+[m[32m      "Z329_HL7CKDMXX_ACTGCACT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_042.fastq\n",[m
[32m+[m[32m      "Z333_HL7CKDMXX_CGTCTAAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_043.fastq\n",[m
[32m+[m[32m      "Z341_HL7CKDMXX_CATACGGA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_044.fastq\n",[m
[32m+[m[32m      "Z345_HL7CKDMXX_CATTCGTC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_045.fastq\n",[m
[32m+[m[32m      "Z349_HL7CKDMXX_ACTCTCCA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_046.fastq\n",[m
[32m+[m[32m      "Z34_HL7CKDMXX_CAGGTTCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_047.fastq\n",[m
[32m+[m[32m      "Z353_HL7CKDMXX_GACTACGA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_048.fastq\n",[m
[32m+[m[32m      "Z357_HL7CKDMXX_CGACCTAA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_049.fastq\n",[m
[32m+[m[32m      "Z361_HL7CKDMXX_AACCGAAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_050.fastq\n",[m
[32m+[m[32m      "Z369_HL7CKDMXX_AACACTGG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_051.fastq\n",[m
[32m+[m[32m      "Z373_HL7CKDMXX_CTAGCTCA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_052.fastq\n",[m
[32m+[m[32m      "Z377_HL7CKDMXX_GCTCAGTT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_053.fastq\n",[m
[32m+[m[32m      "Z381_HL7CKDMXX_GCACACAA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_054.fastq\n",[m
[32m+[m[32m      "Z385_HC5Y2DRXX_GGAGAA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_055.fastq\n",[m
[32m+[m[32m      "Z389_HL7CKDMXX_TCACTCGA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_056.fastq\n",[m
[32m+[m[32m      "Z393_HL7CKDMXX_TCGTGCAT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_057.fastq\n",[m
[32m+[m[32m      "Z3_HL7CKDMXX_ATCTGACC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_058.fastq\n",[m
[32m+[m[32m      "Z401_HL7CKDMXX_TAGGAGCT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_059.fastq\n",[m
[32m+[m[32m      "Z405_HL7CKDMXX_TCTACGCA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_060.fastq\n",[m
[32m+[m[32m      "Z409_HL7CKDMXX_TAACGTCG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_061.fastq\n",[m
[32m+[m[32m      "Z41_HL7CKDMXX_CCAACACT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_062.fastq\n",[m
[32m+[m[32m      "Z421_HL7CKDMXX_AACTTGCC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_063.fastq\n",[m
[32m+[m[32m      "Z425_HL7CKDMXX_CTCGAACA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_064.fastq\n",[m
[32m+[m[32m      "Z429_HL7CKDMXX_CAAGCCAA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_065.fastq\n",[m
[32m+[m[32m      "Z433_HL7CKDMXX_AAGTCCTC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_066.fastq\n",[m
[32m+[m[32m      "Z441_HC5Y2DRXX_GTCGTA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_067.fastq\n",[m
[32m+[m[32m      "Z445_HL7CKDMXX_CCACATTG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_068.fastq\n",[m
[32m+[m[32m      "Z449_HL7CKDMXX_TCTAGTCC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_069.fastq\n",[m
[32m+[m[32m      "Z453_HL7CKDMXX_CTCTCAGA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_070.fastq\n",[m
[32m+[m[32m      "Z461_HL7CKDMXX_AAGGACCA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_071.fastq\n",[m
[32m+[m[32m      "Z465_HL7CKDMXX_ACAGCAAG_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_072.fastq\n",[m
[32m+[m[32m      "Z469_HL7CKDMXX_TGCGTAAC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_073.fastq\n",[m
[32m+[m[32m      "Z477_HL7CKDMXX_GAATGGCA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_074.fastq\n",[m
[32m+[m[32m      "Z485_HL7CKDMXX_ATCGTGGT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_075.fastq\n",[m
[32m+[m[32m      "Z489_HL7CKDMXX_GTACCACA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_076.fastq\n",[m
[32m+[m[32m      "Z48_HL7CKDMXX_AACGCCTT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_077.fastq\n",[m
[32m+[m[32m      "Z528_HL7CKDMXX_CGCTACAT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_078.fastq\n",[m
[32m+[m[32m      "Z532_HL7CKDMXX_CTCCTAGT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_079.fastq\n",[m
[32m+[m[32m      "Z536_HL7CKDMXX_GTACACCT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_080.fastq\n",[m
[32m+[m[32m      "Z548_HL7CKDMXX_ACGGACTT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_081.fastq\n",[m
[32m+[m[32m      "Z552_HC5Y2DRXX_AACCAG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_082.fastq\n",[m
[32m+[m[32m      "Z556_HL7CKDMXX_ACGCTTCT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_083.fastq\n",[m
[32m+[m[32m      "Z55_HL7CKDMXX_GCCTTAAC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_084.fastq\n",[m
[32m+[m[32m      "Z560_HL7CKDMXX_AGCAGACA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_085.fastq\n",[m
[32m+[m[32m      "Z564_HC5Y2DRXX_AAGAGG_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_086.fastq\n",[m
[32m+[m[32m      "Z568_HL7CKDMXX_AACTCGGA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_087.fastq\n",[m
[32m+[m[32m      "Z576_HL7CKDMXX_AGCCAACT_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_088.fastq\n",[m
[32m+[m[32m      "Z580_HL7CKDMXX_GTCTCATC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_089.fastq\n",[m
[32m+[m[32m      "Z584_HL7CKDMXX_CCTGTCAA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_090.fastq\n",[m
[32m+[m[32m      "Z62_HL7CKDMXX_GCCAGAAT_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_091.fastq\n",[m
[32m+[m[32m      "Z69_HL7CKDMXX_CCGGAATA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_092.fastq\n",[m
[32m+[m[32m      "Z76_HL7CKDMXX_CTGACTAC_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_093.fastq\n",[m
[32m+[m[32m      "Z83_HL7CKDMXX_TCCTGGTA_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_094.fastq\n",[m
[32m+[m[32m      "Z90_HL7CKDMXX_GACATCTC_L001_R1.fastq\n",[m
[32m+[m[32m      "ZF_095.fastq\n",[m
[32m+[m[32m      "Z97_HL7CKDMXX_CGCAACTA_L002_R1.fastq\n",[m
[32m+[m[32m      "ZF_096.fastq\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/raw-reads\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# renaming \n",[m
[32m+[m[32m    "counter=1\n",[m
[32m+[m[32m    "for file in *.fastq; do\n",[m
[32m+[m[32m    "    newname=$(printf \"ZF_%03d.fastq\" \"$counter\")\n",[m
[32m+[m[32m    "    mv \"$file\" \"$newname\"\n",[m
[32m+[m[32m    "    echo \"$file\"\n",[m
[32m+[m[32m    "    echo \"$newname\"\n",[m
[32m+[m[32m    "    ((counter++))\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "756caf22-eda3-4bd3-baf1-e4a0d3038865",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 1. Prepare data and directories\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "Data was downloaded with SRAtoolkit "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "561d77eb-30d4-41e5-8254-62621e3c5a71",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/raw-reads"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "d7f1939d-faa8-4885-8605-0b7b624f3023",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "find -type f -exec md5sum \"{}\" + > checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "7a8233e4-6b90-499c-a60a-9bcc5c52bfd7",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "./EC_3/EC_3_FKDN220184500-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_3/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_3/EC_3_FKDN220184500-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5K3KDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5K3KDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5GGLDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_4/EC_4_FKDN220184501-1A_H5GGLDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_1/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_1/WC_1_FKDN220184493-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_1/WC_1_FKDN220184493-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_6/WC_6_FKDN220184497-1A_H5GGJDSX3_L3_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_6/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_6/WC_6_FKDN220184497-1A_H5GGJDSX3_L3_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_6/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_6/EC_6_FKDN220184503-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_6/EC_6_FKDN220184503-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5GGLDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5GGLDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5K3KDSX3_L4_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_2/EC_2_FKDN220184499-1A_H5K3KDSX3_L4_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_5/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_5/EC_5_FKDN220184502-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_5/EC_5_FKDN220184502-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_3/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_3/WC_3_FKDN220184495-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_3/WC_3_FKDN220184495-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./checklist.chk: FAILED\n",[m
[32m+[m[32m      "./WC_5/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_5/WC_5_FKDN220184496-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_5/WC_5_FKDN220184496-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_2/WC_2_FKDN220184494-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./WC_2/MD5.txt: OK\n",[m
[32m+[m[32m      "./WC_2/WC_2_FKDN220184494-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_1/EC_1_FKDN220184498-1A_H5CMTDSX3_L1_2.fq.gz: OK\n",[m
[32m+[m[32m      "./EC_1/MD5.txt: OK\n",[m
[32m+[m[32m      "./EC_1/EC_1_FKDN220184498-1A_H5CMTDSX3_L1_1.fq.gz: OK\n",[m
[32m+[m[32m      "md5sum: WARNING: 1 computed checksum did NOT match\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "md5sum -c checklist.chk"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "e30aaf24-3fbe-4346-b0e3-4c197d377e52",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### Define Project Variables and create analysis directories:"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "6c13cc36-5ae4-447e-9abe-32c08a774f48",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#Create analysis directories and define project variables\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the user as a variable\n",[m
[32m+[m[32m    "USER=\"cfngle\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the project directory and temp subdirectory as a variable\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/$USER/raw-data/ZF"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "id": "810a60cc-673f-40fc-abe0-aab516ebcce4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Create analysis subdirectories\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF/\"\n",[m
[32m+[m[32m    "mkdir -p $PROJECT\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/001.fastqc_raw\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/002.trim_galore\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/002.trimmomatic\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/003.fastq_trim_galore\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/004.alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/004.alignments_tm\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.b.stats_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.qc_alignments\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/005.qc_alignments_tm\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/006.deduplication\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/007.meth_extraction\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/007.meth_extraction_tm\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/008.methylkit\n",[m
[32m+[m[32m    "mkdir -p $PROJECT/099.test"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "c5e17deb-bbbb-4bd7-910d-9d431cd550ee",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 1.1 FastQC RAW Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "id": "6563ed7d-f7b8-467a-9f26-f7b6617aa010",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "./ZF_036.fastq ./ZF_080.fastq ./ZF_059.fastq ./ZF_046.fastq ./ZF_005.fastq ./ZF_057.fastq ./ZF_078.fastq ./ZF_071.fastq ./ZF_087.fastq ./ZF_058.fastq ./ZF_048.fastq ./ZF_011.fastq ./ZF_096.fastq ./ZF_051.fastq ./ZF_014.fastq ./ZF_002.fastq ./ZF_049.fastq ./ZF_035.fastq ./ZF_016.fastq ./ZF_032.fastq ./ZF_084.fastq ./ZF_089.fastq ./ZF_060.fastq ./ZF_038.fastq ./ZF_050.fastq ./ZF_043.fastq ./ZF_092.fastq ./ZF_069.fastq ./ZF_033.fastq ./ZF_021.fastq ./ZF_054.fastq ./ZF_037.fastq ./ZF_082.fastq ./ZF_066.fastq ./ZF_055.fastq ./ZF_072.fastq ./ZF_040.fastq ./ZF_067.fastq ./ZF_025.fastq ./ZF_017.fastq ./ZF_003.fastq ./ZF_075.fastq ./ZF_045.fastq ./ZF_073.fastq ./ZF_004.fastq ./ZF_052.fastq ./ZF_030.fastq ./ZF_019.fastq ./ZF_007.fastq ./ZF_009.fastq ./ZF_095.fastq ./ZF_018.fastq ./ZF_093.fastq ./ZF_076.fastq ./ZF_047.fastq ./ZF_053.fastq ./ZF_001.fastq ./ZF_024.fastq ./ZF_088.fastq ./ZF_063.fastq ./ZF_083.fastq ./ZF_070.fastq ./ZF_029.fastq ./ZF_091.fastq ./ZF_006.fastq ./ZF_062.fastq ./ZF_041.fastq ./ZF_042.fastq ./ZF_008.fastq ./ZF_027.fastq ./ZF_085.fastq ./ZF_056.fastq ./ZF_010.fastq ./ZF_020.fastq ./ZF_064.fastq ./ZF_086.fastq ./ZF_068.fastq ./ZF_026.fastq ./ZF_013.fastq ./ZF_079.fastq ./ZF_090.fastq ./ZF_028.fastq ./ZF_031.fastq ./ZF_022.fastq ./ZF_074.fastq ./ZF_081.fastq ./ZF_065.fastq ./ZF_034.fastq ./ZF_061.fastq ./ZF_044.fastq ./ZF_015.fastq ./ZF_023.fastq ./ZF_012.fastq ./ZF_077.fastq ./ZF_039.fastq ./ZF_094.fastq\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 01:00:00 --mem 20G -c 10\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/raw-reads/001.fastqc_raw/fastqc_raw\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4454935\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF/raw-reads\" \n",[m
[32m+[m[32m    "IN=\"${PROJECT}/\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/001.fastqc_raw\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "cd $IN\n",[m
[32m+[m[32m    "#  FILES=`find -type f -name \"*.fastq\"`\n",[m
[32m+[m[32m    "FILES=`find -type f -name \"*.fastq\"`\n",[m
[32m+[m[32m    "echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "         COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "         echo $COMMAND\n",[m
[32m+[m[32m    "        #echo $file\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc_raw --time 01:00:00 --mem 20G -c 10 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 8,[m
[32m+[m[32m   "id": "0908f545-c305-4531-b535-a3a61771e65e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mmultiqc/1.11\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "id": "437edb0f-7d48-4a0e-9d2f-fcb49d2a2904",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709001505.045413-722077;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Raw\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/raw-reads/001.fastqc_raw\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m385/385\u001b[0m  0mtqc_raw/fastqc_raw/fastqc_raw.sh\u001b[0m\n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 96 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 001.fastqc_raw/Fastqc-Raw_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 001.fastqc_raw/Fastqc-Raw_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 001.fastqc_raw -o 001.fastqc_raw -i Fastqc-Raw"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "50e04741-aff4-4af1-9279-0d6d60f29ae8",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 2. Trimming"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "dd4629bf-0f0e-4922-8c74-c351408b796c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1a Trim_galore"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "d59940d9-8c56-4eb1-b148-5d9d5db94225",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "JM_001.fastq JM_002.fastq JM_003.fastq JM_004.fastq JM_005.fastq JM_006.fastq JM_007.fastq JM_008.fastq JM_009.fastq JM_010.fastq JM_011.fastq JM_012.fastq JM_013.fastq JM_014.fastq JM_015.fastq JM_016.fastq JM_017.fastq JM_018.fastq JM_019.fastq JM_020.fastq JM_021.fastq JM_022.fastq JM_023.fastq JM_024.fastq JM_025.fastq JM_026.fastq JM_027.fastq JM_028.fastq JM_029.fastq JM_030.fastq JM_031.fastq JM_032.fastq JM_033.fastq JM_034.fastq JM_035.fastq JM_036.fastq JM_037.fastq JM_038.fastq JM_039.fastq JM_040.fastq JM_041.fastq JM_042.fastq JM_043.fastq JM_044.fastq JM_045.fastq JM_046.fastq JM_047.fastq\n",[m
[32m+[m[32m      "SBATCH_ARGS: --time 04:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/JM/002.trim_galore/trim_galore-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 94\n",[m
[32m+[m[32m      "Submitted batch job 4464148\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/raw-reads\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $IN\n",[m
[32m+[m[32m    "mkdir -p $OUT\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the files to trim:\n",[m
[32m+[m[32m    "FILES=`basename -a ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load trim_galore\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for FILE in $FILES\n",[m
[32m+[m[32m    "     do\n",[m
[32m+[m[32m    "        In_File1=${IN}/${FILE}\n",[m
[32m+[m[32m    "        echo $In_File1\n",[m
[32m+[m[32m    "        Out=${OUT}/${FILE}_trimmed.fastq\n",[m
[32m+[m[32m    "        COMMAND=\"trim_galore --rrbs --quality 25 --clip_R1 4 --three_prime_clip_R1 2 $In_File1 --output_dir $OUT\"\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/trim_galore-logs --time 04:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "ff7c00fd-bc46-4b31-a071-88510a287569",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1b Trimmomatic"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 37,[m
[32m+[m[32m   "id": "99cbceb0-62a4-483e-b5ea-67dd8b4aea2c",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 04:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/002.trimmomatic//trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 192\n",[m
[32m+[m[32m      "Submitted batch job 4469262\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/raw-reads\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/002.trimmomatic/\"\n",[m
[32m+[m[32m    "ADAPTER=\"${PROJECT}/zzz.adapters/TruSeq3-SE.fa\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $IN\n",[m
[32m+[m[32m    "mkdir -p $OUT\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Get the files to trim:\n",[m
[32m+[m[32m    "FILES=`basename -a ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load Trimmomatic\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for FILE in $FILES\n",[m
[32m+[m[32m    "     do\n",[m
[32m+[m[32m    "        In_File1=${IN}/${FILE}\n",[m
[32m+[m[32m    "        echo $In_File1\n",[m
[32m+[m[32m    "        Out=${OUT}${FILE}_trimmoniac.fastq\n",[m
[32m+[m[32m    "        COMMAND=\"trimmomatic SE -phred33 ${In_File1} ${Out} ILLUMINACLIP:${ADAPTER}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36\"\n",[m
[32m+[m[32m    "        \n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/trimmomatic-logs --time 04:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1f93e76c-40f1-4c3b-9466-c6eaa788cd00",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.1a FastQC TRIMMED Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "id": "51ce841f-d25c-452a-be07-537f33193bbc",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 02:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/003.fastq_trim_galore/fastqc-trim_galore-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4463263\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\" # Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/003.fastq_trim_galore\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-trim_galore-logs --time 02:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "165399e1-0c53-4375-9f83-ef419f9a256f",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 21,[m
[32m+[m[32m   "id": "aeae0461-94aa-48ef-bc35-44e85d8242ac",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709074235.8144333-918123;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.20 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Trimmed\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/003.fastq_trim_galore\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m386/386\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 96 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 003.fastq_trim_galore/Fastqc-Trimmed_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 003.fastq_trim_galore/Fastqc-Trimmed_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "multiqc 003.fastq_trim_galore -o 003.fastq_trim_galore -i Fastqc-Trimmed"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "528783c4-0024-4292-a62c-dc60c53f8216",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 2.2b FastQC TRIMMED Data\n",[m
[32m+[m[32m    "- The input for this step is the raw data from the provider in FASTQ format\n",[m
[32m+[m[32m    "- The output from this step are the HTML FASTQC Reports"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 38,[m
[32m+[m[32m   "id": "552a22c1-de3f-4e97-8f33-c015c58179bf",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 02:00:00 --mem 1G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/003.fastq_trimmomatic/fastqc-trimmomatic-logs\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4470123\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\" # Define the location for the QC reports:\n",[m
[32m+[m[32m    "# Define the location for the QC reports:\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/003.fastq_trimmomatic\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Define the list of files to process:\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fastq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Load the FastQC module:\n",[m
[32m+[m[32m    "module load FastQC\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        COMMAND=\"fastqc --nogroup -q -t 2 -o ${OUT} ${file}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/fastqc-trimmomatic-logs --time 02:00:00 --mem 1G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "3a79234b-cd1c-4197-af2c-193ab6e869e2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "** INFO ** : singularity has been deprecated - please use apptainer in place.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading \u001b[1mmultiqc/1.11\u001b[22m\n",[m
[32m+[m[32m      "  \u001b[94mLoading requirement\u001b[0m: singularity/3.10.3\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load multiqc"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 41,[m
[32m+[m[32m   "id": "542ad4c0-0838-4aec-a387-c083d26719a5",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709249218.7655373-842557;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: Fastqc-Trimmed\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/003.fastq_trimmomatic\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m385/385\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|            fastqc\u001b[0m | Found 96 reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 003.fastq_trimmomatic/Fastqc-Trimmed_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "multiqc 003.fastq_trimmomatic -o 003.fastq_trimmomatic -i Fastqc-Trimmed"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "105a8a9b-d575-4ea9-8651-ab1d2eedc6eb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 5. Alignment\n",[m
[32m+[m[32m    "Bismark user guide https://felixkrueger.github.io/Bismark/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "b4c545a8-a3dd-49d6-b5d6-85dc48928b1c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5.1a Alignment to genome: BSseeker"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1bdd5546-1964-4be3-aba3-726930289fb4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "##### BSseeker did not work with command line directly. A bioconda environment had to be set up and BSseeker 2 directly installed there. (conda install bioconda/label/cf201901::bs-seeker2).\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 52,[m
[32m+[m[32m   "id": "ba12f9fb-0430-4ae4-aa70-0c2821500ed9",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "conda activate cfngle_env-01"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 54,[m
[32m+[m[32m   "id": "b1f329a3-24a3-4e7f-9bad-f1b01fe326c6",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Collecting package metadata (current_repodata.json): done\n",[m
[32m+[m[32m      "Solving environment: done\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "==> WARNING: A newer version of conda exists. <==\n",[m
[32m+[m[32m      "  current version: 23.1.0\n",[m
[32m+[m[32m      "  latest version: 24.1.2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Please update conda by running\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    $ conda update -n base -c defaults conda\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Or to minimize the number of packages updated during conda update use\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "     conda install conda=24.1.2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "# All requested packages already installed.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda install bowtie2"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 55,[m
[32m+[m[32m   "id": "c0ff330c-e729-4e2f-a682-601c3e533b07",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Usage: bs_seeker2-build.py [options]\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Options:\n",[m
[32m+[m[32m      "  -h, --help            show this help message and exit\n",[m
[32m+[m[32m      "  -f FILE, --file=FILE  Input your reference genome file (fasta)\n",[m
[32m+[m[32m      "  --aligner=ALIGNER     Aligner program to perform the analysis: bowtie,\n",[m
[32m+[m[32m      "                        bowtie2, soap, rmap [Default: bowtie]\n",[m
[32m+[m[32m      "  -p PATH, --path=PATH  Path to the aligner program. Detected:\n",[m
[32m+[m[32m      "                        bowtie: None\n",[m
[32m+[m[32m      "                        bowtie2:\n",[m
[32m+[m[32m      "                        /workspace/appscratch/miniconda/cfngle_env-01/bin\n",[m
[32m+[m[32m      "                        rmap: None\n",[m
[32m+[m[32m      "                        soap: None\n",[m
[32m+[m[32m      "  -d DBPATH, --db=DBPATH\n",[m
[32m+[m[32m      "                        Path to the reference genome library (generated in\n",[m
[32m+[m[32m      "                        preprocessing genome) [Default: /powerplant/workspace/\n",[m
[32m+[m[32m      "                        appscratch/miniconda/cfngle_env-01/bin/bs_utils/refere\n",[m
[32m+[m[32m      "                        nce_genomes]\n",[m
[32m+[m[32m      "  -v, --version         show version of BS-Seeker2\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  Reduced Representation Bisulfite Sequencing Options:\n",[m
[32m+[m[32m      "    Use this options with conjuction of -r [--rrbs]\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    -r, --rrbs          Build index specially for Reduced Representation\n",[m
[32m+[m[32m      "                        Bisulfite Sequencing experiments. Genome other than\n",[m
[32m+[m[32m      "                        certain fragments will be masked. [Default: False]\n",[m
[32m+[m[32m      "    -l LOW_BOUND, --low=LOW_BOUND\n",[m
[32m+[m[32m      "                        lower bound of fragment length (excluding recognition\n",[m
[32m+[m[32m      "                        sequence such as C-CGG) [Default: 20]\n",[m
[32m+[m[32m      "    -u UP_BOUND, --up=UP_BOUND\n",[m
[32m+[m[32m      "                        upper bound of fragment length (excluding recognition\n",[m
[32m+[m[32m      "                        sequence such as C-CGG ends) [Default: 500]\n",[m
[32m+[m[32m      "    -c CUT_FORMAT, --cut-site=CUT_FORMAT\n",[m
[32m+[m[32m      "                        Cut sites of restriction enzyme. Ex: MspI(C-CGG),\n",[m
[32m+[m[32m      "                        Mael:(C-TAG), double-enzyme MspI&Mael:(C-CGG,C-TAG).\n",[m
[32m+[m[32m      "                        [Default: C-CGG]\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "bs_seeker2-build.py -h"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 59,[m
[32m+[m[32m   "id": "591b8ca3-3c63-4733-bc2a-7e09e04aa2a2",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) \n",[m
[32m+[m[32m      "     BS-Seeker2 v2.1.7 - Oct. 23, 2018\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Reference genome file: /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta\n",[m
[32m+[m[32m      "Reduced Representation Bisulfite Sequencing: False\n",[m
[32m+[m[32m      "Short reads aligner you are using: bowtie2\n",[m
[32m+[m[32m      "Builder path: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build\n",[m
[32m+[m[32m      "[Preprocessing NC_007112.7] Last: 0:00:02.052967 \tTotal: 0:00:02.053019\n",[m
[32m+[m[32m      "[Preprocessing NC_007113.7] Last: 0:00:02.067495 \tTotal: 0:00:04.120560\n",[m
[32m+[m[32m      "[Preprocessing NC_007114.7] Last: 0:00:02.151489 \tTotal: 0:00:06.272095\n",[m
[32m+[m[32m      "[Preprocessing NC_007115.7] Last: 0:00:02.666220 \tTotal: 0:00:08.938364\n",[m
[32m+[m[32m      "[Preprocessing NC_007116.7] Last: 0:00:02.491826 \tTotal: 0:00:11.430271\n",[m
[32m+[m[32m      "[Preprocessing NC_007117.7] Last: 0:00:02.087030 \tTotal: 0:00:13.517351\n",[m
[32m+[m[32m      "[Preprocessing NC_007118.7] Last: 0:00:02.585829 \tTotal: 0:00:16.103224\n",[m
[32m+[m[32m      "[Preprocessing NC_007119.7] Last: 0:00:01.896096 \tTotal: 0:00:17.999370\n",[m
[32m+[m[32m      "[Preprocessing NC_007120.7] Last: 0:00:01.947336 \tTotal: 0:00:19.946762\n",[m
[32m+[m[32m      "[Preprocessing NC_007121.7] Last: 0:00:01.572078 \tTotal: 0:00:21.518883\n",[m
[32m+[m[32m      "[Preprocessing NC_007122.7] Last: 0:00:01.569564 \tTotal: 0:00:23.088495\n",[m
[32m+[m[32m      "[Preprocessing NC_007123.7] Last: 0:00:01.685095 \tTotal: 0:00:24.773632\n",[m
[32m+[m[32m      "[Preprocessing NC_007124.7] Last: 0:00:01.815253 \tTotal: 0:00:26.588937\n",[m
[32m+[m[32m      "[Preprocessing NC_007125.7] Last: 0:00:01.887816 \tTotal: 0:00:28.476801\n",[m
[32m+[m[32m      "[Preprocessing NC_007126.7] Last: 0:00:01.658651 \tTotal: 0:00:30.135499\n",[m
[32m+[m[32m      "[Preprocessing NC_007127.7] Last: 0:00:01.932476 \tTotal: 0:00:32.068020\n",[m
[32m+[m[32m      "[Preprocessing NC_007128.7] Last: 0:00:01.866364 \tTotal: 0:00:33.934433\n",[m
[32m+[m[32m      "[Preprocessing NC_007129.7] Last: 0:00:02.072604 \tTotal: 0:00:36.007083\n",[m
[32m+[m[32m      "[Preprocessing NC_007130.7] Last: 0:00:01.967917 \tTotal: 0:00:37.975048\n",[m
[32m+[m[32m      "[Preprocessing NC_007131.7] Last: 0:00:02.229615 \tTotal: 0:00:40.204710\n",[m
[32m+[m[32m      "[Preprocessing NC_007132.7] Last: 0:00:01.876476 \tTotal: 0:00:42.081232\n",[m
[32m+[m[32m      "[Preprocessing NC_007133.7] Last: 0:00:01.583035 \tTotal: 0:00:43.664313\n",[m
[32m+[m[32m      "[Preprocessing NC_007134.7] Last: 0:00:01.868755 \tTotal: 0:00:45.533112\n",[m
[32m+[m[32m      "[Preprocessing NC_007135.7] Last: 0:00:01.786034 \tTotal: 0:00:47.319196\n",[m
[32m+[m[32m      "[Preprocessing NC_007136.7] Last: 0:00:01.596459 \tTotal: 0:00:48.915701\n",[m
[32m+[m[32m      "[Preprocessing NW_003336534.1] Last: 0:00:00.101371 \tTotal: 0:00:49.017112\n",[m
[32m+[m[32m      "[Preprocessing NW_003337018.1] Last: 0:00:00.080997 \tTotal: 0:00:49.098142\n",[m
[32m+[m[32m      "[Preprocessing NW_003336515.1] Last: 0:00:00.072655 \tTotal: 0:00:49.170835\n",[m
[32m+[m[32m      "[Preprocessing NW_008805481.1] Last: 0:00:00.079212 \tTotal: 0:00:49.250085\n",[m
[32m+[m[32m      "[Preprocessing NW_008805364.1] Last: 0:00:00.081517 \tTotal: 0:00:49.331638\n",[m
[32m+[m[32m      "[Preprocessing NW_008805373.1] Last: 0:00:00.081058 \tTotal: 0:00:49.412733\n",[m
[32m+[m[32m      "[Preprocessing NW_018394340.1] Last: 0:00:00.073848 \tTotal: 0:00:49.486616\n",[m
[32m+[m[32m      "[Preprocessing NW_003334448.1] Last: 0:00:00.078916 \tTotal: 0:00:49.565573\n",[m
[32m+[m[32m      "[Preprocessing NW_018394341.1] Last: 0:00:00.077969 \tTotal: 0:00:49.643583\n",[m
[32m+[m[32m      "[Preprocessing NW_018394342.1] Last: 0:00:00.077378 \tTotal: 0:00:49.721000\n",[m
[32m+[m[32m      "[Preprocessing NW_008805497.1] Last: 0:00:00.071507 \tTotal: 0:00:49.792544\n",[m
[32m+[m[32m      "[Preprocessing NW_003336429.1] Last: 0:00:00.081378 \tTotal: 0:00:49.873958\n",[m
[32m+[m[32m      "[Preprocessing NW_003336819.1] Last: 0:00:00.076782 \tTotal: 0:00:49.950779\n",[m
[32m+[m[32m      "[Preprocessing NW_003336327.1] Last: 0:00:00.082348 \tTotal: 0:00:50.033167\n",[m
[32m+[m[32m      "[Preprocessing NW_003336610.1] Last: 0:00:00.071605 \tTotal: 0:00:50.104814\n",[m
[32m+[m[32m      "[Preprocessing NW_003336686.1] Last: 0:00:00.077941 \tTotal: 0:00:50.182793\n",[m
[32m+[m[32m      "[Preprocessing NW_008805444.1] Last: 0:00:00.078275 \tTotal: 0:00:50.261111\n",[m
[32m+[m[32m      "[Preprocessing NW_018394343.1] Last: 0:00:00.083639 \tTotal: 0:00:50.344800\n",[m
[32m+[m[32m      "[Preprocessing NW_003336820.1] Last: 0:00:00.069755 \tTotal: 0:00:50.414595\n",[m
[32m+[m[32m      "[Preprocessing NW_018394344.1] Last: 0:00:00.004789 \tTotal: 0:00:50.419416\n",[m
[32m+[m[32m      "[Preprocessing NW_008805422.1] Last: 0:00:00.004819 \tTotal: 0:00:50.424258\n",[m
[32m+[m[32m      "[Preprocessing NW_018394345.1] Last: 0:00:00.003139 \tTotal: 0:00:50.427418\n",[m
[32m+[m[32m      "[Preprocessing NW_018394346.1] Last: 0:00:00.004412 \tTotal: 0:00:50.431851\n",[m
[32m+[m[32m      "[Preprocessing NW_003336964.1] Last: 0:00:00.008923 \tTotal: 0:00:50.440797\n",[m
[32m+[m[32m      "[Preprocessing NW_003334692.2] Last: 0:00:00.005734 \tTotal: 0:00:50.446552\n",[m
[32m+[m[32m      "[Preprocessing NW_018394347.1] Last: 0:00:00.004564 \tTotal: 0:00:50.451138\n",[m
[32m+[m[32m      "[Preprocessing NW_003336455.2] Last: 0:00:00.004793 \tTotal: 0:00:50.455952\n",[m
[32m+[m[32m      "[Preprocessing NW_008805542.1] Last: 0:00:00.006543 \tTotal: 0:00:50.462524\n",[m
[32m+[m[32m      "[Preprocessing NW_018394348.1] Last: 0:00:00.004999 \tTotal: 0:00:50.467548\n",[m
[32m+[m[32m      "[Preprocessing NW_001884444.4] Last: 0:00:00.007896 \tTotal: 0:00:50.475468\n",[m
[32m+[m[32m      "[Preprocessing NW_018394349.1] Last: 0:00:00.005519 \tTotal: 0:00:50.481008\n",[m
[32m+[m[32m      "[Preprocessing NW_003337266.1] Last: 0:00:00.005084 \tTotal: 0:00:50.486111\n",[m
[32m+[m[32m      "[Preprocessing NW_003336714.2] Last: 0:00:00.004710 \tTotal: 0:00:50.490843\n",[m
[32m+[m[32m      "[Preprocessing NW_003336426.1] Last: 0:00:00.004855 \tTotal: 0:00:50.495717\n",[m
[32m+[m[32m      "[Preprocessing NW_003335663.1] Last: 0:00:00.004052 \tTotal: 0:00:50.499790\n",[m
[32m+[m[32m      "[Preprocessing NW_008805361.1] Last: 0:00:00.004198 \tTotal: 0:00:50.504008\n",[m
[32m+[m[32m      "[Preprocessing NW_018394350.1] Last: 0:00:00.003862 \tTotal: 0:00:50.507890\n",[m
[32m+[m[32m      "[Preprocessing NW_003336893.1] Last: 0:00:00.004394 \tTotal: 0:00:50.512305\n",[m
[32m+[m[32m      "[Preprocessing NW_008805370.1] Last: 0:00:00.004669 \tTotal: 0:00:50.516994\n",[m
[32m+[m[32m      "[Preprocessing NW_003335154.1] Last: 0:00:00.004147 \tTotal: 0:00:50.521161\n",[m
[32m+[m[32m      "[Preprocessing NW_008805348.1] Last: 0:00:00.004535 \tTotal: 0:00:50.525714\n",[m
[32m+[m[32m      "[Preprocessing NW_003336479.1] Last: 0:00:00.004250 \tTotal: 0:00:50.529984\n",[m
[32m+[m[32m      "[Preprocessing NW_008805381.1] Last: 0:00:00.004748 \tTotal: 0:00:50.534751\n",[m
[32m+[m[32m      "[Preprocessing NW_008805526.1] Last: 0:00:00.005743 \tTotal: 0:00:50.540515\n",[m
[32m+[m[32m      "[Preprocessing NW_003336769.1] Last: 0:00:00.005117 \tTotal: 0:00:50.545652\n",[m
[32m+[m[32m      "[Preprocessing NW_003334214.1] Last: 0:00:00.005239 \tTotal: 0:00:50.550910\n",[m
[32m+[m[32m      "[Preprocessing NW_003336928.1] Last: 0:00:00.004799 \tTotal: 0:00:50.555731\n",[m
[32m+[m[32m      "[Preprocessing NW_018394351.1] Last: 0:00:00.003421 \tTotal: 0:00:50.559177\n",[m
[32m+[m[32m      "[Preprocessing NW_003336599.1] Last: 0:00:00.005436 \tTotal: 0:00:50.564639\n",[m
[32m+[m[32m      "[Preprocessing NW_003335521.2] Last: 0:00:00.003968 \tTotal: 0:00:50.568631\n",[m
[32m+[m[32m      "[Preprocessing NW_003334150.2] Last: 0:00:00.005490 \tTotal: 0:00:50.574145\n",[m
[32m+[m[32m      "[Preprocessing NW_003336548.1] Last: 0:00:00.003659 \tTotal: 0:00:50.577824\n",[m
[32m+[m[32m      "[Preprocessing NW_018394352.1] Last: 0:00:00.003799 \tTotal: 0:00:50.581642\n",[m
[32m+[m[32m      "[Preprocessing NW_008805522.1] Last: 0:00:00.004384 \tTotal: 0:00:50.586045\n",[m
[32m+[m[32m      "[Preprocessing NW_003336787.1] Last: 0:00:00.003707 \tTotal: 0:00:50.589771\n",[m
[32m+[m[32m      "[Preprocessing NW_008805436.1] Last: 0:00:00.003983 \tTotal: 0:00:50.593775\n",[m
[32m+[m[32m      "[Preprocessing NW_003335528.3] Last: 0:00:00.004034 \tTotal: 0:00:50.597831\n",[m
[32m+[m[32m      "[Preprocessing NW_003336620.1] Last: 0:00:00.003885 \tTotal: 0:00:50.601742\n",[m
[32m+[m[32m      "[Preprocessing NW_003336152.2] Last: 0:00:00.005174 \tTotal: 0:00:50.606941\n",[m
[32m+[m[32m      "[Preprocessing NW_003337183.1] Last: 0:00:00.005452 \tTotal: 0:00:50.612414\n",[m
[32m+[m[32m      "[Preprocessing NW_018394353.1] Last: 0:00:00.004271 \tTotal: 0:00:50.616705\n",[m
[32m+[m[32m      "[Preprocessing NW_008805353.1] Last: 0:00:00.003506 \tTotal: 0:00:50.620231\n",[m
[32m+[m[32m      "[Preprocessing NW_003335375.1] Last: 0:00:00.005747 \tTotal: 0:00:50.626001\n",[m
[32m+[m[32m      "[Preprocessing NW_003337090.1] Last: 0:00:00.004713 \tTotal: 0:00:50.630737\n",[m
[32m+[m[32m      "[Preprocessing NW_003336521.1] Last: 0:00:00.003794 \tTotal: 0:00:50.634551\n",[m
[32m+[m[32m      "[Preprocessing NW_008805472.1] Last: 0:00:00.005404 \tTotal: 0:00:50.639975\n",[m
[32m+[m[32m      "[Preprocessing NW_003337168.1] Last: 0:00:00.003682 \tTotal: 0:00:50.643675\n",[m
[32m+[m[32m      "[Preprocessing NW_003337240.1] Last: 0:00:00.004173 \tTotal: 0:00:50.647868\n",[m
[32m+[m[32m      "[Preprocessing NW_008805354.1] Last: 0:00:00.003788 \tTotal: 0:00:50.651678\n",[m
[32m+[m[32m      "[Preprocessing NW_008805368.1] Last: 0:00:00.005307 \tTotal: 0:00:50.657005\n",[m
[32m+[m[32m      "[Preprocessing NW_003336442.1] Last: 0:00:00.004964 \tTotal: 0:00:50.661989\n",[m
[32m+[m[32m      "[Preprocessing NW_018394354.1] Last: 0:00:00.005518 \tTotal: 0:00:50.667527\n",[m
[32m+[m[32m      "[Preprocessing NW_003336991.1] Last: 0:00:00.005836 \tTotal: 0:00:50.673394\n",[m
[32m+[m[32m      "[Preprocessing NW_018394355.1] Last: 0:00:00.004292 \tTotal: 0:00:50.677706\n",[m
[32m+[m[32m      "[Preprocessing NW_003336353.1] Last: 0:00:00.004758 \tTotal: 0:00:50.682485\n",[m
[32m+[m[32m      "[Preprocessing NW_003336972.2] Last: 0:00:00.004190 \tTotal: 0:00:50.686694\n",[m
[32m+[m[32m      "[Preprocessing NW_003336806.1] Last: 0:00:00.005003 \tTotal: 0:00:50.691717\n",[m
[32m+[m[32m      "[Preprocessing NW_003336765.1] Last: 0:00:00.004110 \tTotal: 0:00:50.695847\n",[m
[32m+[m[32m      "[Preprocessing NW_008805534.1] Last: 0:00:00.003745 \tTotal: 0:00:50.699613\n",[m
[32m+[m[32m      "[Preprocessing NW_003337086.1] Last: 0:00:00.003875 \tTotal: 0:00:50.703508\n",[m
[32m+[m[32m      "[Preprocessing NW_003336838.1] Last: 0:00:00.004234 \tTotal: 0:00:50.707762\n",[m
[32m+[m[32m      "[Preprocessing NW_003335278.1] Last: 0:00:00.005643 \tTotal: 0:00:50.713426\n",[m
[32m+[m[32m      "[Preprocessing NW_003337171.1] Last: 0:00:00.004510 \tTotal: 0:00:50.717957\n",[m
[32m+[m[32m      "[Preprocessing NW_003335567.1] Last: 0:00:00.005870 \tTotal: 0:00:50.723846\n",[m
[32m+[m[32m      "[Preprocessing NW_018394356.1] Last: 0:00:00.004190 \tTotal: 0:00:50.728055\n",[m
[32m+[m[32m      "[Preprocessing NW_003334844.1] Last: 0:00:00.003592 \tTotal: 0:00:50.731664\n",[m
[32m+[m[32m      "[Preprocessing NW_003336582.1] Last: 0:00:00.004384 \tTotal: 0:00:50.736065\n",[m
[32m+[m[32m      "[Preprocessing NW_003336497.1] Last: 0:00:00.003549 \tTotal: 0:00:50.739633\n",[m
[32m+[m[32m      "[Preprocessing NW_003336278.1] Last: 0:00:00.004422 \tTotal: 0:00:50.744076\n",[m
[32m+[m[32m      "[Preprocessing NW_003337013.1] Last: 0:00:00.006418 \tTotal: 0:00:50.750515\n",[m
[32m+[m[32m      "[Preprocessing NW_003336226.1] Last: 0:00:00.005421 \tTotal: 0:00:50.755956\n",[m
[32m+[m[32m      "[Preprocessing NW_003336598.1] Last: 0:00:00.005272 \tTotal: 0:00:50.761248\n",[m
[32m+[m[32m      "[Preprocessing NW_003336396.1] Last: 0:00:00.007184 \tTotal: 0:00:50.768454\n",[m
[32m+[m[32m      "[Preprocessing NW_008805427.1] Last: 0:00:00.005541 \tTotal: 0:00:50.774019\n",[m
[32m+[m[32m      "[Preprocessing NW_003334810.2] Last: 0:00:00.005711 \tTotal: 0:00:50.779753\n",[m
[32m+[m[32m      "[Preprocessing NW_003336331.2] Last: 0:00:00.004834 \tTotal: 0:00:50.784609\n",[m
[32m+[m[32m      "[Preprocessing NW_008805358.1] Last: 0:00:00.004524 \tTotal: 0:00:50.789153\n",[m
[32m+[m[32m      "[Preprocessing NW_008805503.1] Last: 0:00:00.005388 \tTotal: 0:00:50.794562\n",[m
[32m+[m[32m      "[Preprocessing NW_018394357.1] Last: 0:00:00.004925 \tTotal: 0:00:50.799509\n",[m
[32m+[m[32m      "[Preprocessing NW_003336817.2] Last: 0:00:00.005555 \tTotal: 0:00:50.805084\n",[m
[32m+[m[32m      "[Preprocessing NW_003337254.2] Last: 0:00:00.003684 \tTotal: 0:00:50.808788\n",[m
[32m+[m[32m      "[Preprocessing NW_008805392.1] Last: 0:00:00.003905 \tTotal: 0:00:50.812713\n",[m
[32m+[m[32m      "[Preprocessing NW_003336909.1] Last: 0:00:00.005103 \tTotal: 0:00:50.817834\n",[m
[32m+[m[32m      "[Preprocessing NW_003337260.1] Last: 0:00:00.005019 \tTotal: 0:00:50.822873\n",[m
[32m+[m[32m      "[Preprocessing NW_003337065.1] Last: 0:00:00.004788 \tTotal: 0:00:50.827680\n",[m
[32m+[m[32m      "[Preprocessing NW_008805506.1] Last: 0:00:00.007480 \tTotal: 0:00:50.835182\n",[m
[32m+[m[32m      "[Preprocessing NW_003337139.1] Last: 0:00:00.005415 \tTotal: 0:00:50.840617\n",[m
[32m+[m[32m      "[Preprocessing NW_003336445.1] Last: 0:00:00.006211 \tTotal: 0:00:50.846849\n",[m
[32m+[m[32m      "[Preprocessing NW_018394358.1] Last: 0:00:00.004073 \tTotal: 0:00:50.850943\n",[m
[32m+[m[32m      "[Preprocessing NW_003336601.1] Last: 0:00:00.005253 \tTotal: 0:00:50.856214\n",[m
[32m+[m[32m      "[Preprocessing NW_003336824.1] Last: 0:00:00.005472 \tTotal: 0:00:50.861704\n",[m
[32m+[m[32m      "[Preprocessing NW_003337114.1] Last: 0:00:00.007568 \tTotal: 0:00:50.869293\n",[m
[32m+[m[32m      "[Preprocessing NW_003336812.1] Last: 0:00:00.004247 \tTotal: 0:00:50.873561\n",[m
[32m+[m[32m      "[Preprocessing NW_003336951.2] Last: 0:00:00.006080 \tTotal: 0:00:50.879662\n",[m
[32m+[m[32m      "[Preprocessing NW_003337049.1] Last: 0:00:00.003916 \tTotal: 0:00:50.883598\n",[m
[32m+[m[32m      "[Preprocessing NW_008805533.1] Last: 0:00:00.004241 \tTotal: 0:00:50.887859\n",[m
[32m+[m[32m      "[Preprocessing NW_003336762.1] Last: 0:00:00.004086 \tTotal: 0:00:50.891965\n",[m
[32m+[m[32m      "[Preprocessing NW_003336276.1] Last: 0:00:00.007187 \tTotal: 0:00:50.899174\n",[m
[32m+[m[32m      "[Preprocessing NW_003337040.2] Last: 0:00:00.005244 \tTotal: 0:00:50.904441\n",[m
[32m+[m[32m      "[Preprocessing NW_008805451.1] Last: 0:00:00.005572 \tTotal: 0:00:50.910033\n",[m
[32m+[m[32m      "[Preprocessing NW_003336501.1] Last: 0:00:00.005509 \tTotal: 0:00:50.915563\n",[m
[32m+[m[32m      "[Preprocessing NW_003335408.1] Last: 0:00:00.003793 \tTotal: 0:00:50.919385\n",[m
[32m+[m[32m      "[Preprocessing NW_003336970.1] Last: 0:00:00.004629 \tTotal: 0:00:50.924034\n",[m
[32m+[m[32m      "[Preprocessing NW_003334506.1] Last: 0:00:00.003519 \tTotal: 0:00:50.927571\n",[m
[32m+[m[32m      "[Preprocessing NW_018394359.1] Last: 0:00:00.004394 \tTotal: 0:00:50.931984\n",[m
[32m+[m[32m      "[Preprocessing NW_018394360.1] Last: 0:00:00.003523 \tTotal: 0:00:50.935525\n",[m
[32m+[m[32m      "[Preprocessing NW_018394361.1] Last: 0:00:00.004636 \tTotal: 0:00:50.940180\n",[m
[32m+[m[32m      "[Preprocessing NW_003337174.1] Last: 0:00:00.004602 \tTotal: 0:00:50.944802\n",[m
[32m+[m[32m      "[Preprocessing NW_003336810.1] Last: 0:00:00.004710 \tTotal: 0:00:50.949532\n",[m
[32m+[m[32m      "[Preprocessing NW_003336237.1] Last: 0:00:00.004818 \tTotal: 0:00:50.954370\n",[m
[32m+[m[32m      "[Preprocessing NW_003336337.1] Last: 0:00:00.006114 \tTotal: 0:00:50.960524\n",[m
[32m+[m[32m      "[Preprocessing NW_003336871.1] Last: 0:00:00.006302 \tTotal: 0:00:50.966849\n",[m
[32m+[m[32m      "[Preprocessing NW_003336801.1] Last: 0:00:00.005781 \tTotal: 0:00:50.972651\n",[m
[32m+[m[32m      "[Preprocessing NW_008805585.1] Last: 0:00:00.005676 \tTotal: 0:00:50.978348\n",[m
[32m+[m[32m      "[Preprocessing NW_008805582.2] Last: 0:00:00.005385 \tTotal: 0:00:50.983754\n",[m
[32m+[m[32m      "[Preprocessing NW_018394362.1] Last: 0:00:00.003595 \tTotal: 0:00:50.987369\n",[m
[32m+[m[32m      "[Preprocessing NW_003335050.1] Last: 0:00:00.004687 \tTotal: 0:00:50.992084\n",[m
[32m+[m[32m      "[Preprocessing NW_003337261.2] Last: 0:00:00.005305 \tTotal: 0:00:50.997408\n",[m
[32m+[m[32m      "[Preprocessing NW_003336473.1] Last: 0:00:00.004402 \tTotal: 0:00:51.001829\n",[m
[32m+[m[32m      "[Preprocessing NW_018394363.1] Last: 0:00:00.003684 \tTotal: 0:00:51.005531\n",[m
[32m+[m[32m      "[Preprocessing NW_003334114.1] Last: 0:00:00.004429 \tTotal: 0:00:51.009978\n",[m
[32m+[m[32m      "[Preprocessing NW_003336315.1] Last: 0:00:00.005014 \tTotal: 0:00:51.015011\n",[m
[32m+[m[32m      "[Preprocessing NW_018394364.1] Last: 0:00:00.004658 \tTotal: 0:00:51.019688\n",[m
[32m+[m[32m      "[Preprocessing NW_008805397.1] Last: 0:00:00.004888 \tTotal: 0:00:51.024597\n",[m
[32m+[m[32m      "[Preprocessing NW_003337217.1] Last: 0:00:00.004918 \tTotal: 0:00:51.029534\n",[m
[32m+[m[32m      "[Preprocessing NW_008805564.1] Last: 0:00:00.004378 \tTotal: 0:00:51.033931\n",[m
[32m+[m[32m      "[Preprocessing NW_008805476.1] Last: 0:00:00.004838 \tTotal: 0:00:51.038788\n",[m
[32m+[m[32m      "[Preprocessing NW_018394365.1] Last: 0:00:00.003894 \tTotal: 0:00:51.042701\n",[m
[32m+[m[32m      "[Preprocessing NW_003336830.1] Last: 0:00:00.005777 \tTotal: 0:00:51.048498\n",[m
[32m+[m[32m      "[Preprocessing NW_003336095.2] Last: 0:00:00.005041 \tTotal: 0:00:51.053558\n",[m
[32m+[m[32m      "[Preprocessing NW_003337179.1] Last: 0:00:00.005105 \tTotal: 0:00:51.058681\n",[m
[32m+[m[32m      "[Preprocessing NW_003334233.2] Last: 0:00:00.004451 \tTotal: 0:00:51.063151\n",[m
[32m+[m[32m      "[Preprocessing NW_003336980.1] Last: 0:00:00.005514 \tTotal: 0:00:51.068685\n",[m
[32m+[m[32m      "[Preprocessing NW_008805538.1] Last: 0:00:00.006830 \tTotal: 0:00:51.075533\n",[m
[32m+[m[32m      "[Preprocessing NW_003336573.1] Last: 0:00:00.007163 \tTotal: 0:00:51.082716\n",[m
[32m+[m[32m      "[Preprocessing NW_003337031.1] Last: 0:00:00.005722 \tTotal: 0:00:51.088456\n",[m
[32m+[m[32m      "[Preprocessing NW_008805516.1] Last: 0:00:00.005098 \tTotal: 0:00:51.093572\n",[m
[32m+[m[32m      "[Preprocessing NW_003336488.1] Last: 0:00:00.004306 \tTotal: 0:00:51.097896\n",[m
[32m+[m[32m      "[Preprocessing NW_003334261.1] Last: 0:00:00.005089 \tTotal: 0:00:51.103005\n",[m
[32m+[m[32m      "[Preprocessing NW_003336995.1] Last: 0:00:00.004779 \tTotal: 0:00:51.107804\n",[m
[32m+[m[32m      "[Preprocessing NW_003336489.1] Last: 0:00:00.003922 \tTotal: 0:00:51.111744\n",[m
[32m+[m[32m      "[Preprocessing NW_018394366.1] Last: 0:00:00.006092 \tTotal: 0:00:51.117856\n",[m
[32m+[m[32m      "[Preprocessing NW_003335800.1] Last: 0:00:00.005875 \tTotal: 0:00:51.123751\n",[m
[32m+[m[32m      "[Preprocessing NW_003336826.1] Last: 0:00:00.006267 \tTotal: 0:00:51.130037\n",[m
[32m+[m[32m      "[Preprocessing NW_003337014.1] Last: 0:00:00.005793 \tTotal: 0:00:51.135850\n",[m
[32m+[m[32m      "[Preprocessing NW_003336377.1] Last: 0:00:00.005140 \tTotal: 0:00:51.141007\n",[m
[32m+[m[32m      "[Preprocessing NW_003337187.1] Last: 0:00:00.004998 \tTotal: 0:00:51.146024\n",[m
[32m+[m[32m      "[Preprocessing NW_003336900.1] Last: 0:00:00.004607 \tTotal: 0:00:51.150649\n",[m
[32m+[m[32m      "[Preprocessing NW_003337197.1] Last: 0:00:00.004709 \tTotal: 0:00:51.155389\n",[m
[32m+[m[32m      "[Preprocessing NW_008805366.1] Last: 0:00:00.004885 \tTotal: 0:00:51.160295\n",[m
[32m+[m[32m      "[Preprocessing NW_003337265.1] Last: 0:00:00.007271 \tTotal: 0:00:51.167585\n",[m
[32m+[m[32m      "[Preprocessing NW_008805490.1] Last: 0:00:00.004272 \tTotal: 0:00:51.171875\n",[m
[32m+[m[32m      "[Preprocessing NW_003336924.1] Last: 0:00:00.003696 \tTotal: 0:00:51.175591\n",[m
[32m+[m[32m      "[Preprocessing NW_018394367.1] Last: 0:00:00.003869 \tTotal: 0:00:51.179479\n",[m
[32m+[m[32m      "[Preprocessing NW_003337042.1] Last: 0:00:00.004319 \tTotal: 0:00:51.183818\n",[m
[32m+[m[32m      "[Preprocessing NW_003336349.1] Last: 0:00:00.004443 \tTotal: 0:00:51.188281\n",[m
[32m+[m[32m      "[Preprocessing NW_003336239.1] Last: 0:00:00.004863 \tTotal: 0:00:51.193164\n",[m
[32m+[m[32m      "[Preprocessing NW_003334988.2] Last: 0:00:00.005319 \tTotal: 0:00:51.198504\n",[m
[32m+[m[32m      "[Preprocessing NW_008805441.1] Last: 0:00:00.004984 \tTotal: 0:00:51.203509\n",[m
[32m+[m[32m      "[Preprocessing NW_003337207.1] Last: 0:00:00.004594 \tTotal: 0:00:51.208122\n",[m
[32m+[m[32m      "[Preprocessing NW_003334619.1] Last: 0:00:00.004757 \tTotal: 0:00:51.212900\n",[m
[32m+[m[32m      "[Preprocessing NW_003337109.1] Last: 0:00:00.005661 \tTotal: 0:00:51.218584\n",[m
[32m+[m[32m      "[Preprocessing NW_003336747.1] Last: 0:00:00.004815 \tTotal: 0:00:51.223421\n",[m
[32m+[m[32m      "[Preprocessing NW_003335276.1] Last: 0:00:00.004422 \tTotal: 0:00:51.227862\n",[m
[32m+[m[32m      "[Preprocessing NW_003334281.1] Last: 0:00:00.004657 \tTotal: 0:00:51.232539\n",[m
[32m+[m[32m      "[Preprocessing NW_003336693.1] Last: 0:00:00.003930 \tTotal: 0:00:51.236489\n",[m
[32m+[m[32m      "[Preprocessing NW_003336558.1] Last: 0:00:00.003745 \tTotal: 0:00:51.240253\n",[m
[32m+[m[32m      "[Preprocessing NW_018394368.1] Last: 0:00:00.003442 \tTotal: 0:00:51.243713\n",[m
[32m+[m[32m      "[Preprocessing NW_008805445.1] Last: 0:00:00.005338 \tTotal: 0:00:51.249071\n",[m
[32m+[m[32m      "[Preprocessing NW_003334263.2] Last: 0:00:00.006956 \tTotal: 0:00:51.256048\n",[m
[32m+[m[32m      "[Preprocessing NW_003337162.1] Last: 0:00:00.004613 \tTotal: 0:00:51.260682\n",[m
[32m+[m[32m      "[Preprocessing NW_003336345.1] Last: 0:00:00.006958 \tTotal: 0:00:51.267660\n",[m
[32m+[m[32m      "[Preprocessing NW_003336979.1] Last: 0:00:00.004947 \tTotal: 0:00:51.272627\n",[m
[32m+[m[32m      "[Preprocessing NW_003336912.2] Last: 0:00:00.009378 \tTotal: 0:00:51.282027\n",[m
[32m+[m[32m      "[Preprocessing NW_003336894.1] Last: 0:00:00.005549 \tTotal: 0:00:51.287600\n",[m
[32m+[m[32m      "[Preprocessing NW_008805567.1] Last: 0:00:00.004565 \tTotal: 0:00:51.292185\n",[m
[32m+[m[32m      "[Preprocessing NW_003337034.1] Last: 0:00:00.004903 \tTotal: 0:00:51.297109\n",[m
[32m+[m[32m      "[Preprocessing NW_003336372.1] Last: 0:00:00.004812 \tTotal: 0:00:51.301944\n",[m
[32m+[m[32m      "[Preprocessing NW_003335242.1] Last: 0:00:00.004263 \tTotal: 0:00:51.306230\n",[m
[32m+[m[32m      "[Preprocessing NW_008805401.1] Last: 0:00:00.005198 \tTotal: 0:00:51.311449\n",[m
[32m+[m[32m      "[Preprocessing NW_018394369.1] Last: 0:00:00.004599 \tTotal: 0:00:51.316069\n",[m
[32m+[m[32m      "[Preprocessing NW_003336064.1] Last: 0:00:00.005689 \tTotal: 0:00:51.321781\n",[m
[32m+[m[32m      "[Preprocessing NW_018394370.1] Last: 0:00:00.004448 \tTotal: 0:00:51.326251\n",[m
[32m+[m[32m      "[Preprocessing NW_003334395.2] Last: 0:00:00.004990 \tTotal: 0:00:51.331261\n",[m
[32m+[m[32m      "[Preprocessing NW_003334672.2] Last: 0:00:00.007412 \tTotal: 0:00:51.338695\n",[m
[32m+[m[32m      "[Preprocessing NW_008805527.1] Last: 0:00:00.005345 \tTotal: 0:00:51.344059\n",[m
[32m+[m[32m      "[Preprocessing NW_018394371.1] Last: 0:00:00.004638 \tTotal: 0:00:51.348717\n",[m
[32m+[m[32m      "[Preprocessing NW_003336410.1] Last: 0:00:00.003641 \tTotal: 0:00:51.352381\n",[m
[32m+[m[32m      "[Preprocessing NW_003336484.1] Last: 0:00:00.005787 \tTotal: 0:00:51.358189\n",[m
[32m+[m[32m      "[Preprocessing NW_018394372.1] Last: 0:00:00.004263 \tTotal: 0:00:51.362472\n",[m
[32m+[m[32m      "[Preprocessing NW_008805388.1] Last: 0:00:00.006301 \tTotal: 0:00:51.368791\n",[m
[32m+[m[32m      "[Preprocessing NW_003337189.1] Last: 0:00:00.005153 \tTotal: 0:00:51.373963\n",[m
[32m+[m[32m      "[Preprocessing NW_003336941.1] Last: 0:00:00.004721 \tTotal: 0:00:51.378705\n",[m
[32m+[m[32m      "[Preprocessing NW_003337234.1] Last: 0:00:00.004674 \tTotal: 0:00:51.383400\n",[m
[32m+[m[32m      "[Preprocessing NW_003336465.1] Last: 0:00:00.004812 \tTotal: 0:00:51.388232\n",[m
[32m+[m[32m      "[Preprocessing NW_003336414.1] Last: 0:00:00.004840 \tTotal: 0:00:51.393093\n",[m
[32m+[m[32m      "[Preprocessing NW_008805347.1] Last: 0:00:00.007796 \tTotal: 0:00:51.400910\n",[m
[32m+[m[32m      "[Preprocessing NW_003336781.2] Last: 0:00:00.004749 \tTotal: 0:00:51.405681\n",[m
[32m+[m[32m      "[Preprocessing NW_008805443.1] Last: 0:00:00.004732 \tTotal: 0:00:51.410434\n",[m
[32m+[m[32m      "[Preprocessing NW_003337127.1] Last: 0:00:00.004594 \tTotal: 0:00:51.415048\n",[m
[32m+[m[32m      "[Preprocessing NW_003337161.1] Last: 0:00:00.006027 \tTotal: 0:00:51.421096\n",[m
[32m+[m[32m      "[Preprocessing NW_003335250.1] Last: 0:00:00.004579 \tTotal: 0:00:51.425697\n",[m
[32m+[m[32m      "[Preprocessing NW_003336740.1] Last: 0:00:00.004815 \tTotal: 0:00:51.430530\n",[m
[32m+[m[32m      "[Preprocessing NW_003336729.1] Last: 0:00:00.004573 \tTotal: 0:00:51.435124\n",[m
[32m+[m[32m      "[Preprocessing NW_003337037.1] Last: 0:00:00.007698 \tTotal: 0:00:51.442846\n",[m
[32m+[m[32m      "[Preprocessing NW_003336388.1] Last: 0:00:00.004509 \tTotal: 0:00:51.447383\n",[m
[32m+[m[32m      "[Preprocessing NW_008805543.1] Last: 0:00:00.004708 \tTotal: 0:00:51.452111\n",[m
[32m+[m[32m      "[Preprocessing NW_003336986.1] Last: 0:00:00.004739 \tTotal: 0:00:51.456869\n",[m
[32m+[m[32m      "[Preprocessing NW_003336884.1] Last: 0:00:00.004945 \tTotal: 0:00:51.461833\n",[m
[32m+[m[32m      "[Preprocessing NW_003336766.1] Last: 0:00:00.007049 \tTotal: 0:00:51.468900\n",[m
[32m+[m[32m      "[Preprocessing NW_018394373.1] Last: 0:00:00.004929 \tTotal: 0:00:51.473849\n",[m
[32m+[m[32m      "[Preprocessing NW_003335359.2] Last: 0:00:00.008553 \tTotal: 0:00:51.482431\n",[m
[32m+[m[32m      "[Preprocessing NW_003335796.1] Last: 0:00:00.005015 \tTotal: 0:00:51.487467\n",[m
[32m+[m[32m      "[Preprocessing NW_018394374.1] Last: 0:00:00.005391 \tTotal: 0:00:51.492877\n",[m
[32m+[m[32m      "[Preprocessing NW_003336475.1] Last: 0:00:00.004405 \tTotal: 0:00:51.497299\n",[m
[32m+[m[32m      "[Preprocessing NW_018394375.1] Last: 0:00:00.004526 \tTotal: 0:00:51.501844\n",[m
[32m+[m[32m      "[Preprocessing NW_003335322.1] Last: 0:00:00.004291 \tTotal: 0:00:51.506154\n",[m
[32m+[m[32m      "[Preprocessing NW_018394376.1] Last: 0:00:00.004151 \tTotal: 0:00:51.510323\n",[m
[32m+[m[32m      "[Preprocessing NW_003336354.1] Last: 0:00:00.004449 \tTotal: 0:00:51.514792\n",[m
[32m+[m[32m      "[Preprocessing NW_008805555.1] Last: 0:00:00.004295 \tTotal: 0:00:51.519105\n",[m
[32m+[m[32m      "[Preprocessing NW_008805384.1] Last: 0:00:00.006278 \tTotal: 0:00:51.525402\n",[m
[32m+[m[32m      "[Preprocessing NW_003336517.2] Last: 0:00:00.005643 \tTotal: 0:00:51.531064\n",[m
[32m+[m[32m      "[Preprocessing NW_008805449.1] Last: 0:00:00.004771 \tTotal: 0:00:51.535854\n",[m
[32m+[m[32m      "[Preprocessing NW_003334443.1] Last: 0:00:00.005684 \tTotal: 0:00:51.541557\n",[m
[32m+[m[32m      "[Preprocessing NW_003336441.1] Last: 0:00:00.004751 \tTotal: 0:00:51.546326\n",[m
[32m+[m[32m      "[Preprocessing NW_003336513.1] Last: 0:00:00.005928 \tTotal: 0:00:51.552273\n",[m
[32m+[m[32m      "[Preprocessing NW_003336398.1] Last: 0:00:00.005180 \tTotal: 0:00:51.557472\n",[m
[32m+[m[32m      "[Preprocessing NW_008805458.1] Last: 0:00:00.007557 \tTotal: 0:00:51.565055\n",[m
[32m+[m[32m      "[Preprocessing NW_003337153.3] Last: 0:00:00.005742 \tTotal: 0:00:51.570824\n",[m
[32m+[m[32m      "[Preprocessing NW_003336792.1] Last: 0:00:00.008710 \tTotal: 0:00:51.579557\n",[m
[32m+[m[32m      "[Preprocessing NW_008805391.1] Last: 0:00:00.007026 \tTotal: 0:00:51.586611\n",[m
[32m+[m[32m      "[Preprocessing NW_003336454.2] Last: 0:00:00.005123 \tTotal: 0:00:51.591760\n",[m
[32m+[m[32m      "[Preprocessing NW_008805393.1] Last: 0:00:00.004284 \tTotal: 0:00:51.596068\n",[m
[32m+[m[32m      "[Preprocessing NW_003337019.1] Last: 0:00:00.004592 \tTotal: 0:00:51.600685\n",[m
[32m+[m[32m      "[Preprocessing NW_003336720.1] Last: 0:00:00.005107 \tTotal: 0:00:51.605819\n",[m
[32m+[m[32m      "[Preprocessing NW_003336420.1] Last: 0:00:00.005032 \tTotal: 0:00:51.610877\n",[m
[32m+[m[32m      "[Preprocessing NW_003336827.1] Last: 0:00:00.004249 \tTotal: 0:00:51.615149\n",[m
[32m+[m[32m      "[Preprocessing NW_003334027.1] Last: 0:00:00.004465 \tTotal: 0:00:51.619641\n",[m
[32m+[m[32m      "[Preprocessing NW_003336661.1] Last: 0:00:00.003803 \tTotal: 0:00:51.623470\n",[m
[32m+[m[32m      "[Preprocessing NW_018394377.1] Last: 0:00:00.004825 \tTotal: 0:00:51.628318\n",[m
[32m+[m[32m      "[Preprocessing NW_003336603.1] Last: 0:00:00.004578 \tTotal: 0:00:51.632919\n",[m
[32m+[m[32m      "[Preprocessing NW_018394378.1] Last: 0:00:00.003932 \tTotal: 0:00:51.636872\n",[m
[32m+[m[32m      "[Preprocessing NW_008805412.1] Last: 0:00:00.006695 \tTotal: 0:00:51.643588\n",[m
[32m+[m[32m      "[Preprocessing NW_003336774.3] Last: 0:00:00.004009 \tTotal: 0:00:51.647618\n",[m
[32m+[m[32m      "[Preprocessing NW_008805369.1] Last: 0:00:00.004555 \tTotal: 0:00:51.652193\n",[m
[32m+[m[32m      "[Preprocessing NW_003336739.1] Last: 0:00:00.004193 \tTotal: 0:00:51.656410\n",[m
[32m+[m[32m      "[Preprocessing NW_003336679.1] Last: 0:00:00.004491 \tTotal: 0:00:51.660925\n",[m
[32m+[m[32m      "[Preprocessing NW_003336613.1] Last: 0:00:00.004154 \tTotal: 0:00:51.665100\n",[m
[32m+[m[32m      "[Preprocessing NW_008805363.1] Last: 0:00:00.004130 \tTotal: 0:00:51.669249\n",[m
[32m+[m[32m      "[Preprocessing NW_003337057.1] Last: 0:00:00.003943 \tTotal: 0:00:51.673212\n",[m
[32m+[m[32m      "[Preprocessing NW_018394379.1] Last: 0:00:00.004727 \tTotal: 0:00:51.677958\n",[m
[32m+[m[32m      "[Preprocessing NW_003336474.1] Last: 0:00:00.003626 \tTotal: 0:00:51.681604\n",[m
[32m+[m[32m      "[Preprocessing NW_003334432.1] Last: 0:00:00.003666 \tTotal: 0:00:51.685289\n",[m
[32m+[m[32m      "[Preprocessing NW_003337146.1] Last: 0:00:00.004089 \tTotal: 0:00:51.689399\n",[m
[32m+[m[32m      "[Preprocessing NW_003336662.1] Last: 0:00:00.004719 \tTotal: 0:00:51.694139\n",[m
[32m+[m[32m      "[Preprocessing NW_003335530.1] Last: 0:00:00.003742 \tTotal: 0:00:51.697905\n",[m
[32m+[m[32m      "[Preprocessing NW_003336612.1] Last: 0:00:00.005818 \tTotal: 0:00:51.703751\n",[m
[32m+[m[32m      "[Preprocessing NW_003336825.1] Last: 0:00:00.003816 \tTotal: 0:00:51.707593\n",[m
[32m+[m[32m      "[Preprocessing NW_018394380.1] Last: 0:00:00.003418 \tTotal: 0:00:51.711032\n",[m
[32m+[m[32m      "[Preprocessing NW_003336934.1] Last: 0:00:00.003730 \tTotal: 0:00:51.714783\n",[m
[32m+[m[32m      "[Preprocessing NW_008805580.1] Last: 0:00:00.003697 \tTotal: 0:00:51.718501\n",[m
[32m+[m[32m      "[Preprocessing NW_003336651.1] Last: 0:00:00.004130 \tTotal: 0:00:51.722663\n",[m
[32m+[m[32m      "[Preprocessing NW_003336399.1] Last: 0:00:00.003544 \tTotal: 0:00:51.726228\n",[m
[32m+[m[32m      "[Preprocessing NW_003337172.1] Last: 0:00:00.003987 \tTotal: 0:00:51.730234\n",[m
[32m+[m[32m      "[Preprocessing NW_003337070.1] Last: 0:00:00.005838 \tTotal: 0:00:51.736093\n",[m
[32m+[m[32m      "[Preprocessing NW_008805450.1] Last: 0:00:00.003750 \tTotal: 0:00:51.739861\n",[m
[32m+[m[32m      "[Preprocessing NW_003336332.1] Last: 0:00:00.003735 \tTotal: 0:00:51.743615\n",[m
[32m+[m[32m      "[Preprocessing NW_003336755.1] Last: 0:00:00.003547 \tTotal: 0:00:51.747180\n",[m
[32m+[m[32m      "[Preprocessing NW_003335891.1] Last: 0:00:00.003784 \tTotal: 0:00:51.750982\n",[m
[32m+[m[32m      "[Preprocessing NW_003336975.1] Last: 0:00:00.003531 \tTotal: 0:00:51.754531\n",[m
[32m+[m[32m      "[Preprocessing NW_003336350.1] Last: 0:00:00.004974 \tTotal: 0:00:51.759524\n",[m
[32m+[m[32m      "[Preprocessing NW_003336646.1] Last: 0:00:00.004363 \tTotal: 0:00:51.763906\n",[m
[32m+[m[32m      "[Preprocessing NW_018394381.1] Last: 0:00:00.004041 \tTotal: 0:00:51.767967\n",[m
[32m+[m[32m      "[Preprocessing NW_018394382.1] Last: 0:00:00.003440 \tTotal: 0:00:51.771427\n",[m
[32m+[m[32m      "[Preprocessing NW_018394383.1] Last: 0:00:00.003425 \tTotal: 0:00:51.774871\n",[m
[32m+[m[32m      "[Preprocessing NW_003334681.2] Last: 0:00:00.004119 \tTotal: 0:00:51.779010\n",[m
[32m+[m[32m      "[Preprocessing NW_003334956.2] Last: 0:00:00.004188 \tTotal: 0:00:51.783218\n",[m
[32m+[m[32m      "[Preprocessing NW_003336583.1] Last: 0:00:00.003818 \tTotal: 0:00:51.787055\n",[m
[32m+[m[32m      "[Preprocessing NW_018394384.1] Last: 0:00:00.003807 \tTotal: 0:00:51.790882\n",[m
[32m+[m[32m      "[Preprocessing NW_003335935.1] Last: 0:00:00.003720 \tTotal: 0:00:51.794622\n",[m
[32m+[m[32m      "[Preprocessing NW_018394385.1] Last: 0:00:00.003696 \tTotal: 0:00:51.798337\n",[m
[32m+[m[32m      "[Preprocessing NW_003336860.1] Last: 0:00:00.004357 \tTotal: 0:00:51.802715\n",[m
[32m+[m[32m      "[Preprocessing NW_003336936.1] Last: 0:00:00.003988 \tTotal: 0:00:51.806722\n",[m
[32m+[m[32m      "[Preprocessing NW_003336553.1] Last: 0:00:00.003817 \tTotal: 0:00:51.810559\n",[m
[32m+[m[32m      "[Preprocessing NW_003336949.3] Last: 0:00:00.004517 \tTotal: 0:00:51.815097\n",[m
[32m+[m[32m      "[Preprocessing NW_003336468.1] Last: 0:00:00.004457 \tTotal: 0:00:51.819575\n",[m
[32m+[m[32m      "[Preprocessing NW_018394386.1] Last: 0:00:00.003949 \tTotal: 0:00:51.823546\n",[m
[32m+[m[32m      "[Preprocessing NW_003336967.1] Last: 0:00:00.004030 \tTotal: 0:00:51.827597\n",[m
[32m+[m[32m      "[Preprocessing NW_003337066.1] Last: 0:00:00.003659 \tTotal: 0:00:51.831276\n",[m
[32m+[m[32m      "[Preprocessing NW_003336742.1] Last: 0:00:00.003928 \tTotal: 0:00:51.835224\n",[m
[32m+[m[32m      "[Preprocessing NW_008805417.1] Last: 0:00:00.003543 \tTotal: 0:00:51.838788\n",[m
[32m+[m[32m      "[Preprocessing NW_003334256.1] Last: 0:00:00.004107 \tTotal: 0:00:51.842916\n",[m
[32m+[m[32m      "[Preprocessing NW_003336520.1] Last: 0:00:00.004072 \tTotal: 0:00:51.847007\n",[m
[32m+[m[32m      "[Preprocessing NW_003336907.1] Last: 0:00:00.003538 \tTotal: 0:00:51.850566\n",[m
[32m+[m[32m      "[Preprocessing NW_003336424.1] Last: 0:00:00.003503 \tTotal: 0:00:51.854088\n",[m
[32m+[m[32m      "[Preprocessing NW_008805549.1] Last: 0:00:00.003139 \tTotal: 0:00:51.857248\n",[m
[32m+[m[32m      "[Preprocessing NW_003337165.1] Last: 0:00:00.005418 \tTotal: 0:00:51.862688\n",[m
[32m+[m[32m      "[Preprocessing NW_008805501.1] Last: 0:00:00.004933 \tTotal: 0:00:51.867642\n",[m
[32m+[m[32m      "[Preprocessing NW_003336407.1] Last: 0:00:00.004922 \tTotal: 0:00:51.872585\n",[m
[32m+[m[32m      "[Preprocessing NW_018394387.1] Last: 0:00:00.003579 \tTotal: 0:00:51.876184\n",[m
[32m+[m[32m      "[Preprocessing NW_008805432.1] Last: 0:00:00.003848 \tTotal: 0:00:51.880051\n",[m
[32m+[m[32m      "[Preprocessing NW_003337190.1] Last: 0:00:00.003788 \tTotal: 0:00:51.883860\n",[m
[32m+[m[32m      "[Preprocessing NW_003336655.1] Last: 0:00:00.003745 \tTotal: 0:00:51.887625\n",[m
[32m+[m[32m      "[Preprocessing NW_008805511.1] Last: 0:00:00.003782 \tTotal: 0:00:51.891427\n",[m
[32m+[m[32m      "[Preprocessing NW_003336325.1] Last: 0:00:00.003372 \tTotal: 0:00:51.894818\n",[m
[32m+[m[32m      "[Preprocessing NW_003336443.1] Last: 0:00:00.003707 \tTotal: 0:00:51.898547\n",[m
[32m+[m[32m      "[Preprocessing NW_003336514.1] Last: 0:00:00.003746 \tTotal: 0:00:51.902313\n",[m
[32m+[m[32m      "[Preprocessing NW_003336593.1] Last: 0:00:00.003731 \tTotal: 0:00:51.906064\n",[m
[32m+[m[32m      "[Preprocessing NW_018394388.1] Last: 0:00:00.003437 \tTotal: 0:00:51.909521\n",[m
[32m+[m[32m      "[Preprocessing NW_003336660.1] Last: 0:00:00.003539 \tTotal: 0:00:51.913079\n",[m
[32m+[m[32m      "[Preprocessing NW_003337253.1] Last: 0:00:00.004141 \tTotal: 0:00:51.917240\n",[m
[32m+[m[32m      "[Preprocessing NW_003335650.1] Last: 0:00:00.006323 \tTotal: 0:00:51.923585\n",[m
[32m+[m[32m      "[Preprocessing NW_003336888.1] Last: 0:00:00.004329 \tTotal: 0:00:51.927935\n",[m
[32m+[m[32m      "[Preprocessing NW_003336421.1] Last: 0:00:00.005446 \tTotal: 0:00:51.933401\n",[m
[32m+[m[32m      "[Preprocessing NW_003337117.1] Last: 0:00:00.004906 \tTotal: 0:00:51.938328\n",[m
[32m+[m[32m      "[Preprocessing NW_003336823.1] Last: 0:00:00.004922 \tTotal: 0:00:51.943272\n",[m
[32m+[m[32m      "[Preprocessing NW_003336389.1] Last: 0:00:00.003578 \tTotal: 0:00:51.946872\n",[m
[32m+[m[32m      "[Preprocessing NW_003336529.1] Last: 0:00:00.003964 \tTotal: 0:00:51.950855\n",[m
[32m+[m[32m      "[Preprocessing NW_003336289.1] Last: 0:00:00.004444 \tTotal: 0:00:51.955318\n",[m
[32m+[m[32m      "[Preprocessing NW_003337218.1] Last: 0:00:00.004445 \tTotal: 0:00:51.959782\n",[m
[32m+[m[32m      "[Preprocessing NW_003337059.1] Last: 0:00:00.004500 \tTotal: 0:00:51.964303\n",[m
[32m+[m[32m      "[Preprocessing NW_003336324.1] Last: 0:00:00.006030 \tTotal: 0:00:51.970353\n",[m
[32m+[m[32m      "[Preprocessing NW_003336872.1] Last: 0:00:00.005679 \tTotal: 0:00:51.976053\n",[m
[32m+[m[32m      "[Preprocessing NW_003334447.1] Last: 0:00:00.006158 \tTotal: 0:00:51.982233\n",[m
[32m+[m[32m      "[Preprocessing NW_003336751.1] Last: 0:00:00.007001 \tTotal: 0:00:51.989254\n",[m
[32m+[m[32m      "[Preprocessing NW_018394389.1] Last: 0:00:00.005337 \tTotal: 0:00:51.994612\n",[m
[32m+[m[32m      "[Preprocessing NW_003336036.1] Last: 0:00:00.005435 \tTotal: 0:00:52.000068\n",[m
[32m+[m[32m      "[Preprocessing NW_008805433.1] Last: 0:00:00.004791 \tTotal: 0:00:52.004880\n",[m
[32m+[m[32m      "[Preprocessing NW_003337088.1] Last: 0:00:00.004576 \tTotal: 0:00:52.009477\n",[m
[32m+[m[32m      "[Preprocessing NW_008805571.1] Last: 0:00:00.004737 \tTotal: 0:00:52.014234\n",[m
[32m+[m[32m      "[Preprocessing NW_003336533.1] Last: 0:00:00.010767 \tTotal: 0:00:52.025021\n",[m
[32m+[m[32m      "[Preprocessing NW_003336725.1] Last: 0:00:00.005605 \tTotal: 0:00:52.030645\n",[m
[32m+[m[32m      "[Preprocessing NW_003334033.1] Last: 0:00:00.005958 \tTotal: 0:00:52.036623\n",[m
[32m+[m[32m      "[Preprocessing NW_008805566.1] Last: 0:00:00.009003 \tTotal: 0:00:52.045645\n",[m
[32m+[m[32m      "[Preprocessing NW_003337182.1] Last: 0:00:00.009917 \tTotal: 0:00:52.055583\n",[m
[32m+[m[32m      "[Preprocessing NW_003336929.1] Last: 0:00:00.010142 \tTotal: 0:00:52.065746\n",[m
[32m+[m[32m      "[Preprocessing NW_003334318.1] Last: 0:00:00.015779 \tTotal: 0:00:52.081547\n",[m
[32m+[m[32m      "[Preprocessing NW_003334404.1] Last: 0:00:00.007202 \tTotal: 0:00:52.088771\n",[m
[32m+[m[32m      "[Preprocessing NW_003336777.1] Last: 0:00:00.006218 \tTotal: 0:00:52.095011\n",[m
[32m+[m[32m      "[Preprocessing NW_003337093.1] Last: 0:00:00.007132 \tTotal: 0:00:52.102164\n",[m
[32m+[m[32m      "[Preprocessing NW_003337176.1] Last: 0:00:00.005795 \tTotal: 0:00:52.107980\n",[m
[32m+[m[32m      "[Preprocessing NW_008805509.1] Last: 0:00:00.012943 \tTotal: 0:00:52.120943\n",[m
[32m+[m[32m      "[Preprocessing NW_003336511.1] Last: 0:00:00.009388 \tTotal: 0:00:52.130352\n",[m
[32m+[m[32m      "[Preprocessing NW_003334589.2] Last: 0:00:00.007541 \tTotal: 0:00:52.137914\n",[m
[32m+[m[32m      "[Preprocessing NW_003336914.1] Last: 0:00:00.006254 \tTotal: 0:00:52.144192\n",[m
[32m+[m[32m      "[Preprocessing NW_003334441.1] Last: 0:00:00.005303 \tTotal: 0:00:52.149517\n",[m
[32m+[m[32m      "[Preprocessing NW_003336471.1] Last: 0:00:00.007183 \tTotal: 0:00:52.156721\n",[m
[32m+[m[32m      "[Preprocessing NW_003335158.1] Last: 0:00:00.006534 \tTotal: 0:00:52.163276\n",[m
[32m+[m[32m      "[Preprocessing NW_008805434.1] Last: 0:00:00.006859 \tTotal: 0:00:52.170155\n",[m
[32m+[m[32m      "[Preprocessing NW_003337008.2] Last: 0:00:00.007000 \tTotal: 0:00:52.177174\n",[m
[32m+[m[32m      "[Preprocessing NW_008805459.1] Last: 0:00:00.007595 \tTotal: 0:00:52.184787\n",[m
[32m+[m[32m      "[Preprocessing NW_003336950.1] Last: 0:00:00.007908 \tTotal: 0:00:52.192715\n",[m
[32m+[m[32m      "[Preprocessing NW_003336868.1] Last: 0:00:00.007987 \tTotal: 0:00:52.200721\n",[m
[32m+[m[32m      "[Preprocessing NW_008805452.1] Last: 0:00:00.006897 \tTotal: 0:00:52.207641\n",[m
[32m+[m[32m      "[Preprocessing NW_003336579.1] Last: 0:00:00.009897 \tTotal: 0:00:52.217562\n",[m
[32m+[m[32m      "[Preprocessing NW_008805545.1] Last: 0:00:00.007674 \tTotal: 0:00:52.225257\n",[m
[32m+[m[32m      "[Preprocessing NW_003335884.2] Last: 0:00:00.007804 \tTotal: 0:00:52.233083\n",[m
[32m+[m[32m      "[Preprocessing NW_003336855.1] Last: 0:00:00.008389 \tTotal: 0:00:52.241495\n",[m
[32m+[m[32m      "[Preprocessing NW_003336341.1] Last: 0:00:00.009192 \tTotal: 0:00:52.250709\n",[m
[32m+[m[32m      "[Preprocessing NW_001884473.4] Last: 0:00:00.015514 \tTotal: 0:00:52.266252\n",[m
[32m+[m[32m      "[Preprocessing NW_003336300.2] Last: 0:00:00.009033 \tTotal: 0:00:52.275314\n",[m
[32m+[m[32m      "[Preprocessing NW_003337263.1] Last: 0:00:00.008010 \tTotal: 0:00:52.283349\n",[m
[32m+[m[32m      "[Preprocessing NW_003336678.1] Last: 0:00:00.009332 \tTotal: 0:00:52.292705\n",[m
[32m+[m[32m      "[Preprocessing NW_003337025.1] Last: 0:00:00.006761 \tTotal: 0:00:52.299490\n",[m
[32m+[m[32m      "[Preprocessing NW_018394390.1] Last: 0:00:00.005609 \tTotal: 0:00:52.305120\n",[m
[32m+[m[32m      "[Preprocessing NW_003336566.1] Last: 0:00:00.012490 \tTotal: 0:00:52.317632\n",[m
[32m+[m[32m      "[Preprocessing NW_008805558.1] Last: 0:00:00.009368 \tTotal: 0:00:52.327021\n",[m
[32m+[m[32m      "[Preprocessing NW_003336913.1] Last: 0:00:00.043772 \tTotal: 0:00:52.370823\n",[m
[32m+[m[32m      "[Preprocessing NW_003336170.1] Last: 0:00:00.007417 \tTotal: 0:00:52.378266\n",[m
[32m+[m[32m      "[Preprocessing NW_003336519.1] Last: 0:00:00.007075 \tTotal: 0:00:52.385365\n",[m
[32m+[m[32m      "[Preprocessing NW_003336466.1] Last: 0:00:00.009770 \tTotal: 0:00:52.395157\n",[m
[32m+[m[32m      "[Preprocessing NW_003337193.1] Last: 0:00:00.007663 \tTotal: 0:00:52.402842\n",[m
[32m+[m[32m      "[Preprocessing NW_003336323.1] Last: 0:00:00.008688 \tTotal: 0:00:52.411551\n",[m
[32m+[m[32m      "[Preprocessing NW_018394391.1] Last: 0:00:00.005899 \tTotal: 0:00:52.417471\n",[m
[32m+[m[32m      "[Preprocessing NW_003336362.1] Last: 0:00:00.006565 \tTotal: 0:00:52.424054\n",[m
[32m+[m[32m      "[Preprocessing NW_003336727.1] Last: 0:00:00.008356 \tTotal: 0:00:52.432430\n",[m
[32m+[m[32m      "[Preprocessing NW_003336625.1] Last: 0:00:00.007894 \tTotal: 0:00:52.440342\n",[m
[32m+[m[32m      "[Preprocessing NW_003335920.1] Last: 0:00:00.008196 \tTotal: 0:00:52.448561\n",[m
[32m+[m[32m      "[Preprocessing NW_003336287.1] Last: 0:00:00.006861 \tTotal: 0:00:52.455445\n",[m
[32m+[m[32m      "[Preprocessing NW_003336643.1] Last: 0:00:00.006228 \tTotal: 0:00:52.461694\n",[m
[32m+[m[32m      "[Preprocessing NW_008805528.1] Last: 0:00:00.008303 \tTotal: 0:00:52.470019\n",[m
[32m+[m[32m      "[Preprocessing NW_008805435.1] Last: 0:00:00.006477 \tTotal: 0:00:52.476518\n",[m
[32m+[m[32m      "[Preprocessing NW_003336675.1] Last: 0:00:00.005462 \tTotal: 0:00:52.482000\n",[m
[32m+[m[32m      "[Preprocessing NW_003337145.1] Last: 0:00:00.006761 \tTotal: 0:00:52.488782\n",[m
[32m+[m[32m      "[Preprocessing NW_018394392.1] Last: 0:00:00.006489 \tTotal: 0:00:52.495291\n",[m
[32m+[m[32m      "[Preprocessing NW_003336859.1] Last: 0:00:00.004951 \tTotal: 0:00:52.500263\n",[m
[32m+[m[32m      "[Preprocessing NW_003337192.1] Last: 0:00:00.005930 \tTotal: 0:00:52.506212\n",[m
[32m+[m[32m      "[Preprocessing NW_003336958.1] Last: 0:00:00.005928 \tTotal: 0:00:52.512159\n",[m
[32m+[m[32m      "[Preprocessing NW_003336403.1] Last: 0:00:00.006245 \tTotal: 0:00:52.518425\n",[m
[32m+[m[32m      "[Preprocessing NW_018394393.1] Last: 0:00:00.005842 \tTotal: 0:00:52.524286\n",[m
[32m+[m[32m      "[Preprocessing NW_018394394.1] Last: 0:00:00.005603 \tTotal: 0:00:52.529910\n",[m
[32m+[m[32m      "[Preprocessing NW_003336374.1] Last: 0:00:00.005602 \tTotal: 0:00:52.535534\n",[m
[32m+[m[32m      "[Preprocessing NW_003334429.1] Last: 0:00:00.004726 \tTotal: 0:00:52.540281\n",[m
[32m+[m[32m      "[Preprocessing NW_003337228.1] Last: 0:00:00.004948 \tTotal: 0:00:52.545249\n",[m
[32m+[m[32m      "[Preprocessing NW_003336836.1] Last: 0:00:00.005173 \tTotal: 0:00:52.550441\n",[m
[32m+[m[32m      "[Preprocessing NW_003337043.1] Last: 0:00:00.006007 \tTotal: 0:00:52.556468\n",[m
[32m+[m[32m      "[Preprocessing NW_003336572.2] Last: 0:00:00.005984 \tTotal: 0:00:52.562473\n",[m
[32m+[m[32m      "[Preprocessing NW_003337239.1] Last: 0:00:00.005346 \tTotal: 0:00:52.567837\n",[m
[32m+[m[32m      "[Preprocessing NW_003337032.1] Last: 0:00:00.005596 \tTotal: 0:00:52.573451\n",[m
[32m+[m[32m      "[Preprocessing NW_003336567.1] Last: 0:00:00.006582 \tTotal: 0:00:52.580052\n",[m
[32m+[m[32m      "[Preprocessing NW_003336877.1] Last: 0:00:00.008459 \tTotal: 0:00:52.588531\n",[m
[32m+[m[32m      "[Preprocessing NW_003336716.1] Last: 0:00:00.007076 \tTotal: 0:00:52.595628\n",[m
[32m+[m[32m      "[Preprocessing NW_008805455.1] Last: 0:00:00.006466 \tTotal: 0:00:52.602115\n",[m
[32m+[m[32m      "[Preprocessing NW_008805502.1] Last: 0:00:00.006711 \tTotal: 0:00:52.608845\n",[m
[32m+[m[32m      "[Preprocessing NW_003335779.1] Last: 0:00:00.010454 \tTotal: 0:00:52.619319\n",[m
[32m+[m[32m      "[Preprocessing NW_003337225.1] Last: 0:00:00.005439 \tTotal: 0:00:52.624779\n",[m
[32m+[m[32m      "[Preprocessing NW_003336961.1] Last: 0:00:00.004698 \tTotal: 0:00:52.629496\n",[m
[32m+[m[32m      "[Preprocessing NW_003334628.1] Last: 0:00:00.004492 \tTotal: 0:00:52.634008\n",[m
[32m+[m[32m      "[Preprocessing NW_003336682.1] Last: 0:00:00.004691 \tTotal: 0:00:52.638718\n",[m
[32m+[m[32m      "[Preprocessing NW_003336761.1] Last: 0:00:00.004553 \tTotal: 0:00:52.643291\n",[m
[32m+[m[32m      "[Preprocessing NW_003336852.1] Last: 0:00:00.004486 \tTotal: 0:00:52.647796\n",[m
[32m+[m[32m      "[Preprocessing NW_003335314.1] Last: 0:00:00.005309 \tTotal: 0:00:52.653125\n",[m
[32m+[m[32m      "[Preprocessing NW_003336623.1] Last: 0:00:00.004605 \tTotal: 0:00:52.657752\n",[m
[32m+[m[32m      "[Preprocessing NW_003336650.1] Last: 0:00:00.006332 \tTotal: 0:00:52.664106\n",[m
[32m+[m[32m      "[Preprocessing NW_003336419.1] Last: 0:00:00.006212 \tTotal: 0:00:52.670342\n",[m
[32m+[m[32m      "[Preprocessing NW_003336355.1] Last: 0:00:00.006389 \tTotal: 0:00:52.676753\n",[m
[32m+[m[32m      "[Preprocessing NW_008805468.1] Last: 0:00:00.006374 \tTotal: 0:00:52.683150\n",[m
[32m+[m[32m      "[Preprocessing NW_003336647.1] Last: 0:00:00.007670 \tTotal: 0:00:52.690842\n",[m
[32m+[m[32m      "[Preprocessing NW_008805550.1] Last: 0:00:00.005795 \tTotal: 0:00:52.696659\n",[m
[32m+[m[32m      "[Preprocessing NW_003336381.1] Last: 0:00:00.005392 \tTotal: 0:00:52.702072\n",[m
[32m+[m[32m      "[Preprocessing NW_003336994.1] Last: 0:00:00.007434 \tTotal: 0:00:52.709526\n",[m
[32m+[m[32m      "[Preprocessing NW_008805557.1] Last: 0:00:00.007571 \tTotal: 0:00:52.717118\n",[m
[32m+[m[32m      "[Preprocessing NW_003336757.1] Last: 0:00:00.009625 \tTotal: 0:00:52.726764\n",[m
[32m+[m[32m      "[Preprocessing NW_003336448.1] Last: 0:00:00.005892 \tTotal: 0:00:52.732676\n",[m
[32m+[m[32m      "[Preprocessing NW_003336540.1] Last: 0:00:00.007902 \tTotal: 0:00:52.740599\n",[m
[32m+[m[32m      "[Preprocessing NW_003336629.1] Last: 0:00:00.006664 \tTotal: 0:00:52.747284\n",[m
[32m+[m[32m      "[Preprocessing NW_003336630.1] Last: 0:00:00.006807 \tTotal: 0:00:52.754112\n",[m
[32m+[m[32m      "[Preprocessing NW_008805473.1] Last: 0:00:00.006413 \tTotal: 0:00:52.760545\n",[m
[32m+[m[32m      "[Preprocessing NW_008805431.1] Last: 0:00:00.006201 \tTotal: 0:00:52.766766\n",[m
[32m+[m[32m      "[Preprocessing NW_003337129.2] Last: 0:00:00.006921 \tTotal: 0:00:52.773707\n",[m
[32m+[m[32m      "[Preprocessing NW_018394395.1] Last: 0:00:00.006710 \tTotal: 0:00:52.780437\n",[m
[32m+[m[32m      "[Preprocessing NW_003336302.1] Last: 0:00:00.005827 \tTotal: 0:00:52.786283\n",[m
[32m+[m[32m      "[Preprocessing NW_003334203.1] Last: 0:00:00.007014 \tTotal: 0:00:52.793318\n",[m
[32m+[m[32m      "[Preprocessing NW_003335321.1] Last: 0:00:00.005750 \tTotal: 0:00:52.799091\n",[m
[32m+[m[32m      "[Preprocessing NW_003335148.1] Last: 0:00:00.004774 \tTotal: 0:00:52.803886\n",[m
[32m+[m[32m      "[Preprocessing NW_018394396.1] Last: 0:00:00.004667 \tTotal: 0:00:52.808574\n",[m
[32m+[m[32m      "[Preprocessing NW_003336277.2] Last: 0:00:00.006381 \tTotal: 0:00:52.814977\n",[m
[32m+[m[32m      "[Preprocessing NW_008805575.1] Last: 0:00:00.004908 \tTotal: 0:00:52.819908\n",[m
[32m+[m[32m      "[Preprocessing NW_003337026.1] Last: 0:00:00.004960 \tTotal: 0:00:52.824889\n",[m
[32m+[m[32m      "[Preprocessing NW_008805491.1] Last: 0:00:00.004767 \tTotal: 0:00:52.829679\n",[m
[32m+[m[32m      "[Preprocessing NW_003336756.1] Last: 0:00:00.005140 \tTotal: 0:00:52.834842\n",[m
[32m+[m[32m      "[Preprocessing NW_003336892.1] Last: 0:00:00.005008 \tTotal: 0:00:52.839871\n",[m
[32m+[m[32m      "[Preprocessing NW_003336840.1] Last: 0:00:00.005809 \tTotal: 0:00:52.845700\n",[m
[32m+[m[32m      "[Preprocessing NW_003336432.1] Last: 0:00:00.004435 \tTotal: 0:00:52.850158\n",[m
[32m+[m[32m      "[Preprocessing NW_008805428.2] Last: 0:00:00.005556 \tTotal: 0:00:52.855736\n",[m
[32m+[m[32m      "[Preprocessing NW_003336968.1] Last: 0:00:00.004917 \tTotal: 0:00:52.860676\n",[m
[32m+[m[32m      "[Preprocessing NW_003336998.2] Last: 0:00:00.010085 \tTotal: 0:00:52.870782\n",[m
[32m+[m[32m      "[Preprocessing NW_003336330.2] Last: 0:00:00.007231 \tTotal: 0:00:52.878033\n",[m
[32m+[m[32m      "[Preprocessing NW_003336600.1] Last: 0:00:00.010115 \tTotal: 0:00:52.888170\n",[m
[32m+[m[32m      "[Preprocessing NW_003336559.1] Last: 0:00:00.008641 \tTotal: 0:00:52.896833\n",[m
[32m+[m[32m      "[Preprocessing NW_003335559.1] Last: 0:00:00.007454 \tTotal: 0:00:52.904307\n",[m
[32m+[m[32m      "[Preprocessing NW_003335764.1] Last: 0:00:00.010259 \tTotal: 0:00:52.914586\n",[m
[32m+[m[32m      "[Preprocessing NW_003334575.1] Last: 0:00:00.007841 \tTotal: 0:00:52.922447\n",[m
[32m+[m[32m      "[Preprocessing NW_018394397.1] Last: 0:00:00.006174 \tTotal: 0:00:52.928640\n",[m
[32m+[m[32m      "[Preprocessing NW_008805385.1] Last: 0:00:00.005618 \tTotal: 0:00:52.934278\n",[m
[32m+[m[32m      "[Preprocessing NW_003335289.1] Last: 0:00:00.006475 \tTotal: 0:00:52.940773\n",[m
[32m+[m[32m      "[Preprocessing NW_008805378.1] Last: 0:00:00.005624 \tTotal: 0:00:52.946418\n",[m
[32m+[m[32m      "[Preprocessing NW_018394398.1] Last: 0:00:00.005967 \tTotal: 0:00:52.952404\n",[m
[32m+[m[32m      "[Preprocessing NW_003336510.1] Last: 0:00:00.007789 \tTotal: 0:00:52.960215\n",[m
[32m+[m[32m      "[Preprocessing NW_003336097.2] Last: 0:00:00.006646 \tTotal: 0:00:52.966885\n",[m
[32m+[m[32m      "[Preprocessing NW_018394399.1] Last: 0:00:00.005092 \tTotal: 0:00:52.972001\n",[m
[32m+[m[32m      "[Preprocessing NW_003335332.2] Last: 0:00:00.006837 \tTotal: 0:00:52.978857\n",[m
[32m+[m[32m      "[Preprocessing NW_003336433.1] Last: 0:00:00.006767 \tTotal: 0:00:52.985644\n",[m
[32m+[m[32m      "[Preprocessing NW_003336541.1] Last: 0:00:00.009562 \tTotal: 0:00:52.995226\n",[m
[32m+[m[32m      "[Preprocessing NW_003336310.1] Last: 0:00:00.007322 \tTotal: 0:00:53.002569\n",[m
[32m+[m[32m      "[Preprocessing NW_003337224.1] Last: 0:00:00.005537 \tTotal: 0:00:53.008126\n",[m
[32m+[m[32m      "[Preprocessing NW_003336283.1] Last: 0:00:00.008612 \tTotal: 0:00:53.016759\n",[m
[32m+[m[32m      "[Preprocessing NW_008805461.1] Last: 0:00:00.006246 \tTotal: 0:00:53.023026\n",[m
[32m+[m[32m      "[Preprocessing NW_003336451.1] Last: 0:00:00.007577 \tTotal: 0:00:53.030623\n",[m
[32m+[m[32m      "[Preprocessing NW_018394400.1] Last: 0:00:00.006590 \tTotal: 0:00:53.037235\n",[m
[32m+[m[32m      "[Preprocessing NW_003335484.2] Last: 0:00:00.005787 \tTotal: 0:00:53.043044\n",[m
[32m+[m[32m      "[Preprocessing NW_003336344.1] Last: 0:00:00.005333 \tTotal: 0:00:53.048396\n",[m
[32m+[m[32m      "[Preprocessing NW_003336919.1] Last: 0:00:00.006131 \tTotal: 0:00:53.054546\n",[m
[32m+[m[32m      "[Preprocessing NW_008805574.1] Last: 0:00:00.005561 \tTotal: 0:00:53.060127\n",[m
[32m+[m[32m      "[Preprocessing NW_003334254.1] Last: 0:00:00.012526 \tTotal: 0:00:53.072677\n",[m
[32m+[m[32m      "[Preprocessing NW_003336850.1] Last: 0:00:00.006851 \tTotal: 0:00:53.079550\n",[m
[32m+[m[32m      "[Preprocessing NW_018394401.1] Last: 0:00:00.006303 \tTotal: 0:00:53.085872\n",[m
[32m+[m[32m      "[Preprocessing NW_003335831.2] Last: 0:00:00.006546 \tTotal: 0:00:53.092439\n",[m
[32m+[m[32m      "[Preprocessing NW_018394402.1] Last: 0:00:00.006818 \tTotal: 0:00:53.099277\n",[m
[32m+[m[32m      "[Preprocessing NW_008805437.1] Last: 0:00:00.004221 \tTotal: 0:00:53.103517\n",[m
[32m+[m[32m      "[Preprocessing NW_003337095.1] Last: 0:00:00.004405 \tTotal: 0:00:53.107941\n",[m
[32m+[m[32m      "[Preprocessing NW_008805346.1] Last: 0:00:00.004582 \tTotal: 0:00:53.112544\n",[m
[32m+[m[32m      "[Preprocessing NW_003337177.1] Last: 0:00:00.004495 \tTotal: 0:00:53.117060\n",[m
[32m+[m[32m      "[Preprocessing NW_003336942.1] Last: 0:00:00.006078 \tTotal: 0:00:53.123158\n",[m
[32m+[m[32m      "[Preprocessing NW_003337121.1] Last: 0:00:00.005627 \tTotal: 0:00:53.128804\n",[m
[32m+[m[32m      "[Preprocessing NW_003336780.1] Last: 0:00:00.005431 \tTotal: 0:00:53.134255\n",[m
[32m+[m[32m      "[Preprocessing NW_008805488.1] Last: 0:00:00.004767 \tTotal: 0:00:53.139042\n",[m
[32m+[m[32m      "[Preprocessing NW_003336525.1] Last: 0:00:00.005552 \tTotal: 0:00:53.144613\n",[m
[32m+[m[32m      "[Preprocessing NW_003336809.1] Last: 0:00:00.004277 \tTotal: 0:00:53.148908\n",[m
[32m+[m[32m      "[Preprocessing NW_003336547.1] Last: 0:00:00.004269 \tTotal: 0:00:53.153196\n",[m
[32m+[m[32m      "[Preprocessing NW_018394403.1] Last: 0:00:00.005374 \tTotal: 0:00:53.158589\n",[m
[32m+[m[32m      "[Preprocessing NW_018394404.1] Last: 0:00:00.004179 \tTotal: 0:00:53.162789\n",[m
[32m+[m[32m      "[Preprocessing NW_008805383.1] Last: 0:00:00.003922 \tTotal: 0:00:53.166732\n",[m
[32m+[m[32m      "[Preprocessing NW_008805517.1] Last: 0:00:00.005228 \tTotal: 0:00:53.171980\n",[m
[32m+[m[32m      "[Preprocessing NW_003335383.2] Last: 0:00:00.006767 \tTotal: 0:00:53.178770\n",[m
[32m+[m[32m      "[Preprocessing NW_003336977.1] Last: 0:00:00.005363 \tTotal: 0:00:53.184155\n",[m
[32m+[m[32m      "[Preprocessing NW_003336687.2] Last: 0:00:00.004288 \tTotal: 0:00:53.188463\n",[m
[32m+[m[32m      "[Preprocessing NW_003336760.1] Last: 0:00:00.004652 \tTotal: 0:00:53.193135\n",[m
[32m+[m[32m      "[Preprocessing NW_003334517.2] Last: 0:00:00.003832 \tTotal: 0:00:53.196988\n",[m
[32m+[m[32m      "[Preprocessing NW_003336483.1] Last: 0:00:00.004725 \tTotal: 0:00:53.201733\n",[m
[32m+[m[32m      "[Preprocessing NW_003336730.1] Last: 0:00:00.008257 \tTotal: 0:00:53.210013\n",[m
[32m+[m[32m      "[Preprocessing NW_008805382.1] Last: 0:00:00.003885 \tTotal: 0:00:53.213918\n",[m
[32m+[m[32m      "[Preprocessing NW_003337075.1] Last: 0:00:00.004988 \tTotal: 0:00:53.218927\n",[m
[32m+[m[32m      "[Preprocessing NW_003336711.1] Last: 0:00:00.004288 \tTotal: 0:00:53.223235\n",[m
[32m+[m[32m      "[Preprocessing NW_008805470.1] Last: 0:00:00.004096 \tTotal: 0:00:53.227352\n",[m
[32m+[m[32m      "[Preprocessing NW_008805365.1] Last: 0:00:00.003857 \tTotal: 0:00:53.231231\n",[m
[32m+[m[32m      "[Preprocessing NW_003337045.1] Last: 0:00:00.004236 \tTotal: 0:00:53.235490\n",[m
[32m+[m[32m      "[Preprocessing NW_003336945.1] Last: 0:00:00.004818 \tTotal: 0:00:53.240330\n",[m
[32m+[m[32m      "[Preprocessing NW_003334670.1] Last: 0:00:00.004608 \tTotal: 0:00:53.244959\n",[m
[32m+[m[32m      "[Preprocessing NW_003335933.1] Last: 0:00:00.004914 \tTotal: 0:00:53.249894\n",[m
[32m+[m[32m      "[Preprocessing NW_018394405.1] Last: 0:00:00.004187 \tTotal: 0:00:53.254103\n",[m
[32m+[m[32m      "[Preprocessing NW_003337229.1] Last: 0:00:00.005498 \tTotal: 0:00:53.259624\n",[m
[32m+[m[32m      "[Preprocessing NW_003336897.1] Last: 0:00:00.004733 \tTotal: 0:00:53.264406\n",[m
[32m+[m[32m      "[Preprocessing NW_018394406.1] Last: 0:00:00.003959 \tTotal: 0:00:53.268392\n",[m
[32m+[m[32m      "[Preprocessing NW_003336621.1] Last: 0:00:00.004789 \tTotal: 0:00:53.273201\n",[m
[32m+[m[32m      "[Preprocessing NW_003336773.1] Last: 0:00:00.004213 \tTotal: 0:00:53.277434\n",[m
[32m+[m[32m      "[Preprocessing NW_003335387.1] Last: 0:00:00.005038 \tTotal: 0:00:53.282491\n",[m
[32m+[m[32m      "[Preprocessing NW_003336636.1] Last: 0:00:00.004623 \tTotal: 0:00:53.287132\n",[m
[32m+[m[32m      "[Preprocessing NW_003335143.1] Last: 0:00:00.004641 \tTotal: 0:00:53.291793\n",[m
[32m+[m[32m      "[Preprocessing NW_018394407.1] Last: 0:00:00.004136 \tTotal: 0:00:53.295946\n",[m
[32m+[m[32m      "[Preprocessing NW_008805544.1] Last: 0:00:00.004518 \tTotal: 0:00:53.300482\n",[m
[32m+[m[32m      "[Preprocessing NW_003336645.1] Last: 0:00:00.004798 \tTotal: 0:00:53.305300\n",[m
[32m+[m[32m      "[Preprocessing NW_003336956.1] Last: 0:00:00.005102 \tTotal: 0:00:53.310420\n",[m
[32m+[m[32m      "[Preprocessing NW_003336568.1] Last: 0:00:00.005850 \tTotal: 0:00:53.316290\n",[m
[32m+[m[32m      "[Preprocessing NW_003335153.1] Last: 0:00:00.004349 \tTotal: 0:00:53.320657\n",[m
[32m+[m[32m      "[Preprocessing NW_003336758.1] Last: 0:00:00.005881 \tTotal: 0:00:53.326559\n",[m
[32m+[m[32m      "[Preprocessing NW_003336554.1] Last: 0:00:00.004001 \tTotal: 0:00:53.330578\n",[m
[32m+[m[32m      "[Preprocessing NW_003337184.1] Last: 0:00:00.004852 \tTotal: 0:00:53.335448\n",[m
[32m+[m[32m      "[Preprocessing NW_018394408.1] Last: 0:00:00.004822 \tTotal: 0:00:53.340289\n",[m
[32m+[m[32m      "[Preprocessing NW_003337069.1] Last: 0:00:00.005813 \tTotal: 0:00:53.346123\n",[m
[32m+[m[32m      "[Preprocessing NW_003334245.1] Last: 0:00:00.007850 \tTotal: 0:00:53.353996\n",[m
[32m+[m[32m      "[Preprocessing NW_003336976.1] Last: 0:00:00.007045 \tTotal: 0:00:53.361062\n",[m
[32m+[m[32m      "[Preprocessing NW_008805356.1] Last: 0:00:00.005661 \tTotal: 0:00:53.366743\n",[m
[32m+[m[32m      "[Preprocessing NW_003337033.1] Last: 0:00:00.007385 \tTotal: 0:00:53.374149\n",[m
[32m+[m[32m      "[Preprocessing NW_003334265.1] Last: 0:00:00.005279 \tTotal: 0:00:53.379449\n",[m
[32m+[m[32m      "[Preprocessing NW_003335386.2] Last: 0:00:00.008640 \tTotal: 0:00:53.388110\n",[m
[32m+[m[32m      "[Preprocessing NW_018394409.1] Last: 0:00:00.004223 \tTotal: 0:00:53.392354\n",[m
[32m+[m[32m      "[Preprocessing NW_003337126.1] Last: 0:00:00.004709 \tTotal: 0:00:53.397084\n",[m
[32m+[m[32m      "[Preprocessing NW_008805568.1] Last: 0:00:00.004528 \tTotal: 0:00:53.401632\n",[m
[32m+[m[32m      "[Preprocessing NW_003335459.1] Last: 0:00:00.004682 \tTotal: 0:00:53.406333\n",[m
[32m+[m[32m      "[Preprocessing NW_008805454.1] Last: 0:00:00.004969 \tTotal: 0:00:53.411322\n",[m
[32m+[m[32m      "[Preprocessing NW_003337219.1] Last: 0:00:00.004852 \tTotal: 0:00:53.416193\n",[m
[32m+[m[32m      "[Preprocessing NW_008805426.1] Last: 0:00:00.004931 \tTotal: 0:00:53.421143\n",[m
[32m+[m[32m      "[Preprocessing NW_003334680.2] Last: 0:00:00.005163 \tTotal: 0:00:53.426327\n",[m
[32m+[m[32m      "[Preprocessing NW_018394410.1] Last: 0:00:00.004193 \tTotal: 0:00:53.430542\n",[m
[32m+[m[32m      "[Preprocessing NW_003337194.1] Last: 0:00:00.005493 \tTotal: 0:00:53.436058\n",[m
[32m+[m[32m      "[Preprocessing NW_003337251.1] Last: 0:00:00.007265 \tTotal: 0:00:53.443344\n",[m
[32m+[m[32m      "[Preprocessing NW_003336575.1] Last: 0:00:00.004203 \tTotal: 0:00:53.447572\n",[m
[32m+[m[32m      "[Preprocessing NW_003336966.1] Last: 0:00:00.004484 \tTotal: 0:00:53.452082\n",[m
[32m+[m[32m      "[Preprocessing NW_018394411.1] Last: 0:00:00.004622 \tTotal: 0:00:53.456727\n",[m
[32m+[m[32m      "[Preprocessing NW_008805561.1] Last: 0:00:00.004236 \tTotal: 0:00:53.460984\n",[m
[32m+[m[32m      "[Preprocessing NW_018394412.1] Last: 0:00:00.004682 \tTotal: 0:00:53.465687\n",[m
[32m+[m[32m      "[Preprocessing NW_003336607.1] Last: 0:00:00.003809 \tTotal: 0:00:53.469518\n",[m
[32m+[m[32m      "[Preprocessing NW_008805390.1] Last: 0:00:00.004233 \tTotal: 0:00:53.473772\n",[m
[32m+[m[32m      "[Preprocessing NW_003336361.1] Last: 0:00:00.003742 \tTotal: 0:00:53.477535\n",[m
[32m+[m[32m      "[Preprocessing NW_003336347.1] Last: 0:00:00.004294 \tTotal: 0:00:53.481849\n",[m
[32m+[m[32m      "[Preprocessing NW_003337132.1] Last: 0:00:00.005255 \tTotal: 0:00:53.487123\n",[m
[32m+[m[32m      "[Preprocessing NW_003336635.1] Last: 0:00:00.004017 \tTotal: 0:00:53.491160\n",[m
[32m+[m[32m      "[Preprocessing NW_003336425.1] Last: 0:00:00.004445 \tTotal: 0:00:53.495625\n",[m
[32m+[m[32m      "[Preprocessing NW_003336435.2] Last: 0:00:00.005245 \tTotal: 0:00:53.500890\n",[m
[32m+[m[32m      "[Preprocessing NW_008805499.1] Last: 0:00:00.004459 \tTotal: 0:00:53.505368\n",[m
[32m+[m[32m      "[Preprocessing NW_018394413.1] Last: 0:00:00.004523 \tTotal: 0:00:53.509923\n",[m
[32m+[m[32m      "[Preprocessing NW_003336286.1] Last: 0:00:00.004727 \tTotal: 0:00:53.514669\n",[m
[32m+[m[32m      "[Preprocessing NW_008805415.1] Last: 0:00:00.004095 \tTotal: 0:00:53.518783\n",[m
[32m+[m[32m      "[Preprocessing NW_003336784.1] Last: 0:00:00.005520 \tTotal: 0:00:53.524323\n",[m
[32m+[m[32m      "[Preprocessing NW_003337047.1] Last: 0:00:00.006388 \tTotal: 0:00:53.530731\n",[m
[32m+[m[32m      "[Preprocessing NW_003336681.2] Last: 0:00:00.006529 \tTotal: 0:00:53.537280\n",[m
[32m+[m[32m      "[Preprocessing NW_003336375.1] Last: 0:00:00.005047 \tTotal: 0:00:53.542349\n",[m
[32m+[m[32m      "[Preprocessing NW_018394414.1] Last: 0:00:00.004950 \tTotal: 0:00:53.547320\n",[m
[32m+[m[32m      "[Preprocessing NW_008805551.1] Last: 0:00:00.005456 \tTotal: 0:00:53.552798\n",[m
[32m+[m[32m      "[Preprocessing NW_003337143.1] Last: 0:00:00.006432 \tTotal: 0:00:53.559252\n",[m
[32m+[m[32m      "[Preprocessing NW_003336866.1] Last: 0:00:00.004750 \tTotal: 0:00:53.564025\n",[m
[32m+[m[32m      "[Preprocessing NW_003336494.1] Last: 0:00:00.005315 \tTotal: 0:00:53.569362\n",[m
[32m+[m[32m      "[Preprocessing NW_003336185.1] Last: 0:00:00.005100 \tTotal: 0:00:53.574482\n",[m
[32m+[m[32m      "[Preprocessing NW_003335163.1] Last: 0:00:00.004941 \tTotal: 0:00:53.579442\n",[m
[32m+[m[32m      "[Preprocessing NW_003336169.1] Last: 0:00:00.005498 \tTotal: 0:00:53.584958\n",[m
[32m+[m[32m      "[Preprocessing NW_008805442.1] Last: 0:00:00.004609 \tTotal: 0:00:53.589586\n",[m
[32m+[m[32m      "[Preprocessing NW_003334236.1] Last: 0:00:00.005144 \tTotal: 0:00:53.594751\n",[m
[32m+[m[32m      "[Preprocessing NW_003337222.1] Last: 0:00:00.005171 \tTotal: 0:00:53.599942\n",[m
[32m+[m[32m      "[Preprocessing NW_018394415.1] Last: 0:00:00.004879 \tTotal: 0:00:53.604841\n",[m
[32m+[m[32m      "[Preprocessing NW_003337091.2] Last: 0:00:00.005753 \tTotal: 0:00:53.610615\n",[m
[32m+[m[32m      "[Preprocessing NW_003335757.1] Last: 0:00:00.006192 \tTotal: 0:00:53.616830\n",[m
[32m+[m[32m      "[Preprocessing NW_003336744.1] Last: 0:00:00.007785 \tTotal: 0:00:53.624638\n",[m
[32m+[m[32m      "[Preprocessing NW_003337107.1] Last: 0:00:00.006278 \tTotal: 0:00:53.630935\n",[m
[32m+[m[32m      "[Preprocessing NW_003336869.1] Last: 0:00:00.007921 \tTotal: 0:00:53.638878\n",[m
[32m+[m[32m      "[Preprocessing NW_018394416.1] Last: 0:00:00.008311 \tTotal: 0:00:53.647212\n",[m
[32m+[m[32m      "[Preprocessing NW_018394417.1] Last: 0:00:00.005797 \tTotal: 0:00:53.653028\n",[m
[32m+[m[32m      "[Preprocessing NW_003335350.1] Last: 0:00:00.005762 \tTotal: 0:00:53.658812\n",[m
[32m+[m[32m      "[Preprocessing NW_003334686.1] Last: 0:00:00.004504 \tTotal: 0:00:53.663336\n",[m
[32m+[m[32m      "[Preprocessing NW_018394418.1] Last: 0:00:00.004358 \tTotal: 0:00:53.667715\n",[m
[32m+[m[32m      "[Preprocessing NW_008805367.1] Last: 0:00:00.004562 \tTotal: 0:00:53.672298\n",[m
[32m+[m[32m      "[Preprocessing NW_003335249.1] Last: 0:00:00.004373 \tTotal: 0:00:53.676691\n",[m
[32m+[m[32m      "[Preprocessing NW_008805380.1] Last: 0:00:00.004364 \tTotal: 0:00:53.681074\n",[m
[32m+[m[32m      "[Preprocessing NW_018394419.1] Last: 0:00:00.004182 \tTotal: 0:00:53.685275\n",[m
[32m+[m[32m      "[Preprocessing NW_003337232.1] Last: 0:00:00.005330 \tTotal: 0:00:53.690626\n",[m
[32m+[m[32m      "[Preprocessing NW_003336288.1] Last: 0:00:00.005684 \tTotal: 0:00:53.696333\n",[m
[32m+[m[32m      "[Preprocessing NW_003336492.1] Last: 0:00:00.007206 \tTotal: 0:00:53.703562\n",[m
[32m+[m[32m      "[Preprocessing NW_003335113.1] Last: 0:00:00.004933 \tTotal: 0:00:53.708521\n",[m
[32m+[m[32m      "[Preprocessing NW_003336627.1] Last: 0:00:00.004807 \tTotal: 0:00:53.713353\n",[m
[32m+[m[32m      "[Preprocessing NW_003335654.1] Last: 0:00:00.005715 \tTotal: 0:00:53.719095\n",[m
[32m+[m[32m      "[Preprocessing NW_008805553.1] Last: 0:00:00.003893 \tTotal: 0:00:53.723011\n",[m
[32m+[m[32m      "[Preprocessing NW_003336293.1] Last: 0:00:00.003408 \tTotal: 0:00:53.726440\n",[m
[32m+[m[32m      "[Preprocessing NW_003334684.1] Last: 0:00:00.004073 \tTotal: 0:00:53.730532\n",[m
[32m+[m[32m      "[Preprocessing NW_003337099.1] Last: 0:00:00.003720 \tTotal: 0:00:53.734272\n",[m
[32m+[m[32m      "[Preprocessing NW_003336918.1] Last: 0:00:00.005106 \tTotal: 0:00:53.739400\n",[m
[32m+[m[32m      "[Preprocessing NW_003336290.1] Last: 0:00:00.003806 \tTotal: 0:00:53.743229\n",[m
[32m+[m[32m      "[Preprocessing NW_003336254.1] Last: 0:00:00.004107 \tTotal: 0:00:53.747356\n",[m
[32m+[m[32m      "[Preprocessing NW_003334519.2] Last: 0:00:00.004202 \tTotal: 0:00:53.751576\n",[m
[32m+[m[32m      "[Preprocessing NW_003336282.1] Last: 0:00:00.003752 \tTotal: 0:00:53.755348\n",[m
[32m+[m[32m      "[Preprocessing NW_003337029.1] Last: 0:00:00.004271 \tTotal: 0:00:53.759638\n",[m
[32m+[m[32m      "[Preprocessing NW_003039384.4] Last: 0:00:00.013860 \tTotal: 0:00:53.773519\n",[m
[32m+[m[32m      "[Preprocessing NW_003336385.1] Last: 0:00:00.004332 \tTotal: 0:00:53.777870\n",[m
[32m+[m[32m      "[Preprocessing NW_008805493.1] Last: 0:00:00.003808 \tTotal: 0:00:53.781696\n",[m
[32m+[m[32m      "[Preprocessing NW_003336874.1] Last: 0:00:00.003843 \tTotal: 0:00:53.785558\n",[m
[32m+[m[32m      "[Preprocessing NW_003334673.3] Last: 0:00:00.007634 \tTotal: 0:00:53.793212\n",[m
[32m+[m[32m      "[Preprocessing NW_003336574.1] Last: 0:00:00.004222 \tTotal: 0:00:53.797452\n",[m
[32m+[m[32m      "[Preprocessing NW_003336326.1] Last: 0:00:00.003936 \tTotal: 0:00:53.801406\n",[m
[32m+[m[32m      "[Preprocessing NW_003336371.1] Last: 0:00:00.003688 \tTotal: 0:00:53.805112\n",[m
[32m+[m[32m      "[Preprocessing NW_003337247.1] Last: 0:00:00.004151 \tTotal: 0:00:53.809286\n",[m
[32m+[m[32m      "[Preprocessing NW_008805440.1] Last: 0:00:00.003632 \tTotal: 0:00:53.812945\n",[m
[32m+[m[32m      "[Preprocessing NW_003337242.1] Last: 0:00:00.004016 \tTotal: 0:00:53.816984\n",[m
[32m+[m[32m      "[Preprocessing NW_018394420.1] Last: 0:00:00.003535 \tTotal: 0:00:53.820537\n",[m
[32m+[m[32m      "[Preprocessing NW_018394421.1] Last: 0:00:00.004323 \tTotal: 0:00:53.824879\n",[m
[32m+[m[32m      "[Preprocessing NW_003336404.2] Last: 0:00:00.005108 \tTotal: 0:00:53.830009\n",[m
[32m+[m[32m      "[Preprocessing NW_003334668.1] Last: 0:00:00.003754 \tTotal: 0:00:53.833782\n",[m
[32m+[m[32m      "[Preprocessing NW_003337111.1] Last: 0:00:00.003732 \tTotal: 0:00:53.837534\n",[m
[32m+[m[32m      "[Preprocessing NW_018394422.1] Last: 0:00:00.003394 \tTotal: 0:00:53.840946\n",[m
[32m+[m[32m      "[Preprocessing NW_003334219.2] Last: 0:00:00.003823 \tTotal: 0:00:53.844789\n",[m
[32m+[m[32m      "[Preprocessing NW_018394423.1] Last: 0:00:00.003727 \tTotal: 0:00:53.848535\n",[m
[32m+[m[32m      "[Preprocessing NW_008805483.1] Last: 0:00:00.004141 \tTotal: 0:00:53.852697\n",[m
[32m+[m[32m      "[Preprocessing NW_003337256.1] Last: 0:00:00.003776 \tTotal: 0:00:53.856492\n",[m
[32m+[m[32m      "[Preprocessing NW_003334032.1] Last: 0:00:00.005297 \tTotal: 0:00:53.861809\n",[m
[32m+[m[32m      "[Preprocessing NW_018394424.1] Last: 0:00:00.003540 \tTotal: 0:00:53.865369\n",[m
[32m+[m[32m      "[Preprocessing NW_008805408.1] Last: 0:00:00.003465 \tTotal: 0:00:53.868863\n",[m
[32m+[m[32m      "[Preprocessing NW_003334182.1] Last: 0:00:00.003657 \tTotal: 0:00:53.872540\n",[m
[32m+[m[32m      "[Preprocessing NW_003336671.1] Last: 0:00:00.004336 \tTotal: 0:00:53.876895\n",[m
[32m+[m[32m      "[Preprocessing NW_003334902.1] Last: 0:00:00.004268 \tTotal: 0:00:53.881183\n",[m
[32m+[m[32m      "[Preprocessing NW_003336847.1] Last: 0:00:00.003461 \tTotal: 0:00:53.884662\n",[m
[32m+[m[32m      "[Preprocessing NW_003336732.1] Last: 0:00:00.008037 \tTotal: 0:00:53.892720\n",[m
[32m+[m[32m      "[Preprocessing NW_018394425.1] Last: 0:00:00.004283 \tTotal: 0:00:53.897024\n",[m
[32m+[m[32m      "[Preprocessing NW_008805462.1] Last: 0:00:00.003183 \tTotal: 0:00:53.900226\n",[m
[32m+[m[32m      "[Preprocessing NW_003337124.1] Last: 0:00:00.003991 \tTotal: 0:00:53.904237\n",[m
[32m+[m[32m      "[Preprocessing NW_003336571.1] Last: 0:00:00.004000 \tTotal: 0:00:53.908258\n",[m
[32m+[m[32m      "[Preprocessing NW_003335266.1] Last: 0:00:00.003635 \tTotal: 0:00:53.911912\n",[m
[32m+[m[32m      "[Preprocessing NW_003336523.1] Last: 0:00:00.003592 \tTotal: 0:00:53.915523\n",[m
[32m+[m[32m      "[Preprocessing NW_018394426.1] Last: 0:00:00.004550 \tTotal: 0:00:53.920092\n",[m
[32m+[m[32m      "[Preprocessing NW_003336837.1] Last: 0:00:00.003807 \tTotal: 0:00:53.923916\n",[m
[32m+[m[32m      "[Preprocessing NW_003336782.1] Last: 0:00:00.003674 \tTotal: 0:00:53.927609\n",[m
[32m+[m[32m      "[Preprocessing NW_003336748.2] Last: 0:00:00.004388 \tTotal: 0:00:53.932016\n",[m
[32m+[m[32m      "[Preprocessing NW_003336333.2] Last: 0:00:00.005842 \tTotal: 0:00:53.937881\n",[m
[32m+[m[32m      "[Preprocessing NW_018394427.1] Last: 0:00:00.004208 \tTotal: 0:00:53.942113\n",[m
[32m+[m[32m      "[Preprocessing NW_003337250.1] Last: 0:00:00.004001 \tTotal: 0:00:53.946135\n",[m
[32m+[m[32m      "[Preprocessing NW_003337137.1] Last: 0:00:00.004191 \tTotal: 0:00:53.950346\n",[m
[32m+[m[32m      "[Preprocessing NW_003336301.1] Last: 0:00:00.003808 \tTotal: 0:00:53.954174\n",[m
[32m+[m[32m      "[Preprocessing NW_003336550.1] Last: 0:00:00.004621 \tTotal: 0:00:53.958816\n",[m
[32m+[m[32m      "[Preprocessing NW_003337164.1] Last: 0:00:00.003635 \tTotal: 0:00:53.962472\n",[m
[32m+[m[32m      "[Preprocessing NW_003336858.1] Last: 0:00:00.005166 \tTotal: 0:00:53.967658\n",[m
[32m+[m[32m      "[Preprocessing NW_003336889.1] Last: 0:00:00.003396 \tTotal: 0:00:53.971073\n",[m
[32m+[m[32m      "[Preprocessing NW_003336684.1] Last: 0:00:00.003604 \tTotal: 0:00:53.974696\n",[m
[32m+[m[32m      "[Preprocessing NW_008805540.1] Last: 0:00:00.003775 \tTotal: 0:00:53.978490\n",[m
[32m+[m[32m      "[Preprocessing NW_003336969.1] Last: 0:00:00.004597 \tTotal: 0:00:53.983107\n",[m
[32m+[m[32m      "[Preprocessing NW_018394428.1] Last: 0:00:00.003553 \tTotal: 0:00:53.986681\n",[m
[32m+[m[32m      "[Preprocessing NW_003336674.1] Last: 0:00:00.003769 \tTotal: 0:00:53.990471\n",[m
[32m+[m[32m      "[Preprocessing NW_003336176.2] Last: 0:00:00.003840 \tTotal: 0:00:53.994331\n",[m
[32m+[m[32m      "[Preprocessing NW_008805419.1] Last: 0:00:00.003596 \tTotal: 0:00:53.997947\n",[m
[32m+[m[32m      "[Preprocessing NW_003336895.1] Last: 0:00:00.004455 \tTotal: 0:00:54.002423\n",[m
[32m+[m[32m      "[Preprocessing NW_008805349.1] Last: 0:00:00.006202 \tTotal: 0:00:54.008648\n",[m
[32m+[m[32m      "[Preprocessing NW_008805495.1] Last: 0:00:00.003533 \tTotal: 0:00:54.012202\n",[m
[32m+[m[32m      "[Preprocessing NW_008805573.1] Last: 0:00:00.005212 \tTotal: 0:00:54.017435\n",[m
[32m+[m[32m      "[Preprocessing NW_008805552.1] Last: 0:00:00.005070 \tTotal: 0:00:54.022527\n",[m
[32m+[m[32m      "[Preprocessing NW_018394429.1] Last: 0:00:00.004687 \tTotal: 0:00:54.027233\n",[m
[32m+[m[32m      "[Preprocessing NW_003337202.1] Last: 0:00:00.003934 \tTotal: 0:00:54.031187\n",[m
[32m+[m[32m      "[Preprocessing NW_003335166.2] Last: 0:00:00.003962 \tTotal: 0:00:54.035170\n",[m
[32m+[m[32m      "[Preprocessing NW_003336321.1] Last: 0:00:00.004031 \tTotal: 0:00:54.039221\n",[m
[32m+[m[32m      "[Preprocessing NW_008805523.1] Last: 0:00:00.003895 \tTotal: 0:00:54.043135\n",[m
[32m+[m[32m      "[Preprocessing NW_003334215.1] Last: 0:00:00.003512 \tTotal: 0:00:54.046665\n",[m
[32m+[m[32m      "[Preprocessing NW_003336365.1] Last: 0:00:00.005572 \tTotal: 0:00:54.052258\n",[m
[32m+[m[32m      "[Preprocessing NW_003336701.2] Last: 0:00:00.003668 \tTotal: 0:00:54.055946\n",[m
[32m+[m[32m      "[Preprocessing NW_018394430.1] Last: 0:00:00.003146 \tTotal: 0:00:54.059109\n",[m
[32m+[m[32m      "[Preprocessing NW_003337097.1] Last: 0:00:00.004392 \tTotal: 0:00:54.063521\n",[m
[32m+[m[32m      "[Preprocessing NW_003334505.1] Last: 0:00:00.003245 \tTotal: 0:00:54.066783\n",[m
[32m+[m[32m      "[Preprocessing NW_003337083.1] Last: 0:00:00.004352 \tTotal: 0:00:54.071154\n",[m
[32m+[m[32m      "[Preprocessing NW_003336480.1] Last: 0:00:00.004870 \tTotal: 0:00:54.076044\n",[m
[32m+[m[32m      "[Preprocessing NW_003336772.2] Last: 0:00:00.003663 \tTotal: 0:00:54.079727\n",[m
[32m+[m[32m      "[Preprocessing NW_003337052.1] Last: 0:00:00.003821 \tTotal: 0:00:54.083568\n",[m
[32m+[m[32m      "[Preprocessing NW_018394431.1] Last: 0:00:00.003416 \tTotal: 0:00:54.087003\n",[m
[32m+[m[32m      "[Preprocessing NW_003337151.1] Last: 0:00:00.003607 \tTotal: 0:00:54.090629\n",[m
[32m+[m[32m      "[Preprocessing NW_008805400.1] Last: 0:00:00.003748 \tTotal: 0:00:54.094397\n",[m
[32m+[m[32m      "[Preprocessing NW_003334814.2] Last: 0:00:00.003937 \tTotal: 0:00:54.098354\n",[m
[32m+[m[32m      "[Preprocessing NW_018394432.1] Last: 0:00:00.004475 \tTotal: 0:00:54.102852\n",[m
[32m+[m[32m      "[Preprocessing NW_008805529.1] Last: 0:00:00.003885 \tTotal: 0:00:54.106760\n",[m
[32m+[m[32m      "[Preprocessing NW_003336436.1] Last: 0:00:00.006416 \tTotal: 0:00:54.113199\n",[m
[32m+[m[32m      "[Preprocessing NW_003337101.1] Last: 0:00:00.005618 \tTotal: 0:00:54.118839\n",[m
[32m+[m[32m      "[Preprocessing NW_003336316.1] Last: 0:00:00.007577 \tTotal: 0:00:54.126438\n",[m
[32m+[m[32m      "[Preprocessing NW_003336458.1] Last: 0:00:00.003780 \tTotal: 0:00:54.130240\n",[m
[32m+[m[32m      "[Preprocessing NW_008805498.1] Last: 0:00:00.004123 \tTotal: 0:00:54.134391\n",[m
[32m+[m[32m      "[Preprocessing NW_018394433.1] Last: 0:00:00.003860 \tTotal: 0:00:54.138270\n",[m
[32m+[m[32m      "[Preprocessing NW_003337044.1] Last: 0:00:00.004165 \tTotal: 0:00:54.142454\n",[m
[32m+[m[32m      "[Preprocessing NW_018394434.1] Last: 0:00:00.003821 \tTotal: 0:00:54.146293\n",[m
[32m+[m[32m      "[Preprocessing NW_003334499.2] Last: 0:00:00.006045 \tTotal: 0:00:54.152357\n",[m
[32m+[m[32m      "[Preprocessing NW_008805463.1] Last: 0:00:00.004269 \tTotal: 0:00:54.156645\n",[m
[32m+[m[32m      "[Preprocessing NW_003336509.1] Last: 0:00:00.005499 \tTotal: 0:00:54.162165\n",[m
[32m+[m[32m      "[Preprocessing NW_003337249.1] Last: 0:00:00.003788 \tTotal: 0:00:54.165976\n",[m
[32m+[m[32m      "[Preprocessing NW_003337078.1] Last: 0:00:00.004348 \tTotal: 0:00:54.170344\n",[m
[32m+[m[32m      "[Preprocessing NW_008805510.1] Last: 0:00:00.003627 \tTotal: 0:00:54.173992\n",[m
[32m+[m[32m      "[Preprocessing NW_003337038.1] Last: 0:00:00.003806 \tTotal: 0:00:54.177818\n",[m
[32m+[m[32m      "[Preprocessing NW_018394435.1] Last: 0:00:00.003754 \tTotal: 0:00:54.181592\n",[m
[32m+[m[32m      "[Preprocessing NW_008805430.1] Last: 0:00:00.003183 \tTotal: 0:00:54.184793\n",[m
[32m+[m[32m      "[Preprocessing NW_003337255.1] Last: 0:00:00.004435 \tTotal: 0:00:54.189247\n",[m
[32m+[m[32m      "[Preprocessing NW_018394436.1] Last: 0:00:00.004260 \tTotal: 0:00:54.193526\n",[m
[32m+[m[32m      "[Preprocessing NW_003336328.1] Last: 0:00:00.003880 \tTotal: 0:00:54.197424\n",[m
[32m+[m[32m      "[Preprocessing NW_003337106.1] Last: 0:00:00.003951 \tTotal: 0:00:54.201394\n",[m
[32m+[m[32m      "[Preprocessing NW_003335906.1] Last: 0:00:00.005311 \tTotal: 0:00:54.206726\n",[m
[32m+[m[32m      "[Preprocessing NW_003336659.1] Last: 0:00:00.004065 \tTotal: 0:00:54.210812\n",[m
[32m+[m[32m      "[Preprocessing NW_018394437.1] Last: 0:00:00.003386 \tTotal: 0:00:54.214218\n",[m
[32m+[m[32m      "[Preprocessing NW_008805465.1] Last: 0:00:00.003874 \tTotal: 0:00:54.218114\n",[m
[32m+[m[32m      "[Preprocessing NW_003336689.1] Last: 0:00:00.003602 \tTotal: 0:00:54.221735\n",[m
[32m+[m[32m      "[Preprocessing NW_003336699.1] Last: 0:00:00.004170 \tTotal: 0:00:54.225925\n",[m
[32m+[m[32m      "[Preprocessing NW_003336743.1] Last: 0:00:00.003617 \tTotal: 0:00:54.229561\n",[m
[32m+[m[32m      "[Preprocessing NW_003336274.1] Last: 0:00:00.004246 \tTotal: 0:00:54.233827\n",[m
[32m+[m[32m      "[Preprocessing NW_008805420.1] Last: 0:00:00.003699 \tTotal: 0:00:54.237544\n",[m
[32m+[m[32m      "[Preprocessing NW_003336845.1] Last: 0:00:00.003708 \tTotal: 0:00:54.241271\n",[m
[32m+[m[32m      "[Preprocessing NW_003334453.1] Last: 0:00:00.003788 \tTotal: 0:00:54.245078\n",[m
[32m+[m[32m      "[Preprocessing NW_003336073.1] Last: 0:00:00.003673 \tTotal: 0:00:54.248771\n",[m
[32m+[m[32m      "[Preprocessing NW_003337028.1] Last: 0:00:00.004118 \tTotal: 0:00:54.252907\n",[m
[32m+[m[32m      "[Preprocessing NW_003337060.1] Last: 0:00:00.005821 \tTotal: 0:00:54.258749\n",[m
[32m+[m[32m      "[Preprocessing NW_008805466.1] Last: 0:00:00.003432 \tTotal: 0:00:54.262200\n",[m
[32m+[m[32m      "[Preprocessing NW_003337131.2] Last: 0:00:00.003987 \tTotal: 0:00:54.266205\n",[m
[32m+[m[32m      "[Preprocessing NW_003335638.2] Last: 0:00:00.003604 \tTotal: 0:00:54.269830\n",[m
[32m+[m[32m      "[Preprocessing NW_003336921.1] Last: 0:00:00.004073 \tTotal: 0:00:54.273923\n",[m
[32m+[m[32m      "[Preprocessing NW_008805535.1] Last: 0:00:00.004494 \tTotal: 0:00:54.278436\n",[m
[32m+[m[32m      "[Preprocessing NW_003336493.1] Last: 0:00:00.003908 \tTotal: 0:00:54.282363\n",[m
[32m+[m[32m      "[Preprocessing NW_003334669.1] Last: 0:00:00.004015 \tTotal: 0:00:54.286397\n",[m
[32m+[m[32m      "[Preprocessing NW_003337136.1] Last: 0:00:00.003597 \tTotal: 0:00:54.290013\n",[m
[32m+[m[32m      "[Preprocessing NW_003336457.1] Last: 0:00:00.003755 \tTotal: 0:00:54.293787\n",[m
[32m+[m[32m      "[Preprocessing NW_008805448.1] Last: 0:00:00.003292 \tTotal: 0:00:54.297097\n",[m
[32m+[m[32m      "[Preprocessing NW_003336649.1] Last: 0:00:00.003415 \tTotal: 0:00:54.300534\n",[m
[32m+[m[32m      "[Preprocessing NW_018394438.1] Last: 0:00:00.004090 \tTotal: 0:00:54.304644\n",[m
[32m+[m[32m      "[Preprocessing NW_003337080.1] Last: 0:00:00.003163 \tTotal: 0:00:54.307827\n",[m
[32m+[m[32m      "[Preprocessing NW_003335691.1] Last: 0:00:00.003767 \tTotal: 0:00:54.311614\n",[m
[32m+[m[32m      "[Preprocessing NW_003335184.2] Last: 0:00:00.003253 \tTotal: 0:00:54.314885\n",[m
[32m+[m[32m      "[Preprocessing NW_003337154.1] Last: 0:00:00.003600 \tTotal: 0:00:54.318504\n",[m
[32m+[m[32m      "[Preprocessing NW_003336721.1] Last: 0:00:00.003336 \tTotal: 0:00:54.321859\n",[m
[32m+[m[32m      "[Preprocessing NW_018394439.1] Last: 0:00:00.003579 \tTotal: 0:00:54.325457\n",[m
[32m+[m[32m      "[Preprocessing NW_008805398.1] Last: 0:00:00.004320 \tTotal: 0:00:54.329796\n",[m
[32m+[m[32m      "[Preprocessing NW_018394440.1] Last: 0:00:00.003698 \tTotal: 0:00:54.333517\n",[m
[32m+[m[32m      "[Preprocessing NW_003337204.1] Last: 0:00:00.006474 \tTotal: 0:00:54.340019\n",[m
[32m+[m[32m      "[Preprocessing NW_003336392.1] Last: 0:00:00.004171 \tTotal: 0:00:54.344214\n",[m
[32m+[m[32m      "[Preprocessing NW_003336948.1] Last: 0:00:00.003932 \tTotal: 0:00:54.348166\n",[m
[32m+[m[32m      "[Preprocessing NW_003337160.1] Last: 0:00:00.003983 \tTotal: 0:00:54.352168\n",[m
[32m+[m[32m      "[Preprocessing NW_018394441.1] Last: 0:00:00.003320 \tTotal: 0:00:54.355507\n",[m
[32m+[m[32m      "[Preprocessing NW_018394442.1] Last: 0:00:00.003591 \tTotal: 0:00:54.359116\n",[m
[32m+[m[32m      "[Preprocessing NW_003337258.1] Last: 0:00:00.007220 \tTotal: 0:00:54.366356\n",[m
[32m+[m[32m      "[Preprocessing NW_018394443.1] Last: 0:00:00.003152 \tTotal: 0:00:54.369527\n",[m
[32m+[m[32m      "[Preprocessing NW_003336415.1] Last: 0:00:00.004066 \tTotal: 0:00:54.373611\n",[m
[32m+[m[32m      "[Preprocessing NW_003335185.2] Last: 0:00:00.004002 \tTotal: 0:00:54.377634\n",[m
[32m+[m[32m      "[Preprocessing NW_003336815.1] Last: 0:00:00.003452 \tTotal: 0:00:54.381106\n",[m
[32m+[m[32m      "[Preprocessing NW_003335384.1] Last: 0:00:00.004489 \tTotal: 0:00:54.385617\n",[m
[32m+[m[32m      "[Preprocessing NW_003334656.2] Last: 0:00:00.005478 \tTotal: 0:00:54.391117\n",[m
[32m+[m[32m      "[Preprocessing NW_003336843.1] Last: 0:00:00.005516 \tTotal: 0:00:54.396656\n",[m
[32m+[m[32m      "[Preprocessing NW_003336937.1] Last: 0:00:00.004430 \tTotal: 0:00:54.401106\n",[m
[32m+[m[32m      "[Preprocessing NW_003337186.1] Last: 0:00:00.003471 \tTotal: 0:00:54.404596\n",[m
[32m+[m[32m      "[Preprocessing NW_003336299.1] Last: 0:00:00.005049 \tTotal: 0:00:54.409665\n",[m
[32m+[m[32m      "[Preprocessing NW_003335051.1] Last: 0:00:00.003527 \tTotal: 0:00:54.413211\n",[m
[32m+[m[32m      "[Preprocessing NW_003336746.1] Last: 0:00:00.003971 \tTotal: 0:00:54.417202\n",[m
[32m+[m[32m      "[Preprocessing NW_018394444.1] Last: 0:00:00.003251 \tTotal: 0:00:54.420473\n",[m
[32m+[m[32m      "[Preprocessing NW_003337123.1] Last: 0:00:00.004148 \tTotal: 0:00:54.424640\n",[m
[32m+[m[32m      "[Preprocessing NW_003336614.1] Last: 0:00:00.003539 \tTotal: 0:00:54.428199\n",[m
[32m+[m[32m      "[Preprocessing NW_003337122.1] Last: 0:00:00.003865 \tTotal: 0:00:54.432084\n",[m
[32m+[m[32m      "[Preprocessing NW_003337010.1] Last: 0:00:00.004679 \tTotal: 0:00:54.436784\n",[m
[32m+[m[32m      "[Preprocessing NW_008805387.1] Last: 0:00:00.004352 \tTotal: 0:00:54.441155\n",[m
[32m+[m[32m      "[Preprocessing NW_003334683.1] Last: 0:00:00.006519 \tTotal: 0:00:54.447695\n",[m
[32m+[m[32m      "[Preprocessing NW_008805351.2] Last: 0:00:00.003602 \tTotal: 0:00:54.451316\n",[m
[32m+[m[32m      "[Preprocessing NW_003336876.1] Last: 0:00:00.004110 \tTotal: 0:00:54.455449\n",[m
[32m+[m[32m      "[Preprocessing NW_003336088.1] Last: 0:00:00.004615 \tTotal: 0:00:54.460099\n",[m
[32m+[m[32m      "[Preprocessing NW_003336703.1] Last: 0:00:00.006789 \tTotal: 0:00:54.466918\n",[m
[32m+[m[32m      "[Preprocessing NW_003337116.1] Last: 0:00:00.005536 \tTotal: 0:00:54.472476\n",[m
[32m+[m[32m      "[Preprocessing NW_003336370.1] Last: 0:00:00.004369 \tTotal: 0:00:54.476866\n",[m
[32m+[m[32m      "[Preprocessing NW_008805394.1] Last: 0:00:00.004739 \tTotal: 0:00:54.481626\n",[m
[32m+[m[32m      "[Preprocessing NW_003337241.1] Last: 0:00:00.006025 \tTotal: 0:00:54.487674\n",[m
[32m+[m[32m      "[Preprocessing NW_008805409.1] Last: 0:00:00.003370 \tTotal: 0:00:54.491064\n",[m
[32m+[m[32m      "[Preprocessing NW_008805532.1] Last: 0:00:00.003811 \tTotal: 0:00:54.494894\n",[m
[32m+[m[32m      "[Preprocessing NW_003336281.1] Last: 0:00:00.004218 \tTotal: 0:00:54.499132\n",[m
[32m+[m[32m      "[Preprocessing NW_003336974.1] Last: 0:00:00.005738 \tTotal: 0:00:54.504891\n",[m
[32m+[m[32m      "[Preprocessing NW_003336915.1] Last: 0:00:00.003545 \tTotal: 0:00:54.508458\n",[m
[32m+[m[32m      "[Preprocessing NW_003336957.1] Last: 0:00:00.008331 \tTotal: 0:00:54.516811\n",[m
[32m+[m[32m      "[Preprocessing NW_003335355.2] Last: 0:00:00.004221 \tTotal: 0:00:54.521052\n",[m
[32m+[m[32m      "[Preprocessing NW_003336343.1] Last: 0:00:00.003953 \tTotal: 0:00:54.525024\n",[m
[32m+[m[32m      "[Preprocessing NW_003335319.1] Last: 0:00:00.004973 \tTotal: 0:00:54.530016\n",[m
[32m+[m[32m      "[Preprocessing NW_003337198.1] Last: 0:00:00.003977 \tTotal: 0:00:54.534012\n",[m
[32m+[m[32m      "[Preprocessing NW_018394445.1] Last: 0:00:00.003761 \tTotal: 0:00:54.537792\n",[m
[32m+[m[32m      "[Preprocessing NW_003334832.2] Last: 0:00:00.004364 \tTotal: 0:00:54.542175\n",[m
[32m+[m[32m      "[Preprocessing NW_003336802.1] Last: 0:00:00.003521 \tTotal: 0:00:54.545715\n",[m
[32m+[m[32m      "[Preprocessing NW_003337159.1] Last: 0:00:00.004340 \tTotal: 0:00:54.550074\n",[m
[32m+[m[32m      "[Preprocessing NW_003336917.1] Last: 0:00:00.003704 \tTotal: 0:00:54.553802\n",[m
[32m+[m[32m      "[Preprocessing NW_003336925.1] Last: 0:00:00.004529 \tTotal: 0:00:54.558353\n",[m
[32m+[m[32m      "[Preprocessing NW_003336831.1] Last: 0:00:00.004587 \tTotal: 0:00:54.562960\n",[m
[32m+[m[32m      "[Preprocessing NW_003336940.1] Last: 0:00:00.005313 \tTotal: 0:00:54.568296\n",[m
[32m+[m[32m      "[Preprocessing NW_003336667.1] Last: 0:00:00.003971 \tTotal: 0:00:54.572290\n",[m
[32m+[m[32m      "[Preprocessing NW_003336666.1] Last: 0:00:00.003830 \tTotal: 0:00:54.576141\n",[m
[32m+[m[32m      "[Preprocessing NW_003335161.1] Last: 0:00:00.003721 \tTotal: 0:00:54.579882\n",[m
[32m+[m[32m      "[Preprocessing NW_003336430.1] Last: 0:00:00.003456 \tTotal: 0:00:54.583358\n",[m
[32m+[m[32m      "[Preprocessing NW_003336764.1] Last: 0:00:00.004493 \tTotal: 0:00:54.587872\n",[m
[32m+[m[32m      "[Preprocessing NW_008805514.1] Last: 0:00:00.003601 \tTotal: 0:00:54.591493\n",[m
[32m+[m[32m      "[Preprocessing NW_003334034.2] Last: 0:00:00.004736 \tTotal: 0:00:54.596250\n",[m
[32m+[m[32m      "[Preprocessing NW_003336507.1] Last: 0:00:00.004020 \tTotal: 0:00:54.600292\n",[m
[32m+[m[32m      "[Preprocessing NW_003336336.1] Last: 0:00:00.004135 \tTotal: 0:00:54.604448\n",[m
[32m+[m[32m      "[Preprocessing NW_008805559.1] Last: 0:00:00.003702 \tTotal: 0:00:54.608171\n",[m
[32m+[m[32m      "[Preprocessing NW_003337062.1] Last: 0:00:00.004627 \tTotal: 0:00:54.612821\n",[m
[32m+[m[32m      "[Preprocessing NW_003336990.1] Last: 0:00:00.003987 \tTotal: 0:00:54.616829\n",[m
[32m+[m[32m      "[Preprocessing NW_003336715.1] Last: 0:00:00.003943 \tTotal: 0:00:54.620811\n",[m
[32m+[m[32m      "[Preprocessing NW_003337071.1] Last: 0:00:00.004101 \tTotal: 0:00:54.624932\n",[m
[32m+[m[32m      "[Preprocessing NW_003336294.1] Last: 0:00:00.004968 \tTotal: 0:00:54.629920\n",[m
[32m+[m[32m      "[Preprocessing NW_003337196.1] Last: 0:00:00.004254 \tTotal: 0:00:54.634194\n",[m
[32m+[m[32m      "[Preprocessing NW_003336387.2] Last: 0:00:00.004013 \tTotal: 0:00:54.638226\n",[m
[32m+[m[32m      "[Preprocessing NW_003336632.1] Last: 0:00:00.003594 \tTotal: 0:00:54.641838\n",[m
[32m+[m[32m      "[Preprocessing NW_003337120.1] Last: 0:00:00.004383 \tTotal: 0:00:54.646239\n",[m
[32m+[m[32m      "[Preprocessing NW_003337138.1] Last: 0:00:00.004158 \tTotal: 0:00:54.650416\n",[m
[32m+[m[32m      "[Preprocessing NW_003336864.1] Last: 0:00:00.003573 \tTotal: 0:00:54.654007\n",[m
[32m+[m[32m      "[Preprocessing NW_008805480.1] Last: 0:00:00.003862 \tTotal: 0:00:54.657891\n",[m
[32m+[m[32m      "[Preprocessing NW_003336698.1] Last: 0:00:00.003620 \tTotal: 0:00:54.661530\n",[m
[32m+[m[32m      "[Preprocessing NW_003336561.2] Last: 0:00:00.004250 \tTotal: 0:00:54.665800\n",[m
[32m+[m[32m      "[Preprocessing NW_003336997.1] Last: 0:00:00.004751 \tTotal: 0:00:54.670571\n",[m
[32m+[m[32m      "[Preprocessing NW_003336490.1] Last: 0:00:00.004447 \tTotal: 0:00:54.675038\n",[m
[32m+[m[32m      "[Preprocessing NW_003334536.1] Last: 0:00:00.004211 \tTotal: 0:00:54.679268\n",[m
[32m+[m[32m      "[Preprocessing NW_003335922.2] Last: 0:00:00.005916 \tTotal: 0:00:54.685203\n",[m
[32m+[m[32m      "[Preprocessing NW_003334666.3] Last: 0:00:00.004806 \tTotal: 0:00:54.690026\n",[m
[32m+[m[32m      "[Preprocessing NW_018394446.1] Last: 0:00:00.004309 \tTotal: 0:00:54.694355\n",[m
[32m+[m[32m      "[Preprocessing NW_003337068.1] Last: 0:00:00.003657 \tTotal: 0:00:54.698033\n",[m
[32m+[m[32m      "[Preprocessing NW_018394447.1] Last: 0:00:00.004474 \tTotal: 0:00:54.702528\n",[m
[32m+[m[32m      "[Preprocessing NW_003336376.1] Last: 0:00:00.004601 \tTotal: 0:00:54.707148\n",[m
[32m+[m[32m      "[Preprocessing NW_003337205.1] Last: 0:00:00.005876 \tTotal: 0:00:54.713045\n",[m
[32m+[m[32m      "[Preprocessing NW_003335385.1] Last: 0:00:00.006559 \tTotal: 0:00:54.719626\n",[m
[32m+[m[32m      "[Preprocessing NW_003336867.1] Last: 0:00:00.004950 \tTotal: 0:00:54.724598\n",[m
[32m+[m[32m      "[Preprocessing NW_003336461.1] Last: 0:00:00.005356 \tTotal: 0:00:54.729973\n",[m
[32m+[m[32m      "[Preprocessing NW_003337046.1] Last: 0:00:00.007798 \tTotal: 0:00:54.737791\n",[m
[32m+[m[32m      "[Preprocessing NW_003336978.1] Last: 0:00:00.004067 \tTotal: 0:00:54.741879\n",[m
[32m+[m[32m      "[Preprocessing NW_018394448.1] Last: 0:00:00.004185 \tTotal: 0:00:54.746084\n",[m
[32m+[m[32m      "[Preprocessing NW_003337188.1] Last: 0:00:00.004312 \tTotal: 0:00:54.750415\n",[m
[32m+[m[32m      "[Preprocessing NW_003337220.1] Last: 0:00:00.004702 \tTotal: 0:00:54.755137\n",[m
[32m+[m[32m      "[Preprocessing NW_003337199.1] Last: 0:00:00.004326 \tTotal: 0:00:54.759484\n",[m
[32m+[m[32m      "[Preprocessing NW_008805579.1] Last: 0:00:00.005800 \tTotal: 0:00:54.765306\n",[m
[32m+[m[32m      "[Preprocessing NW_003336586.1] Last: 0:00:00.006479 \tTotal: 0:00:54.771808\n",[m
[32m+[m[32m      "[Preprocessing NW_003337096.1] Last: 0:00:00.005440 \tTotal: 0:00:54.777270\n",[m
[32m+[m[32m      "[Preprocessing NW_003336633.1] Last: 0:00:00.005766 \tTotal: 0:00:54.783057\n",[m
[32m+[m[32m      "[Preprocessing NW_018394449.1] Last: 0:00:00.005040 \tTotal: 0:00:54.788117\n",[m
[32m+[m[32m      "[Preprocessing NW_003334452.1] Last: 0:00:00.005759 \tTotal: 0:00:54.793895\n",[m
[32m+[m[32m      "[Preprocessing NW_008805508.1] Last: 0:00:00.005582 \tTotal: 0:00:54.799512\n",[m
[32m+[m[32m      "[Preprocessing NW_003336946.1] Last: 0:00:00.004281 \tTotal: 0:00:54.803815\n",[m
[32m+[m[32m      "[Preprocessing NW_003336903.1] Last: 0:00:00.004747 \tTotal: 0:00:54.808583\n",[m
[32m+[m[32m      "[Preprocessing NW_003336665.1] Last: 0:00:00.004585 \tTotal: 0:00:54.813187\n",[m
[32m+[m[32m      "[Preprocessing NW_003336848.1] Last: 0:00:00.005407 \tTotal: 0:00:54.818614\n",[m
[32m+[m[32m      "[Preprocessing NW_003336996.1] Last: 0:00:00.004689 \tTotal: 0:00:54.823322\n",[m
[32m+[m[32m      "[Preprocessing NW_018394450.1] Last: 0:00:00.005470 \tTotal: 0:00:54.828811\n",[m
[32m+[m[32m      "[Preprocessing NW_008805563.1] Last: 0:00:00.004658 \tTotal: 0:00:54.833487\n",[m
[32m+[m[32m      "[Preprocessing NW_003337200.1] Last: 0:00:00.006842 \tTotal: 0:00:54.840348\n",[m
[32m+[m[32m      "[Preprocessing NW_003337041.1] Last: 0:00:00.005006 \tTotal: 0:00:54.845387\n",[m
[32m+[m[32m      "[Preprocessing NW_008805423.1] Last: 0:00:00.004246 \tTotal: 0:00:54.849654\n",[m
[32m+[m[32m      "[Preprocessing NW_003337006.1] Last: 0:00:00.006393 \tTotal: 0:00:54.856067\n",[m
[32m+[m[32m      "[Preprocessing NW_003336437.1] Last: 0:00:00.004397 \tTotal: 0:00:54.860485\n",[m
[32m+[m[32m      "[Preprocessing NW_003335146.1] Last: 0:00:00.003676 \tTotal: 0:00:54.864181\n",[m
[32m+[m[32m      "[Preprocessing NW_003334875.1] Last: 0:00:00.005105 \tTotal: 0:00:54.869306\n",[m
[32m+[m[32m      "[Preprocessing NW_003335043.1] Last: 0:00:00.007782 \tTotal: 0:00:54.877107\n",[m
[32m+[m[32m      "[Preprocessing NW_003337144.1] Last: 0:00:00.005360 \tTotal: 0:00:54.882488\n",[m
[32m+[m[32m      "[Preprocessing NW_001884381.4] Last: 0:00:00.008536 \tTotal: 0:00:54.891045\n",[m
[32m+[m[32m      "[Preprocessing NW_003336591.1] Last: 0:00:00.004561 \tTotal: 0:00:54.895626\n",[m
[32m+[m[32m      "[Preprocessing NW_003336834.1] Last: 0:00:00.003687 \tTotal: 0:00:54.899331\n",[m
[32m+[m[32m      "[Preprocessing NW_003334243.2] Last: 0:00:00.004928 \tTotal: 0:00:54.904277\n",[m
[32m+[m[32m      "[Preprocessing NW_003336311.1] Last: 0:00:00.004598 \tTotal: 0:00:54.908897\n",[m
[32m+[m[32m      "[Preprocessing NW_003337125.1] Last: 0:00:00.004975 \tTotal: 0:00:54.913894\n",[m
[32m+[m[32m      "[Preprocessing NW_003336663.1] Last: 0:00:00.006903 \tTotal: 0:00:54.920818\n",[m
[32m+[m[32m      "[Preprocessing NW_008805406.1] Last: 0:00:00.003862 \tTotal: 0:00:54.924701\n",[m
[32m+[m[32m      "[Preprocessing NW_003336878.3] Last: 0:00:00.004584 \tTotal: 0:00:54.929303\n",[m
[32m+[m[32m      "[Preprocessing NW_003334899.1] Last: 0:00:00.005241 \tTotal: 0:00:54.934564\n",[m
[32m+[m[32m      "[Preprocessing NW_003337203.1] Last: 0:00:00.006406 \tTotal: 0:00:54.940991\n",[m
[32m+[m[32m      "[Preprocessing NW_003336543.1] Last: 0:00:00.006339 \tTotal: 0:00:54.947352\n",[m
[32m+[m[32m      "[Preprocessing NW_003336886.1] Last: 0:00:00.004122 \tTotal: 0:00:54.951495\n",[m
[32m+[m[32m      "[Preprocessing NW_008805424.1] Last: 0:00:00.004081 \tTotal: 0:00:54.955596\n",[m
[32m+[m[32m      "[Preprocessing NW_003334852.2] Last: 0:00:00.004376 \tTotal: 0:00:54.959993\n",[m
[32m+[m[32m      "[Preprocessing NW_003337156.1] Last: 0:00:00.004452 \tTotal: 0:00:54.964467\n",[m
[32m+[m[32m      "[Preprocessing NW_003336959.1] Last: 0:00:00.004742 \tTotal: 0:00:54.969231\n",[m
[32m+[m[32m      "[Preprocessing NW_003336563.1] Last: 0:00:00.005508 \tTotal: 0:00:54.974760\n",[m
[32m+[m[32m      "[Preprocessing NW_003335149.2] Last: 0:00:00.005144 \tTotal: 0:00:54.979925\n",[m
[32m+[m[32m      "[Preprocessing NW_003336989.1] Last: 0:00:00.003793 \tTotal: 0:00:54.983738\n",[m
[32m+[m[32m      "[Preprocessing NW_003336670.1] Last: 0:00:00.005277 \tTotal: 0:00:54.989036\n",[m
[32m+[m[32m      "[Preprocessing NW_003336808.1] Last: 0:00:00.004929 \tTotal: 0:00:54.993987\n",[m
[32m+[m[32m      "[Preprocessing NW_003336066.1] Last: 0:00:00.004168 \tTotal: 0:00:54.998176\n",[m
[32m+[m[32m      "[Preprocessing NW_003337233.1] Last: 0:00:00.005081 \tTotal: 0:00:55.003277\n",[m
[32m+[m[32m      "[Preprocessing NW_003336308.1] Last: 0:00:00.004709 \tTotal: 0:00:55.008005\n",[m
[32m+[m[32m      "[Preprocessing NW_018394451.1] Last: 0:00:00.005076 \tTotal: 0:00:55.013102\n",[m
[32m+[m[32m      "[Preprocessing NW_018394452.1] Last: 0:00:00.004139 \tTotal: 0:00:55.017263\n",[m
[32m+[m[32m      "[Preprocessing NW_003337002.1] Last: 0:00:00.004569 \tTotal: 0:00:55.021853\n",[m
[32m+[m[32m      "[Preprocessing NW_008805478.1] Last: 0:00:00.004278 \tTotal: 0:00:55.026151\n",[m
[32m+[m[32m      "[Preprocessing NW_003336724.1] Last: 0:00:00.004415 \tTotal: 0:00:55.030587\n",[m
[32m+[m[32m      "[Preprocessing NW_018394453.1] Last: 0:00:00.003842 \tTotal: 0:00:55.034448\n",[m
[32m+[m[32m      "[Preprocessing NW_003337259.1] Last: 0:00:00.004189 \tTotal: 0:00:55.038656\n",[m
[32m+[m[32m      "[Preprocessing NW_003337067.1] Last: 0:00:00.004402 \tTotal: 0:00:55.043079\n",[m
[32m+[m[32m      "[Preprocessing NW_003336685.1] Last: 0:00:00.005382 \tTotal: 0:00:55.048481\n",[m
[32m+[m[32m      "[Preprocessing NW_008805379.1] Last: 0:00:00.005107 \tTotal: 0:00:55.053608\n",[m
[32m+[m[32m      "[Preprocessing NW_003336712.1] Last: 0:00:00.005030 \tTotal: 0:00:55.058657\n",[m
[32m+[m[32m      "[Preprocessing NW_003335907.1] Last: 0:00:00.006071 \tTotal: 0:00:55.064750\n",[m
[32m+[m[32m      "[Preprocessing NW_003336849.1] Last: 0:00:00.005576 \tTotal: 0:00:55.070347\n",[m
[32m+[m[32m      "[Preprocessing NW_003336358.1] Last: 0:00:00.009686 \tTotal: 0:00:55.080055\n",[m
[32m+[m[32m      "[Preprocessing NW_003335647.1] Last: 0:00:00.004115 \tTotal: 0:00:55.084191\n",[m
[32m+[m[32m      "[Preprocessing NW_018394454.1] Last: 0:00:00.004141 \tTotal: 0:00:55.088353\n",[m
[32m+[m[32m      "[Preprocessing NW_003334026.1] Last: 0:00:00.006502 \tTotal: 0:00:55.094877\n",[m
[32m+[m[32m      "[Preprocessing NW_003335052.1] Last: 0:00:00.005091 \tTotal: 0:00:55.099989\n",[m
[32m+[m[32m      "[Preprocessing NW_003336654.1] Last: 0:00:00.006478 \tTotal: 0:00:55.106489\n",[m
[32m+[m[32m      "[Preprocessing NW_003337175.1] Last: 0:00:00.007203 \tTotal: 0:00:55.113715\n",[m
[32m+[m[32m      "[Preprocessing NW_008805541.1] Last: 0:00:00.004437 \tTotal: 0:00:55.118173\n",[m
[32m+[m[32m      "[Preprocessing NW_008805487.1] Last: 0:00:00.005255 \tTotal: 0:00:55.123449\n",[m
[32m+[m[32m      "[Preprocessing NW_003336973.1] Last: 0:00:00.004280 \tTotal: 0:00:55.127750\n",[m
[32m+[m[32m      "[Preprocessing NW_008805438.1] Last: 0:00:00.004442 \tTotal: 0:00:55.132211\n",[m
[32m+[m[32m      "[Preprocessing NW_003336851.1] Last: 0:00:00.004781 \tTotal: 0:00:55.137013\n",[m
[32m+[m[32m      "[Preprocessing NW_008805494.1] Last: 0:00:00.004017 \tTotal: 0:00:55.141049\n",[m
[32m+[m[32m      "[Preprocessing NW_003337115.1] Last: 0:00:00.004665 \tTotal: 0:00:55.145735\n",[m
[32m+[m[32m      "[Preprocessing NW_003336846.1] Last: 0:00:00.004388 \tTotal: 0:00:55.150142\n",[m
[32m+[m[32m      "[Preprocessing NW_003337098.1] Last: 0:00:00.004384 \tTotal: 0:00:55.154546\n",[m
[32m+[m[32m      "[Preprocessing NW_003334071.2] Last: 0:00:00.004673 \tTotal: 0:00:55.159239\n",[m
[32m+[m[32m      "[Preprocessing NW_018394455.1] Last: 0:00:00.003688 \tTotal: 0:00:55.162945\n",[m
[32m+[m[32m      "[Preprocessing NW_003336422.1] Last: 0:00:00.005489 \tTotal: 0:00:55.168454\n",[m
[32m+[m[32m      "[Preprocessing NW_003336580.1] Last: 0:00:00.004430 \tTotal: 0:00:55.172905\n",[m
[32m+[m[32m      "[Preprocessing NW_008805371.1] Last: 0:00:00.004442 \tTotal: 0:00:55.177368\n",[m
[32m+[m[32m      "[Preprocessing NW_008805570.1] Last: 0:00:00.004796 \tTotal: 0:00:55.182194\n",[m
[32m+[m[32m      "[Preprocessing NW_008805539.1] Last: 0:00:00.004496 \tTotal: 0:00:55.186708\n",[m
[32m+[m[32m      "[Preprocessing NW_003336264.2] Last: 0:00:00.004739 \tTotal: 0:00:55.191467\n",[m
[32m+[m[32m      "[Preprocessing NW_018394456.1] Last: 0:00:00.008553 \tTotal: 0:00:55.200042\n",[m
[32m+[m[32m      "[Preprocessing NW_018394457.1] Last: 0:00:00.004620 \tTotal: 0:00:55.204682\n",[m
[32m+[m[32m      "[Preprocessing NW_018394458.1] Last: 0:00:00.024780 \tTotal: 0:00:55.229484\n",[m
[32m+[m[32m      "[Preprocessing NW_018394459.1] Last: 0:00:00.007502 \tTotal: 0:00:55.237007\n",[m
[32m+[m[32m      "[Preprocessing NW_001884386.4] Last: 0:00:00.007639 \tTotal: 0:00:55.244667\n",[m
[32m+[m[32m      "[Preprocessing NW_001879289.5] Last: 0:00:00.008609 \tTotal: 0:00:55.253298\n",[m
[32m+[m[32m      "[Preprocessing NW_001884442.4] Last: 0:00:00.004187 \tTotal: 0:00:55.257504\n",[m
[32m+[m[32m      "[Preprocessing NW_001878128.4] Last: 0:00:00.011970 \tTotal: 0:00:55.269496\n",[m
[32m+[m[32m      "[Preprocessing NW_003040715.4] Last: 0:00:00.016380 \tTotal: 0:00:55.285899\n",[m
[32m+[m[32m      "[Preprocessing NW_001878118.5] Last: 0:00:00.010931 \tTotal: 0:00:55.296853\n",[m
[32m+[m[32m      "[Preprocessing NW_003336270.3] Last: 0:00:00.009299 \tTotal: 0:00:55.306176\n",[m
[32m+[m[32m      "[Preprocessing NW_001878780.5] Last: 0:00:00.010122 \tTotal: 0:00:55.316323\n",[m
[32m+[m[32m      "[Preprocessing NW_003039389.3] Last: 0:00:00.034136 \tTotal: 0:00:55.350487\n",[m
[32m+[m[32m      "[Preprocessing NW_003044888.3] Last: 0:00:00.021173 \tTotal: 0:00:55.371688\n",[m
[32m+[m[32m      "[Preprocessing NW_001884400.4] Last: 0:00:00.008637 \tTotal: 0:00:55.380352\n",[m
[32m+[m[32m      "[Preprocessing NW_001884413.3] Last: 0:00:00.014338 \tTotal: 0:00:55.394717\n",[m
[32m+[m[32m      "[Preprocessing NW_001884452.4] Last: 0:00:00.009722 \tTotal: 0:00:55.404463\n",[m
[32m+[m[32m      "[Preprocessing NW_001878251.4] Last: 0:00:00.008938 \tTotal: 0:00:55.413425\n",[m
[32m+[m[32m      "[Preprocessing NW_001884427.4] Last: 0:00:00.011542 \tTotal: 0:00:55.424990\n",[m
[32m+[m[32m      "[Preprocessing NW_001884533.5] Last: 0:00:00.011475 \tTotal: 0:00:55.436488\n",[m
[32m+[m[32m      "[Preprocessing NW_001884441.4] Last: 0:00:00.005942 \tTotal: 0:00:55.442453\n",[m
[32m+[m[32m      "[Preprocessing NW_018394460.1] Last: 0:00:00.013378 \tTotal: 0:00:55.455854\n",[m
[32m+[m[32m      "[Preprocessing NW_018394461.1] Last: 0:00:00.014900 \tTotal: 0:00:55.470778\n",[m
[32m+[m[32m      "[Preprocessing NW_018394462.1] Last: 0:00:00.013879 \tTotal: 0:00:55.484681\n",[m
[32m+[m[32m      "[Preprocessing NW_018394463.1] Last: 0:00:00.014874 \tTotal: 0:00:55.499581\n",[m
[32m+[m[32m      "[Preprocessing NW_018394464.1] Last: 0:00:00.011503 \tTotal: 0:00:55.511109\n",[m
[32m+[m[32m      "[Preprocessing NW_018394465.1] Last: 0:00:00.012381 \tTotal: 0:00:55.523514\n",[m
[32m+[m[32m      "[Preprocessing NW_018394466.1] Last: 0:00:00.009485 \tTotal: 0:00:55.533024\n",[m
[32m+[m[32m      "[Preprocessing NW_018394467.1] Last: 0:00:00.013586 \tTotal: 0:00:55.546633\n",[m
[32m+[m[32m      "[Preprocessing NW_018394468.1] Last: 0:00:00.012418 \tTotal: 0:00:55.559074\n",[m
[32m+[m[32m      "[Preprocessing NW_018394469.1] Last: 0:00:00.014885 \tTotal: 0:00:55.573984\n",[m
[32m+[m[32m      "[Preprocessing NW_018394470.1] Last: 0:00:00.016375 \tTotal: 0:00:55.590393\n",[m
[32m+[m[32m      "[Preprocessing NW_018394471.1] Last: 0:00:00.011309 \tTotal: 0:00:55.601727\n",[m
[32m+[m[32m      "[Preprocessing NW_018394472.1] Last: 0:00:00.012569 \tTotal: 0:00:55.614322\n",[m
[32m+[m[32m      "[Preprocessing NW_018394473.1] Last: 0:00:00.018487 \tTotal: 0:00:55.632835\n",[m
[32m+[m[32m      "[Preprocessing NW_018394474.1] Last: 0:00:00.013738 \tTotal: 0:00:55.646598\n",[m
[32m+[m[32m      "[Preprocessing NW_018394475.1] Last: 0:00:00.016816 \tTotal: 0:00:55.663440\n",[m
[32m+[m[32m      "[Preprocessing NW_018394476.1] Last: 0:00:00.015472 \tTotal: 0:00:55.678940\n",[m
[32m+[m[32m      "[Preprocessing NW_018394477.1] Last: 0:00:00.012843 \tTotal: 0:00:55.691809\n",[m
[32m+[m[32m      "[Preprocessing NW_018394478.1] Last: 0:00:00.012112 \tTotal: 0:00:55.703945\n",[m
[32m+[m[32m      "[Preprocessing NW_018394479.1] Last: 0:00:00.013486 \tTotal: 0:00:55.717458\n",[m
[32m+[m[32m      "[Preprocessing NW_018394480.1] Last: 0:00:00.010151 \tTotal: 0:00:55.727636\n",[m
[32m+[m[32m      "[Preprocessing NW_018394481.1] Last: 0:00:00.016041 \tTotal: 0:00:55.743704\n",[m
[32m+[m[32m      "[Preprocessing NW_018394482.1] Last: 0:00:00.015295 \tTotal: 0:00:55.759024\n",[m
[32m+[m[32m      "[Preprocessing NW_018394483.1] Last: 0:00:00.023325 \tTotal: 0:00:55.782393\n",[m
[32m+[m[32m      "[Preprocessing NW_018394484.1] Last: 0:00:00.017752 \tTotal: 0:00:55.800181\n",[m
[32m+[m[32m      "[Preprocessing NW_018394485.1] Last: 0:00:00.014416 \tTotal: 0:00:55.814626\n",[m
[32m+[m[32m      "[Preprocessing NW_018394486.1] Last: 0:00:00.015157 \tTotal: 0:00:55.829808\n",[m
[32m+[m[32m      "[Preprocessing NW_018394487.1] Last: 0:00:00.013442 \tTotal: 0:00:55.843275\n",[m
[32m+[m[32m      "[Preprocessing NW_018394488.1] Last: 0:00:00.012133 \tTotal: 0:00:55.855434\n",[m
[32m+[m[32m      "[Preprocessing NW_018394489.1] Last: 0:00:00.013416 \tTotal: 0:00:55.868874\n",[m
[32m+[m[32m      "[Preprocessing NW_018394490.1] Last: 0:00:00.014771 \tTotal: 0:00:55.883673\n",[m
[32m+[m[32m      "[Preprocessing NW_018394491.1] Last: 0:00:00.016903 \tTotal: 0:00:55.900604\n",[m
[32m+[m[32m      "[Preprocessing NW_018394492.1] Last: 0:00:00.014120 \tTotal: 0:00:55.914750\n",[m
[32m+[m[32m      "[Preprocessing NW_018394493.1] Last: 0:00:00.019567 \tTotal: 0:00:55.934344\n",[m
[32m+[m[32m      "[Preprocessing NW_018394494.1] Last: 0:00:00.014920 \tTotal: 0:00:55.949290\n",[m
[32m+[m[32m      "[Preprocessing NW_018394495.1] Last: 0:00:00.013310 \tTotal: 0:00:55.962627\n",[m
[32m+[m[32m      "[Preprocessing NW_018394496.1] Last: 0:00:00.010606 \tTotal: 0:00:55.973261\n",[m
[32m+[m[32m      "[Preprocessing NW_018394497.1] Last: 0:00:00.016057 \tTotal: 0:00:55.989345\n",[m
[32m+[m[32m      "[Preprocessing NW_018394498.1] Last: 0:00:00.010414 \tTotal: 0:00:55.999785\n",[m
[32m+[m[32m      "[Preprocessing NW_018394499.1] Last: 0:00:00.009772 \tTotal: 0:00:56.009585\n",[m
[32m+[m[32m      "[Preprocessing NW_018394500.1] Last: 0:00:00.013500 \tTotal: 0:00:56.023113\n",[m
[32m+[m[32m      "[Preprocessing NW_018394501.1] Last: 0:00:00.010597 \tTotal: 0:00:56.033736\n",[m
[32m+[m[32m      "[Preprocessing NW_018394502.1] Last: 0:00:00.010585 \tTotal: 0:00:56.044346\n",[m
[32m+[m[32m      "[Preprocessing NW_018394503.1] Last: 0:00:00.009224 \tTotal: 0:00:56.053595\n",[m
[32m+[m[32m      "[Preprocessing NW_018394504.1] Last: 0:00:00.016442 \tTotal: 0:00:56.070060\n",[m
[32m+[m[32m      "[Preprocessing NW_018394505.1] Last: 0:00:00.008609 \tTotal: 0:00:56.078691\n",[m
[32m+[m[32m      "[Preprocessing NW_018394506.1] Last: 0:00:00.021133 \tTotal: 0:00:56.099854\n",[m
[32m+[m[32m      "[Preprocessing NW_018394507.1] Last: 0:00:00.016794 \tTotal: 0:00:56.116681\n",[m
[32m+[m[32m      "[Preprocessing NW_018394508.1] Last: 0:00:00.014951 \tTotal: 0:00:56.131662\n",[m
[32m+[m[32m      "[Preprocessing NW_018394509.1] Last: 0:00:00.012364 \tTotal: 0:00:56.144052\n",[m
[32m+[m[32m      "[Preprocessing NW_018394510.1] Last: 0:00:00.013796 \tTotal: 0:00:56.157873\n",[m
[32m+[m[32m      "[Preprocessing NW_018394511.1] Last: 0:00:00.014572 \tTotal: 0:00:56.172469\n",[m
[32m+[m[32m      "[Preprocessing NW_018394512.1] Last: 0:00:00.014413 \tTotal: 0:00:56.186907\n",[m
[32m+[m[32m      "[Preprocessing NW_018394513.1] Last: 0:00:00.015093 \tTotal: 0:00:56.202025\n",[m
[32m+[m[32m      "[Preprocessing NW_018394514.1] Last: 0:00:00.011571 \tTotal: 0:00:56.213622\n",[m
[32m+[m[32m      "[Preprocessing NW_018394515.1] Last: 0:00:00.015852 \tTotal: 0:00:56.229499\n",[m
[32m+[m[32m      "[Preprocessing NW_018394545.1] Last: 0:00:00.014443 \tTotal: 0:00:56.243966\n",[m
[32m+[m[32m      "[Preprocessing NW_018394516.1] Last: 0:00:00.008680 \tTotal: 0:00:56.252669\n",[m
[32m+[m[32m      "[Preprocessing NW_018394517.1] Last: 0:00:00.013009 \tTotal: 0:00:56.265701\n",[m
[32m+[m[32m      "[Preprocessing NW_018394518.1] Last: 0:00:00.009161 \tTotal: 0:00:56.274883\n",[m
[32m+[m[32m      "[Preprocessing NW_018394519.1] Last: 0:00:00.008480 \tTotal: 0:00:56.283393\n",[m
[32m+[m[32m      "[Preprocessing NW_018394546.1] Last: 0:00:00.015313 \tTotal: 0:00:56.298730\n",[m
[32m+[m[32m      "[Preprocessing NW_018394520.1] Last: 0:00:00.011872 \tTotal: 0:00:56.310626\n",[m
[32m+[m[32m      "[Preprocessing NW_018394521.1] Last: 0:00:00.010772 \tTotal: 0:00:56.321421\n",[m
[32m+[m[32m      "[Preprocessing NW_018394522.1] Last: 0:00:00.009477 \tTotal: 0:00:56.330922\n",[m
[32m+[m[32m      "[Preprocessing NW_018394523.1] Last: 0:00:00.012971 \tTotal: 0:00:56.343916\n",[m
[32m+[m[32m      "[Preprocessing NW_018394524.1] Last: 0:00:00.013646 \tTotal: 0:00:56.357589\n",[m
[32m+[m[32m      "[Preprocessing NW_018394525.1] Last: 0:00:00.015325 \tTotal: 0:00:56.372940\n",[m
[32m+[m[32m      "[Preprocessing NW_018394526.1] Last: 0:00:00.009890 \tTotal: 0:00:56.382857\n",[m
[32m+[m[32m      "[Preprocessing NW_018394527.1] Last: 0:00:00.018912 \tTotal: 0:00:56.401794\n",[m
[32m+[m[32m      "[Preprocessing NW_018394528.1] Last: 0:00:00.006189 \tTotal: 0:00:56.408008\n",[m
[32m+[m[32m      "[Preprocessing NW_018394529.1] Last: 0:00:00.013126 \tTotal: 0:00:56.421158\n",[m
[32m+[m[32m      "[Preprocessing NW_018394530.1] Last: 0:00:00.028149 \tTotal: 0:00:56.449332\n",[m
[32m+[m[32m      "[Preprocessing NW_018394531.1] Last: 0:00:00.014828 \tTotal: 0:00:56.464186\n",[m
[32m+[m[32m      "[Preprocessing NW_018394532.1] Last: 0:00:00.015576 \tTotal: 0:00:56.479786\n",[m
[32m+[m[32m      "[Preprocessing NW_018394533.1] Last: 0:00:00.018507 \tTotal: 0:00:56.498318\n",[m
[32m+[m[32m      "[Preprocessing NW_018394534.1] Last: 0:00:00.010957 \tTotal: 0:00:56.509302\n",[m
[32m+[m[32m      "[Preprocessing NW_018394535.1] Last: 0:00:00.014704 \tTotal: 0:00:56.524033\n",[m
[32m+[m[32m      "[Preprocessing NW_018394541.1] Last: 0:00:00.011693 \tTotal: 0:00:56.535754\n",[m
[32m+[m[32m      "[Preprocessing NW_018394536.1] Last: 0:00:00.014518 \tTotal: 0:00:56.550301\n",[m
[32m+[m[32m      "[Preprocessing NW_018394537.1] Last: 0:00:00.010743 \tTotal: 0:00:56.561071\n",[m
[32m+[m[32m      "[Preprocessing NW_018394538.1] Last: 0:00:00.012972 \tTotal: 0:00:56.574068\n",[m
[32m+[m[32m      "[Preprocessing NW_018394539.1] Last: 0:00:00.017652 \tTotal: 0:00:56.591744\n",[m
[32m+[m[32m      "[Preprocessing NW_018394540.1] Last: 0:00:00.011292 \tTotal: 0:00:56.603063\n",[m
[32m+[m[32m      "[Preprocessing NW_018394542.1] Last: 0:00:00.015042 \tTotal: 0:00:56.618134\n",[m
[32m+[m[32m      "[Preprocessing NW_018394543.1] Last: 0:00:00.011629 \tTotal: 0:00:56.629790\n",[m
[32m+[m[32m      "[Preprocessing NW_018394544.1] Last: 0:00:00.011017 \tTotal: 0:00:56.640833\n",[m
[32m+[m[32m      "[Preprocessing NW_018394547.1] Last: 0:00:00.007317 \tTotal: 0:00:56.648174\n",[m
[32m+[m[32m      "[Preprocessing NW_018394548.1] Last: 0:00:00.014555 \tTotal: 0:00:56.662756\n",[m
[32m+[m[32m      "[Preprocessing NW_018394549.1] Last: 0:00:00.013506 \tTotal: 0:00:56.676286\n",[m
[32m+[m[32m      "[Preprocessing NW_018394550.1] Last: 0:00:00.013210 \tTotal: 0:00:56.689521\n",[m
[32m+[m[32m      "[Preprocessing NW_018394551.1] Last: 0:00:00.018318 \tTotal: 0:00:56.707870\n",[m
[32m+[m[32m      "[Preprocessing NW_018394552.1] Last: 0:00:00.014502 \tTotal: 0:00:56.722409\n",[m
[32m+[m[32m      "[Preprocessing NW_018394553.1] Last: 0:00:00.013653 \tTotal: 0:00:56.736095\n",[m
[32m+[m[32m      "[Preprocessing NW_018394554.1] Last: 0:00:00.012746 \tTotal: 0:00:56.748867\n",[m
[32m+[m[32m      "[Preprocessing NW_018394555.1] Last: 0:00:00.011803 \tTotal: 0:00:56.760696\n",[m
[32m+[m[32m      "[Preprocessing NW_018394556.1] Last: 0:00:00.015721 \tTotal: 0:00:56.776443\n",[m
[32m+[m[32m      "[Preprocessing NW_018394557.1] Last: 0:00:00.010519 \tTotal: 0:00:56.786988\n",[m
[32m+[m[32m      "[Preprocessing NW_018394558.1] Last: 0:00:00.013148 \tTotal: 0:00:56.800161\n",[m
[32m+[m[32m      "[Preprocessing NW_018394559.1] Last: 0:00:00.015123 \tTotal: 0:00:56.815310\n",[m
[32m+[m[32m      "[Preprocessing NW_018394560.1] Last: 0:00:00.011427 \tTotal: 0:00:56.826762\n",[m
[32m+[m[32m      "[Preprocessing NW_018394561.1] Last: 0:00:00.009147 \tTotal: 0:00:56.835934\n",[m
[32m+[m[32m      "[Preprocessing NW_018394562.1] Last: 0:00:00.011860 \tTotal: 0:00:56.847820\n",[m
[32m+[m[32m      "[Preprocessing NW_018394563.1] Last: 0:00:00.010664 \tTotal: 0:00:56.858509\n",[m
[32m+[m[32m      "[Preprocessing NW_018394564.1] Last: 0:00:00.016228 \tTotal: 0:00:56.874765\n",[m
[32m+[m[32m      "[Preprocessing NW_018394565.1] Last: 0:00:00.011028 \tTotal: 0:00:56.885819\n",[m
[32m+[m[32m      "[Preprocessing NW_018394566.1] Last: 0:00:00.012149 \tTotal: 0:00:56.897994\n",[m
[32m+[m[32m      "[Preprocessing NW_018394567.1] Last: 0:00:00.012359 \tTotal: 0:00:56.910385\n",[m
[32m+[m[32m      "[Preprocessing NW_018394568.1] Last: 0:00:00.011453 \tTotal: 0:00:56.921861\n",[m
[32m+[m[32m      "[Preprocessing NW_018394569.1] Last: 0:00:00.016529 \tTotal: 0:00:56.938415\n",[m
[32m+[m[32m      "[Preprocessing NW_018394570.1] Last: 0:00:00.015023 \tTotal: 0:00:56.953463\n",[m
[32m+[m[32m      "[Preprocessing NW_018394571.1] Last: 0:00:00.015971 \tTotal: 0:00:56.969458\n",[m
[32m+[m[32m      "[Preprocessing NW_018394572.1] Last: 0:00:00.016790 \tTotal: 0:00:56.986273\n",[m
[32m+[m[32m      "[Preprocessing NW_018394573.1] Last: 0:00:00.013134 \tTotal: 0:00:56.999431\n",[m
[32m+[m[32m      "[Preprocessing NW_018394574.1] Last: 0:00:00.014334 \tTotal: 0:00:57.013788\n",[m
[32m+[m[32m      "[Preprocessing NW_018394575.1] Last: 0:00:00.014285 \tTotal: 0:00:57.028097\n",[m
[32m+[m[32m      "[Preprocessing NW_018394576.1] Last: 0:00:00.016372 \tTotal: 0:00:57.044494\n",[m
[32m+[m[32m      "[Preprocessing NW_018394577.1] Last: 0:00:00.015766 \tTotal: 0:00:57.060284\n",[m
[32m+[m[32m      "[Preprocessing NW_018394578.1] Last: 0:00:00.015622 \tTotal: 0:00:57.075931\n",[m
[32m+[m[32m      "[Preprocessing NW_018394579.1] Last: 0:00:00.009776 \tTotal: 0:00:57.085731\n",[m
[32m+[m[32m      "[Preprocessing NW_018394580.1] Last: 0:00:00.014058 \tTotal: 0:00:57.099812\n",[m
[32m+[m[32m      "[Preprocessing NW_018394581.1] Last: 0:00:00.009297 \tTotal: 0:00:57.109134\n",[m
[32m+[m[32m      "[Preprocessing NW_018394582.1] Last: 0:00:00.010431 \tTotal: 0:00:57.119590\n",[m
[32m+[m[32m      "[Preprocessing NW_018394583.1] Last: 0:00:00.014650 \tTotal: 0:00:57.134266\n",[m
[32m+[m[32m      "[Preprocessing NW_018394584.1] Last: 0:00:00.013515 \tTotal: 0:00:57.147805\n",[m
[32m+[m[32m      "[Preprocessing NW_018394585.1] Last: 0:00:00.012513 \tTotal: 0:00:57.160342\n",[m
[32m+[m[32m      "[Preprocessing NW_018394586.1] Last: 0:00:00.019672 \tTotal: 0:00:57.180038\n",[m
[32m+[m[32m      "[Preprocessing NW_018394587.1] Last: 0:00:00.011317 \tTotal: 0:00:57.191386\n",[m
[32m+[m[32m      "[Preprocessing NW_018394588.1] Last: 0:00:00.025288 \tTotal: 0:00:57.216705\n",[m
[32m+[m[32m      "[Preprocessing NW_018394589.1] Last: 0:00:00.012324 \tTotal: 0:00:57.229059\n",[m
[32m+[m[32m      "[Preprocessing NW_018394590.1] Last: 0:00:00.012190 \tTotal: 0:00:57.241275\n",[m
[32m+[m[32m      "[Preprocessing NW_018394591.1] Last: 0:00:00.015033 \tTotal: 0:00:57.256335\n",[m
[32m+[m[32m      "[Preprocessing NW_018394592.1] Last: 0:00:00.019427 \tTotal: 0:00:57.275789\n",[m
[32m+[m[32m      "[Preprocessing NW_018394593.1] Last: 0:00:00.010426 \tTotal: 0:00:57.286239\n",[m
[32m+[m[32m      "[Preprocessing NW_018394594.1] Last: 0:00:00.012991 \tTotal: 0:00:57.299253\n",[m
[32m+[m[32m      "[Preprocessing NW_018394595.1] Last: 0:00:00.020673 \tTotal: 0:00:57.319951\n",[m
[32m+[m[32m      "[Preprocessing NW_018394596.1] Last: 0:00:00.015457 \tTotal: 0:00:57.335432\n",[m
[32m+[m[32m      "[Preprocessing NW_018394597.1] Last: 0:00:00.012416 \tTotal: 0:00:57.347873\n",[m
[32m+[m[32m      "[Preprocessing NW_018394598.1] Last: 0:00:00.024351 \tTotal: 0:00:57.372249\n",[m
[32m+[m[32m      "[Preprocessing NW_018394599.1] Last: 0:00:00.017389 \tTotal: 0:00:57.389663\n",[m
[32m+[m[32m      "[Preprocessing NW_018394600.1] Last: 0:00:00.009925 \tTotal: 0:00:57.399612\n",[m
[32m+[m[32m      "[Preprocessing NW_018394601.1] Last: 0:00:00.015553 \tTotal: 0:00:57.415190\n",[m
[32m+[m[32m      "[Preprocessing NW_018394602.1] Last: 0:00:00.018045 \tTotal: 0:00:57.433261\n",[m
[32m+[m[32m      "[Preprocessing NW_018394603.1] Last: 0:00:00.014821 \tTotal: 0:00:57.448107\n",[m
[32m+[m[32m      "[Preprocessing NW_018394604.1] Last: 0:00:00.013977 \tTotal: 0:00:57.462107\n",[m
[32m+[m[32m      "[Preprocessing NW_018394605.1] Last: 0:00:00.010361 \tTotal: 0:00:57.472492\n",[m
[32m+[m[32m      "[Preprocessing NW_018394606.1] Last: 0:00:00.008921 \tTotal: 0:00:57.481438\n",[m
[32m+[m[32m      "[Preprocessing NW_018394607.1] Last: 0:00:00.011892 \tTotal: 0:00:57.493355\n",[m
[32m+[m[32m      "[Preprocessing NW_018394608.1] Last: 0:00:00.009968 \tTotal: 0:00:57.503348\n",[m
[32m+[m[32m      "[Preprocessing NW_018394609.1] Last: 0:00:00.047316 \tTotal: 0:00:57.550691\n",[m
[32m+[m[32m      "[Preprocessing NW_018394610.1] Last: 0:00:00.017209 \tTotal: 0:00:57.567929\n",[m
[32m+[m[32m      "[Preprocessing NW_018394611.1] Last: 0:00:00.017369 \tTotal: 0:00:57.585325\n",[m
[32m+[m[32m      "[Preprocessing NW_018394612.1] Last: 0:00:00.012420 \tTotal: 0:00:57.597771\n",[m
[32m+[m[32m      "[Preprocessing NW_018394613.1] Last: 0:00:00.011798 \tTotal: 0:00:57.609594\n",[m
[32m+[m[32m      "[Preprocessing NW_018394614.1] Last: 0:00:00.013390 \tTotal: 0:00:57.623012\n",[m
[32m+[m[32m      "[Preprocessing NW_018394615.1] Last: 0:00:00.011871 \tTotal: 0:00:57.634910\n",[m
[32m+[m[32m      "[Preprocessing NW_018394616.1] Last: 0:00:00.012398 \tTotal: 0:00:57.647335\n",[m
[32m+[m[32m      "[Preprocessing NW_018394617.1] Last: 0:00:00.017525 \tTotal: 0:00:57.664889\n",[m
[32m+[m[32m      "[Preprocessing NW_018394618.1] Last: 0:00:00.010369 \tTotal: 0:00:57.675283\n",[m
[32m+[m[32m      "[Preprocessing NW_018394619.1] Last: 0:00:00.011966 \tTotal: 0:00:57.687274\n",[m
[32m+[m[32m      "[Preprocessing NW_018394620.1] Last: 0:00:00.010690 \tTotal: 0:00:57.697987\n",[m
[32m+[m[32m      "[Preprocessing NW_018394621.1] Last: 0:00:00.009395 \tTotal: 0:00:57.707404\n",[m
[32m+[m[32m      "[Preprocessing NW_018394622.1] Last: 0:00:00.008999 \tTotal: 0:00:57.716428\n",[m
[32m+[m[32m      "[Preprocessing NW_018394623.1] Last: 0:00:00.010708 \tTotal: 0:00:57.727160\n",[m
[32m+[m[32m      "[Preprocessing NW_018394624.1] Last: 0:00:00.017755 \tTotal: 0:00:57.744941\n",[m
[32m+[m[32m      "[Preprocessing NW_018394625.1] Last: 0:00:00.011578 \tTotal: 0:00:57.756544\n",[m
[32m+[m[32m      "[Preprocessing NW_018394626.1] Last: 0:00:00.012730 \tTotal: 0:00:57.769306\n",[m
[32m+[m[32m      "[Preprocessing NW_018394627.1] Last: 0:00:00.012497 \tTotal: 0:00:57.781828\n",[m
[32m+[m[32m      "[Preprocessing NW_018394628.1] Last: 0:00:00.010190 \tTotal: 0:00:57.792041\n",[m
[32m+[m[32m      "[Preprocessing NW_018394629.1] Last: 0:00:00.013595 \tTotal: 0:00:57.805659\n",[m
[32m+[m[32m      "[Preprocessing NW_018394630.1] Last: 0:00:00.017192 \tTotal: 0:00:57.822876\n",[m
[32m+[m[32m      "[Preprocessing NW_018394631.1] Last: 0:00:00.013811 \tTotal: 0:00:57.836711\n",[m
[32m+[m[32m      "[Preprocessing NW_018394636.1] Last: 0:00:00.013327 \tTotal: 0:00:57.850063\n",[m
[32m+[m[32m      "[Preprocessing NW_018394637.1] Last: 0:00:00.030642 \tTotal: 0:00:57.880735\n",[m
[32m+[m[32m      "[Preprocessing NW_018394638.1] Last: 0:00:00.014931 \tTotal: 0:00:57.895695\n",[m
[32m+[m[32m      "[Preprocessing NW_018394639.1] Last: 0:00:00.010654 \tTotal: 0:00:57.906382\n",[m
[32m+[m[32m      "[Preprocessing NW_018394633.1] Last: 0:00:00.018598 \tTotal: 0:00:57.925007\n",[m
[32m+[m[32m      "[Preprocessing NW_018394634.1] Last: 0:00:00.010295 \tTotal: 0:00:57.935327\n",[m
[32m+[m[32m      "[Preprocessing NW_018394635.1] Last: 0:00:00.020589 \tTotal: 0:00:57.955941\n",[m
[32m+[m[32m      "[Preprocessing NW_018394632.1] Last: 0:00:00.013404 \tTotal: 0:00:57.969369\n",[m
[32m+[m[32m      "[Preprocessing NW_018394640.1] Last: 0:00:00.014844 \tTotal: 0:00:57.984254\n",[m
[32m+[m[32m      "[Preprocessing NW_018394641.1] Last: 0:00:00.011868 \tTotal: 0:00:57.996151\n",[m
[32m+[m[32m      "[Preprocessing NW_018394642.1] Last: 0:00:00.014067 \tTotal: 0:00:58.010245\n",[m
[32m+[m[32m      "[Preprocessing NW_018394643.1] Last: 0:00:00.014934 \tTotal: 0:00:58.025204\n",[m
[32m+[m[32m      "[Preprocessing NW_018394644.1] Last: 0:00:00.011307 \tTotal: 0:00:58.036534\n",[m
[32m+[m[32m      "[Preprocessing NW_018394645.1] Last: 0:00:00.022179 \tTotal: 0:00:58.058738\n",[m
[32m+[m[32m      "[Preprocessing NW_018394646.1] Last: 0:00:00.022030 \tTotal: 0:00:58.080795\n",[m
[32m+[m[32m      "[Preprocessing NW_018394647.1] Last: 0:00:00.014526 \tTotal: 0:00:58.095347\n",[m
[32m+[m[32m      "[Preprocessing NW_018394648.1] Last: 0:00:00.013225 \tTotal: 0:00:58.108597\n",[m
[32m+[m[32m      "[Preprocessing NW_018394649.1] Last: 0:00:00.010586 \tTotal: 0:00:58.119209\n",[m
[32m+[m[32m      "[Preprocessing NW_018394650.1] Last: 0:00:00.018731 \tTotal: 0:00:58.137970\n",[m
[32m+[m[32m      "[Preprocessing NW_018394651.1] Last: 0:00:00.014315 \tTotal: 0:00:58.152314\n",[m
[32m+[m[32m      "[Preprocessing NW_018394652.1] Last: 0:00:00.012289 \tTotal: 0:00:58.164631\n",[m
[32m+[m[32m      "[Preprocessing NW_018394653.1] Last: 0:00:00.014122 \tTotal: 0:00:58.178780\n",[m
[32m+[m[32m      "[Preprocessing NW_018394654.1] Last: 0:00:00.015434 \tTotal: 0:00:58.194240\n",[m
[32m+[m[32m      "[Preprocessing NW_018394655.1] Last: 0:00:00.018700 \tTotal: 0:00:58.212968\n",[m
[32m+[m[32m      "[Preprocessing NW_018394656.1] Last: 0:00:00.013110 \tTotal: 0:00:58.226105\n",[m
[32m+[m[32m      "[Preprocessing NW_018394657.1] Last: 0:00:00.014935 \tTotal: 0:00:58.241066\n",[m
[32m+[m[32m      "[Preprocessing NW_018394658.1] Last: 0:00:00.011424 \tTotal: 0:00:58.252515\n",[m
[32m+[m[32m      "[Preprocessing NW_018394659.1] Last: 0:00:00.018796 \tTotal: 0:00:58.271336\n",[m
[32m+[m[32m      "[Preprocessing NW_018394660.1] Last: 0:00:00.009829 \tTotal: 0:00:58.281191\n",[m
[32m+[m[32m      "[Preprocessing NW_018394661.1] Last: 0:00:00.012556 \tTotal: 0:00:58.293773\n",[m
[32m+[m[32m      "[Preprocessing NW_018394662.1] Last: 0:00:00.015111 \tTotal: 0:00:58.308914\n",[m
[32m+[m[32m      "[Preprocessing NW_018394663.1] Last: 0:00:00.012644 \tTotal: 0:00:58.321588\n",[m
[32m+[m[32m      "[Preprocessing NW_018394664.1] Last: 0:00:00.015852 \tTotal: 0:00:58.337467\n",[m
[32m+[m[32m      "[Preprocessing NW_018394665.1] Last: 0:00:00.011476 \tTotal: 0:00:58.348970\n",[m
[32m+[m[32m      "[Preprocessing NW_018394666.1] Last: 0:00:00.015735 \tTotal: 0:00:58.364730\n",[m
[32m+[m[32m      "[Preprocessing NW_018394667.1] Last: 0:00:00.013602 \tTotal: 0:00:58.378358\n",[m
[32m+[m[32m      "[Preprocessing NW_018394668.1] Last: 0:00:00.017441 \tTotal: 0:00:58.395824\n",[m
[32m+[m[32m      "[Preprocessing NW_018394669.1] Last: 0:00:00.015368 \tTotal: 0:00:58.411217\n",[m
[32m+[m[32m      "[Preprocessing NW_018394670.1] Last: 0:00:00.013956 \tTotal: 0:00:58.425196\n",[m
[32m+[m[32m      "[Preprocessing NW_018394671.1] Last: 0:00:00.011887 \tTotal: 0:00:58.437105\n",[m
[32m+[m[32m      "[Preprocessing NW_018394672.1] Last: 0:00:00.015305 \tTotal: 0:00:58.452434\n",[m
[32m+[m[32m      "[Preprocessing NW_018394673.1] Last: 0:00:00.012161 \tTotal: 0:00:58.464620\n",[m
[32m+[m[32m      "[Preprocessing NW_018394674.1] Last: 0:00:00.009761 \tTotal: 0:00:58.474407\n",[m
[32m+[m[32m      "[Preprocessing NW_018394675.1] Last: 0:00:00.008407 \tTotal: 0:00:58.482839\n",[m
[32m+[m[32m      "[Preprocessing NW_018394676.1] Last: 0:00:00.012862 \tTotal: 0:00:58.495729\n",[m
[32m+[m[32m      "[Preprocessing NW_018394677.1] Last: 0:00:00.008018 \tTotal: 0:00:58.503772\n",[m
[32m+[m[32m      "[Preprocessing NW_018394678.1] Last: 0:00:00.011084 \tTotal: 0:00:58.514883\n",[m
[32m+[m[32m      "[Preprocessing NW_018394679.1] Last: 0:00:00.011059 \tTotal: 0:00:58.525967\n",[m
[32m+[m[32m      "[Preprocessing NW_018394680.1] Last: 0:00:00.017136 \tTotal: 0:00:58.543127\n",[m
[32m+[m[32m      "[Preprocessing NW_018394681.1] Last: 0:00:00.011559 \tTotal: 0:00:58.554708\n",[m
[32m+[m[32m      "[Preprocessing NW_018394682.1] Last: 0:00:00.010479 \tTotal: 0:00:58.565212\n",[m
[32m+[m[32m      "[Preprocessing NW_018394683.1] Last: 0:00:00.014245 \tTotal: 0:00:58.579482\n",[m
[32m+[m[32m      "[Preprocessing NW_018394684.1] Last: 0:00:00.012828 \tTotal: 0:00:58.592333\n",[m
[32m+[m[32m      "[Preprocessing NW_018394685.1] Last: 0:00:00.013830 \tTotal: 0:00:58.606188\n",[m
[32m+[m[32m      "[Preprocessing NW_018394686.1] Last: 0:00:00.010381 \tTotal: 0:00:58.616595\n",[m
[32m+[m[32m      "[Preprocessing NW_018394687.1] Last: 0:00:00.012984 \tTotal: 0:00:58.629603\n",[m
[32m+[m[32m      "[Preprocessing NW_018394688.1] Last: 0:00:00.016965 \tTotal: 0:00:58.646593\n",[m
[32m+[m[32m      "[Preprocessing NW_018394689.1] Last: 0:00:00.013133 \tTotal: 0:00:58.659751\n",[m
[32m+[m[32m      "[Preprocessing NW_018394690.1] Last: 0:00:00.013570 \tTotal: 0:00:58.673346\n",[m
[32m+[m[32m      "[Preprocessing NW_018394691.1] Last: 0:00:00.014786 \tTotal: 0:00:58.688160\n",[m
[32m+[m[32m      "[Preprocessing NW_018394692.1] Last: 0:00:00.013178 \tTotal: 0:00:58.701367\n",[m
[32m+[m[32m      "[Preprocessing NW_018394693.1] Last: 0:00:00.011934 \tTotal: 0:00:58.713344\n",[m
[32m+[m[32m      "[Preprocessing NW_018394694.1] Last: 0:00:00.020477 \tTotal: 0:00:58.733857\n",[m
[32m+[m[32m      "[Preprocessing NW_018394695.1] Last: 0:00:00.011384 \tTotal: 0:00:58.745271\n",[m
[32m+[m[32m      "[Preprocessing NW_018394696.1] Last: 0:00:00.015079 \tTotal: 0:00:58.760384\n",[m
[32m+[m[32m      "[Preprocessing NW_018394697.1] Last: 0:00:00.014859 \tTotal: 0:00:58.775269\n",[m
[32m+[m[32m      "[Preprocessing NW_018394698.1] Last: 0:00:00.015969 \tTotal: 0:00:58.791263\n",[m
[32m+[m[32m      "[Preprocessing NW_018394699.1] Last: 0:00:00.017096 \tTotal: 0:00:58.808393\n",[m
[32m+[m[32m      "[Preprocessing NW_018394700.1] Last: 0:00:00.025770 \tTotal: 0:00:58.834196\n",[m
[32m+[m[32m      "[Preprocessing NW_018394701.1] Last: 0:00:00.015149 \tTotal: 0:00:58.849375\n",[m
[32m+[m[32m      "[Preprocessing NW_018394702.1] Last: 0:00:00.017133 \tTotal: 0:00:58.866555\n",[m
[32m+[m[32m      "[Preprocessing NW_018394703.1] Last: 0:00:00.020821 \tTotal: 0:00:58.887404\n",[m
[32m+[m[32m      "[Preprocessing NW_018394715.1] Last: 0:00:00.015659 \tTotal: 0:00:58.903091\n",[m
[32m+[m[32m      "[Preprocessing NW_018394704.1] Last: 0:00:00.015235 \tTotal: 0:00:58.918360\n",[m
[32m+[m[32m      "[Preprocessing NW_018394705.1] Last: 0:00:00.017113 \tTotal: 0:00:58.935505\n",[m
[32m+[m[32m      "[Preprocessing NW_018394706.1] Last: 0:00:00.014208 \tTotal: 0:00:58.949740\n",[m
[32m+[m[32m      "[Preprocessing NW_018394707.1] Last: 0:00:00.019959 \tTotal: 0:00:58.969725\n",[m
[32m+[m[32m      "[Preprocessing NW_018394708.1] Last: 0:00:00.017907 \tTotal: 0:00:58.987663\n",[m
[32m+[m[32m      "[Preprocessing NW_018394709.1] Last: 0:00:00.021125 \tTotal: 0:00:59.008820\n",[m
[32m+[m[32m      "[Preprocessing NW_018394710.1] Last: 0:00:00.016163 \tTotal: 0:00:59.025015\n",[m
[32m+[m[32m      "[Preprocessing NW_018394711.1] Last: 0:00:00.010702 \tTotal: 0:00:59.035747\n",[m
[32m+[m[32m      "[Preprocessing NW_018394712.1] Last: 0:00:00.023117 \tTotal: 0:00:59.058891\n",[m
[32m+[m[32m      "[Preprocessing NW_018394713.1] Last: 0:00:00.013720 \tTotal: 0:00:59.072640\n",[m
[32m+[m[32m      "[Preprocessing NW_018394714.1] Last: 0:00:00.012400 \tTotal: 0:00:59.085067\n",[m
[32m+[m[32m      "[Preprocessing NW_018394716.1] Last: 0:00:00.011439 \tTotal: 0:00:59.096531\n",[m
[32m+[m[32m      "[Preprocessing NW_018394717.1] Last: 0:00:00.017107 \tTotal: 0:00:59.113663\n",[m
[32m+[m[32m      "[Preprocessing NW_018394718.1] Last: 0:00:00.016412 \tTotal: 0:00:59.130099\n",[m
[32m+[m[32m      "[Preprocessing NW_018394719.1] Last: 0:00:00.014334 \tTotal: 0:00:59.144457\n",[m
[32m+[m[32m      "[Preprocessing NW_018394720.1] Last: 0:00:00.012203 \tTotal: 0:00:59.156685\n",[m
[32m+[m[32m      "[Preprocessing NW_018394721.1] Last: 0:00:00.017066 \tTotal: 0:00:59.173775\n",[m
[32m+[m[32m      "[Preprocessing NW_018394722.1] Last: 0:00:00.011843 \tTotal: 0:00:59.185643\n",[m
[32m+[m[32m      "[Preprocessing NW_018394723.1] Last: 0:00:00.013461 \tTotal: 0:00:59.199129\n",[m
[32m+[m[32m      "[Preprocessing NW_018394724.1] Last: 0:00:00.014059 \tTotal: 0:00:59.213212\n",[m
[32m+[m[32m      "[Preprocessing NW_018394725.1] Last: 0:00:00.017212 \tTotal: 0:00:59.230449\n",[m
[32m+[m[32m      "[Preprocessing NW_018394726.1] Last: 0:00:00.019671 \tTotal: 0:00:59.250146\n",[m
[32m+[m[32m      "[Preprocessing NW_018394727.1] Last: 0:00:00.032092 \tTotal: 0:00:59.282267\n",[m
[32m+[m[32m      "[Preprocessing NW_018394728.1] Last: 0:00:00.010775 \tTotal: 0:00:59.293070\n",[m
[32m+[m[32m      "[Preprocessing NW_018394729.1] Last: 0:00:00.017513 \tTotal: 0:00:59.310611\n",[m
[32m+[m[32m      "[Preprocessing NW_018394730.1] Last: 0:00:00.018413 \tTotal: 0:00:59.329056\n",[m
[32m+[m[32m      "[Preprocessing NW_018394731.1] Last: 0:00:00.013053 \tTotal: 0:00:59.342139\n",[m
[32m+[m[32m      "[Preprocessing NW_018394732.1] Last: 0:00:00.017152 \tTotal: 0:00:59.359317\n",[m
[32m+[m[32m      "[Preprocessing NW_018394733.1] Last: 0:00:00.018333 \tTotal: 0:00:59.377675\n",[m
[32m+[m[32m      "[Preprocessing NW_018394734.1] Last: 0:00:00.018201 \tTotal: 0:00:59.395901\n",[m
[32m+[m[32m      "[Preprocessing NW_018394735.1] Last: 0:00:00.016942 \tTotal: 0:00:59.412868\n",[m
[32m+[m[32m      "[Preprocessing NW_018394736.1] Last: 0:00:00.014475 \tTotal: 0:00:59.427368\n",[m
[32m+[m[32m      "[Preprocessing NW_018394737.1] Last: 0:00:00.022537 \tTotal: 0:00:59.449946\n",[m
[32m+[m[32m      "[Preprocessing NW_018394738.1] Last: 0:00:00.018403 \tTotal: 0:00:59.468382\n",[m
[32m+[m[32m      "[Preprocessing NW_018394739.1] Last: 0:00:00.017079 \tTotal: 0:00:59.485485\n",[m
[32m+[m[32m      "[Preprocessing NW_018394740.1] Last: 0:00:00.015244 \tTotal: 0:00:59.500753\n",[m
[32m+[m[32m      "[Preprocessing NW_018394741.1] Last: 0:00:00.016689 \tTotal: 0:00:59.517466\n",[m
[32m+[m[32m      "[Preprocessing NW_018394742.1] Last: 0:00:00.015395 \tTotal: 0:00:59.532886\n",[m
[32m+[m[32m      "[Preprocessing NW_018394743.1] Last: 0:00:00.022421 \tTotal: 0:00:59.555334\n",[m
[32m+[m[32m      "[Preprocessing NW_018394744.1] Last: 0:00:00.020857 \tTotal: 0:00:59.576219\n",[m
[32m+[m[32m      "[Preprocessing NW_018394745.1] Last: 0:00:00.022484 \tTotal: 0:00:59.598732\n",[m
[32m+[m[32m      "[Preprocessing NW_018394746.1] Last: 0:00:00.014838 \tTotal: 0:00:59.613597\n",[m
[32m+[m[32m      "[Preprocessing NW_018394747.1] Last: 0:00:00.014352 \tTotal: 0:00:59.627974\n",[m
[32m+[m[32m      "[Preprocessing NW_018394748.1] Last: 0:00:00.014639 \tTotal: 0:00:59.642637\n",[m
[32m+[m[32m      "[Preprocessing NW_018394749.1] Last: 0:00:00.011752 \tTotal: 0:00:59.654414\n",[m
[32m+[m[32m      "[Preprocessing NW_018394750.1] Last: 0:00:00.015793 \tTotal: 0:00:59.670233\n",[m
[32m+[m[32m      "[Preprocessing NW_018394751.1] Last: 0:00:00.018366 \tTotal: 0:00:59.688626\n",[m
[32m+[m[32m      "[Preprocessing NW_018394752.1] Last: 0:00:00.016257 \tTotal: 0:00:59.704907\n",[m
[32m+[m[32m      "[Preprocessing NW_018394753.1] Last: 0:00:00.018703 \tTotal: 0:00:59.723636\n",[m
[32m+[m[32m      "[Preprocessing NW_018394754.1] Last: 0:00:00.012312 \tTotal: 0:00:59.735972\n",[m
[32m+[m[32m      "[Preprocessing NW_018394755.1] Last: 0:00:00.016385 \tTotal: 0:00:59.752388\n",[m
[32m+[m[32m      "[Preprocessing NW_018394756.1] Last: 0:00:00.010399 \tTotal: 0:00:59.762812\n",[m
[32m+[m[32m      "[Preprocessing NW_018394757.1] Last: 0:00:00.013243 \tTotal: 0:00:59.776079\n",[m
[32m+[m[32m      "[Preprocessing NW_018394758.1] Last: 0:00:00.009968 \tTotal: 0:00:59.786071\n",[m
[32m+[m[32m      "[Preprocessing NW_018394759.1] Last: 0:00:00.014534 \tTotal: 0:00:59.800630\n",[m
[32m+[m[32m      "[Preprocessing NW_018394760.1] Last: 0:00:00.021884 \tTotal: 0:00:59.822538\n",[m
[32m+[m[32m      "[Preprocessing NW_018394761.1] Last: 0:00:00.014854 \tTotal: 0:00:59.837419\n",[m
[32m+[m[32m      "[Preprocessing NW_018394762.1] Last: 0:00:00.007707 \tTotal: 0:00:59.845150\n",[m
[32m+[m[32m      "[Preprocessing NW_018394799.1] Last: 0:00:00.005225 \tTotal: 0:00:59.850398\n",[m
[32m+[m[32m      "[Preprocessing NW_018394763.1] Last: 0:00:00.010433 \tTotal: 0:00:59.860854\n",[m
[32m+[m[32m      "[Preprocessing NW_018394764.1] Last: 0:00:00.012310 \tTotal: 0:00:59.873186\n",[m
[32m+[m[32m      "[Preprocessing NW_018394765.1] Last: 0:00:00.011686 \tTotal: 0:00:59.884894\n",[m
[32m+[m[32m      "[Preprocessing NW_018394766.1] Last: 0:00:00.009090 \tTotal: 0:00:59.894008\n",[m
[32m+[m[32m      "[Preprocessing NW_018394768.1] Last: 0:00:00.011210 \tTotal: 0:00:59.905241\n",[m
[32m+[m[32m      "[Preprocessing NW_018394769.1] Last: 0:00:00.010577 \tTotal: 0:00:59.915841\n",[m
[32m+[m[32m      "[Preprocessing NW_018394770.1] Last: 0:00:00.011869 \tTotal: 0:00:59.927733\n",[m
[32m+[m[32m      "[Preprocessing NW_018394767.1] Last: 0:00:00.005699 \tTotal: 0:00:59.933453\n",[m
[32m+[m[32m      "[Preprocessing NW_018394771.1] Last: 0:00:00.011758 \tTotal: 0:00:59.945233\n",[m
[32m+[m[32m      "[Preprocessing NW_018394772.1] Last: 0:00:00.013547 \tTotal: 0:00:59.958802\n",[m
[32m+[m[32m      "[Preprocessing NW_018394773.1] Last: 0:00:00.014423 \tTotal: 0:00:59.973248\n",[m
[32m+[m[32m      "[Preprocessing NW_018394774.1] Last: 0:00:00.015302 \tTotal: 0:00:59.988573\n",[m
[32m+[m[32m      "[Preprocessing NW_018394775.1] Last: 0:00:00.015738 \tTotal: 0:01:00.004336\n",[m
[32m+[m[32m      "[Preprocessing NW_018394776.1] Last: 0:00:00.013339 \tTotal: 0:01:00.017699\n",[m
[32m+[m[32m      "[Preprocessing NW_018394777.1] Last: 0:00:00.009412 \tTotal: 0:01:00.027135\n",[m
[32m+[m[32m      "[Preprocessing NW_018394778.1] Last: 0:00:00.008338 \tTotal: 0:01:00.035499\n",[m
[32m+[m[32m      "[Preprocessing NW_018394779.1] Last: 0:00:00.011432 \tTotal: 0:01:00.046954\n",[m
[32m+[m[32m      "[Preprocessing NW_018394780.1] Last: 0:00:00.020145 \tTotal: 0:01:00.067122\n",[m
[32m+[m[32m      "[Preprocessing NW_018394781.1] Last: 0:00:00.013262 \tTotal: 0:01:00.080410\n",[m
[32m+[m[32m      "[Preprocessing NW_018394782.1] Last: 0:00:00.018573 \tTotal: 0:01:00.099010\n",[m
[32m+[m[32m      "[Preprocessing NW_018394783.1] Last: 0:00:00.011425 \tTotal: 0:01:00.110459\n",[m
[32m+[m[32m      "[Preprocessing NW_018394784.1] Last: 0:00:00.020764 \tTotal: 0:01:00.131248\n",[m
[32m+[m[32m      "[Preprocessing NW_018394785.1] Last: 0:00:00.020852 \tTotal: 0:01:00.152125\n",[m
[32m+[m[32m      "[Preprocessing NW_018394786.1] Last: 0:00:00.017779 \tTotal: 0:01:00.169931\n",[m
[32m+[m[32m      "[Preprocessing NW_018394787.1] Last: 0:00:00.016204 \tTotal: 0:01:00.186161\n",[m
[32m+[m[32m      "[Preprocessing NW_018394788.1] Last: 0:00:00.014898 \tTotal: 0:01:00.201084\n",[m
[32m+[m[32m      "[Preprocessing NW_018394789.1] Last: 0:00:00.014440 \tTotal: 0:01:00.215549\n",[m
[32m+[m[32m      "[Preprocessing NW_018394790.1] Last: 0:00:00.011080 \tTotal: 0:01:00.226653\n",[m
[32m+[m[32m      "[Preprocessing NW_018394791.1] Last: 0:00:00.011256 \tTotal: 0:01:00.237932\n",[m
[32m+[m[32m      "[Preprocessing NW_018394792.1] Last: 0:00:00.008313 \tTotal: 0:01:00.246268\n",[m
[32m+[m[32m      "[Preprocessing NW_018394793.1] Last: 0:00:00.026698 \tTotal: 0:01:00.272996\n",[m
[32m+[m[32m      "[Preprocessing NW_018394794.1] Last: 0:00:00.009459 \tTotal: 0:01:00.282482\n",[m
[32m+[m[32m      "[Preprocessing NW_018394795.1] Last: 0:00:00.015418 \tTotal: 0:01:00.297927\n",[m
[32m+[m[32m      "[Preprocessing NW_018394796.1] Last: 0:00:00.010990 \tTotal: 0:01:00.308942\n",[m
[32m+[m[32m      "[Preprocessing NW_018394797.1] Last: 0:00:00.012862 \tTotal: 0:01:00.321828\n",[m
[32m+[m[32m      "[Preprocessing NW_018394798.1] Last: 0:00:00.011510 \tTotal: 0:01:00.333362\n",[m
[32m+[m[32m      "[Preprocessing NW_018394800.1] Last: 0:00:00.014373 \tTotal: 0:01:00.347762\n",[m
[32m+[m[32m      "[Preprocessing NW_018394801.1] Last: 0:00:00.010367 \tTotal: 0:01:00.358156\n",[m
[32m+[m[32m      "[Preprocessing NW_018394802.1] Last: 0:00:00.016246 \tTotal: 0:01:00.374425\n",[m
[32m+[m[32m      "[Preprocessing NW_018394803.1] Last: 0:00:00.009571 \tTotal: 0:01:00.384019\n",[m
[32m+[m[32m      "[Preprocessing NW_018394804.1] Last: 0:00:00.017917 \tTotal: 0:01:00.401959\n",[m
[32m+[m[32m      "[Preprocessing NW_018394805.1] Last: 0:00:00.010834 \tTotal: 0:01:00.412818\n",[m
[32m+[m[32m      "[Preprocessing NW_018394828.1] Last: 0:00:00.009059 \tTotal: 0:01:00.421901\n",[m
[32m+[m[32m      "[Preprocessing NW_018394806.1] Last: 0:00:00.012978 \tTotal: 0:01:00.434901\n",[m
[32m+[m[32m      "[Preprocessing NW_018394807.1] Last: 0:00:00.012055 \tTotal: 0:01:00.446981\n",[m
[32m+[m[32m      "[Preprocessing NW_018394808.1] Last: 0:00:00.017728 \tTotal: 0:01:00.464734\n",[m
[32m+[m[32m      "[Preprocessing NW_018394809.1] Last: 0:00:00.025254 \tTotal: 0:01:00.490018\n",[m
[32m+[m[32m      "[Preprocessing NW_018394810.1] Last: 0:00:00.019554 \tTotal: 0:01:00.509604\n",[m
[32m+[m[32m      "[Preprocessing NW_018394811.1] Last: 0:00:00.017079 \tTotal: 0:01:00.526714\n",[m
[32m+[m[32m      "[Preprocessing NW_018394812.1] Last: 0:00:00.017857 \tTotal: 0:01:00.544600\n",[m
[32m+[m[32m      "[Preprocessing NW_018394813.1] Last: 0:00:00.018660 \tTotal: 0:01:00.563288\n",[m
[32m+[m[32m      "[Preprocessing NW_018394814.1] Last: 0:00:00.019165 \tTotal: 0:01:00.582481\n",[m
[32m+[m[32m      "[Preprocessing NW_018394815.1] Last: 0:00:00.011388 \tTotal: 0:01:00.593895\n",[m
[32m+[m[32m      "[Preprocessing NW_018394816.1] Last: 0:00:00.013159 \tTotal: 0:01:00.607079\n",[m
[32m+[m[32m      "[Preprocessing NW_018394817.1] Last: 0:00:00.011024 \tTotal: 0:01:00.618128\n",[m
[32m+[m[32m      "[Preprocessing NW_018394818.1] Last: 0:00:00.011419 \tTotal: 0:01:00.629571\n",[m
[32m+[m[32m      "[Preprocessing NW_018394819.1] Last: 0:00:00.012622 \tTotal: 0:01:00.642217\n",[m
[32m+[m[32m      "[Preprocessing NW_018394820.1] Last: 0:00:00.012807 \tTotal: 0:01:00.655047\n",[m
[32m+[m[32m      "[Preprocessing NW_018394821.1] Last: 0:00:00.014473 \tTotal: 0:01:00.669543\n",[m
[32m+[m[32m      "[Preprocessing NW_018394822.1] Last: 0:00:00.016543 \tTotal: 0:01:00.686111\n",[m
[32m+[m[32m      "[Preprocessing NW_018394823.1] Last: 0:00:00.010911 \tTotal: 0:01:00.697046\n",[m
[32m+[m[32m      "[Preprocessing NW_018394824.1] Last: 0:00:00.016964 \tTotal: 0:01:00.714038\n",[m
[32m+[m[32m      "[Preprocessing NW_018394825.1] Last: 0:00:00.014353 \tTotal: 0:01:00.728420\n",[m
[32m+[m[32m      "[Preprocessing NW_018394826.1] Last: 0:00:00.015636 \tTotal: 0:01:00.744081\n",[m
[32m+[m[32m      "[Preprocessing NW_018394827.1] Last: 0:00:00.011110 \tTotal: 0:01:00.755214\n",[m
[32m+[m[32m      "[Preprocessing NW_018394829.1] Last: 0:00:00.009163 \tTotal: 0:01:00.764400\n",[m
[32m+[m[32m      "[Preprocessing NW_018394830.1] Last: 0:00:00.011696 \tTotal: 0:01:00.776120\n",[m
[32m+[m[32m      "[Preprocessing NW_018394831.1] Last: 0:00:00.015569 \tTotal: 0:01:00.791712\n",[m
[32m+[m[32m      "[Preprocessing NW_018394832.1] Last: 0:00:00.012078 \tTotal: 0:01:00.803814\n",[m
[32m+[m[32m      "[Preprocessing NW_018394833.1] Last: 0:00:00.014800 \tTotal: 0:01:00.818638\n",[m
[32m+[m[32m      "[Preprocessing NW_018394834.1] Last: 0:00:00.008683 \tTotal: 0:01:00.827344\n",[m
[32m+[m[32m      "[Preprocessing NW_018394835.1] Last: 0:00:00.030582 \tTotal: 0:01:00.857955\n",[m
[32m+[m[32m      "[Preprocessing NW_018394836.1] Last: 0:00:00.017788 \tTotal: 0:01:00.875770\n",[m
[32m+[m[32m      "[Preprocessing NW_018394837.1] Last: 0:00:00.013611 \tTotal: 0:01:00.889407\n",[m
[32m+[m[32m      "[Preprocessing NW_018394838.1] Last: 0:00:00.010980 \tTotal: 0:01:00.900410\n",[m
[32m+[m[32m      "[Preprocessing NW_018394839.1] Last: 0:00:00.020084 \tTotal: 0:01:00.920516\n",[m
[32m+[m[32m      "[Preprocessing NW_018394840.1] Last: 0:00:00.020656 \tTotal: 0:01:00.941199\n",[m
[32m+[m[32m      "[Preprocessing NW_018394841.1] Last: 0:00:00.011280 \tTotal: 0:01:00.952504\n",[m
[32m+[m[32m      "[Preprocessing NW_018394842.1] Last: 0:00:00.017464 \tTotal: 0:01:00.969995\n",[m
[32m+[m[32m      "[Preprocessing NW_018394843.1] Last: 0:00:00.015797 \tTotal: 0:01:00.985822\n",[m
[32m+[m[32m      "[Preprocessing NW_018394844.1] Last: 0:00:00.011917 \tTotal: 0:01:00.997767\n",[m
[32m+[m[32m      "[Preprocessing NW_018394845.1] Last: 0:00:00.017508 \tTotal: 0:01:01.015300\n",[m
[32m+[m[32m      "[Preprocessing NW_018394846.1] Last: 0:00:00.011022 \tTotal: 0:01:01.026345\n",[m
[32m+[m[32m      "[Preprocessing NW_018394847.1] Last: 0:00:00.020648 \tTotal: 0:01:01.047021\n",[m
[32m+[m[32m      "[Preprocessing NW_018394848.1] Last: 0:00:00.013507 \tTotal: 0:01:01.060558\n",[m
[32m+[m[32m      "[Preprocessing NW_018394849.1] Last: 0:00:00.017913 \tTotal: 0:01:01.078501\n",[m
[32m+[m[32m      "[Preprocessing NW_018394850.1] Last: 0:00:00.015588 \tTotal: 0:01:01.094116\n",[m
[32m+[m[32m      "[Preprocessing NW_018394851.1] Last: 0:00:00.014847 \tTotal: 0:01:01.108995\n",[m
[32m+[m[32m      "[Preprocessing NW_018394852.1] Last: 0:00:00.012270 \tTotal: 0:01:01.121294\n",[m
[32m+[m[32m      "[Preprocessing NW_018394853.1] Last: 0:00:00.013979 \tTotal: 0:01:01.135299\n",[m
[32m+[m[32m      "[Preprocessing NW_018394854.1] Last: 0:00:00.014646 \tTotal: 0:01:01.149969\n",[m
[32m+[m[32m      "[Preprocessing NW_018394855.1] Last: 0:00:00.013887 \tTotal: 0:01:01.163879\n",[m
[32m+[m[32m      "[Preprocessing NW_018394856.1] Last: 0:00:00.022484 \tTotal: 0:01:01.186393\n",[m
[32m+[m[32m      "[Preprocessing NW_018394858.1] Last: 0:00:00.013029 \tTotal: 0:01:01.199445\n",[m
[32m+[m[32m      "[Preprocessing NW_018394857.1] Last: 0:00:00.008378 \tTotal: 0:01:01.207846\n",[m
[32m+[m[32m      "[Preprocessing NW_018394859.1] Last: 0:00:00.011780 \tTotal: 0:01:01.219649\n",[m
[32m+[m[32m      "[Preprocessing NW_018394860.1] Last: 0:00:00.011990 \tTotal: 0:01:01.231663\n",[m
[32m+[m[32m      "[Preprocessing NW_018394861.1] Last: 0:00:00.010207 \tTotal: 0:01:01.241894\n",[m
[32m+[m[32m      "[Preprocessing NW_018394862.1] Last: 0:00:00.012212 \tTotal: 0:01:01.254130\n",[m
[32m+[m[32m      "[Preprocessing NW_018394863.1] Last: 0:00:00.016316 \tTotal: 0:01:01.270479\n",[m
[32m+[m[32m      "[Preprocessing NW_018394864.1] Last: 0:00:00.017598 \tTotal: 0:01:01.288110\n",[m
[32m+[m[32m      "[Preprocessing NW_018394865.1] Last: 0:00:00.019891 \tTotal: 0:01:01.308033\n",[m
[32m+[m[32m      "[Preprocessing NW_018394866.1] Last: 0:00:00.013355 \tTotal: 0:01:01.321418\n",[m
[32m+[m[32m      "[Preprocessing NW_018394867.1] Last: 0:00:00.011868 \tTotal: 0:01:01.333314\n",[m
[32m+[m[32m      "[Preprocessing NW_018394868.1] Last: 0:00:00.019637 \tTotal: 0:01:01.352982\n",[m
[32m+[m[32m      "[Preprocessing NW_018394869.1] Last: 0:00:00.012588 \tTotal: 0:01:01.365600\n",[m
[32m+[m[32m      "[Preprocessing NW_018394870.1] Last: 0:00:00.008831 \tTotal: 0:01:01.374458\n",[m
[32m+[m[32m      "[Preprocessing NW_018394871.1] Last: 0:00:00.010849 \tTotal: 0:01:01.385333\n",[m
[32m+[m[32m      "[Preprocessing NW_018394872.1] Last: 0:00:00.012800 \tTotal: 0:01:01.398157\n",[m
[32m+[m[32m      "[Preprocessing NW_018394873.1] Last: 0:00:00.029058 \tTotal: 0:01:01.427244\n",[m
[32m+[m[32m      "[Preprocessing NW_018394874.1] Last: 0:00:00.015062 \tTotal: 0:01:01.442340\n",[m
[32m+[m[32m      "[Preprocessing NW_018394875.1] Last: 0:00:00.013507 \tTotal: 0:01:01.455877\n",[m
[32m+[m[32m      "[Preprocessing NW_018394876.1] Last: 0:00:00.014017 \tTotal: 0:01:01.469922\n",[m
[32m+[m[32m      "[Preprocessing NW_018394877.1] Last: 0:00:00.017251 \tTotal: 0:01:01.487214\n",[m
[32m+[m[32m      "[Preprocessing NW_018394878.1] Last: 0:00:00.009824 \tTotal: 0:01:01.497079\n",[m
[32m+[m[32m      "[Preprocessing NW_018394879.1] Last: 0:00:00.015388 \tTotal: 0:01:01.512500\n",[m
[32m+[m[32m      "[Preprocessing NW_018394880.1] Last: 0:00:00.011044 \tTotal: 0:01:01.523572\n",[m
[32m+[m[32m      "[Preprocessing NW_018394881.1] Last: 0:00:00.019629 \tTotal: 0:01:01.543231\n",[m
[32m+[m[32m      "[Preprocessing NW_018394882.1] Last: 0:00:00.012889 \tTotal: 0:01:01.556147\n",[m
[32m+[m[32m      "[Preprocessing NW_018394883.1] Last: 0:00:00.020259 \tTotal: 0:01:01.576435\n",[m
[32m+[m[32m      "[Preprocessing NW_018394884.1] Last: 0:00:00.017918 \tTotal: 0:01:01.594392\n",[m
[32m+[m[32m      "[Preprocessing NW_018394885.1] Last: 0:00:00.017585 \tTotal: 0:01:01.612012\n",[m
[32m+[m[32m      "[Preprocessing NW_018394886.1] Last: 0:00:00.011961 \tTotal: 0:01:01.624013\n",[m
[32m+[m[32m      "[Preprocessing NW_018394887.1] Last: 0:00:00.010375 \tTotal: 0:01:01.634422\n",[m
[32m+[m[32m      "[Preprocessing NW_018394888.1] Last: 0:00:00.009177 \tTotal: 0:01:01.643628\n",[m
[32m+[m[32m      "[Preprocessing NW_018394889.1] Last: 0:00:00.009291 \tTotal: 0:01:01.652944\n",[m
[32m+[m[32m      "[Preprocessing NW_018394890.1] Last: 0:00:00.012059 \tTotal: 0:01:01.665029\n",[m
[32m+[m[32m      "[Preprocessing NW_018394891.1] Last: 0:00:00.009912 \tTotal: 0:01:01.674968\n",[m
[32m+[m[32m      "[Preprocessing NW_018394892.1] Last: 0:00:00.012380 \tTotal: 0:01:01.687388\n",[m
[32m+[m[32m      "[Preprocessing NW_018394893.1] Last: 0:00:00.018704 \tTotal: 0:01:01.706128\n",[m
[32m+[m[32m      "[Preprocessing NW_018394894.1] Last: 0:00:00.013579 \tTotal: 0:01:01.719737\n",[m
[32m+[m[32m      "[Preprocessing NW_018394895.1] Last: 0:00:00.011203 \tTotal: 0:01:01.730967\n",[m
[32m+[m[32m      "[Preprocessing NW_018394896.1] Last: 0:00:00.014682 \tTotal: 0:01:01.745680\n",[m
[32m+[m[32m      "[Preprocessing NW_018394897.1] Last: 0:00:00.021407 \tTotal: 0:01:01.767117\n",[m
[32m+[m[32m      "[Preprocessing NW_018394898.1] Last: 0:00:00.015740 \tTotal: 0:01:01.782886\n",[m
[32m+[m[32m      "[Preprocessing NW_018394899.1] Last: 0:00:00.010050 \tTotal: 0:01:01.792961\n",[m
[32m+[m[32m      "[Preprocessing NW_018394900.1] Last: 0:00:00.018162 \tTotal: 0:01:01.811149\n",[m
[32m+[m[32m      "[Preprocessing NW_018394901.1] Last: 0:00:00.009039 \tTotal: 0:01:01.820215\n",[m
[32m+[m[32m      "[Preprocessing NW_018394902.1] Last: 0:00:00.016640 \tTotal: 0:01:01.836882\n",[m
[32m+[m[32m      "[Preprocessing NW_018394903.1] Last: 0:00:00.018874 \tTotal: 0:01:01.855784\n",[m
[32m+[m[32m      "[Preprocessing NW_018394904.1] Last: 0:00:00.021262 \tTotal: 0:01:01.877077\n",[m
[32m+[m[32m      "[Preprocessing NW_018394905.1] Last: 0:00:00.015042 \tTotal: 0:01:01.892147\n",[m
[32m+[m[32m      "[Preprocessing NW_018394906.1] Last: 0:00:00.009351 \tTotal: 0:01:01.901530\n",[m
[32m+[m[32m      "[Preprocessing NW_018394907.1] Last: 0:00:00.012155 \tTotal: 0:01:01.913718\n",[m
[32m+[m[32m      "[Preprocessing NW_018394908.1] Last: 0:00:00.015641 \tTotal: 0:01:01.929397\n",[m
[32m+[m[32m      "[Preprocessing NW_018394909.1] Last: 0:00:00.024291 \tTotal: 0:01:01.953721\n",[m
[32m+[m[32m      "[Preprocessing NW_018394910.1] Last: 0:00:00.026528 \tTotal: 0:01:01.980284\n",[m
[32m+[m[32m      "[Preprocessing NW_018394911.1] Last: 0:00:00.012359 \tTotal: 0:01:01.992675\n",[m
[32m+[m[32m      "[Preprocessing NW_018394912.1] Last: 0:00:00.015235 \tTotal: 0:01:02.007939\n",[m
[32m+[m[32m      "[Preprocessing NW_018394913.1] Last: 0:00:00.013642 \tTotal: 0:01:02.021609\n",[m
[32m+[m[32m      "[Preprocessing NW_018394914.1] Last: 0:00:00.016832 \tTotal: 0:01:02.038472\n",[m
[32m+[m[32m      "[Preprocessing NW_018394915.1] Last: 0:00:00.014810 \tTotal: 0:01:02.053319\n",[m
[32m+[m[32m      "[Preprocessing NW_018394916.1] Last: 0:00:00.015839 \tTotal: 0:01:02.069192\n",[m
[32m+[m[32m      "[Preprocessing NW_018394917.1] Last: 0:00:00.016063 \tTotal: 0:01:02.085290\n",[m
[32m+[m[32m      "[Preprocessing NW_018394918.1] Last: 0:00:00.012992 \tTotal: 0:01:02.098312\n",[m
[32m+[m[32m      "[Preprocessing NW_018394919.1] Last: 0:00:00.011487 \tTotal: 0:01:02.109828\n",[m
[32m+[m[32m      "[Preprocessing NW_018394920.1] Last: 0:00:00.009537 \tTotal: 0:01:02.119399\n",[m
[32m+[m[32m      "[Preprocessing NW_018394921.1] Last: 0:00:00.015904 \tTotal: 0:01:02.135330\n",[m
[32m+[m[32m      "[Preprocessing NW_018394922.1] Last: 0:00:00.009171 \tTotal: 0:01:02.144529\n",[m
[32m+[m[32m      "[Preprocessing NW_018394923.1] Last: 0:00:00.013146 \tTotal: 0:01:02.157701\n",[m
[32m+[m[32m      "[Preprocessing NW_018394924.1] Last: 0:00:00.037970 \tTotal: 0:01:02.195698\n",[m
[32m+[m[32m      "[Preprocessing NW_018394925.1] Last: 0:00:00.017173 \tTotal: 0:01:02.212896\n",[m
[32m+[m[32m      "[Preprocessing NW_018394926.1] Last: 0:00:00.008140 \tTotal: 0:01:02.221066\n",[m
[32m+[m[32m      "[Preprocessing NW_018394927.1] Last: 0:00:00.015005 \tTotal: 0:01:02.236101\n",[m
[32m+[m[32m      "[Preprocessing NW_018394928.1] Last: 0:00:00.013636 \tTotal: 0:01:02.249764\n",[m
[32m+[m[32m      "[Preprocessing NW_018394929.1] Last: 0:00:00.011128 \tTotal: 0:01:02.260916\n",[m
[32m+[m[32m      "[Preprocessing NW_018394930.1] Last: 0:00:00.013795 \tTotal: 0:01:02.274736\n",[m
[32m+[m[32m      "[Preprocessing NW_018394931.1] Last: 0:00:00.008462 \tTotal: 0:01:02.283222\n",[m
[32m+[m[32m      "[Preprocessing NW_018394932.1] Last: 0:00:00.011582 \tTotal: 0:01:02.294827\n",[m
[32m+[m[32m      "[Preprocessing NW_018394933.1] Last: 0:00:00.009453 \tTotal: 0:01:02.304303\n",[m
[32m+[m[32m      "[Preprocessing NW_018394934.1] Last: 0:00:00.014381 \tTotal: 0:01:02.318710\n",[m
[32m+[m[32m      "[Preprocessing NW_018394935.1] Last: 0:00:00.009217 \tTotal: 0:01:02.327952\n",[m
[32m+[m[32m      "[Preprocessing NW_018394936.1] Last: 0:00:00.007760 \tTotal: 0:01:02.335734\n",[m
[32m+[m[32m      "[Preprocessing NW_018394937.1] Last: 0:00:00.009786 \tTotal: 0:01:02.345543\n",[m
[32m+[m[32m      "[Preprocessing NW_018394938.1] Last: 0:00:00.016558 \tTotal: 0:01:02.362125\n",[m
[32m+[m[32m      "[Preprocessing NW_018394939.1] Last: 0:00:00.015688 \tTotal: 0:01:02.377837\n",[m
[32m+[m[32m      "[Preprocessing NW_018394940.1] Last: 0:00:00.011342 \tTotal: 0:01:02.389202\n",[m
[32m+[m[32m      "[Preprocessing NW_018394941.1] Last: 0:00:00.011881 \tTotal: 0:01:02.401108\n",[m
[32m+[m[32m      "[Preprocessing NW_018394942.1] Last: 0:00:00.010704 \tTotal: 0:01:02.411835\n",[m
[32m+[m[32m      "[Preprocessing NW_018394943.1] Last: 0:00:00.014651 \tTotal: 0:01:02.426513\n",[m
[32m+[m[32m      "[Preprocessing NW_018394944.1] Last: 0:00:00.020364 \tTotal: 0:01:02.446905\n",[m
[32m+[m[32m      "[Preprocessing NW_018394945.1] Last: 0:00:00.018658 \tTotal: 0:01:02.465587\n",[m
[32m+[m[32m      "[Preprocessing NW_018394946.1] Last: 0:00:00.021829 \tTotal: 0:01:02.487442\n",[m
[32m+[m[32m      "[Preprocessing NW_018394947.1] Last: 0:00:00.021957 \tTotal: 0:01:02.509430\n",[m
[32m+[m[32m      "[Preprocessing NW_018394948.1] Last: 0:00:00.010677 \tTotal: 0:01:02.520138\n",[m
[32m+[m[32m      "[Preprocessing NW_018394949.1] Last: 0:00:00.015785 \tTotal: 0:01:02.535956\n",[m
[32m+[m[32m      "[Preprocessing NW_018394950.1] Last: 0:00:00.013810 \tTotal: 0:01:02.549803\n",[m
[32m+[m[32m      "[Preprocessing NW_018394951.1] Last: 0:00:00.014140 \tTotal: 0:01:02.563975\n",[m
[32m+[m[32m      "[Preprocessing NW_018394952.1] Last: 0:00:00.008452 \tTotal: 0:01:02.572457\n",[m
[32m+[m[32m      "[Preprocessing NW_018394953.1] Last: 0:00:00.010031 \tTotal: 0:01:02.582519\n",[m
[32m+[m[32m      "[Preprocessing NW_018394954.1] Last: 0:00:00.007874 \tTotal: 0:01:02.590422\n",[m
[32m+[m[32m      "[Preprocessing NW_018394955.1] Last: 0:00:00.011767 \tTotal: 0:01:02.602216\n",[m
[32m+[m[32m      "[Preprocessing NW_018394956.1] Last: 0:00:00.012897 \tTotal: 0:01:02.615150\n",[m
[32m+[m[32m      "[Preprocessing NW_018394957.1] Last: 0:00:00.030385 \tTotal: 0:01:02.645578\n",[m
[32m+[m[32m      "[Preprocessing NW_018394958.1] Last: 0:00:00.009003 \tTotal: 0:01:02.654618\n",[m
[32m+[m[32m      "[Preprocessing NW_018394959.1] Last: 0:00:00.010166 \tTotal: 0:01:02.664817\n",[m
[32m+[m[32m      "[Preprocessing NW_018394960.1] Last: 0:00:00.012244 \tTotal: 0:01:02.677094\n",[m
[32m+[m[32m      "[Preprocessing NW_018394961.1] Last: 0:00:00.013942 \tTotal: 0:01:02.691068\n",[m
[32m+[m[32m      "[Preprocessing NW_018394962.1] Last: 0:00:00.014757 \tTotal: 0:01:02.705857\n",[m
[32m+[m[32m      "[Preprocessing NW_018394963.1] Last: 0:00:00.008206 \tTotal: 0:01:02.714094\n",[m
[32m+[m[32m      "[Preprocessing NW_018394964.1] Last: 0:00:00.015096 \tTotal: 0:01:02.729228\n",[m
[32m+[m[32m      "[Preprocessing NW_018394965.1] Last: 0:00:00.015889 \tTotal: 0:01:02.745155\n",[m
[32m+[m[32m      "[Preprocessing NW_018394966.1] Last: 0:00:00.011640 \tTotal: 0:01:02.756829\n",[m
[32m+[m[32m      "[Preprocessing NW_018394967.1] Last: 0:00:00.016659 \tTotal: 0:01:02.773522\n",[m
[32m+[m[32m      "[Preprocessing NW_018394968.1] Last: 0:00:00.011091 \tTotal: 0:01:02.784643\n",[m
[32m+[m[32m      "[Preprocessing NW_018394969.1] Last: 0:00:00.013249 \tTotal: 0:01:02.797921\n",[m
[32m+[m[32m      "[Preprocessing NW_018394970.1] Last: 0:00:00.024118 \tTotal: 0:01:02.822071\n",[m
[32m+[m[32m      "[Preprocessing NW_018394971.1] Last: 0:00:00.014631 \tTotal: 0:01:02.836738\n",[m
[32m+[m[32m      "[Preprocessing NW_018394972.1] Last: 0:00:00.014538 \tTotal: 0:01:02.851315\n",[m
[32m+[m[32m      "[Preprocessing NW_018394973.1] Last: 0:00:00.011044 \tTotal: 0:01:02.862401\n",[m
[32m+[m[32m      "[Preprocessing NW_018394974.1] Last: 0:00:00.011818 \tTotal: 0:01:02.874249\n",[m
[32m+[m[32m      "[Preprocessing NW_018394975.1] Last: 0:00:00.009585 \tTotal: 0:01:02.883862\n",[m
[32m+[m[32m      "[Preprocessing NW_018394976.1] Last: 0:00:00.011829 \tTotal: 0:01:02.895717\n",[m
[32m+[m[32m      "[Preprocessing NW_018394977.1] Last: 0:00:00.011711 \tTotal: 0:01:02.907454\n",[m
[32m+[m[32m      "[Preprocessing NW_018394978.1] Last: 0:00:00.012134 \tTotal: 0:01:02.919613\n",[m
[32m+[m[32m      "[Preprocessing NW_018394979.1] Last: 0:00:00.016699 \tTotal: 0:01:02.936338\n",[m
[32m+[m[32m      "[Preprocessing NW_018394980.1] Last: 0:00:00.013135 \tTotal: 0:01:02.949516\n",[m
[32m+[m[32m      "[Preprocessing NW_018394981.1] Last: 0:00:00.015740 \tTotal: 0:01:02.965281\n",[m
[32m+[m[32m      "[Preprocessing NW_018394982.1] Last: 0:00:00.013507 \tTotal: 0:01:02.978812\n",[m
[32m+[m[32m      "[Preprocessing NW_018394983.1] Last: 0:00:00.011924 \tTotal: 0:01:02.990759\n",[m
[32m+[m[32m      "[Preprocessing NW_018394984.1] Last: 0:00:00.011069 \tTotal: 0:01:03.001851\n",[m
[32m+[m[32m      "[Preprocessing NW_018394985.1] Last: 0:00:00.012792 \tTotal: 0:01:03.014665\n",[m
[32m+[m[32m      "[Preprocessing NW_018394986.1] Last: 0:00:00.020436 \tTotal: 0:01:03.035128\n",[m
[32m+[m[32m      "[Preprocessing NW_018394987.1] Last: 0:00:00.013434 \tTotal: 0:01:03.048587\n",[m
[32m+[m[32m      "[Preprocessing NW_018394988.1] Last: 0:00:00.022736 \tTotal: 0:01:03.071348\n",[m
[32m+[m[32m      "[Preprocessing NW_018394989.1] Last: 0:00:00.010676 \tTotal: 0:01:03.082049\n",[m
[32m+[m[32m      "[Preprocessing NW_018394990.1] Last: 0:00:00.011325 \tTotal: 0:01:03.093399\n",[m
[32m+[m[32m      "[Preprocessing NW_018394991.1] Last: 0:00:00.014332 \tTotal: 0:01:03.107757\n",[m
[32m+[m[32m      "[Preprocessing NW_018394992.1] Last: 0:00:00.015157 \tTotal: 0:01:03.122942\n",[m
[32m+[m[32m      "[Preprocessing NW_018394993.1] Last: 0:00:00.015960 \tTotal: 0:01:03.138932\n",[m
[32m+[m[32m      "[Preprocessing NW_018394994.1] Last: 0:00:00.011584 \tTotal: 0:01:03.150547\n",[m
[32m+[m[32m      "[Preprocessing NW_018394995.1] Last: 0:00:00.022866 \tTotal: 0:01:03.173447\n",[m
[32m+[m[32m      "[Preprocessing NW_018394996.1] Last: 0:00:00.013677 \tTotal: 0:01:03.187160\n",[m
[32m+[m[32m      "[Preprocessing NW_018394997.1] Last: 0:00:00.026517 \tTotal: 0:01:03.213719\n",[m
[32m+[m[32m      "[Preprocessing NW_018394998.1] Last: 0:00:00.021911 \tTotal: 0:01:03.235671\n",[m
[32m+[m[32m      "[Preprocessing NW_018394999.1] Last: 0:00:00.009666 \tTotal: 0:01:03.245372\n",[m
[32m+[m[32m      "[Preprocessing NW_018395000.1] Last: 0:00:00.010993 \tTotal: 0:01:03.256404\n",[m
[32m+[m[32m      "[Preprocessing NW_018395001.1] Last: 0:00:00.012187 \tTotal: 0:01:03.268623\n",[m
[32m+[m[32m      "[Preprocessing NW_018395002.1] Last: 0:00:00.008621 \tTotal: 0:01:03.277274\n",[m
[32m+[m[32m      "[Preprocessing NW_018395003.1] Last: 0:00:00.013896 \tTotal: 0:01:03.291197\n",[m
[32m+[m[32m      "[Preprocessing NW_018395004.1] Last: 0:00:00.008211 \tTotal: 0:01:03.299434\n",[m
[32m+[m[32m      "[Preprocessing NW_018395005.1] Last: 0:00:00.016701 \tTotal: 0:01:03.316164\n",[m
[32m+[m[32m      "[Preprocessing NW_018395006.1] Last: 0:00:00.017178 \tTotal: 0:01:03.333368\n",[m
[32m+[m[32m      "[Preprocessing NW_018395007.1] Last: 0:00:00.013096 \tTotal: 0:01:03.346498\n",[m
[32m+[m[32m      "[Preprocessing NW_018395008.1] Last: 0:00:00.009862 \tTotal: 0:01:03.356393\n",[m
[32m+[m[32m      "[Preprocessing NW_018395009.1] Last: 0:00:00.011759 \tTotal: 0:01:03.368176\n",[m
[32m+[m[32m      "[Preprocessing NW_018395010.1] Last: 0:00:00.012873 \tTotal: 0:01:03.381075\n",[m
[32m+[m[32m      "[Preprocessing NW_018395011.1] Last: 0:00:00.008629 \tTotal: 0:01:03.389728\n",[m
[32m+[m[32m      "[Preprocessing NW_018395012.1] Last: 0:00:00.010003 \tTotal: 0:01:03.399755\n",[m
[32m+[m[32m      "[Preprocessing NW_018395013.1] Last: 0:00:00.010573 \tTotal: 0:01:03.410353\n",[m
[32m+[m[32m      "[Preprocessing NW_018395014.1] Last: 0:00:00.020938 \tTotal: 0:01:03.431315\n",[m
[32m+[m[32m      "[Preprocessing NW_018395015.1] Last: 0:00:00.016831 \tTotal: 0:01:03.448171\n",[m
[32m+[m[32m      "[Preprocessing NW_018395016.1] Last: 0:00:00.009601 \tTotal: 0:01:03.457795\n",[m
[32m+[m[32m      "[Preprocessing NW_018395017.1] Last: 0:00:00.024271 \tTotal: 0:01:03.482091\n",[m
[32m+[m[32m      "[Preprocessing NW_018395018.1] Last: 0:00:00.017138 \tTotal: 0:01:03.499256\n",[m
[32m+[m[32m      "[Preprocessing NW_018395019.1] Last: 0:00:00.017626 \tTotal: 0:01:03.516911\n",[m
[32m+[m[32m      "[Preprocessing NW_018395020.1] Last: 0:00:00.023261 \tTotal: 0:01:03.540204\n",[m
[32m+[m[32m      "[Preprocessing NW_018395021.1] Last: 0:00:00.015744 \tTotal: 0:01:03.555977\n",[m
[32m+[m[32m      "[Preprocessing NW_018395022.1] Last: 0:00:00.023586 \tTotal: 0:01:03.579589\n",[m
[32m+[m[32m      "[Preprocessing NW_018395023.1] Last: 0:00:00.015888 \tTotal: 0:01:03.595503\n",[m
[32m+[m[32m      "[Preprocessing NW_018395024.1] Last: 0:00:00.014769 \tTotal: 0:01:03.610296\n",[m
[32m+[m[32m      "[Preprocessing NW_018395025.1] Last: 0:00:00.015348 \tTotal: 0:01:03.625670\n",[m
[32m+[m[32m      "[Preprocessing NW_018395026.1] Last: 0:00:00.012675 \tTotal: 0:01:03.638370\n",[m
[32m+[m[32m      "[Preprocessing NW_018395027.1] Last: 0:00:00.016197 \tTotal: 0:01:03.654600\n",[m
[32m+[m[32m      "[Preprocessing NW_018395028.1] Last: 0:00:00.014176 \tTotal: 0:01:03.668802\n",[m
[32m+[m[32m      "[Preprocessing NW_018395029.1] Last: 0:00:00.013260 \tTotal: 0:01:03.682091\n",[m
[32m+[m[32m      "[Preprocessing NW_018395030.1] Last: 0:00:00.012768 \tTotal: 0:01:03.694889\n",[m
[32m+[m[32m      "[Preprocessing NW_018395031.1] Last: 0:00:00.017646 \tTotal: 0:01:03.712564\n",[m
[32m+[m[32m      "[Preprocessing NW_018395032.1] Last: 0:00:00.011322 \tTotal: 0:01:03.723913\n",[m
[32m+[m[32m      "[Preprocessing NW_018395033.1] Last: 0:00:00.013869 \tTotal: 0:01:03.737808\n",[m
[32m+[m[32m      "[Preprocessing NW_018395034.1] Last: 0:00:00.010464 \tTotal: 0:01:03.748299\n",[m
[32m+[m[32m      "[Preprocessing NW_018395035.1] Last: 0:00:00.010279 \tTotal: 0:01:03.758604\n",[m
[32m+[m[32m      "[Preprocessing NW_018395036.1] Last: 0:00:00.019125 \tTotal: 0:01:03.777757\n",[m
[32m+[m[32m      "[Preprocessing NW_018395037.1] Last: 0:00:00.014124 \tTotal: 0:01:03.791910\n",[m
[32m+[m[32m      "[Preprocessing NW_018395038.1] Last: 0:00:00.009232 \tTotal: 0:01:03.801167\n",[m
[32m+[m[32m      "[Preprocessing NW_018395039.1] Last: 0:00:00.010178 \tTotal: 0:01:03.811371\n",[m
[32m+[m[32m      "[Preprocessing NW_018395040.1] Last: 0:00:00.012546 \tTotal: 0:01:03.823952\n",[m
[32m+[m[32m      "[Preprocessing NW_018395041.1] Last: 0:00:00.013599 \tTotal: 0:01:03.837577\n",[m
[32m+[m[32m      "[Preprocessing NW_018395042.1] Last: 0:00:00.062582 \tTotal: 0:01:03.900198\n",[m
[32m+[m[32m      "[Preprocessing NW_018395043.1] Last: 0:00:00.092216 \tTotal: 0:01:03.992453\n",[m
[32m+[m[32m      "[Preprocessing NW_018395044.1] Last: 0:00:00.085077 \tTotal: 0:01:04.077564\n",[m
[32m+[m[32m      "[Preprocessing NW_018395045.1] Last: 0:00:00.111993 \tTotal: 0:01:04.189597\n",[m
[32m+[m[32m      "[Preprocessing NW_018395046.1] Last: 0:00:00.077901 \tTotal: 0:01:04.267538\n",[m
[32m+[m[32m      "[Preprocessing NW_018395047.1] Last: 0:00:00.077048 \tTotal: 0:01:04.344628\n",[m
[32m+[m[32m      "[Preprocessing NW_018395048.1] Last: 0:00:00.081883 \tTotal: 0:01:04.426553\n",[m
[32m+[m[32m      "[Preprocessing NW_018395049.1] Last: 0:00:00.079025 \tTotal: 0:01:04.505619\n",[m
[32m+[m[32m      "[Preprocessing NW_018395050.1] Last: 0:00:00.087022 \tTotal: 0:01:04.592683\n",[m
[32m+[m[32m      "[Preprocessing NW_018395051.1] Last: 0:00:00.081390 \tTotal: 0:01:04.674112\n",[m
[32m+[m[32m      "[Preprocessing NW_018395052.1] Last: 0:00:00.131660 \tTotal: 0:01:04.805824\n",[m
[32m+[m[32m      "[Preprocessing NW_018395053.1] Last: 0:00:00.091789 \tTotal: 0:01:04.897660\n",[m
[32m+[m[32m      "[Preprocessing NW_018395054.1] Last: 0:00:00.077929 \tTotal: 0:01:04.975628\n",[m
[32m+[m[32m      "[Preprocessing NW_018395055.1] Last: 0:00:00.084872 \tTotal: 0:01:05.060541\n",[m
[32m+[m[32m      "[Preprocessing NW_018395056.1] Last: 0:00:00.078663 \tTotal: 0:01:05.139243\n",[m
[32m+[m[32m      "[Preprocessing NW_018395057.1] Last: 0:00:00.081168 \tTotal: 0:01:05.220451\n",[m
[32m+[m[32m      "[Preprocessing NW_018395058.1] Last: 0:00:00.152243 \tTotal: 0:01:05.372733\n",[m
[32m+[m[32m      "[Preprocessing NW_018395059.1] Last: 0:00:00.135958 \tTotal: 0:01:05.508733\n",[m
[32m+[m[32m      "[Preprocessing NW_018395060.1] Last: 0:00:00.178597 \tTotal: 0:01:05.687367\n",[m
[32m+[m[32m      "[Preprocessing NW_018395061.1] Last: 0:00:00.177090 \tTotal: 0:01:05.864500\n",[m
[32m+[m[32m      "[Preprocessing NW_018395062.1] Last: 0:00:00.120278 \tTotal: 0:01:05.984815\n",[m
[32m+[m[32m      "[Preprocessing NW_018395063.1] Last: 0:00:00.095734 \tTotal: 0:01:06.080589\n",[m
[32m+[m[32m      "[Preprocessing NW_018395064.1] Last: 0:00:00.092019 \tTotal: 0:01:06.172647\n",[m
[32m+[m[32m      "[Preprocessing NW_018395065.1] Last: 0:00:00.119510 \tTotal: 0:01:06.292200\n",[m
[32m+[m[32m      "[Preprocessing NW_018395066.1] Last: 0:00:00.109431 \tTotal: 0:01:06.401735\n",[m
[32m+[m[32m      "[Preprocessing NW_018395067.1] Last: 0:00:00.083093 \tTotal: 0:01:06.484873\n",[m
[32m+[m[32m      "[Preprocessing NW_018395068.1] Last: 0:00:00.088304 \tTotal: 0:01:06.573222\n",[m
[32m+[m[32m      "[Preprocessing NW_018395069.1] Last: 0:00:00.090996 \tTotal: 0:01:06.664261\n",[m
[32m+[m[32m      "[Preprocessing NW_018395070.1] Last: 0:00:00.094457 \tTotal: 0:01:06.758765\n",[m
[32m+[m[32m      "[Preprocessing NW_018395071.1] Last: 0:00:00.080016 \tTotal: 0:01:06.838824\n",[m
[32m+[m[32m      "[Preprocessing NW_018395072.1] Last: 0:00:00.118881 \tTotal: 0:01:06.957749\n",[m
[32m+[m[32m      "[Preprocessing NW_018395073.1] Last: 0:00:00.081494 \tTotal: 0:01:07.039300\n",[m
[32m+[m[32m      "[Preprocessing NW_018395074.1] Last: 0:00:00.108172 \tTotal: 0:01:07.147514\n",[m
[32m+[m[32m      "[Preprocessing NW_018395075.1] Last: 0:00:00.088513 \tTotal: 0:01:07.236069\n",[m
[32m+[m[32m      "[Preprocessing NW_018395076.1] Last: 0:00:00.122620 \tTotal: 0:01:07.358733\n",[m
[32m+[m[32m      "[Preprocessing NW_018395077.1] Last: 0:00:00.085696 \tTotal: 0:01:07.444499\n",[m
[32m+[m[32m      "[Preprocessing NW_018395078.1] Last: 0:00:00.083012 \tTotal: 0:01:07.527555\n",[m
[32m+[m[32m      "[Preprocessing NW_018395079.1] Last: 0:00:00.087044 \tTotal: 0:01:07.614639\n",[m
[32m+[m[32m      "[Preprocessing NW_018395080.1] Last: 0:00:00.081800 \tTotal: 0:01:07.696480\n",[m
[32m+[m[32m      "[Preprocessing NW_018395081.1] Last: 0:00:00.091705 \tTotal: 0:01:07.788219\n",[m
[32m+[m[32m      "[Preprocessing NW_018395082.1] Last: 0:00:00.081879 \tTotal: 0:01:07.870139\n",[m
[32m+[m[32m      "[Preprocessing NW_018395083.1] Last: 0:00:00.110257 \tTotal: 0:01:07.980441\n",[m
[32m+[m[32m      "[Preprocessing NW_018395084.1] Last: 0:00:00.077868 \tTotal: 0:01:08.058357\n",[m
[32m+[m[32m      "[Preprocessing NW_018395085.1] Last: 0:00:00.091879 \tTotal: 0:01:08.150282\n",[m
[32m+[m[32m      "[Preprocessing NW_018395086.1] Last: 0:00:00.088831 \tTotal: 0:01:08.239152\n",[m
[32m+[m[32m      "[Preprocessing NW_018395087.1] Last: 0:00:00.106964 \tTotal: 0:01:08.346162\n",[m
[32m+[m[32m      "[Preprocessing NW_018395088.1] Last: 0:00:00.081748 \tTotal: 0:01:08.427954\n",[m
[32m+[m[32m      "[Preprocessing NW_018395089.1] Last: 0:00:00.105329 \tTotal: 0:01:08.533323\n",[m
[32m+[m[32m      "[Preprocessing NW_018395090.1] Last: 0:00:00.090004 \tTotal: 0:01:08.623367\n",[m
[32m+[m[32m      "[Preprocessing NW_018395091.1] Last: 0:00:00.100694 \tTotal: 0:01:08.724133\n",[m
[32m+[m[32m      "[Preprocessing NW_018395092.1] Last: 0:00:00.079078 \tTotal: 0:01:08.803250\n",[m
[32m+[m[32m      "[Preprocessing NW_018395093.1] Last: 0:00:00.084078 \tTotal: 0:01:08.887370\n",[m
[32m+[m[32m      "[Preprocessing NW_018395094.1] Last: 0:00:00.123934 \tTotal: 0:01:09.011364\n",[m
[32m+[m[32m      "[Preprocessing NW_018395095.1] Last: 0:00:00.089829 \tTotal: 0:01:09.101244\n",[m
[32m+[m[32m      "[Preprocessing NW_018395096.1] Last: 0:00:00.095320 \tTotal: 0:01:09.196641\n",[m
[32m+[m[32m      "[Preprocessing NW_018395097.1] Last: 0:00:00.102400 \tTotal: 0:01:09.299087\n",[m
[32m+[m[32m      "[Preprocessing NW_018395098.1] Last: 0:00:00.097693 \tTotal: 0:01:09.396820\n",[m
[32m+[m[32m      "[Preprocessing NW_018395099.1] Last: 0:00:00.096380 \tTotal: 0:01:09.493244\n",[m
[32m+[m[32m      "[Preprocessing NW_018395100.1] Last: 0:00:00.153768 \tTotal: 0:01:09.647049\n",[m
[32m+[m[32m      "[Preprocessing NW_018395101.1] Last: 0:00:00.085359 \tTotal: 0:01:09.732452\n",[m
[32m+[m[32m      "[Preprocessing NW_018395102.1] Last: 0:00:00.091543 \tTotal: 0:01:09.824038\n",[m
[32m+[m[32m      "[Preprocessing NW_018395103.1] Last: 0:00:00.104112 \tTotal: 0:01:09.928194\n",[m
[32m+[m[32m      "[Preprocessing NW_018395104.1] Last: 0:00:00.102098 \tTotal: 0:01:10.030333\n",[m
[32m+[m[32m      "[Preprocessing NW_018395105.1] Last: 0:00:00.130863 \tTotal: 0:01:10.161240\n",[m
[32m+[m[32m      "[Preprocessing NW_018395106.1] Last: 0:00:00.092654 \tTotal: 0:01:10.253933\n",[m
[32m+[m[32m      "[Preprocessing NW_018395107.1] Last: 0:00:00.133516 \tTotal: 0:01:10.387503\n",[m
[32m+[m[32m      "[Preprocessing NW_018395108.1] Last: 0:00:00.101470 \tTotal: 0:01:10.489017\n",[m
[32m+[m[32m      "[Preprocessing NW_018395109.1] Last: 0:00:00.093879 \tTotal: 0:01:10.582945\n",[m
[32m+[m[32m      "[Preprocessing NW_018395110.1] Last: 0:00:00.096157 \tTotal: 0:01:10.679145\n",[m
[32m+[m[32m      "[Preprocessing NW_018395111.1] Last: 0:00:00.154612 \tTotal: 0:01:10.833799\n",[m
[32m+[m[32m      "[Preprocessing NW_018395112.1] Last: 0:00:00.100947 \tTotal: 0:01:10.934791\n",[m
[32m+[m[32m      "[Preprocessing NW_018395126.1] Last: 0:00:00.091277 \tTotal: 0:01:11.026113\n",[m
[32m+[m[32m      "[Preprocessing NW_018395113.1] Last: 0:00:00.094008 \tTotal: 0:01:11.120166\n",[m
[32m+[m[32m      "[Preprocessing NW_018395114.1] Last: 0:00:00.142432 \tTotal: 0:01:11.262641\n",[m
[32m+[m[32m      "[Preprocessing NW_018395115.1] Last: 0:00:00.096402 \tTotal: 0:01:11.359083\n",[m
[32m+[m[32m      "[Preprocessing NW_018395116.1] Last: 0:00:00.092691 \tTotal: 0:01:11.451818\n",[m
[32m+[m[32m      "[Preprocessing NW_018395117.1] Last: 0:00:00.153176 \tTotal: 0:01:11.605041\n",[m
[32m+[m[32m      "[Preprocessing NW_018395118.1] Last: 0:00:00.098131 \tTotal: 0:01:11.703216\n",[m
[32m+[m[32m      "[Preprocessing NW_018395119.1] Last: 0:00:00.095294 \tTotal: 0:01:11.798558\n",[m
[32m+[m[32m      "[Preprocessing NW_018395120.1] Last: 0:00:00.097494 \tTotal: 0:01:11.896098\n",[m
[32m+[m[32m      "[Preprocessing NW_018395121.1] Last: 0:00:00.101180 \tTotal: 0:01:11.997325\n",[m
[32m+[m[32m      "[Preprocessing NW_018395122.1] Last: 0:00:00.090407 \tTotal: 0:01:12.087772\n",[m
[32m+[m[32m      "[Preprocessing NW_018395123.1] Last: 0:00:00.152880 \tTotal: 0:01:12.240696\n",[m
[32m+[m[32m      "[Preprocessing NW_018395124.1] Last: 0:00:00.094611 \tTotal: 0:01:12.335351\n",[m
[32m+[m[32m      "[Preprocessing NW_018395125.1] Last: 0:00:00.096856 \tTotal: 0:01:12.432254\n",[m
[32m+[m[32m      "[Preprocessing NW_018395127.1] Last: 0:00:00.095994 \tTotal: 0:01:12.528303\n",[m
[32m+[m[32m      "[Preprocessing NW_018395128.1] Last: 0:00:00.094808 \tTotal: 0:01:12.623160\n",[m
[32m+[m[32m      "[Preprocessing NW_018395129.1] Last: 0:00:00.095284 \tTotal: 0:01:12.718493\n",[m
[32m+[m[32m      "[Preprocessing NW_018395130.1] Last: 0:00:00.095185 \tTotal: 0:01:12.813722\n",[m
[32m+[m[32m      "[Preprocessing NW_018395132.1] Last: 0:00:00.158505 \tTotal: 0:01:12.972268\n",[m
[32m+[m[32m      "[Preprocessing NW_018395133.1] Last: 0:00:00.095376 \tTotal: 0:01:13.067684\n",[m
[32m+[m[32m      "[Preprocessing NW_018395134.1] Last: 0:00:00.093899 \tTotal: 0:01:13.161622\n",[m
[32m+[m[32m      "[Preprocessing NW_018395135.1] Last: 0:00:00.095188 \tTotal: 0:01:13.256853\n",[m
[32m+[m[32m      "[Preprocessing NW_018395136.1] Last: 0:00:00.101532 \tTotal: 0:01:13.358428\n",[m
[32m+[m[32m      "[Preprocessing NW_018395137.1] Last: 0:00:00.105862 \tTotal: 0:01:13.464336\n",[m
[32m+[m[32m      "[Preprocessing NW_018395138.1] Last: 0:00:00.147859 \tTotal: 0:01:13.612240\n",[m
[32m+[m[32m      "[Preprocessing NW_018395131.1] Last: 0:00:00.086501 \tTotal: 0:01:13.698783\n",[m
[32m+[m[32m      "[Preprocessing NW_018395139.1] Last: 0:00:00.074549 \tTotal: 0:01:13.773386\n",[m
[32m+[m[32m      "[Preprocessing NW_018395140.1] Last: 0:00:00.012424 \tTotal: 0:01:13.785844\n",[m
[32m+[m[32m      "[Preprocessing NW_018395141.1] Last: 0:00:00.015028 \tTotal: 0:01:13.800904\n",[m
[32m+[m[32m      "[Preprocessing NW_018395142.1] Last: 0:00:00.014238 \tTotal: 0:01:13.815170\n",[m
[32m+[m[32m      "[Preprocessing NW_018395143.1] Last: 0:00:00.019381 \tTotal: 0:01:13.834583\n",[m
[32m+[m[32m      "[Preprocessing NW_018395144.1] Last: 0:00:00.024019 \tTotal: 0:01:13.858633\n",[m
[32m+[m[32m      "[Preprocessing NW_018395145.1] Last: 0:00:00.020021 \tTotal: 0:01:13.878684\n",[m
[32m+[m[32m      "[Preprocessing NW_018395146.1] Last: 0:00:00.012327 \tTotal: 0:01:13.891042\n",[m
[32m+[m[32m      "[Preprocessing NW_018395147.1] Last: 0:00:00.008756 \tTotal: 0:01:13.899826\n",[m
[32m+[m[32m      "[Preprocessing NW_018395148.1] Last: 0:00:00.015281 \tTotal: 0:01:13.915135\n",[m
[32m+[m[32m      "[Preprocessing NW_018395149.1] Last: 0:00:00.009888 \tTotal: 0:01:13.925051\n",[m
[32m+[m[32m      "[Preprocessing NW_018395150.1] Last: 0:00:00.013349 \tTotal: 0:01:13.938430\n",[m
[32m+[m[32m      "[Preprocessing NW_018395151.1] Last: 0:00:00.013532 \tTotal: 0:01:13.951992\n",[m
[32m+[m[32m      "[Preprocessing NW_018395152.1] Last: 0:00:00.011087 \tTotal: 0:01:13.963107\n",[m
[32m+[m[32m      "[Preprocessing NW_018395153.1] Last: 0:00:00.012504 \tTotal: 0:01:13.975637\n",[m
[32m+[m[32m      "[Preprocessing NW_018395154.1] Last: 0:00:00.018595 \tTotal: 0:01:13.994262\n",[m
[32m+[m[32m      "[Preprocessing NW_018395155.1] Last: 0:00:00.022275 \tTotal: 0:01:14.016570\n",[m
[32m+[m[32m      "[Preprocessing NW_018395156.1] Last: 0:00:00.007107 \tTotal: 0:01:14.023708\n",[m
[32m+[m[32m      "[Preprocessing NW_018395157.1] Last: 0:00:00.013322 \tTotal: 0:01:14.037060\n",[m
[32m+[m[32m      "[Preprocessing NW_018395158.1] Last: 0:00:00.022669 \tTotal: 0:01:14.059760\n",[m
[32m+[m[32m      "[Preprocessing NW_018395159.1] Last: 0:00:00.018600 \tTotal: 0:01:14.078399\n",[m
[32m+[m[32m      "[Preprocessing NW_018395160.1] Last: 0:00:00.010799 \tTotal: 0:01:14.089227\n",[m
[32m+[m[32m      "[Preprocessing NW_018395161.1] Last: 0:00:00.014013 \tTotal: 0:01:14.103267\n",[m
[32m+[m[32m      "[Preprocessing NW_018395162.1] Last: 0:00:00.011250 \tTotal: 0:01:14.114542\n",[m
[32m+[m[32m      "[Preprocessing NW_018395163.1] Last: 0:00:00.006844 \tTotal: 0:01:14.121410\n",[m
[32m+[m[32m      "[Preprocessing NW_018395164.1] Last: 0:00:00.010182 \tTotal: 0:01:14.131617\n",[m
[32m+[m[32m      "[Preprocessing NW_018395165.1] Last: 0:00:00.015766 \tTotal: 0:01:14.147406\n",[m
[32m+[m[32m      "[Preprocessing NW_018395166.1] Last: 0:00:00.010870 \tTotal: 0:01:14.158301\n",[m
[32m+[m[32m      "[Preprocessing NW_018395167.1] Last: 0:00:00.014203 \tTotal: 0:01:14.172530\n",[m
[32m+[m[32m      "[Preprocessing NW_018395168.1] Last: 0:00:00.015171 \tTotal: 0:01:14.187729\n",[m
[32m+[m[32m      "[Preprocessing NW_018395169.1] Last: 0:00:00.015688 \tTotal: 0:01:14.203446\n",[m
[32m+[m[32m      "[Preprocessing NW_018395170.1] Last: 0:00:00.010637 \tTotal: 0:01:14.214113\n",[m
[32m+[m[32m      "[Preprocessing NW_018395171.1] Last: 0:00:00.017907 \tTotal: 0:01:14.232046\n",[m
[32m+[m[32m      "[Preprocessing NW_018395172.1] Last: 0:00:00.016140 \tTotal: 0:01:14.248212\n",[m
[32m+[m[32m      "[Preprocessing NW_018395173.1] Last: 0:00:00.014123 \tTotal: 0:01:14.262361\n",[m
[32m+[m[32m      "[Preprocessing NW_018395174.1] Last: 0:00:00.017134 \tTotal: 0:01:14.279521\n",[m
[32m+[m[32m      "[Preprocessing NW_018395175.1] Last: 0:00:00.009724 \tTotal: 0:01:14.289273\n",[m
[32m+[m[32m      "[Preprocessing NW_018395176.1] Last: 0:00:00.015385 \tTotal: 0:01:14.304685\n",[m
[32m+[m[32m      "[Preprocessing NW_018395177.1] Last: 0:00:00.011149 \tTotal: 0:01:14.315859\n",[m
[32m+[m[32m      "[Preprocessing NW_018395178.1] Last: 0:00:00.014876 \tTotal: 0:01:14.330762\n",[m
[32m+[m[32m      "[Preprocessing NW_018395179.1] Last: 0:00:00.019106 \tTotal: 0:01:14.349899\n",[m
[32m+[m[32m      "[Preprocessing NW_018395180.1] Last: 0:00:00.012420 \tTotal: 0:01:14.362352\n",[m
[32m+[m[32m      "[Preprocessing NW_018395181.1] Last: 0:00:00.012557 \tTotal: 0:01:14.374939\n",[m
[32m+[m[32m      "[Preprocessing NW_018395182.1] Last: 0:00:00.011076 \tTotal: 0:01:14.386043\n",[m
[32m+[m[32m      "[Preprocessing NW_018395183.1] Last: 0:00:00.010319 \tTotal: 0:01:14.396398\n",[m
[32m+[m[32m      "[Preprocessing NW_018395184.1] Last: 0:00:00.012664 \tTotal: 0:01:14.409089\n",[m
[32m+[m[32m      "[Preprocessing NW_018395185.1] Last: 0:00:00.014574 \tTotal: 0:01:14.423688\n",[m
[32m+[m[32m      "[Preprocessing NW_018395186.1] Last: 0:00:00.011974 \tTotal: 0:01:14.435688\n",[m
[32m+[m[32m      "[Preprocessing NW_018395187.1] Last: 0:00:00.009396 \tTotal: 0:01:14.445110\n",[m
[32m+[m[32m      "[Preprocessing NW_018395188.1] Last: 0:00:00.012591 \tTotal: 0:01:14.457725\n",[m
[32m+[m[32m      "[Preprocessing NW_018395189.1] Last: 0:00:00.010080 \tTotal: 0:01:14.467829\n",[m
[32m+[m[32m      "[Preprocessing NW_018395190.1] Last: 0:00:00.009661 \tTotal: 0:01:14.477514\n",[m
[32m+[m[32m      "[Preprocessing NW_018395191.1] Last: 0:00:00.009888 \tTotal: 0:01:14.487427\n",[m
[32m+[m[32m      "[Preprocessing NW_018395192.1] Last: 0:00:00.025795 \tTotal: 0:01:14.513252\n",[m
[32m+[m[32m      "[Preprocessing NW_018395193.1] Last: 0:00:00.011178 \tTotal: 0:01:14.524458\n",[m
[32m+[m[32m      "[Preprocessing NW_018395194.1] Last: 0:00:00.014542 \tTotal: 0:01:14.539032\n",[m
[32m+[m[32m      "[Preprocessing NW_018395195.1] Last: 0:00:00.014003 \tTotal: 0:01:14.553065\n",[m
[32m+[m[32m      "[Preprocessing NW_018395196.1] Last: 0:00:00.016070 \tTotal: 0:01:14.569166\n",[m
[32m+[m[32m      "[Preprocessing NW_018395197.1] Last: 0:00:00.015061 \tTotal: 0:01:14.584254\n",[m
[32m+[m[32m      "[Preprocessing NW_018395198.1] Last: 0:00:00.009017 \tTotal: 0:01:14.593297\n",[m
[32m+[m[32m      "[Preprocessing NW_018395199.1] Last: 0:00:00.011767 \tTotal: 0:01:14.605091\n",[m
[32m+[m[32m      "[Preprocessing NW_018395200.1] Last: 0:00:00.016090 \tTotal: 0:01:14.621208\n",[m
[32m+[m[32m      "[Preprocessing NW_018395201.1] Last: 0:00:00.012190 \tTotal: 0:01:14.633424\n",[m
[32m+[m[32m      "[Preprocessing NW_018395202.1] Last: 0:00:00.013140 \tTotal: 0:01:14.646590\n",[m
[32m+[m[32m      "[Preprocessing NW_018395203.1] Last: 0:00:00.026319 \tTotal: 0:01:14.672937\n",[m
[32m+[m[32m      "[Preprocessing NW_018395204.1] Last: 0:00:00.012005 \tTotal: 0:01:14.684971\n",[m
[32m+[m[32m      "[Preprocessing NW_018395205.1] Last: 0:00:00.030211 \tTotal: 0:01:14.715218\n",[m
[32m+[m[32m      "[Preprocessing NW_018395206.1] Last: 0:00:00.019896 \tTotal: 0:01:14.735142\n",[m
[32m+[m[32m      "[Preprocessing NW_018395207.1] Last: 0:00:00.016388 \tTotal: 0:01:14.751560\n",[m
[32m+[m[32m      "[Preprocessing NW_018395208.1] Last: 0:00:00.011550 \tTotal: 0:01:14.763141\n",[m
[32m+[m[32m      "[Preprocessing NW_018395209.1] Last: 0:00:00.016875 \tTotal: 0:01:14.780043\n",[m
[32m+[m[32m      "[Preprocessing NW_018395210.1] Last: 0:00:00.026690 \tTotal: 0:01:14.806763\n",[m
[32m+[m[32m      "[Preprocessing NW_018395211.1] Last: 0:00:00.014375 \tTotal: 0:01:14.821165\n",[m
[32m+[m[32m      "[Preprocessing NW_018395212.1] Last: 0:00:00.011725 \tTotal: 0:01:14.832916\n",[m
[32m+[m[32m      "[Preprocessing NW_018395213.1] Last: 0:00:00.023051 \tTotal: 0:01:14.855993\n",[m
[32m+[m[32m      "[Preprocessing NW_018395214.1] Last: 0:00:00.012015 \tTotal: 0:01:14.868035\n",[m
[32m+[m[32m      "[Preprocessing NW_018395215.1] Last: 0:00:00.011833 \tTotal: 0:01:14.879893\n",[m
[32m+[m[32m      "[Preprocessing NW_018395216.1] Last: 0:00:00.030367 \tTotal: 0:01:14.910288\n",[m
[32m+[m[32m      "[Preprocessing NW_018395217.1] Last: 0:00:00.011755 \tTotal: 0:01:14.922069\n",[m
[32m+[m[32m      "[Preprocessing NW_018395218.1] Last: 0:00:00.013310 \tTotal: 0:01:14.935405\n",[m
[32m+[m[32m      "[Preprocessing NW_018395219.1] Last: 0:00:00.011265 \tTotal: 0:01:14.946696\n",[m
[32m+[m[32m      "[Preprocessing NW_018395220.1] Last: 0:00:00.018100 \tTotal: 0:01:14.964824\n",[m
[32m+[m[32m      "[Preprocessing NW_018395221.1] Last: 0:00:00.018718 \tTotal: 0:01:14.983573\n",[m
[32m+[m[32m      "[Preprocessing NW_018395222.1] Last: 0:00:00.017092 \tTotal: 0:01:15.000694\n",[m
[32m+[m[32m      "[Preprocessing NW_018395223.1] Last: 0:00:00.019477 \tTotal: 0:01:15.020202\n",[m
[32m+[m[32m      "[Preprocessing NW_018395224.1] Last: 0:00:00.018354 \tTotal: 0:01:15.038584\n",[m
[32m+[m[32m      "[Preprocessing NW_018395225.1] Last: 0:00:00.016293 \tTotal: 0:01:15.054906\n",[m
[32m+[m[32m      "[Preprocessing NW_018395226.1] Last: 0:00:00.017269 \tTotal: 0:01:15.072204\n",[m
[32m+[m[32m      "[Preprocessing NW_018395227.1] Last: 0:00:00.021924 \tTotal: 0:01:15.094159\n",[m
[32m+[m[32m      "[Preprocessing NW_018395228.1] Last: 0:00:00.016834 \tTotal: 0:01:15.111022\n",[m
[32m+[m[32m      "[Preprocessing NW_018395229.1] Last: 0:00:00.011694 \tTotal: 0:01:15.122746\n",[m
[32m+[m[32m      "[Preprocessing NW_018395230.1] Last: 0:00:00.022717 \tTotal: 0:01:15.145492\n",[m
[32m+[m[32m      "[Preprocessing NW_018395231.1] Last: 0:00:00.088805 \tTotal: 0:01:15.234333\n",[m
[32m+[m[32m      "[Preprocessing NW_018395232.1] Last: 0:00:00.023194 \tTotal: 0:01:15.257560\n",[m
[32m+[m[32m      "[Preprocessing NW_018395233.1] Last: 0:00:00.017973 \tTotal: 0:01:15.275561\n",[m
[32m+[m[32m      "[Preprocessing NW_018395234.1] Last: 0:00:00.015818 \tTotal: 0:01:15.291408\n",[m
[32m+[m[32m      "[Preprocessing NW_018395235.1] Last: 0:00:00.012097 \tTotal: 0:01:15.303533\n",[m
[32m+[m[32m      "[Preprocessing NW_018395236.1] Last: 0:00:00.014821 \tTotal: 0:01:15.318392\n",[m
[32m+[m[32m      "[Preprocessing NW_018395237.1] Last: 0:00:00.011436 \tTotal: 0:01:15.329855\n",[m
[32m+[m[32m      "[Preprocessing NW_018395238.1] Last: 0:00:00.010255 \tTotal: 0:01:15.340136\n",[m
[32m+[m[32m      "[Preprocessing NW_018395239.1] Last: 0:00:00.008320 \tTotal: 0:01:15.348479\n",[m
[32m+[m[32m      "[Preprocessing NW_018395240.1] Last: 0:00:00.012316 \tTotal: 0:01:15.360820\n",[m
[32m+[m[32m      "[Preprocessing NW_018395241.1] Last: 0:00:00.013183 \tTotal: 0:01:15.374031\n",[m
[32m+[m[32m      "[Preprocessing NW_018395242.1] Last: 0:00:00.018166 \tTotal: 0:01:15.392228\n",[m
[32m+[m[32m      "[Preprocessing NW_018395243.1] Last: 0:00:00.009159 \tTotal: 0:01:15.401416\n",[m
[32m+[m[32m      "[Preprocessing NW_018395244.1] Last: 0:00:00.010943 \tTotal: 0:01:15.412395\n",[m
[32m+[m[32m      "[Preprocessing NW_018395245.1] Last: 0:00:00.010257 \tTotal: 0:01:15.422677\n",[m
[32m+[m[32m      "[Preprocessing NW_018395246.1] Last: 0:00:00.011177 \tTotal: 0:01:15.433878\n",[m
[32m+[m[32m      "[Preprocessing NW_018395247.1] Last: 0:00:00.012740 \tTotal: 0:01:15.446647\n",[m
[32m+[m[32m      "[Preprocessing NW_018395248.1] Last: 0:00:00.013759 \tTotal: 0:01:15.460430\n",[m
[32m+[m[32m      "[Preprocessing NW_018395249.1] Last: 0:00:00.022488 \tTotal: 0:01:15.482943\n",[m
[32m+[m[32m      "[Preprocessing NW_018395250.1] Last: 0:00:00.007399 \tTotal: 0:01:15.490368\n",[m
[32m+[m[32m      "[Preprocessing NW_018395252.1] Last: 0:00:00.022107 \tTotal: 0:01:15.512518\n",[m
[32m+[m[32m      "[Preprocessing NW_018395253.1] Last: 0:00:00.016813 \tTotal: 0:01:15.529356\n",[m
[32m+[m[32m      "[Preprocessing NW_018395251.1] Last: 0:00:00.019669 \tTotal: 0:01:15.549052\n",[m
[32m+[m[32m      "[Preprocessing NW_018395254.1] Last: 0:00:00.012874 \tTotal: 0:01:15.561952\n",[m
[32m+[m[32m      "[Preprocessing NW_018395255.1] Last: 0:00:00.014057 \tTotal: 0:01:15.576035\n",[m
[32m+[m[32m      "[Preprocessing NW_018395256.1] Last: 0:00:00.011409 \tTotal: 0:01:15.587470\n",[m
[32m+[m[32m      "[Preprocessing NW_018395257.1] Last: 0:00:00.010153 \tTotal: 0:01:15.597647\n",[m
[32m+[m[32m      "[Preprocessing NW_018395258.1] Last: 0:00:00.014385 \tTotal: 0:01:15.612056\n",[m
[32m+[m[32m      "[Preprocessing NW_018395259.1] Last: 0:00:00.018906 \tTotal: 0:01:15.630985\n",[m
[32m+[m[32m      "[Preprocessing NW_018395260.1] Last: 0:00:00.014019 \tTotal: 0:01:15.645030\n",[m
[32m+[m[32m      "[Preprocessing NW_018395261.1] Last: 0:00:00.015237 \tTotal: 0:01:15.660294\n",[m
[32m+[m[32m      "[Preprocessing NW_018395262.1] Last: 0:00:00.021902 \tTotal: 0:01:15.682225\n",[m
[32m+[m[32m      "[Preprocessing NW_018395263.1] Last: 0:00:00.020496 \tTotal: 0:01:15.702755\n",[m
[32m+[m[32m      "[Preprocessing NW_018395264.1] Last: 0:00:00.019359 \tTotal: 0:01:15.722146\n",[m
[32m+[m[32m      "[Preprocessing NW_018395265.1] Last: 0:00:00.014961 \tTotal: 0:01:15.737132\n",[m
[32m+[m[32m      "[Preprocessing NW_018395266.1] Last: 0:00:00.012698 \tTotal: 0:01:15.749854\n",[m
[32m+[m[32m      "[Preprocessing NW_018395267.1] Last: 0:00:00.009005 \tTotal: 0:01:15.758882\n",[m
[32m+[m[32m      "[Preprocessing NW_018395268.1] Last: 0:00:00.015517 \tTotal: 0:01:15.774423\n",[m
[32m+[m[32m      "[Preprocessing NW_018395269.1] Last: 0:00:00.017257 \tTotal: 0:01:15.791708\n",[m
[32m+[m[32m      "[Preprocessing NW_018395270.1] Last: 0:00:00.016559 \tTotal: 0:01:15.808295\n",[m
[32m+[m[32m      "[Preprocessing NW_018395271.1] Last: 0:00:00.010384 \tTotal: 0:01:15.818704\n",[m
[32m+[m[32m      "[Preprocessing NW_018395272.1] Last: 0:00:00.013442 \tTotal: 0:01:15.832177\n",[m
[32m+[m[32m      "[Preprocessing NW_018395273.1] Last: 0:00:00.013849 \tTotal: 0:01:15.846053\n",[m
[32m+[m[32m      "[Preprocessing NW_018395274.1] Last: 0:00:00.012471 \tTotal: 0:01:15.858550\n",[m
[32m+[m[32m      "[Preprocessing NW_018395275.1] Last: 0:00:00.011091 \tTotal: 0:01:15.869668\n",[m
[32m+[m[32m      "[Preprocessing NW_018395276.1] Last: 0:00:00.014313 \tTotal: 0:01:15.884007\n",[m
[32m+[m[32m      "[Preprocessing NW_018395277.1] Last: 0:00:00.015555 \tTotal: 0:01:15.899589\n",[m
[32m+[m[32m      "[Preprocessing NW_018395278.1] Last: 0:00:00.015077 \tTotal: 0:01:15.914692\n",[m
[32m+[m[32m      "[Preprocessing NW_018395279.1] Last: 0:00:00.019864 \tTotal: 0:01:15.934586\n",[m
[32m+[m[32m      "[Preprocessing NW_018395280.1] Last: 0:00:00.007836 \tTotal: 0:01:15.942449\n",[m
[32m+[m[32m      "[Preprocessing NW_018395281.1] Last: 0:00:00.013468 \tTotal: 0:01:15.955943\n",[m
[32m+[m[32m      "[Preprocessing NW_018395282.1] Last: 0:00:00.023828 \tTotal: 0:01:15.979797\n",[m
[32m+[m[32m      "[Preprocessing NW_018395283.1] Last: 0:00:00.011955 \tTotal: 0:01:15.991777\n",[m
[32m+[m[32m      "[Preprocessing NW_018395284.1] Last: 0:00:00.014782 \tTotal: 0:01:16.006583\n",[m
[32m+[m[32m      "[Preprocessing NW_018395285.1] Last: 0:00:00.016508 \tTotal: 0:01:16.023116\n",[m
[32m+[m[32m      "[Preprocessing NW_018395286.1] Last: 0:00:00.010017 \tTotal: 0:01:16.033157\n",[m
[32m+[m[32m      "[Preprocessing NW_018395287.1] Last: 0:00:00.011815 \tTotal: 0:01:16.044993\n",[m
[32m+[m[32m      "[Preprocessing NW_018395288.1] Last: 0:00:00.007792 \tTotal: 0:01:16.052807\n",[m
[32m+[m[32m      "[Preprocessing NW_018395289.1] Last: 0:00:00.022857 \tTotal: 0:01:16.075691\n",[m
[32m+[m[32m      "[Preprocessing NW_018395290.1] Last: 0:00:00.011718 \tTotal: 0:01:16.087435\n",[m
[32m+[m[32m      "[Preprocessing NW_018395291.1] Last: 0:00:00.010854 \tTotal: 0:01:16.098317\n",[m
[32m+[m[32m      "[Preprocessing NW_018395292.1] Last: 0:00:00.011224 \tTotal: 0:01:16.109568\n",[m
[32m+[m[32m      "[Preprocessing NW_018395293.1] Last: 0:00:00.015610 \tTotal: 0:01:16.125203\n",[m
[32m+[m[32m      "[Preprocessing NW_018395294.1] Last: 0:00:00.010504 \tTotal: 0:01:16.135732\n",[m
[32m+[m[32m      "[Preprocessing NW_018395295.1] Last: 0:00:00.017682 \tTotal: 0:01:16.153440\n",[m
[32m+[m[32m      "[Preprocessing NW_018395296.1] Last: 0:00:00.025332 \tTotal: 0:01:16.178803\n",[m
[32m+[m[32m      "[Preprocessing NW_018395297.1] Last: 0:00:00.012534 \tTotal: 0:01:16.191385\n",[m
[32m+[m[32m      "[Preprocessing NW_018395298.1] Last: 0:00:00.014569 \tTotal: 0:01:16.205983\n",[m
[32m+[m[32m      "[Preprocessing NW_018395299.1] Last: 0:00:00.009835 \tTotal: 0:01:16.215847\n",[m
[32m+[m[32m      "[Preprocessing NW_018395300.1] Last: 0:00:00.014658 \tTotal: 0:01:16.230531\n",[m
[32m+[m[32m      "[Preprocessing NW_018395301.1] Last: 0:00:00.025473 \tTotal: 0:01:16.256033\n",[m
[32m+[m[32m      "[Preprocessing NW_018395302.1] Last: 0:00:00.013308 \tTotal: 0:01:16.269371\n",[m
[32m+[m[32m      "[Preprocessing NW_018395303.1] Last: 0:00:00.013504 \tTotal: 0:01:16.282915\n",[m
[32m+[m[32m      "[Preprocessing NW_018395304.1] Last: 0:00:00.009693 \tTotal: 0:01:16.292635\n",[m
[32m+[m[32m      "[Preprocessing NW_018395305.1] Last: 0:00:00.012951 \tTotal: 0:01:16.305609\n",[m
[32m+[m[32m      "[Preprocessing NW_018395306.1] Last: 0:00:00.013016 \tTotal: 0:01:16.318652\n",[m
[32m+[m[32m      "[Preprocessing NW_018395307.1] Last: 0:00:00.011613 \tTotal: 0:01:16.330292\n",[m
[32m+[m[32m      "[Preprocessing NW_018395308.1] Last: 0:00:00.010923 \tTotal: 0:01:16.341240\n",[m
[32m+[m[32m      "[Preprocessing NW_018395309.1] Last: 0:00:00.014894 \tTotal: 0:01:16.356160\n",[m
[32m+[m[32m      "[Preprocessing NW_018395310.1] Last: 0:00:00.014783 \tTotal: 0:01:16.370970\n",[m
[32m+[m[32m      "[Preprocessing NW_018395311.1] Last: 0:00:00.013863 \tTotal: 0:01:16.384861\n",[m
[32m+[m[32m      "[Preprocessing NW_018395312.1] Last: 0:00:00.015393 \tTotal: 0:01:16.400280\n",[m
[32m+[m[32m      "[Preprocessing NW_018395313.1] Last: 0:00:00.012234 \tTotal: 0:01:16.412538\n",[m
[32m+[m[32m      "[Preprocessing NW_018395314.1] Last: 0:00:00.018913 \tTotal: 0:01:16.431476\n",[m
[32m+[m[32m      "[Preprocessing NW_018395315.1] Last: 0:00:00.013345 \tTotal: 0:01:16.444847\n",[m
[32m+[m[32m      "[Preprocessing NW_018395316.1] Last: 0:00:00.017223 \tTotal: 0:01:16.462097\n",[m
[32m+[m[32m      "[Preprocessing NW_018395317.1] Last: 0:00:00.012120 \tTotal: 0:01:16.474241\n",[m
[32m+[m[32m      "[Preprocessing NW_018395318.1] Last: 0:00:00.013535 \tTotal: 0:01:16.487802\n",[m
[32m+[m[32m      "[Preprocessing NW_018395319.1] Last: 0:00:00.014757 \tTotal: 0:01:16.502586\n",[m
[32m+[m[32m      "[Preprocessing NW_018395320.1] Last: 0:00:00.013332 \tTotal: 0:01:16.515944\n",[m
[32m+[m[32m      "[Preprocessing NW_018395321.1] Last: 0:00:00.010686 \tTotal: 0:01:16.526661\n",[m
[32m+[m[32m      "[Preprocessing NW_018395322.1] Last: 0:00:00.009448 \tTotal: 0:01:16.536138\n",[m
[32m+[m[32m      "[Preprocessing NW_018395323.1] Last: 0:00:00.018256 \tTotal: 0:01:16.554422\n",[m
[32m+[m[32m      "[Preprocessing NW_018395324.1] Last: 0:00:00.021392 \tTotal: 0:01:16.575842\n",[m
[32m+[m[32m      "[Preprocessing NW_018395325.1] Last: 0:00:00.008578 \tTotal: 0:01:16.584447\n",[m
[32m+[m[32m      "[Preprocessing NW_018395326.1] Last: 0:00:00.022415 \tTotal: 0:01:16.606893\n",[m
[32m+[m[32m      "[Preprocessing NW_018395327.1] Last: 0:00:00.013513 \tTotal: 0:01:16.620435\n",[m
[32m+[m[32m      "[Preprocessing NW_018395328.1] Last: 0:00:00.014474 \tTotal: 0:01:16.634937\n",[m
[32m+[m[32m      "[Preprocessing NW_018395329.1] Last: 0:00:00.010183 \tTotal: 0:01:16.645143\n",[m
[32m+[m[32m      "[Preprocessing NW_018395330.1] Last: 0:00:00.011558 \tTotal: 0:01:16.656727\n",[m
[32m+[m[32m      "[Preprocessing NW_018395331.1] Last: 0:00:00.016815 \tTotal: 0:01:16.673567\n",[m
[32m+[m[32m      "[Preprocessing NW_018395332.1] Last: 0:00:00.008561 \tTotal: 0:01:16.682156\n",[m
[32m+[m[32m      "[Preprocessing NW_018395333.1] Last: 0:00:00.014692 \tTotal: 0:01:16.696878\n",[m
[32m+[m[32m      "[Preprocessing NW_018395334.1] Last: 0:00:00.008212 \tTotal: 0:01:16.705117\n",[m
[32m+[m[32m      "[Preprocessing NW_018395335.1] Last: 0:00:00.018067 \tTotal: 0:01:16.723213\n",[m
[32m+[m[32m      "[Preprocessing NW_018395336.1] Last: 0:00:00.015176 \tTotal: 0:01:16.738418\n",[m
[32m+[m[32m      "[Preprocessing NW_018395337.1] Last: 0:00:00.009677 \tTotal: 0:01:16.748120\n",[m
[32m+[m[32m      "[Preprocessing NW_018395338.1] Last: 0:00:00.013242 \tTotal: 0:01:16.761392\n",[m
[32m+[m[32m      "[Preprocessing NW_018395339.1] Last: 0:00:00.032171 \tTotal: 0:01:16.793593\n",[m
[32m+[m[32m      "[Preprocessing NW_018395340.1] Last: 0:00:00.009865 \tTotal: 0:01:16.803488\n",[m
[32m+[m[32m      "[Preprocessing NW_018395341.1] Last: 0:00:00.021556 \tTotal: 0:01:16.825074\n",[m
[32m+[m[32m      "[Preprocessing NW_018395342.1] Last: 0:00:00.022252 \tTotal: 0:01:16.847355\n",[m
[32m+[m[32m      "[Preprocessing NW_018395343.1] Last: 0:00:00.010887 \tTotal: 0:01:16.858271\n",[m
[32m+[m[32m      "[Preprocessing NW_018395344.1] Last: 0:00:00.015266 \tTotal: 0:01:16.873564\n",[m
[32m+[m[32m      "[Preprocessing NW_018395345.1] Last: 0:00:00.010000 \tTotal: 0:01:16.883588\n",[m
[32m+[m[32m      "[Preprocessing NW_018395346.1] Last: 0:00:00.010647 \tTotal: 0:01:16.894260\n",[m
[32m+[m[32m      "[Preprocessing NW_018395347.1] Last: 0:00:00.013730 \tTotal: 0:01:16.908015\n",[m
[32m+[m[32m      "[Preprocessing NW_018395348.1] Last: 0:00:00.014270 \tTotal: 0:01:16.922309\n",[m
[32m+[m[32m      "[Preprocessing NW_018395349.1] Last: 0:00:00.019686 \tTotal: 0:01:16.942021\n",[m
[32m+[m[32m      "[Preprocessing NW_018395350.1] Last: 0:00:00.012646 \tTotal: 0:01:16.954691\n",[m
[32m+[m[32m      "[Preprocessing NW_018395351.1] Last: 0:00:00.009303 \tTotal: 0:01:16.964018\n",[m
[32m+[m[32m      "[Preprocessing NW_018395352.1] Last: 0:00:00.020609 \tTotal: 0:01:16.984651\n",[m
[32m+[m[32m      "[Preprocessing NW_018395353.1] Last: 0:00:00.014470 \tTotal: 0:01:16.999147\n",[m
[32m+[m[32m      "[Preprocessing NW_018395354.1] Last: 0:00:00.009381 \tTotal: 0:01:17.008552\n",[m
[32m+[m[32m      "[Preprocessing NW_018395355.1] Last: 0:00:00.009672 \tTotal: 0:01:17.018247\n",[m
[32m+[m[32m      "[Preprocessing NW_018395356.1] Last: 0:00:00.017910 \tTotal: 0:01:17.036181\n",[m
[32m+[m[32m      "[Preprocessing NW_018395357.1] Last: 0:00:00.017926 \tTotal: 0:01:17.054132\n",[m
[32m+[m[32m      "[Preprocessing NW_018395358.1] Last: 0:00:00.017747 \tTotal: 0:01:17.071902\n",[m
[32m+[m[32m      "[Preprocessing NW_018395359.1] Last: 0:00:00.012703 \tTotal: 0:01:17.084628\n",[m
[32m+[m[32m      "[Preprocessing NW_018395360.1] Last: 0:00:00.015390 \tTotal: 0:01:17.100042\n",[m
[32m+[m[32m      "[Preprocessing NW_018395361.1] Last: 0:00:00.014628 \tTotal: 0:01:17.114695\n",[m
[32m+[m[32m      "[Preprocessing NW_018395362.1] Last: 0:00:00.016858 \tTotal: 0:01:17.131577\n",[m
[32m+[m[32m      "[Preprocessing NW_018395363.1] Last: 0:00:00.010894 \tTotal: 0:01:17.142494\n",[m
[32m+[m[32m      "[Preprocessing NW_018395364.1] Last: 0:00:00.009574 \tTotal: 0:01:17.152091\n",[m
[32m+[m[32m      "[Preprocessing NW_018395365.1] Last: 0:00:00.007655 \tTotal: 0:01:17.159768\n",[m
[32m+[m[32m      "[Preprocessing NW_018395366.1] Last: 0:00:00.012931 \tTotal: 0:01:17.172722\n",[m
[32m+[m[32m      "[Preprocessing NW_018395367.1] Last: 0:00:00.011902 \tTotal: 0:01:17.184647\n",[m
[32m+[m[32m      "[Preprocessing NW_018395368.1] Last: 0:00:00.007957 \tTotal: 0:01:17.192628\n",[m
[32m+[m[32m      "[Preprocessing NW_018395369.1] Last: 0:00:00.017683 \tTotal: 0:01:17.210337\n",[m
[32m+[m[32m      "[Preprocessing NW_018395370.1] Last: 0:00:00.014439 \tTotal: 0:01:17.224800\n",[m
[32m+[m[32m      "[Preprocessing NW_018395371.1] Last: 0:00:00.013490 \tTotal: 0:01:17.238315\n",[m
[32m+[m[32m      "[Preprocessing NW_018395372.1] Last: 0:00:00.011720 \tTotal: 0:01:17.250059\n",[m
[32m+[m[32m      "[Preprocessing NW_018395373.1] Last: 0:00:00.016678 \tTotal: 0:01:17.266764\n",[m
[32m+[m[32m      "[Preprocessing NW_018395374.1] Last: 0:00:00.010335 \tTotal: 0:01:17.277125\n",[m
[32m+[m[32m      "[Preprocessing NW_018395375.1] Last: 0:00:00.013980 \tTotal: 0:01:17.291130\n",[m
[32m+[m[32m      "[Preprocessing NW_018395376.1] Last: 0:00:00.015548 \tTotal: 0:01:17.306705\n",[m
[32m+[m[32m      "[Preprocessing NW_018395377.1] Last: 0:00:00.010837 \tTotal: 0:01:17.317567\n",[m
[32m+[m[32m      "[Preprocessing NW_018395378.1] Last: 0:00:00.010207 \tTotal: 0:01:17.327798\n",[m
[32m+[m[32m      "[Preprocessing NW_018395379.1] Last: 0:00:00.009844 \tTotal: 0:01:17.337668\n",[m
[32m+[m[32m      "[Preprocessing NW_018395380.1] Last: 0:00:00.020291 \tTotal: 0:01:17.357985\n",[m
[32m+[m[32m      "[Preprocessing NW_018395381.1] Last: 0:00:00.015797 \tTotal: 0:01:17.373808\n",[m
[32m+[m[32m      "[Preprocessing NW_018395382.1] Last: 0:00:00.012932 \tTotal: 0:01:17.386769\n",[m
[32m+[m[32m      "[Preprocessing NW_018395383.1] Last: 0:00:00.021533 \tTotal: 0:01:17.408331\n",[m
[32m+[m[32m      "[Preprocessing NW_018395384.1] Last: 0:00:00.017958 \tTotal: 0:01:17.426324\n",[m
[32m+[m[32m      "[Preprocessing NW_018395385.1] Last: 0:00:00.015306 \tTotal: 0:01:17.441658\n",[m
[32m+[m[32m      "[Preprocessing NW_018395386.1] Last: 0:00:00.009547 \tTotal: 0:01:17.451229\n",[m
[32m+[m[32m      "[Preprocessing NW_018395387.1] Last: 0:00:00.019033 \tTotal: 0:01:17.470287\n",[m
[32m+[m[32m      "[Preprocessing NW_018395388.1] Last: 0:00:00.026283 \tTotal: 0:01:17.496600\n",[m
[32m+[m[32m      "[Preprocessing NW_018395389.1] Last: 0:00:00.010448 \tTotal: 0:01:17.507076\n",[m
[32m+[m[32m      "[Preprocessing NC_002333.2] Last: 0:00:00.004752 \tTotal: 0:01:17.511851\n",[m
[32m+[m[32m      "[Genome preprocessing] Last: 0:00:01.971386 \tTotal: 0:01:19.483273\n",[m
[32m+[m[32m      "[2024-03-04 10:12:46] Starting commands:\n",[m
[32m+[m[32m      "[2024-03-04 10:12:46] Launched: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_C2T.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_C2T\n",[m
[32m+[m[32m      "[2024-03-04 10:12:46] Launched: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_G2A.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_G2A\n",[m
[32m+[m[32m      "[2024-03-04 10:12:46] Launched: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_C2T.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_C2T\n",[m
[32m+[m[32m      "[2024-03-04 10:12:46] Launched: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_G2A.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_G2A\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Building a SMALL indexBuilding a SMALL index\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "[2024-03-04 11:41:52] Finished: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_C2T.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_C2T\n",[m
[32m+[m[32m      "[2024-03-04 11:41:52] Finished: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_G2A.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/W_G2A\n",[m
[32m+[m[32m      "[2024-03-04 11:41:52] Finished: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_C2T.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_C2T\n",[m
[32m+[m[32m      "[2024-03-04 11:41:52] Finished: /workspace/appscratch/miniconda/cfngle_env-01/bin/bowtie2-build -f /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_G2A.fa /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index/GCF_000002035.6_GRCz11_genomic.fasta_bowtie2/C_G2A\n",[m
[32m+[m[32m      "[Done] Last: 1:29:07.223433 \tTotal: 1:30:26.706754\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# indexing reference genome for BSseeker\n",[m
[32m+[m[32m    "bs_seeker2-build.py -f /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta --aligner bowtie2 -d /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 73,[m
[32m+[m[32m   "id": "87ceea7a-e8fb-426e-a592-7ece16951025",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda deactivate"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 78,[m
[32m+[m[32m   "id": "4f1fa5aa-6d0f-40c9-869e-60edf5e0884d",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) (/workspace/appscratch/miniconda/cfngle_env-01) SBATCH_ARGS: --time 4-24:00:00 --mem 80G -c 8\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/004.alignments_BS/bis-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4484680\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_BS\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load conda\n",[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "conda activate cfngle_env-01\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments_BS_tm\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${IN}/${NAME}\n",[m
[32m+[m[32m    "        COMMAND=\"bs_seeker2-align.py \\\n",[m
[32m+[m[32m    "            -i ${IN}/$NAME \\\n",[m
[32m+[m[32m    "            -r \\\n",[m
[32m+[m[32m    "            --aligner bowtie2 \\\n",[m
[32m+[m[32m    "            -o ${OUT}/${PREFIX}.bam \\\n",[m
[32m+[m[32m    "            -g ${GENOME}/GCF_000002035.6_GRCz11_genomic.fasta \\\n",[m
[32m+[m[32m    "            -d ${GENOME}/BSseeker2-index \\\n",[m
[32m+[m[32m    "            --temp_dir=${OUT}/TMP/ \\\n",[m
[32m+[m[32m    "            --bt2-p 4\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/BS-align --time 23:59:00 --mem 25G -c 1| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 80,[m
[32m+[m[32m   "id": "171e748c-3be6-4798-acae-d5491cf4756c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "conda deactivate\n",[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 77,[m
[32m+[m[32m   "id": "8224139f-0a0d-4c19-9ff9-e13de20e29e1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709585374.6389313-814009;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/004.alignments_BS_tm\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m1163/1163\u001b[0m  gn.sh\u001b[0m\n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           multiqc\u001b[0m | \u001b[33mNo analysis results found. Cleaning up..\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 004.alignments_BS_tm -i QC.alignments -o 005.qc.alignments_BS_tm"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "8ba5efaf-9458-4ca2-a44e-26a47128e3b0",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.1a.1 BSseeker methyl extraction"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "d214d3d5-3eb9-42cd-8c1d-4da3aaf75576",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 5.2 Preparation of the genome BISMARK"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "id": "3783cab4-c6a2-4e83-87db-688ef8700f76",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/rgenome/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 29,[m
[32m+[m[32m   "id": "9865ab66-9e85-47fd-94a4-7ee2506b8ece",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "grep -e \">\" GCF_000002035.6_GRCz11_genomic.fna | awk 'sub(/^>/, \"\")' | sort -k1 > ZF_chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 30,[m
[32m+[m[32m   "id": "a0b8ad1c-f98b-4fe9-8439-90bf173e605c",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "NC_004387.1 Oryzias latipes mitochondrion, complete genome\n",[m
[32m+[m[32m      "NC_019859.2 Oryzias latipes chromosome 1, ASM223467v1\n",[m
[32m+[m[32m      "NC_019860.2 Oryzias latipes chromosome 2, ASM223467v1\n",[m
[32m+[m[32m      "NC_019861.2 Oryzias latipes chromosome 3, ASM223467v1\n",[m
[32m+[m[32m      "NC_019862.2 Oryzias latipes chromosome 4, ASM223467v1\n",[m
[32m+[m[32m      "NC_019863.2 Oryzias latipes chromosome 5, ASM223467v1\n",[m
[32m+[m[32m      "NC_019864.2 Oryzias latipes chromosome 6, ASM223467v1\n",[m
[32m+[m[32m      "NC_019865.2 Oryzias latipes chromosome 7, ASM223467v1\n",[m
[32m+[m[32m      "NC_019866.2 Oryzias latipes chromosome 8, ASM223467v1\n",[m
[32m+[m[32m      "NC_019867.2 Oryzias latipes chromosome 9, ASM223467v1\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "head ZF_chromosomes.txt"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 31,[m
[32m+[m[32m   "id": "d8a4f420-e299-4553-bfeb-e4fc22caff6b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load bismark/0.23.0"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 35,[m
[32m+[m[32m   "id": "602a0242-59d8-4f3c-9922-cf6ba82d0638",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Writing bisulfite genomes out into a single MFA (multi FastA) file\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bisulfite Genome Indexer version v0.23.0 (last modified: 14 April 2019)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step I - Prepare genome folders - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Calculating genomic frequencies (this may take several minutes depending on genome size) ...\n",[m
[32m+[m[32m      "====================================================================================================================================================================\n",[m
[32m+[m[32m      "Now reading in and storing sequence information of the genome specified in: /workspace/cfngle/raw-data/JM/rgenome/\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "chr NC_019859.2 (37713152 bp)\n",[m
[32m+[m[32m      "chr NC_019860.2 (25379070 bp)\n",[m
[32m+[m[32m      "chr NC_019861.2 (38248663 bp)\n",[m
[32m+[m[32m      "chr NC_019862.2 (32868862 bp)\n",[m
[32m+[m[32m      "chr NC_019863.2 (33205099 bp)\n",[m
[32m+[m[32m      "chr NC_019864.2 (32246747 bp)\n",[m
[32m+[m[32m      "chr NC_019865.2 (34573382 bp)\n",[m
[32m+[m[32m      "chr NC_019866.2 (26239357 bp)\n",[m
[32m+[m[32m      "chr NC_019867.2 (33399407 bp)\n",[m
[32m+[m[32m      "chr NC_019868.2 (31218526 bp)\n",[m
[32m+[m[32m      "chr NC_019869.2 (28210532 bp)\n",[m
[32m+[m[32m      "chr NC_019870.2 (30543476 bp)\n",[m
[32m+[m[32m      "chr NC_019871.2 (33825776 bp)\n",[m
[32m+[m[32m      "chr NC_019872.2 (30598983 bp)\n",[m
[32m+[m[32m      "chr NC_019873.2 (30476034 bp)\n",[m
[32m+[m[32m      "chr NC_019874.2 (32958677 bp)\n",[m
[32m+[m[32m      "chr NC_019875.2 (31792230 bp)\n",[m
[32m+[m[32m      "chr NC_019876.2 (30918796 bp)\n",[m
[32m+[m[32m      "chr NC_019877.2 (25472880 bp)\n",[m
[32m+[m[32m      "chr NC_019878.2 (25942153 bp)\n",[m
[32m+[m[32m      "chr NC_019879.2 (31148813 bp)\n",[m
[32m+[m[32m      "chr NC_019880.2 (28976614 bp)\n",[m
[32m+[m[32m      "chr NC_019881.2 (24400806 bp)\n",[m
[32m+[m[32m      "chr NC_019882.2 (23682337 bp)\n",[m
[32m+[m[32m      "chr NC_004387.1 (16714 bp)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019869.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019864.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019861.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019866.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019879.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019874.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_004387.1 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019871.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019881.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019876.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019877.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019873.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019865.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019882.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019880.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019870.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019859.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019878.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019872.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019867.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019863.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019875.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019860.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019868.2 <<\n",[m
[32m+[m[32m      "Processing chromosome >> NC_019862.2 <<\n",[m
[32m+[m[32m      "Writing genomic nucleotide frequencies to the file >/workspace/cfngle/raw-data/JM/rgenome/genomic_nucleotide_frequencies.txt< for future re-use\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: A\t216957530\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AA\t76267116\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AC\t41125942\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AG\t46339810\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: AT\t53224515\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: C\t149808184\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CA\t54903461\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CC\t33648602\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CG\t14873895\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: CT\t46382122\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: G\t149806542\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GA\t43510171\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GC\t31502622\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GG\t33674420\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: GT\t41119214\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: T\t216993830\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TA\t42276625\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TC\t43530907\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TG\t54918326\n",[m
[32m+[m[32m      "Writing count of (di-)nucleotide: TT\t76267822\n",[m
[32m+[m[32m      "Finished processing genomic nucleotide frequencies\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total number of conversions performed:\n",[m
[32m+[m[32m      "C->T:\t149808184\n",[m
[32m+[m[32m      "G->A:\t149806542\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Step II - Genome bisulfite conversions - completed\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Bismark Genome Preparation - Step III: Launching the Bowtie 2 indexer\n",[m
[32m+[m[32m      "Please be aware that this process can - depending on genome size - take several hours!\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_CT.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.CT_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"BS_GA.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  genome_mfa.GA_conversion.fa\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:09\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:08\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "  Sorting block time: 00:09:56\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 366764072\n",[m
[32m+[m[32m      "fchr[G]: 516572256\n",[m
[32m+[m[32m      "fchr[T]: 516572256\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_GA.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_GA.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:10:47\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:03\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:00\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:08\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 216957530\n",[m
[32m+[m[32m      "fchr[G]: 216957530\n",[m
[32m+[m[32m      "fchr[T]: 366764072\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_CT.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_CT.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:12:34\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:03\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:03\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:01\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 183391521\n",[m
[32m+[m[32m      "Using parameters --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 137543641 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:20\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:05\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:09\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.33566e+08 (target: 137543640)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 733566086 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:08:18\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 366764072\n",[m
[32m+[m[32m      "fchr[G]: 516572256\n",[m
[32m+[m[32m      "fchr[T]: 516572256\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_GA.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_GA.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:10:54\n",[m
[32m+[m[32m      "  Sorting block time: 00:10:15\n",[m
[32m+[m[32m      "Returning block of 733566087 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 216957530\n",[m
[32m+[m[32m      "fchr[G]: 216957530\n",[m
[32m+[m[32m      "fchr[T]: 366764072\n",[m
[32m+[m[32m      "fchr[$]: 733566086\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 248723414 bytes to primary EBWT file: BS_CT.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 183391528 bytes to secondary EBWT file: BS_CT.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 733566086\n",[m
[32m+[m[32m      "    bwtLen: 733566087\n",[m
[32m+[m[32m      "    sz: 183391522\n",[m
[32m+[m[32m      "    bwtSz: 183391522\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 45847881\n",[m
[32m+[m[32m      "    offsSz: 183391524\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3820657\n",[m
[32m+[m[32m      "    numLines: 3820657\n",[m
[32m+[m[32m      "    ebwtTotLen: 244522048\n",[m
[32m+[m[32m      "    ebwtTotSz: 244522048\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:12:48\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "bismark_genome_preparation --genomic_composition /workspace/cfngle/raw-data/ZF/rgenome/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1c9fecb5-d184-4c1d-a649-f10c6badd0e1",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.2.1a Alignments to genome (trim_galore)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "id": "0f373877-37ea-4284-8322-93f1233f1e50",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_001_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_002_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_003_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_004_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_005_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_006_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_007_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_008_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_009_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_010_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_011_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_012_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_013_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_014_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_015_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_016_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_017_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_018_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_019_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_020_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_021_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_022_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_023_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_024_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_025_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_026_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_027_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_028_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_029_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_030_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_031_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_032_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_033_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_034_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_035_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_036_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_037_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_038_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_039_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_040_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_041_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_042_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_043_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_044_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_045_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_046_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_047_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_048_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_049_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_050_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_051_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_052_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_053_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_054_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_055_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_056_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_057_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_058_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_059_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_060_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_061_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_062_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_063_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_064_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_065_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_066_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_067_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_068_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_069_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_070_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_071_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_072_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_073_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_074_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_075_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_076_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_077_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_078_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_079_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_080_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_081_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_082_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_083_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_084_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_085_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_086_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_087_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_088_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_089_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_090_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_091_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_092_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_093_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_094_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_095_trimmed.fq\n",[m
[32m+[m[32m      "/workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_096_trimmed.fq\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done #| abatch -j ${OUT}/bis-align --time 4-24:00:00 --mem 80G -c 5| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 61,[m
[32m+[m[32m   "id": "0fb9392b-2499-467a-8e01-919a6b277fd5",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) \n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709514265.9917593-353529;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/004.alignments\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m394/394\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 96 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mPrevious MultiQC output found! Adjusting filenames..\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mUse -f or --force to overwrite existing reports instead\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.qc.alignments/QC.alignments_multiqc_report_1.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.qc.alignments/QC.alignments_multiqc_report_data_1\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n",[m
[32m+[m[32m      "(/workspace/appscratch/miniconda/cfngle_env-01) "[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "1",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "multiqc 004.alignments -i QC.alignments -o 005.qc.alignments"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "d48e6d85-37bc-4f2d-9442-c9ccd4245a32",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.2.1b Alignments to genome (trimmomatic)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 49,[m
[32m+[m[32m   "id": "e9ec00ba-b4b8-4608-bbc4-89eb531e6993",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 4-24:00:00 --mem 80G -c 5\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/004.alignments_tm/bis-align\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4470508\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trimmomatic\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_tm\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fastq`\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "        echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align --time 4-24:00:00 --mem 80G -c 5| sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 50,[m
[32m+[m[32m   "id": "a9e7ee5e-420f-4866-b7e5-cac41b01845c",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1709498458.1787348-491733;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/004.alignments_tm\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m577/577\u001b[0m  0mnments_tm/bis-align/bis-align.sh\u001b[0m\n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 96 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.qc_alignments_tm/QC.alignments_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.qc_alignments_tm/QC.alignments_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "multiqc 004.alignments_tm -i QC.alignments -o 005.qc_alignments_tm"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "65d223b1-b295-4079-9d60-f94954bada33",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### 5.2.3a Alignments to genome (trim_galore) bowtie2 LOCAL"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 113,[m
[32m+[m[32m   "id": "1d3f20bc-ee15-4b87-8d96-4c34d2bb8bd4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "bash: /workspace/cfngle/raw-data/ZF/002.trim_galore/ZF_094_trimmed.fq: Permission denied\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in ${FILES}\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional \\\n",[m
[32m+[m[32m    "                --local\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align-local-ZF --time 2-23:59:00 --mem 50G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "id": "37a2fd03-35bb-4977-86ef-4ef4ff6f8d5e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "aca35cfc-3b8a-4a37-98be-72039db781ff",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1710449226.4759724-715201;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: QC.alignments\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/004.alignments_BM_local\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m396/396\u001b[0m  0m[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 96 alignment reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mPrevious MultiQC output found! Adjusting filenames..\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mUse -f or --force to overwrite existing reports instead\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 005.qc_alignments_BM_local/QC.alignments_multiqc_report_1.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 005.qc_alignments_BM_local/QC.alignments_multiqc_report_data_1\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "multiqc 004.alignments_BM_local -i QC.alignments -o 005.qc_alignments_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 117,[m
[32m+[m[32m   "id": "847d2db5-4252-4cdf-8e87-506b89f3eb36",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true,[m
[32m+[m[32m     "source_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 2-23:59:00 --mem 50G -c 1\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/004.alignments_BM_local/bis-align-local-ZF\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 2\n",[m
[32m+[m[32m      "Submitted batch job 4694940\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/002.trim_galore\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "LOG=\"${OUT}/logs\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mkdir -p $LOG\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark/0.23.0\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Use echo statements to be sure that the results from awk are what you really want...\n",[m
[32m+[m[32m    "# FILES=`ls ${IN}/*.fq | awk -F'[_ ]' '{print $1\"_\"$2\"_\"$3\"_\"$4\"_\"$5}' | sort -u`\n",[m
[32m+[m[32m    "#FILES=`ls ${IN}/*.fq`\n",[m
[32m+[m[32m    "FILES=(${IN}/*.fq)\n",[m
[32m+[m[32m    "FILES=(\"${FILES[93]}\" \"${FILES[94]}\")\n",[m
[32m+[m[32m    "#echo $FILES\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in \"${FILES[@]}\"\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "        NAME=`basename ${file}`\n",[m
[32m+[m[32m    "        PREFIX=`echo ${NAME} | awk -F[_] '{print $1\"_\"$2\"_Alignments\"}'`\n",[m
[32m+[m[32m    "        #echo ${PREFIX}\n",[m
[32m+[m[32m    "        #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark \\\n",[m
[32m+[m[32m    "                --genome ${GENOME} \\\n",[m
[32m+[m[32m    "                $file \\\n",[m
[32m+[m[32m    "                --o ${OUT}/${PREFIX} \\\n",[m
[32m+[m[32m    "                --multicore 5 \\\n",[m
[32m+[m[32m    "                --non_directional \\\n",[m
[32m+[m[32m    "                --local\"\n",[m
[32m+[m[32m    "       # echo \"${OUT}${PREFIX}\"\n",[m
[32m+[m[32m    "       echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/bis-align-local-ZF --time 2-23:59:00 --mem 50G -c 1 | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "1be44dfc-32ae-4e64-9145-0844b8093894",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## 7. Methylation extraction"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "c256ca67-b590-445e-b71f-fc7eb8f29277",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 7.1 Methylation extraction bismark trim_galore"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "id": "765ab234-84b0-440b-b723-566a2b9a0836",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 5-01:00:00 --mem 50G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/007.meth_extraction/meth-extract\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 97\n",[m
[32m+[m[32m      "Submitted batch job 4468790\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "FILES=`find ${IN}/ -type f -name \"*.bam\"`\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "    #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark_methylation_extractor \\\n",[m
[32m+[m[32m    "                ${file} \\\n",[m
[32m+[m[32m    "                -s \\\n",[m
[32m+[m[32m    "                --merge_non_CpG \\\n",[m
[32m+[m[32m    "                --cytosine_report \\\n",[m
[32m+[m[32m    "                --scaffolds \\\n",[m
[32m+[m[32m    "                --genome_folder ${GENOME} \\\n",[m
[32m+[m[32m    "                -o ${OUT}\"\n",[m
[32m+[m[32m    "      echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/meth-extract --time 5-01:00:00 --mem 5G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 27,[m
[32m+[m[32m   "id": "75ad993d-03d5-4da9-b30a-343fa009c525",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "mkdir -p 007b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 28,[m
[32m+[m[32m   "id": "370cce18-c6db-4209-b0a3-1b52f8d2a79c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cp 007.meth_extraction/*CpG_report.txt 007b.extraction_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "a6faa41b-2d40-4b6f-bd31-27f8fe353734",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/007.meth_extraction\n",[m
[32m+[m[32m    "for i in *CpG_report.txt; do awk '{if ($4 > 0) print}' $i > /workspace/cfngle/raw-data/ZF/007b.extraction_nonzero/$i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "8722c4b1-57b1-4c07-b9cb-1f0752ead141",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### Extracting all methylation sites"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 90,[m
[32m+[m[32m   "id": "934a5a83-a227-4fc9-a6eb-d392d780dc21",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "awk: fatal: cannot open file `ZF_013_trimmed_bismark_bt2.CpG_report.txt.nonzero-checkpoint.txt' for reading (No such file or directory)\n",[m
[32m+[m[32m      "awk: fatal: cannot open file `ZF_001_trimmed_bismark_bt2.CpG_report.txt.nonzero-checkpoint.txt' for reading (No such file or directory)\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "123",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/007b.extraction_nonzero\n",[m
[32m+[m[32m    "find . -name \"*.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "7b8a5dd6-ccef-4ef4-887a-9a89af50a758",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "### 7.2 Methylation extraction bismark trim_galore LOCAL"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "4777da78-cbb4-4066-b062-136e3bf0647e",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "SBATCH_ARGS: --time 23:59:00 --mem 10G\n",[m
[32m+[m[32m      "JOB_ARRAY_NAME: /workspace/cfngle/raw-data/ZF/007.meth_extraction_BM_local/meth-extract\n",[m
[32m+[m[32m      "GROUP_SIZE: 1\n",[m
[32m+[m[32m      "NUM_COMMANDS: 96\n",[m
[32m+[m[32m      "Submitted batch job 4710915\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#!/bin/bash\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "PROJECT=\"/workspace/cfngle/raw-data/ZF\"\n",[m
[32m+[m[32m    "IN=\"${PROJECT}/004.alignments_BM_local\"\n",[m
[32m+[m[32m    "OUT=\"${PROJECT}/007.meth_extraction_BM_local\"\n",[m
[32m+[m[32m    "GENOME=\"/workspace/cfngle/raw-data/ZF/rgenome\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "module load bismark\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "FILES=`find ${IN}/ -type f -name \"*.bam\"`\n",[m
[32m+[m[32m    "#echo ${FILES}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for file in $FILES\n",[m
[32m+[m[32m    "    do\n",[m
[32m+[m[32m    "    #echo ${file}\n",[m
[32m+[m[32m    "        COMMAND=\"bismark_methylation_extractor \\\n",[m
[32m+[m[32m    "                ${file} \\\n",[m
[32m+[m[32m    "                -s \\\n",[m
[32m+[m[32m    "                --merge_non_CpG \\\n",[m
[32m+[m[32m    "                --cytosine_report \\\n",[m
[32m+[m[32m    "                --scaffolds \\\n",[m
[32m+[m[32m    "                --genome_folder ${GENOME} \\\n",[m
[32m+[m[32m    "                -o ${OUT}\"\n",[m
[32m+[m[32m    "      echo $COMMAND\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "done | abatch -j ${OUT}/meth-extract --time 23:59:00 --mem 10G | sbatch"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "id": "58c24cf8-f3bc-4a40-ad94-a5d83fd48b55",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "mkdir -p 007b.meth_extraction_BM_local_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "7fd58b36-50f3-4e02-9794-8073db48e5d9",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cp /workspace/cfngle/scripts/extraction_conversion.sh 007b.meth_extraction_BM_local_nonzero"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "id": "d677f2a1-dc10-4568-8f16-e6642e7f9d95",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# cp 007.meth_extraction_BM_local/*CpG_report.txt 007b.meth_extraction_BM_local_nonzeros"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "id": "31b990d7-77d2-44b1-b69e-5bfbdcc330cc",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/007.meth_extraction_BM_local\n",[m
[32m+[m[32m    "for i in *CpG_report.txt; do awk '{if ($4 > 0) print}' $i > /workspace/cfngle/raw-data/ZF/007b.meth_extraction_BM_local_nonzero/$i.nonzero.txt; done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "fc896a91-49c1-445f-bb1b-fc0625c57ee6",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### Extracting all methylation sites"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 20,[m
[32m+[m[32m   "id": "6c32958b-2a34-4ea5-bc75-1951b63aca6a",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/007b.meth_extraction_BM_local_nonzero\n",[m
[32m+[m[32m    "find . -name \"*.txt\" | xargs -n 1 bash extraction_conversion.sh"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 24,[m
[32m+[m[32m   "id": "4680ec9f-5661-4290-bf1b-a97bb178c61c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF/007b.meth_extraction_BM_local_nonzero\n",[m
[32m+[m[32m    "mv *MK.txt /workspace/cfngle/raw-data/ZF/008.methylkit_BM_local"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 25,[m
[32m+[m[32m   "id": "f7068525-3f61-4fb0-8a1f-2a21c1698bc3",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  \u001b[34m/\u001b[0m\u001b[32m/\u001b[0m\u001b[31m/\u001b[0m \u001b]8;id=1710733389.0048578-389840;https://multiqc.info\u001b\\\u001b[1mMultiQC\u001b[0m\u001b]8;;\u001b\\ 🔍 \u001b[2m| v1.11\u001b[0m\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | \u001b[33mMultiQC Version v1.21 now available!\u001b[0m\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report title: MethylationExtraction_QC\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Search path : /workspace/cfngle/raw-data/ZF/007.meth_extraction_BM_local\n",[m
[32m+[m[32m      "\u001b[2K\u001b[34m|\u001b[0m         \u001b[34msearching\u001b[0m | \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[35m100%\u001b[0m \u001b[32m1633/1633\u001b[0m  \u001b[0m  \n",[m
[32m+[m[32m      "\u001b[?25h\u001b[34m|           bismark\u001b[0m | Found 96 methextract reports\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Compressing plot data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Report      : 007.meth_extraction_BM_local/MethylationExtraction_QC_multiqc_report.html\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | Data        : 007.meth_extraction_BM_local/MethylationExtraction_QC_multiqc_report_data\n",[m
[32m+[m[32m      "\u001b[34m|           multiqc\u001b[0m | MultiQC complete\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd /workspace/cfngle/raw-data/ZF\n",[m
[32m+[m[32m    "multiqc 007.meth_extraction_BM_local/ -i MethylationExtraction_QC -o 007.meth_extraction_BM_local/"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "72f534c2-84cc-4eb1-be55-146ea0301d17",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/00a_ZF_BSseeker2.sl b/00a_ZF_BSseeker2.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..a1978f0[m
[1m--- /dev/null[m
[1m+++ b/00a_ZF_BSseeker2.sl[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m
[32m+[m[32m#SBATCH --job-name=indexBS[m
[32m+[m[32m#SBATCH --time=24:00:00[m
[32m+[m[32m#SBATCH --mem=20G[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/raw-data/JM/rgenome/output.log[m
[32m+[m
[32m+[m[32mPROJECT="/workspace/cfngle/raw-data/ZF"[m
[32m+[m[32mGENOME="/workspace/cfngle/raw-data/ZF/rgenome"[m
[32m+[m[32mOUT=$GENOME[m
[32m+[m
[32m+[m[32mmodule load conda[m
[32m+[m[32mconda deactivate[m
[32m+[m[32mconda activate cfngle_env-01[m
[32m+[m
[32m+[m[32mbs_seeker2-build.py \[m
[32m+[m[32m    -f ${GENOME}/GCF_000002035.6_GRCz11_genomic.fasta \[m
[32m+[m[32m    --aligner bowtie2 \[m
[32m+[m[32m    -r \[m
[32m+[m[32m    -d /workspace/cfngle/raw-data/ZF/rgenome/BSseeker2-index[m
\ No newline at end of file[m
[1mdiff --git a/00c_renaming_and_metadata.R b/00c_renaming_and_metadata.R[m
[1mnew file mode 100644[m
[1mindex 0000000..15a355c[m
[1m--- /dev/null[m
[1m+++ b/00c_renaming_and_metadata.R[m
[36m@@ -0,0 +1,82 @@[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32m# library()[m
[32m+[m
[32m+[m[32msetwd("/workspace/cfngle/raw-data/JM")[m
[32m+[m[32mJM_name_list <- read.csv("raw-reads/00_metadata/name_list_PRJNA716946.txt", sep = "\t")[m
[32m+[m[32mJM_downloaded_order <- c("SAMN21040240", "SAMN21040241", "SAMN21040242", "SAMN21040243", "SAMN21040244", "SAMN21040245", "SAMN21040246",[m[41m [m
[32m+[m[32m                         "SAMN21040247", "SAMN21040248", "SAMN21040249", "SAMN21040250", "SAMN21040251", "SAMN21040252", "SAMN21040253", "SAMN21040254",[m[41m [m
[32m+[m[32m                         "SAMN21040255", "SAMN21040256", "SAMN21040257", "SAMN21040258", "SAMN21040259", "SAMN21040260", "SAMN21040261", "SAMN21040262", "SAMN21040263",[m[41m [m
[32m+[m[32m                         "SRR18462633", "SRR18462634", "SRR18462635", "SRR18462636", "SRR18462637", "SRR18462638", "SRR18462639", "SRR18462640",[m[41m [m
[32m+[m[32m                         "SRR18462641", "SRR18462642", "SRR18462643", "SRR18462644", "SRR18462645", "SRR18462646", "SRR18462647", "SRR18462648",[m[41m [m
[32m+[m[32m                         "SRR18462649", "SRR18462650", "SRR18462651", "SRR18462652", "SRR18462653", "SRR18462654", "SRR18462655")[m
[32m+[m[32mJM_names <- sprintf("JM_%03d", 1:47)[m
[32m+[m
[32m+[m[32mJM_downloaded_order %in% JM_name_list$sample_accession[m
[32m+[m
[32m+[m[32mJM_downloaded_order_new <- c()[m
[32m+[m[32mfor(i in 1:length(JM_name_list$sample_accession)) {[m
[32m+[m[32m  if(JM_downloaded_order[i] %in% JM_name_list$sample_accession){[m
[32m+[m[32m    JM_downloaded_order_new[i] <- JM_name_list$sample_accession[JM_name_list$sample_accession == JM_downloaded_order[i]][m[41m [m
[32m+[m[32m    print(JM_downloaded_order_new[i])[m
[32m+[m[32m    }[m
[32m+[m[32m  else if(JM_downloaded_order[i] %in% JM_name_list$run_accession){[m
[32m+[m[32m    JM_downloaded_order_new[i] <- JM_name_list$sample_accession[JM_name_list$run_accession == JM_downloaded_order[i]][m[41m [m
[32m+[m[32m    print(JM_downloaded_order_new[i])[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mJM_name_list <- JM_name_list[match(JM_downloaded_order_new, JM_name_list$sample_accession),][m
[32m+[m[32mcbind(JM_names, JM_name_list)[m
[32m+[m
[32m+[m[32mJM_metadata_names <- list.files(path = "raw-reads/00_metadata/", pattern = "\\.txt$", full.names = TRUE)[m
[32m+[m[32mJM_metadata_names <- JM_metadata_names[-1][m
[32m+[m
[32m+[m[32mJM_metadata <- list()[m
[32m+[m
[32m+[m[32m# Loop through files, read each file, and combine[m
[32m+[m[32mfor(file in JM_metadata_names) {[m
[32m+[m[32m  # Read the current file[m
[32m+[m[32m  temp_data <- read.table(file, header = TRUE, sep = "\t") # Adjust parameters as needed[m
[32m+[m[41m  [m
[32m+[m[32m  # Combine with the main dataframe[m
[32m+[m[32m  JM_metadata[[file]] <- temp_data[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## extract identification variables[m
[32m+[m[32mJM_metadata_indent <- data.frame(identifiers = c(sapply(JM_metadata, function(df) df[1,1])), index = c(1:47))[m[41m [m
[32m+[m[32mJM_metadata_indent[,1] <- gsub("/.$.txt", "", JM_metadata_indent[,1])[m
[32m+[m
[32m+[m[32m## Age[m
[32m+[m[32mJM_metadata_age <- data.frame(identifiers = c(sapply(JM_metadata, function(df) df[5,1])), index = c(1:47))[m[41m [m
[32m+[m[32mJM_metadata_age[,1] <- gsub("/.$.txt", "", JM_metadata_age[,1])[m
[32m+[m
[32m+[m[32m## sex[m
[32m+[m[32mJM_metadata_sex <- data.frame(identifiers = c(sapply(JM_metadata, function(df) df[6,1])), index = c(1:47))[m[41m [m
[32m+[m[32mJM_metadata_sex[,1] <- gsub("/.$.txt", "", JM_metadata_sex[,1])[m
[32m+[m
[32m+[m[32mtemp_cat <- strsplit(JM_metadata_indent[,1], ";")[m
[32m+[m[32mtemp_cat <- sapply(temp_cat, function(x) x[1])[m
[32m+[m
[32m+[m[32mJM_metadata_df <- cbind(JM_name_list, as.data.frame(temp_cat))[m
[32m+[m
[32m+[m[32mnames(JM_metadata_df)[11] <- "biosample"[m
[32m+[m[32mJM_metadata_df[,11] <- gsub("Identifiers: BioSample: ", "", JM_metadata_df[,11])[m
[32m+[m
[32m+[m
[32m+[m[32mJM_metadata_df <- cbind(JM_metadata_df, as.data.frame(JM_metadata_age$identifiers), as.data.frame(JM_metadata_sex$identifiers))[m
[32m+[m[32mJM_metadata_df[,12] <- gsub("    /age=", "", JM_metadata_df[,12]) %>%[m[41m [m
[32m+[m[32m  gsub(" days post hatch", "", .)[m
[32m+[m
[32m+[m[32mJM_metadata_df[,13] <- gsub("    /sex=", "", JM_metadata_df[,13])[m
[32m+[m
[32m+[m[32mnames(JM_metadata_df)[12:13] <- c("age", "sex")[m
[32m+[m
[32m+[m[32mJM_metadata_df_final <- JM_metadata_df %>%[m[41m [m
[32m+[m[32m  dplyr::select(-matches("ftp"))[m
[32m+[m
[32m+[m[32mJM_metadata_df_final$age <- as.numeric(JM_metadata_df_final$age)[m
[32m+[m[32mJM_metadata_all <- cbind(JM_names, JM_metadata_df_final)[m
[32m+[m
[32m+[m[32mhist(JM_metadata_df_final$age)[m
[32m+[m
[32m+[m[32mwrite.csv(JM_metadata_all, file = "raw-reads/00_metadata/00_JM_metadata.csv")[m
[1mdiff --git a/01_AC_AS_EH_JM_ZF_extraction_v-1.6.R b/01_AC_AS_EH_JM_ZF_extraction_v-1.6.R[m
[1mnew file mode 100644[m
[1mindex 0000000..6da84a5[m
[1m--- /dev/null[m
[1m+++ b/01_AC_AS_EH_JM_ZF_extraction_v-1.6.R[m
[36m@@ -0,0 +1,402 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of sequences of methylation data for the AC, EH and AS[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32mbp_ext <- 1000 # this will be the length of the extracted sequences around the CpG[m[41m [m
[32m+[m[32msave_folder <- "/powerplant/workspace/cfngle/results-data/sequences/" # folder where extracted sequences will be saved[m
[32m+[m[32mfile_ext <- ".fasta" # which file extension will be used for the sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32m## function to fix overextending sequenced (see appendix)[m
[32m+[m[32m# in some cases extending the sequence width may lead to some sequences being positioned in nonexistent areas (negative, or number is greater than scaffold/chromosome).[m
[32m+[m[32m# This happens when they are close to the start/end and then being extended[m[41m [m
[32m+[m
[32m+[m[32m# function to fix this problem (see explanation at appendix)[m
[32m+[m[32mfix.seq <- function(seq, rgenome, seq_width) {[m
[32m+[m[32m  seq[seq@ranges@start <= 0] <- shift(seq[seq@ranges@start <= 0], -1*c(seq@ranges@start[seq@ranges@start <= 0])+1)[m
[32m+[m[32m  matching_rgenome <- rgenome[unique(rgenome@ranges@NAMES) %in% unique(seq@seqnames@values)][m
[32m+[m[32m  rg_max_length <- width(matching_rgenome[as.character(seqnames(seq))])[m
[32m+[m[32m  end(seq) <- pmin(end(seq), rg_max_length)[m
[32m+[m[32m  # start(seq[width(seq) < seq_width]) <- start(seq[width(seq) < seq_width]) - c(seq_width-width(seq[width(seq) < seq_width]))[m
[32m+[m[32m  return(seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## function to add the methylation coordinates to the name of the sequence file. "seqs" are the extracted sequences, "seqs_GR" are the ranges saved as a GRanges object, "methylsites" the GRanges object of the methylation coordinates (start=end; meaning one bp)and "name" is a string which is added between the existing name of seqs and the methylation coordinates[m
[32m+[m
[32m+[m[32m## NOT IN USE because the names get too long to convert aligned data (.sam) into .bam files. Other method (see below) is used instead[m
[32m+[m[32madd.Methylnames <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = "_"))[m
[32m+[m[32m  names(seqs) <- paste0(seq_names, "_", name, "_", concat_methyl_sites)[m
[32m+[m[32m  return(seqs)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## this creates a dataframe which stores the positions of the CpGs sites, the names of the seqs and the number of methylation sites per sequence[m
[32m+[m[32mcreate.MethylPos <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = ","))[m
[32m+[m[32m  df <- data.frame([m
[32m+[m[32m    seq = seq_names,[m
[32m+[m[32m    methyl_pos = concat_methyl_sites,[m
[32m+[m[32m    methyl_n = as.vector(table(queryHits(overlaps)))[m
[32m+[m[32m  )[m
[32m+[m[32m  return(df)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Loading data ####[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AS/BisRAD-CpGs-Snapper.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAS_rgenome <- readDNAStringSet("raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta")[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mAS_rgenome_nvec <- names(AS_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" size.*$", "", .)[m
[32m+[m[32mnames(AS_rgenome) <- AS_rgenome_nvec[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# JM_raw <- read.table("raw-data/JM/zzz-methyldata/01_JM_methylpos_66079_CpGs.csv", sep = ",", header = TRUE) #slower method. Loading Rdata files is faster[m
[32m+[m[32mJM_raw <- load("raw-data/JM/zzz-methyldata/00_JM_methylpos_179818_CpGs.Rdata")[m
[32m+[m[32mJM_raw <- JM_24_methyl_pos[m
[32m+[m[32mJM_rgenome <- readDNAStringSet("raw-data/JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fasta")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mJM_rgenome_nvec <- names(JM_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" Ory.*$", "", .)[m
[32m+[m[32mnames(JM_rgenome) <- JM_rgenome_nvec[m
[32m+[m
[32m+[m[32m## ZF[m
[32m+[m[32m# ZF_raw <- read.table("raw-data/ZF/zzz-methyldata/01_ZF_methylpos_66079_CpGs.csv", sep = ",", header = TRUE) #slower method. Loading Rdata files is faster[m
[32m+[m[32mZF_raw <- load("raw-data/ZF/zzz_methyldata/ZF_methylpos.RData")[m
[32m+[m[32mZF_raw <- ZF_methyl_pos[m
[32m+[m[32mZF_rgenome <- readDNAStringSet("raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mZF_rgenome_nvec <- names(ZF_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" Danio.*$", "", .)[m
[32m+[m[32mnames(ZF_rgenome) <- ZF_rgenome_nvec[m
[32m+[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = seqnames(EH_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(EH_methyl) - bp_ext/2, end = end(EH_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(EH_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mEH <- fix.seq(EH,EH_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AC_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AC_methyl) - bp_ext/2, end = end(AC_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AC_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mAC <- fix.seq(AC,AC_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AS_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AS_raw$start), end = c(AS_raw$end), names = 1:length(AS_raw$chr)),[m
[32m+[m[32m  strand = Rle(AS_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mAS <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AS_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AS_methyl) - bp_ext/2, end = end(AS_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AS_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mAS <- fix.seq(AS,AS_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAS <- reduce(AS)[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mJM_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(JM_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = JM_raw$chr_pos), end = c(JM_raw$chr_pos), names = 1:length(JM_raw$chr)),[m
[32m+[m[32m  strand = Rle(JM_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mJM <- GRanges([m
[32m+[m[32m  seqnames = seqnames(JM_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(JM_methyl) - bp_ext/2, end = end(JM_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(JM_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mJM <- fix.seq(JM,JM_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mJM <- GenomicRanges::reduce(JM)[m
[32m+[m
[32m+[m[32m## ZF[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mZF_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(ZF_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = ZF_raw$chr_pos), end = c(ZF_raw$chr_pos), names = 1:length(ZF_raw$chr)),[m
[32m+[m[32m  strand = Rle(ZF_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mZF <- GRanges([m
[32m+[m[32m  seqnames = seqnames(ZF_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(ZF_methyl) - bp_ext/2, end = end(ZF_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(ZF_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mZF <- fix.seq(ZF,ZF_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mZF <- GenomicRanges::reduce(ZF)[m
[32m+[m
[32m+[m[32m#### Check ####[m
[32m+[m[32m# this just makes sure all the sequenced locations are also represented in the rgenome[m
[32m+[m[32munique(AS_raw$chr) %in% names(AS_rgenome)[m
[32m+[m[32munique(AC_raw$chr) %in% names(AC_rgenome)[m
[32m+[m[32munique(EH_raw$chr) %in% names(EH_rgenome)[m
[32m+[m[32munique(JM_raw$chr) %in% names(JM_rgenome)[m
[32m+[m[32munique(ZF_raw$chr) %in% names(ZF_rgenome)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m### EH[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mEH_filename <- paste0(save_folder, "EH_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = EH_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mEH_metadata <- create.MethylPos(EH_seq, EH, EH_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mEH_metadata_filename <- paste0(save_folder, "EH_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(EH_metadata, EH_metadata_filename)[m
[32m+[m
[32m+[m[32m### AC[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAC_filename <- paste0(save_folder, "AC_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AC_seq, file = AC_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAC_metadata <- create.MethylPos(AC_seq, AC, AC_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mAC_metadata_filename <- paste0(save_folder, "AC_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AC_metadata, AC_metadata_filename)[m
[32m+[m
[32m+[m[32m### AS[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAS_seq <- getSeq(AS_rgenome, AS)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AS_seq) <- paste0("AS_", as.character(seqnames(AS)), "_", start(AS),":", end(AS))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAS_filename <- paste0(save_folder, "AS_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AS_seq, file = AS_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAS_metadata <- create.MethylPos(AS_seq, AS, AS_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mAS_metadata_filename <- paste0(save_folder, "AS_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AS_metadata, AS_metadata_filename)[m
[32m+[m
[32m+[m[32m### JM[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mJM_seq <- getSeq(JM_rgenome, JM)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(JM_seq) <- paste0("JM_", as.character(seqnames(JM)), "_", start(JM),":", end(JM))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mJM_filename <- paste0(save_folder, "JM_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(JM_seq, file = JM_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mJM_metadata <- create.MethylPos(JM_seq, JM, JM_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mJM_metadata_filename <- paste0(save_folder, "JM_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(JM_metadata, JM_metadata_filename)[m
[32m+[m
[32m+[m[32m### ZF[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mZF_seq <- getSeq(ZF_rgenome, ZF)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(ZF_seq) <- paste0("ZF_", as.character(seqnames(ZF)), "_", start(ZF),":", end(ZF))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mZF_filename <- paste0(save_folder, "ZF_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(ZF_seq, file = ZF_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mZF_metadata <- create.MethylPos(ZF_seq, ZF, ZF_methyl)[m
[32m+[m
[32m+[m[32m# saving df[m
[32m+[m[32mZF_metadata_filename <- paste0(save_folder, "ZF_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(ZF_metadata, ZF_metadata_filename)[m
[32m+[m
[32m+[m[32m#### Visualization and testing ####[m
[32m+[m
[32m+[m[32m# sequence width distribution[m
[32m+[m[32mdf_width <- data.frame([m
[32m+[m[32m  values = c(width(AC),width(AS),width(EH)),[m
[32m+[m[32m  species = factor(rep(c("AC", "AS", "EH"), times = c(length(width(AC)), length(width(AS)), length(width(EH))))))[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_width, aes(x = species, y = values, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Sequence lengths",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Length (bp)")[m
[32m+[m
[32m+[m[32m# distribution of CpGs[m[41m [m
[32m+[m[32m# extract methyl sites per sequence[m
[32m+[m[32mcount.Methyl <- function(seqs_GR, methylsites) {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  count_methyl <- table(queryHits(overlaps))[m
[32m+[m[32m  return(count_methyl)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdf_AC_methyl <- as.data.frame(count.Methyl(AC, AC_methyl))[m
[32m+[m[32mdf_AC_methyl$Var1 <- factor("AC")[m
[32m+[m
[32m+[m[32mdf_AS_methyl <- as.data.frame(count.Methyl(AS, AS_methyl))[m
[32m+[m[32mdf_AS_methyl$Var1 <- factor("AS")[m
[32m+[m
[32m+[m[32mdf_EH_methyl <- as.data.frame(count.Methyl(EH, EH_methyl))[m
[32m+[m[32mdf_EH_methyl$Var1 <- factor("EH")[m
[32m+[m
[32m+[m[32mdf_methyl <- rbind(df_AC_methyl, df_AS_methyl, df_EH_methyl)[m
[32m+[m[32mcolnames(df_methyl) <- c("species", "cpgs")[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_methyl, aes(x = species, y = cpgs, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  # scale_fill_distiller(palette = "Blues") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "CpGs per sequence",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Amount of CpGs")[m
[32m+[m
[32m+[m
[32m+[m[32m# sequence and CpG amount[m
[32m+[m[32mdf_seq_num <- data.frame([m
[32m+[m[32m  CpGs = c(length(AC_methyl), length(AS_methyl), length(EH_methyl)),[m
[32m+[m[32m  sequences = c(length(AC), length(AS), length(EH)),[m
[32m+[m[32m  species = factor(c("AC", "AS", "EH"))[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m# df_seq_num_long <- pivot_longer(df_seq_num, cols = c(sequences,CpGs), names_to = "variable", values_to = "value")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ggplot(df_seq_num_long, aes(x = species, fill = variable)) +[m
[32m+[m[32m#   geom_bar(position = "dodge") +[m
[32m+[m[32m#   facet_wrap( ~value)[m
[32m+[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m
[32m+[m[32m# EH_rev <- reverseComplement(EH_seq)[m
[32m+[m[32m# writeXStringSet(EH_seq, file = "/workspace/cfngle/results-data/EH_CpG_100bp_rev.fasta")[m
[32m+[m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m## function to fix out-of-boundary sequences[m
[32m+[m
[32m+[m[32m# # FIX start: this shifts the sequences which are out of range into the sequence range again so that it starts with 1[m
[32m+[m[32m# AS[AS@ranges@start <= 0] <- shift(AS[AS@ranges@start <= 0], -1*c(AS@ranges@start[AS@ranges@start <= 0])+1)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # FIX end: the same goes for the ends of the sequences. Some have reached beyond the reference genome[m
[32m+[m[32m# # filtering only the regions of the rgenome which are also in the methylation data[m
[32m+[m[32m# AS_matching <- AS_rgenome[unique(AS_rgenome@ranges@NAMES) %in% unique(AS@seqnames@values)][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # extracting the maximum possible sequence lengths for the methylation data[m
[32m+[m[32m# AS_max_length <- width(AS_matching[as.character(seqnames(AS))])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # updating the ends of AS[m
[32m+[m[32m# end(AS) <- pmin(end(AS), AS_max_length)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # adjusting length to bp_ext again[m
[32m+[m[32m# start(AS[width(AS) < bp_ext]) <- start(AS[width(AS) < bp_ext]) - c(bp_ext-width(AS[width(AS) < bp_ext]))[m
[32m+[m
[32m+[m
[32m+[m[32m#### Version log ####[m
[32m+[m[32m# 1.3 added function to fix overextended sequences[m[41m [m
[32m+[m[32m# 1.2 file names can be defined in the beginning as well as the amount of bp extension[m[41m [m
[32m+[m
[32m+[m
[1mdiff --git a/01_AC_AS_EH_JM_ZF_extraction_v-1.7.R b/01_AC_AS_EH_JM_ZF_extraction_v-1.7.R[m
[1mnew file mode 100644[m
[1mindex 0000000..ca3d11c[m
[1m--- /dev/null[m
[1m+++ b/01_AC_AS_EH_JM_ZF_extraction_v-1.7.R[m
[36m@@ -0,0 +1,402 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of sequences of methylation data for the AC, EH and AS[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32mbp_ext <- 1000 # this will be the length of the extracted sequences around the CpG[m[41m [m
[32m+[m[32msave_folder <- "/powerplant/workspace/cfngle/results-data/sequences/" # folder where extracted sequences will be saved[m
[32m+[m[32mfile_ext <- ".fasta" # which file extension will be used for the sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32m## function to fix overextending sequenced (see appendix)[m
[32m+[m[32m# in some cases extending the sequence width may lead to some sequences being positioned in nonexistent areas (negative, or number is greater than scaffold/chromosome).[m
[32m+[m[32m# This happens when they are close to the start/end and then being extended[m[41m [m
[32m+[m
[32m+[m[32m# function to fix this problem (see explanation at appendix)[m
[32m+[m[32mfix.seq <- function(seq, rgenome, seq_width) {[m
[32m+[m[32m  seq[seq@ranges@start <= 0] <- shift(seq[seq@ranges@start <= 0], -1*c(seq@ranges@start[seq@ranges@start <= 0])+1)[m
[32m+[m[32m  matching_rgenome <- rgenome[unique(rgenome@ranges@NAMES) %in% unique(seq@seqnames@values)][m
[32m+[m[32m  rg_max_length <- width(matching_rgenome[as.character(seqnames(seq))])[m
[32m+[m[32m  end(seq) <- pmin(end(seq), rg_max_length)[m
[32m+[m[32m  # start(seq[width(seq) < seq_width]) <- start(seq[width(seq) < seq_width]) - c(seq_width-width(seq[width(seq) < seq_width]))[m
[32m+[m[32m  return(seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## function to add the methylation coordinates to the name of the sequence file. "seqs" are the extracted sequences, "seqs_GR" are the ranges saved as a GRanges object, "methylsites" the GRanges object of the methylation coordinates (start=end; meaning one bp)and "name" is a string which is added between the existing name of seqs and the methylation coordinates[m
[32m+[m
[32m+[m[32m## NOT IN USE because the names get too long to convert aligned data (.sam) into .bam files. Other method (see below) is used instead[m
[32m+[m[32madd.Methylnames <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = "_"))[m
[32m+[m[32m  names(seqs) <- paste0(seq_names, "_", name, "_", concat_methyl_sites)[m
[32m+[m[32m  return(seqs)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## this creates a dataframe which stores the positions of the CpGs sites, the names of the seqs and the number of methylation sites per sequence[m
[32m+[m[32mcreate.MethylPos <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = ","))[m
[32m+[m[32m  df <- data.frame([m
[32m+[m[32m    seq = seq_names,[m
[32m+[m[32m    methyl_pos = concat_methyl_sites,[m
[32m+[m[32m    methyl_n = as.vector(table(queryHits(overlaps)))[m
[32m+[m[32m  )[m
[32m+[m[32m  return(df)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Loading data ####[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AS/BisRAD-CpGs-Snapper.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAS_rgenome <- readDNAStringSet("raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta")[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mAS_rgenome_nvec <- names(AS_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" size.*$", "", .)[m
[32m+[m[32mnames(AS_rgenome) <- AS_rgenome_nvec[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# JM_raw <- read.table("raw-data/JM/zzz-methyldata/01_JM_methylpos_66079_CpGs.csv", sep = ",", header = TRUE) #slower method. Loading Rdata files is faster[m
[32m+[m[32mJM_raw <- load("raw-data/JM/zzz-methyldata/00_JM_methylpos_243285_CpGs.Rdata")[m
[32m+[m[32mJM_raw <- JM_24_methyl_pos[m
[32m+[m[32mJM_rgenome <- readDNAStringSet("raw-data/JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fasta")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mJM_rgenome_nvec <- names(JM_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" Ory.*$", "", .)[m
[32m+[m[32mnames(JM_rgenome) <- JM_rgenome_nvec[m
[32m+[m
[32m+[m[32m## ZF[m
[32m+[m[32m# ZF_raw <- read.table("raw-data/ZF/zzz-methyldata/01_ZF_methylpos_66079_CpGs.csv", sep = ",", header = TRUE) #slower method. Loading Rdata files is faster[m
[32m+[m[32mZF_raw <- load("raw-data/ZF/zzz_methyldata/ZF_methylpos_88.RData")[m
[32m+[m[32mZF_raw <- ZF_methyl_pos[m
[32m+[m[32mZF_rgenome <- readDNAStringSet("raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fasta")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mZF_rgenome_nvec <- names(ZF_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" Danio.*$", "", .)[m
[32m+[m[32mnames(ZF_rgenome) <- ZF_rgenome_nvec[m
[32m+[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = seqnames(EH_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(EH_methyl) - bp_ext/2, end = end(EH_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(EH_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mEH <- fix.seq(EH,EH_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AC_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AC_methyl) - bp_ext/2, end = end(AC_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AC_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mAC <- fix.seq(AC,AC_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AS_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AS_raw$start), end = c(AS_raw$end), names = 1:length(AS_raw$chr)),[m
[32m+[m[32m  strand = Rle(AS_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mAS <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AS_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AS_methyl) - bp_ext/2, end = end(AS_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AS_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mAS <- fix.seq(AS,AS_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAS <- reduce(AS)[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mJM_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(JM_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = JM_raw$chr_pos), end = c(JM_raw$chr_pos), names = 1:length(JM_raw$chr)),[m
[32m+[m[32m  strand = Rle(JM_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mJM <- GRanges([m
[32m+[m[32m  seqnames = seqnames(JM_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(JM_methyl) - bp_ext/2, end = end(JM_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(JM_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mJM <- fix.seq(JM,JM_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mJM <- GenomicRanges::reduce(JM)[m
[32m+[m
[32m+[m[32m## ZF[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mZF_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(ZF_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = ZF_raw$chr_pos), end = c(ZF_raw$chr_pos), names = 1:length(ZF_raw$chr)),[m
[32m+[m[32m  strand = Rle(ZF_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mZF <- GRanges([m
[32m+[m[32m  seqnames = seqnames(ZF_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(ZF_methyl) - bp_ext/2, end = end(ZF_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(ZF_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mZF <- fix.seq(ZF,ZF_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mZF <- GenomicRanges::reduce(ZF)[m
[32m+[m
[32m+[m[32m#### Check ####[m
[32m+[m[32m# this just makes sure all the sequenced locations are also represented in the rgenome[m
[32m+[m[32munique(AS_raw$chr) %in% names(AS_rgenome)[m
[32m+[m[32munique(AC_raw$chr) %in% names(AC_rgenome)[m
[32m+[m[32munique(EH_raw$chr) %in% names(EH_rgenome)[m
[32m+[m[32munique(JM_raw$chr) %in% names(JM_rgenome)[m
[32m+[m[32munique(ZF_raw$chr) %in% names(ZF_rgenome)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m### EH[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mEH_filename <- paste0(save_folder, "EH_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = EH_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mEH_metadata <- create.MethylPos(EH_seq, EH, EH_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mEH_metadata_filename <- paste0(save_folder, "EH_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(EH_metadata, EH_metadata_filename)[m
[32m+[m
[32m+[m[32m### AC[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAC_filename <- paste0(save_folder, "AC_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AC_seq, file = AC_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAC_metadata <- create.MethylPos(AC_seq, AC, AC_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mAC_metadata_filename <- paste0(save_folder, "AC_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AC_metadata, AC_metadata_filename)[m
[32m+[m
[32m+[m[32m### AS[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAS_seq <- getSeq(AS_rgenome, AS)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AS_seq) <- paste0("AS_", as.character(seqnames(AS)), "_", start(AS),":", end(AS))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAS_filename <- paste0(save_folder, "AS_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AS_seq, file = AS_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAS_metadata <- create.MethylPos(AS_seq, AS, AS_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mAS_metadata_filename <- paste0(save_folder, "AS_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AS_metadata, AS_metadata_filename)[m
[32m+[m
[32m+[m[32m### JM[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mJM_seq <- getSeq(JM_rgenome, JM)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(JM_seq) <- paste0("JM_", as.character(seqnames(JM)), "_", start(JM),":", end(JM))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mJM_filename <- paste0(save_folder, "JM_243285_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(JM_seq, file = JM_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mJM_metadata <- create.MethylPos(JM_seq, JM, JM_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mJM_metadata_filename <- paste0(save_folder, "JM_metadata_243285_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(JM_metadata, JM_metadata_filename)[m
[32m+[m
[32m+[m[32m### ZF[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mZF_seq <- getSeq(ZF_rgenome, ZF)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(ZF_seq) <- paste0("ZF_", as.character(seqnames(ZF)), "_", start(ZF),":", end(ZF))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mZF_filename <- paste0(save_folder, "ZF_757883_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(ZF_seq, file = ZF_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mZF_metadata <- create.MethylPos(ZF_seq, ZF, ZF_methyl)[m
[32m+[m
[32m+[m[32m# saving df[m
[32m+[m[32mZF_metadata_filename <- paste0(save_folder, "ZF_metadata_757883", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(ZF_metadata, ZF_metadata_filename)[m
[32m+[m
[32m+[m[32m#### Visualization and testing ####[m
[32m+[m
[32m+[m[32m# sequence width distribution[m
[32m+[m[32mdf_width <- data.frame([m
[32m+[m[32m  values = c(width(AC),width(AS),width(EH)),[m
[32m+[m[32m  species = factor(rep(c("AC", "AS", "EH"), times = c(length(width(AC)), length(width(AS)), length(width(EH))))))[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_width, aes(x = species, y = values, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Sequence lengths",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Length (bp)")[m
[32m+[m
[32m+[m[32m# distribution of CpGs[m[41m [m
[32m+[m[32m# extract methyl sites per sequence[m
[32m+[m[32mcount.Methyl <- function(seqs_GR, methylsites) {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  count_methyl <- table(queryHits(overlaps))[m
[32m+[m[32m  return(count_methyl)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdf_AC_methyl <- as.data.frame(count.Methyl(AC, AC_methyl))[m
[32m+[m[32mdf_AC_methyl$Var1 <- factor("AC")[m
[32m+[m
[32m+[m[32mdf_AS_methyl <- as.data.frame(count.Methyl(AS, AS_methyl))[m
[32m+[m[32mdf_AS_methyl$Var1 <- factor("AS")[m
[32m+[m
[32m+[m[32mdf_EH_methyl <- as.data.frame(count.Methyl(EH, EH_methyl))[m
[32m+[m[32mdf_EH_methyl$Var1 <- factor("EH")[m
[32m+[m
[32m+[m[32mdf_methyl <- rbind(df_AC_methyl, df_AS_methyl, df_EH_methyl)[m
[32m+[m[32mcolnames(df_methyl) <- c("species", "cpgs")[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_methyl, aes(x = species, y = cpgs, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  # scale_fill_distiller(palette = "Blues") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "CpGs per sequence",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Amount of CpGs")[m
[32m+[m
[32m+[m
[32m+[m[32m# sequence and CpG amount[m
[32m+[m[32mdf_seq_num <- data.frame([m
[32m+[m[32m  CpGs = c(length(AC_methyl), length(AS_methyl), length(EH_methyl)),[m
[32m+[m[32m  sequences = c(length(AC), length(AS), length(EH)),[m
[32m+[m[32m  species = factor(c("AC", "AS", "EH"))[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m# df_seq_num_long <- pivot_longer(df_seq_num, cols = c(sequences,CpGs), names_to = "variable", values_to = "value")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ggplot(df_seq_num_long, aes(x = species, fill = variable)) +[m
[32m+[m[32m#   geom_bar(position = "dodge") +[m
[32m+[m[32m#   facet_wrap( ~value)[m
[32m+[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m
[32m+[m[32m# EH_rev <- reverseComplement(EH_seq)[m
[32m+[m[32m# writeXStringSet(EH_seq, file = "/workspace/cfngle/results-data/EH_CpG_100bp_rev.fasta")[m
[32m+[m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m## function to fix out-of-boundary sequences[m
[32m+[m
[32m+[m[32m# # FIX start: this shifts the sequences which are out of range into the sequence range again so that it starts with 1[m
[32m+[m[32m# AS[AS@ranges@start <= 0] <- shift(AS[AS@ranges@start <= 0], -1*c(AS@ranges@start[AS@ranges@start <= 0])+1)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # FIX end: the same goes for the ends of the sequences. Some have reached beyond the reference genome[m
[32m+[m[32m# # filtering only the regions of the rgenome which are also in the methylation data[m
[32m+[m[32m# AS_matching <- AS_rgenome[unique(AS_rgenome@ranges@NAMES) %in% unique(AS@seqnames@values)][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # extracting the maximum possible sequence lengths for the methylation data[m
[32m+[m[32m# AS_max_length <- width(AS_matching[as.character(seqnames(AS))])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # updating the ends of AS[m
[32m+[m[32m# end(AS) <- pmin(end(AS), AS_max_length)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # adjusting length to bp_ext again[m
[32m+[m[32m# start(AS[width(AS) < bp_ext]) <- start(AS[width(AS) < bp_ext]) - c(bp_ext-width(AS[width(AS) < bp_ext]))[m
[32m+[m
[32m+[m
[32m+[m[32m#### Version log ####[m
[32m+[m[32m# 1.3 added function to fix overextended sequences[m[41m [m
[32m+[m[32m# 1.2 file names can be defined in the beginning as well as the amount of bp extension[m[41m [m
[32m+[m
[32m+[m
[1mdiff --git a/01_AC_AS_EH_JM_extraction_v-1.5.R b/01_AC_AS_EH_JM_extraction_v-1.5.R[m
[1mnew file mode 100644[m
[1mindex 0000000..4b0ffe6[m
[1m--- /dev/null[m
[1m+++ b/01_AC_AS_EH_JM_extraction_v-1.5.R[m
[36m@@ -0,0 +1,362 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of sequences of methylation data for the AC, EH and AS[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32mbp_ext <- 1000 # this will be the length of the extracted sequences around the CpG[m[41m [m
[32m+[m[32msave_folder <- "/powerplant/workspace/cfngle/results-data/sequences/" # folder where extracted sequences will be saved[m
[32m+[m[32mfile_ext <- ".fasta" # which file extension will be used for the sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32m# library(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32m## function to fix overextending sequenced (see appendix)[m
[32m+[m[32m# in some cases extending the sequence width may lead to some sequences being positioned in nonexistent areas (negative, or number is greater than scaffold/chromosome).[m
[32m+[m[32m# This happens when they are close to the start/end and then being extended[m[41m [m
[32m+[m
[32m+[m[32m# function to fix this problem (see explanation at appendix)[m
[32m+[m[32mfix.seq <- function(seq, rgenome, seq_width) {[m
[32m+[m[32m  seq[seq@ranges@start <= 0] <- shift(seq[seq@ranges@start <= 0], -1*c(seq@ranges@start[seq@ranges@start <= 0])+1)[m
[32m+[m[32m  matching_rgenome <- rgenome[unique(rgenome@ranges@NAMES) %in% unique(seq@seqnames@values)][m
[32m+[m[32m  rg_max_length <- width(matching_rgenome[as.character(seqnames(seq))])[m
[32m+[m[32m  end(seq) <- pmin(end(seq), rg_max_length)[m
[32m+[m[32m  # start(seq[width(seq) < seq_width]) <- start(seq[width(seq) < seq_width]) - c(seq_width-width(seq[width(seq) < seq_width]))[m
[32m+[m[32m  return(seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## function to add the methylation coordinates to the name of the sequence file. "seqs" are the extracted sequences, "seqs_GR" are the ranges saved as a GRanges object, "methylsites" the GRanges object of the methylation coordinates (start=end; meaning one bp)and "name" is a string which is added between the existing name of seqs and the methylation coordinates[m
[32m+[m
[32m+[m[32m## NOT IN USE because the names get too long to convert aligned data (.sam) into .bam files. Other method (see below) is used instead[m
[32m+[m[32madd.Methylnames <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = "_"))[m
[32m+[m[32m  names(seqs) <- paste0(seq_names, "_", name, "_", concat_methyl_sites)[m
[32m+[m[32m  return(seqs)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## this creates a dataframe which stores the positions of the CpGs sites, the names of the seqs and the number of methylation sites per sequence[m
[32m+[m[32mcreate.MethylPos <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = ","))[m
[32m+[m[32m  df <- data.frame([m
[32m+[m[32m    seq = seq_names,[m
[32m+[m[32m    methyl_pos = concat_methyl_sites,[m
[32m+[m[32m    methyl_n = as.vector(table(queryHits(overlaps)))[m
[32m+[m[32m  )[m
[32m+[m[32m  return(df)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Loading data ####[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AS/BisRAD-CpGs-Snapper.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAS_rgenome <- readDNAStringSet("raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta")[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mAS_rgenome_nvec <- names(AS_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" size.*$", "", .)[m
[32m+[m[32mnames(AS_rgenome) <- AS_rgenome_nvec[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32mJM_raw <- read.table("raw-data/JM/zzz-methyldata/01_JM_methylpos_66079_CpGs.csv", sep = ",", header = TRUE)[m
[32m+[m[32mJM_raw <- load("raw-data/JM/zzz-methyldata/00_JM_methylpos_179818_CpGs.Rdata")[m
[32m+[m[32mJM_raw <- JM_24_methyl_pos[m
[32m+[m[32mJM_rgenome <- readDNAStringSet("raw-data/JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fasta")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mJM_rgenome_nvec <- names(JM_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" Ory.*$", "", .)[m
[32m+[m[32mnames(JM_rgenome) <- JM_rgenome_nvec[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32m# EH <- resize(EH_methyl,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = seqnames(EH_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(EH_methyl) - bp_ext/2, end = end(EH_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(EH_methyl))[m
[32m+[m
[32m+[m[32mEH <- fix.seq(EH,EH_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32m# AC <- resize(AC,bp_ext)[m[41m [m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AC_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AC_methyl) - bp_ext/2, end = end(AC_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AC_methyl))[m
[32m+[m
[32m+[m[32mAC <- fix.seq(AC,AC_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AS_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AS_raw$start), end = c(AS_raw$end), names = 1:length(AS_raw$chr)),[m
[32m+[m[32m  strand = Rle(AS_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32m# AS <- resize(AS,bp_ext)[m[41m [m
[32m+[m[32mAS <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AS_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AS_methyl) - bp_ext/2, end = end(AS_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AS_methyl))[m
[32m+[m
[32m+[m[32mAS <- fix.seq(AS,AS_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAS <- reduce(AS)[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mJM_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(JM_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = JM_raw$chr_pos), end = c(JM_raw$chr_pos), names = 1:length(JM_raw$chr)),[m
[32m+[m[32m  strand = Rle(JM_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32m# JM <- resize(JM_methyl,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32mJM <- GRanges([m
[32m+[m[32m  seqnames = seqnames(JM_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(JM_methyl) - bp_ext/2, end = end(JM_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(JM_methyl))[m
[32m+[m
[32m+[m[32mJM <- fix.seq(JM,JM_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mJM <- GenomicRanges::reduce(JM)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Check ####[m
[32m+[m[32m# this just makes sure all the sequenced locations are also represented in the rgenome[m
[32m+[m[32munique(AS_raw$chr) %in% names(AS_rgenome)[m
[32m+[m[32munique(AC_raw$chr) %in% names(AC_rgenome)[m
[32m+[m[32munique(EH_raw$chr) %in% names(EH_rgenome)[m
[32m+[m[32munique(JM_raw$chr) %in% names(JM_rgenome)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32m#adding the methylation sites as name[m
[32m+[m[32m# EH_seq <- add.Methylnames(EH_seq, EH, EH_methyl)[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mEH_filename <- paste0(save_folder, "EH_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = EH_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mEH_metadata <- create.MethylPos(EH_seq, EH, EH_methyl)[m
[32m+[m
[32m+[m[32mEH_metadata_filename <- paste0(save_folder, "EH_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(EH_metadata, EH_metadata_filename)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m#adding the methylation sites as name[m
[32m+[m[32m# AC_seq <- add.Methylnames(AC_seq, AC, AC_methyl)[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAC_filename <- paste0(save_folder, "AC_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AC_seq, file = AC_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAC_metadata <- create.MethylPos(AC_seq, AC, AC_methyl)[m
[32m+[m
[32m+[m[32mAC_metadata_filename <- paste0(save_folder, "AC_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AC_metadata, AC_metadata_filename)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAS_seq <- getSeq(AS_rgenome, AS)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AS_seq) <- paste0("AS_", as.character(seqnames(AS)), "_", start(AS),":", end(AS))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAS_filename <- paste0(save_folder, "AS_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AS_seq, file = AS_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAS_metadata <- create.MethylPos(AS_seq, AS, AS_methyl)[m
[32m+[m
[32m+[m[32mAS_metadata_filename <- paste0(save_folder, "AS_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AS_metadata, AS_metadata_filename)[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mJM_seq <- getSeq(JM_rgenome, JM)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(JM_seq) <- paste0("JM_", as.character(seqnames(JM)), "_", start(JM),":", end(JM))[m
[32m+[m
[32m+[m[32m#adding the methylation sites as name[m
[32m+[m[32m# JM_seq <- add.Methylnames(JM_seq, JM, JM_methyl)[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mJM_filename <- paste0(save_folder, "JM_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(JM_seq, file = JM_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mJM_metadata <- create.MethylPos(JM_seq, JM, JM_methyl)[m
[32m+[m
[32m+[m[32mJM_metadata_filename <- paste0(save_folder, "JM_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(JM_metadata, JM_metadata_filename)[m
[32m+[m
[32m+[m[32m#### Visualization and testing ####[m
[32m+[m
[32m+[m[32m# sequence width distribution[m
[32m+[m[32mdf_width <- data.frame([m
[32m+[m[32m  values = c(width(AC),width(AS),width(EH)),[m
[32m+[m[32m  species = factor(rep(c("AC", "AS", "EH"), times = c(length(width(AC)), length(width(AS)), length(width(EH))))))[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_width, aes(x = species, y = values, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Sequence lengths",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Length (bp)")[m
[32m+[m
[32m+[m[32m# distribution of CpGs[m[41m [m
[32m+[m[32m# extract methyl sites per sequence[m
[32m+[m[32mcount.Methyl <- function(seqs_GR, methylsites) {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  count_methyl <- table(queryHits(overlaps))[m
[32m+[m[32m  return(count_methyl)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdf_AC_methyl <- as.data.frame(count.Methyl(AC, AC_methyl))[m
[32m+[m[32mdf_AC_methyl$Var1 <- factor("AC")[m
[32m+[m
[32m+[m[32mdf_AS_methyl <- as.data.frame(count.Methyl(AS, AS_methyl))[m
[32m+[m[32mdf_AS_methyl$Var1 <- factor("AS")[m
[32m+[m
[32m+[m[32mdf_EH_methyl <- as.data.frame(count.Methyl(EH, EH_methyl))[m
[32m+[m[32mdf_EH_methyl$Var1 <- factor("EH")[m
[32m+[m
[32m+[m[32mdf_methyl <- rbind(df_AC_methyl, df_AS_methyl, df_EH_methyl)[m
[32m+[m[32mcolnames(df_methyl) <- c("species", "cpgs")[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_methyl, aes(x = species, y = cpgs, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  # scale_fill_distiller(palette = "Blues") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "CpGs per sequence",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Amount of CpGs")[m
[32m+[m
[32m+[m
[32m+[m[32m# sequence and CpG amount[m
[32m+[m[32mdf_seq_num <- data.frame([m
[32m+[m[32m  CpGs = c(length(AC_methyl), length(AS_methyl), length(EH_methyl)),[m
[32m+[m[32m  sequences = c(length(AC), length(AS), length(EH)),[m
[32m+[m[32m  species = factor(c("AC", "AS", "EH"))[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m# df_seq_num_long <- pivot_longer(df_seq_num, cols = c(sequences,CpGs), names_to = "variable", values_to = "value")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ggplot(df_seq_num_long, aes(x = species, fill = variable)) +[m
[32m+[m[32m#   geom_bar(position = "dodge") +[m
[32m+[m[32m#   facet_wrap( ~value)[m
[32m+[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m
[32m+[m[32m# EH_rev <- reverseComplement(EH_seq)[m
[32m+[m[32m# writeXStringSet(EH_seq, file = "/workspace/cfngle/results-data/EH_CpG_100bp_rev.fasta")[m
[32m+[m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m## function to fix out-of-boundary sequences[m
[32m+[m
[32m+[m[32m# # FIX start: this shifts the sequences which are out of range into the sequence range again so that it starts with 1[m
[32m+[m[32m# AS[AS@ranges@start <= 0] <- shift(AS[AS@ranges@start <= 0], -1*c(AS@ranges@start[AS@ranges@start <= 0])+1)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # FIX end: the same goes for the ends of the sequences. Some have reached beyond the reference genome[m
[32m+[m[32m# # filtering only the regions of the rgenome which are also in the methylation data[m
[32m+[m[32m# AS_matching <- AS_rgenome[unique(AS_rgenome@ranges@NAMES) %in% unique(AS@seqnames@values)][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # extracting the maximum possible sequence lengths for the methylation data[m
[32m+[m[32m# AS_max_length <- width(AS_matching[as.character(seqnames(AS))])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # updating the ends of AS[m
[32m+[m[32m# end(AS) <- pmin(end(AS), AS_max_length)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # adjusting length to bp_ext again[m
[32m+[m[32m# start(AS[width(AS) < bp_ext]) <- start(AS[width(AS) < bp_ext]) - c(bp_ext-width(AS[width(AS) < bp_ext]))[m
[32m+[m
[32m+[m
[32m+[m[32m#### Version log ####[m
[32m+[m[32m# 1.3 added function to fix overextended sequences[m[41m [m
[32m+[m[32m# 1.2 file names can be defined in the beginning as well as the amount of bp extension[m[41m [m
[32m+[m
[32m+[m
[1mdiff --git a/01_AC_AS_EH_JM_extraction_v-1.6.R b/01_AC_AS_EH_JM_extraction_v-1.6.R[m
[1mnew file mode 100644[m
[1mindex 0000000..bac60bb[m
[1m--- /dev/null[m
[1m+++ b/01_AC_AS_EH_JM_extraction_v-1.6.R[m
[36m@@ -0,0 +1,352 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of sequences of methylation data for the AC, EH and AS[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32mbp_ext <- 1000 # this will be the length of the extracted sequences around the CpG[m[41m [m
[32m+[m[32msave_folder <- "/powerplant/workspace/cfngle/results-data/sequences/" # folder where extracted sequences will be saved[m
[32m+[m[32mfile_ext <- ".fasta" # which file extension will be used for the sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32m# library(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32m## function to fix overextending sequenced (see appendix)[m
[32m+[m[32m# in some cases extending the sequence width may lead to some sequences being positioned in nonexistent areas (negative, or number is greater than scaffold/chromosome).[m
[32m+[m[32m# This happens when they are close to the start/end and then being extended[m[41m [m
[32m+[m
[32m+[m[32m# function to fix this problem (see explanation at appendix)[m
[32m+[m[32mfix.seq <- function(seq, rgenome, seq_width) {[m
[32m+[m[32m  seq[seq@ranges@start <= 0] <- shift(seq[seq@ranges@start <= 0], -1*c(seq@ranges@start[seq@ranges@start <= 0])+1)[m
[32m+[m[32m  matching_rgenome <- rgenome[unique(rgenome@ranges@NAMES) %in% unique(seq@seqnames@values)][m
[32m+[m[32m  rg_max_length <- width(matching_rgenome[as.character(seqnames(seq))])[m
[32m+[m[32m  end(seq) <- pmin(end(seq), rg_max_length)[m
[32m+[m[32m  # start(seq[width(seq) < seq_width]) <- start(seq[width(seq) < seq_width]) - c(seq_width-width(seq[width(seq) < seq_width]))[m
[32m+[m[32m  return(seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## function to add the methylation coordinates to the name of the sequence file. "seqs" are the extracted sequences, "seqs_GR" are the ranges saved as a GRanges object, "methylsites" the GRanges object of the methylation coordinates (start=end; meaning one bp)and "name" is a string which is added between the existing name of seqs and the methylation coordinates[m
[32m+[m
[32m+[m[32m## NOT IN USE because the names get too long to convert aligned data (.sam) into .bam files. Other method (see below) is used instead[m
[32m+[m[32madd.Methylnames <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = "_"))[m
[32m+[m[32m  names(seqs) <- paste0(seq_names, "_", name, "_", concat_methyl_sites)[m
[32m+[m[32m  return(seqs)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## this creates a dataframe which stores the positions of the CpGs sites, the names of the seqs and the number of methylation sites per sequence[m
[32m+[m[32mcreate.MethylPos <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = ","))[m
[32m+[m[32m  df <- data.frame([m
[32m+[m[32m    seq = seq_names,[m
[32m+[m[32m    methyl_pos = concat_methyl_sites,[m
[32m+[m[32m    methyl_n = as.vector(table(queryHits(overlaps)))[m
[32m+[m[32m  )[m
[32m+[m[32m  return(df)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Loading data ####[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AS/BisRAD-CpGs-Snapper.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAS_rgenome <- readDNAStringSet("raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta")[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mAS_rgenome_nvec <- names(AS_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" size.*$", "", .)[m
[32m+[m[32mnames(AS_rgenome) <- AS_rgenome_nvec[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# JM_raw <- read.table("raw-data/JM/zzz-methyldata/01_JM_methylpos_66079_CpGs.csv", sep = ",", header = TRUE) #slower method. Loading Rdata files is faster[m
[32m+[m[32mJM_raw <- load("raw-data/JM/zzz-methyldata/00_JM_methylpos_179818_CpGs.Rdata")[m
[32m+[m[32mJM_raw <- JM_24_methyl_pos[m
[32m+[m[32mJM_rgenome <- readDNAStringSet("raw-data/JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fasta")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mJM_rgenome_nvec <- names(JM_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" Ory.*$", "", .)[m
[32m+[m[32mnames(JM_rgenome) <- JM_rgenome_nvec[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = seqnames(EH_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(EH_methyl) - bp_ext/2, end = end(EH_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(EH_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mEH <- fix.seq(EH,EH_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AC_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AC_methyl) - bp_ext/2, end = end(AC_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AC_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mAC <- fix.seq(AC,AC_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AS_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AS_raw$start), end = c(AS_raw$end), names = 1:length(AS_raw$chr)),[m
[32m+[m[32m  strand = Rle(AS_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mAS <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AS_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AS_methyl) - bp_ext/2, end = end(AS_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AS_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mAS <- fix.seq(AS,AS_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAS <- reduce(AS)[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mJM_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(JM_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = JM_raw$chr_pos), end = c(JM_raw$chr_pos), names = 1:length(JM_raw$chr)),[m
[32m+[m[32m  strand = Rle(JM_raw$strand))[m
[32m+[m
[32m+[m[32m# extend methylposition by bp_ext in both directions[m
[32m+[m[32mJM <- GRanges([m
[32m+[m[32m  seqnames = seqnames(JM_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(JM_methyl) - bp_ext/2, end = end(JM_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(JM_methyl))[m
[32m+[m
[32m+[m[32m# function to fix positions which are not on the reference genome (out of boundaries)[m
[32m+[m[32mJM <- fix.seq(JM,JM_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mJM <- GenomicRanges::reduce(JM)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Check ####[m
[32m+[m[32m# this just makes sure all the sequenced locations are also represented in the rgenome[m
[32m+[m[32munique(AS_raw$chr) %in% names(AS_rgenome)[m
[32m+[m[32munique(AC_raw$chr) %in% names(AC_rgenome)[m
[32m+[m[32munique(EH_raw$chr) %in% names(EH_rgenome)[m
[32m+[m[32munique(JM_raw$chr) %in% names(JM_rgenome)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m### EH[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mEH_filename <- paste0(save_folder, "EH_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = EH_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mEH_metadata <- create.MethylPos(EH_seq, EH, EH_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mEH_metadata_filename <- paste0(save_folder, "EH_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(EH_metadata, EH_metadata_filename)[m
[32m+[m
[32m+[m[32m### AC[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAC_filename <- paste0(save_folder, "AC_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AC_seq, file = AC_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAC_metadata <- create.MethylPos(AC_seq, AC, AC_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mAC_metadata_filename <- paste0(save_folder, "AC_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AC_metadata, AC_metadata_filename)[m
[32m+[m
[32m+[m[32m### AS[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAS_seq <- getSeq(AS_rgenome, AS)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AS_seq) <- paste0("AS_", as.character(seqnames(AS)), "_", start(AS),":", end(AS))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAS_filename <- paste0(save_folder, "AS_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AS_seq, file = AS_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAS_metadata <- create.MethylPos(AS_seq, AS, AS_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mAS_metadata_filename <- paste0(save_folder, "AS_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AS_metadata, AS_metadata_filename)[m
[32m+[m
[32m+[m[32m### JM[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mJM_seq <- getSeq(JM_rgenome, JM)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(JM_seq) <- paste0("JM_", as.character(seqnames(JM)), "_", start(JM),":", end(JM))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mJM_filename <- paste0(save_folder, "JM_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(JM_seq, file = JM_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mJM_metadata <- create.MethylPos(JM_seq, JM, JM_methyl)[m
[32m+[m[32m# saving df[m
[32m+[m[32mJM_metadata_filename <- paste0(save_folder, "JM_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(JM_metadata, JM_metadata_filename)[m
[32m+[m
[32m+[m[32m#### Visualization and testing ####[m
[32m+[m
[32m+[m[32m# sequence width distribution[m
[32m+[m[32mdf_width <- data.frame([m
[32m+[m[32m  values = c(width(AC),width(AS),width(EH)),[m
[32m+[m[32m  species = factor(rep(c("AC", "AS", "EH"), times = c(length(width(AC)), length(width(AS)), length(width(EH))))))[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_width, aes(x = species, y = values, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Sequence lengths",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Length (bp)")[m
[32m+[m
[32m+[m[32m# distribution of CpGs[m[41m [m
[32m+[m[32m# extract methyl sites per sequence[m
[32m+[m[32mcount.Methyl <- function(seqs_GR, methylsites) {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  count_methyl <- table(queryHits(overlaps))[m
[32m+[m[32m  return(count_methyl)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdf_AC_methyl <- as.data.frame(count.Methyl(AC, AC_methyl))[m
[32m+[m[32mdf_AC_methyl$Var1 <- factor("AC")[m
[32m+[m
[32m+[m[32mdf_AS_methyl <- as.data.frame(count.Methyl(AS, AS_methyl))[m
[32m+[m[32mdf_AS_methyl$Var1 <- factor("AS")[m
[32m+[m
[32m+[m[32mdf_EH_methyl <- as.data.frame(count.Methyl(EH, EH_methyl))[m
[32m+[m[32mdf_EH_methyl$Var1 <- factor("EH")[m
[32m+[m
[32m+[m[32mdf_methyl <- rbind(df_AC_methyl, df_AS_methyl, df_EH_methyl)[m
[32m+[m[32mcolnames(df_methyl) <- c("species", "cpgs")[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_methyl, aes(x = species, y = cpgs, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  # scale_fill_distiller(palette = "Blues") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "CpGs per sequence",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Amount of CpGs")[m
[32m+[m
[32m+[m
[32m+[m[32m# sequence and CpG amount[m
[32m+[m[32mdf_seq_num <- data.frame([m
[32m+[m[32m  CpGs = c(length(AC_methyl), length(AS_methyl), length(EH_methyl)),[m
[32m+[m[32m  sequences = c(length(AC), length(AS), length(EH)),[m
[32m+[m[32m  species = factor(c("AC", "AS", "EH"))[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m# df_seq_num_long <- pivot_longer(df_seq_num, cols = c(sequences,CpGs), names_to = "variable", values_to = "value")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ggplot(df_seq_num_long, aes(x = species, fill = variable)) +[m
[32m+[m[32m#   geom_bar(position = "dodge") +[m
[32m+[m[32m#   facet_wrap( ~value)[m
[32m+[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m
[32m+[m[32m# EH_rev <- reverseComplement(EH_seq)[m
[32m+[m[32m# writeXStringSet(EH_seq, file = "/workspace/cfngle/results-data/EH_CpG_100bp_rev.fasta")[m
[32m+[m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m## function to fix out-of-boundary sequences[m
[32m+[m
[32m+[m[32m# # FIX start: this shifts the sequences which are out of range into the sequence range again so that it starts with 1[m
[32m+[m[32m# AS[AS@ranges@start <= 0] <- shift(AS[AS@ranges@start <= 0], -1*c(AS@ranges@start[AS@ranges@start <= 0])+1)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # FIX end: the same goes for the ends of the sequences. Some have reached beyond the reference genome[m
[32m+[m[32m# # filtering only the regions of the rgenome which are also in the methylation data[m
[32m+[m[32m# AS_matching <- AS_rgenome[unique(AS_rgenome@ranges@NAMES) %in% unique(AS@seqnames@values)][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # extracting the maximum possible sequence lengths for the methylation data[m
[32m+[m[32m# AS_max_length <- width(AS_matching[as.character(seqnames(AS))])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # updating the ends of AS[m
[32m+[m[32m# end(AS) <- pmin(end(AS), AS_max_length)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # adjusting length to bp_ext again[m
[32m+[m[32m# start(AS[width(AS) < bp_ext]) <- start(AS[width(AS) < bp_ext]) - c(bp_ext-width(AS[width(AS) < bp_ext]))[m
[32m+[m
[32m+[m
[32m+[m[32m#### Version log ####[m
[32m+[m[32m# 1.3 added function to fix overextended sequences[m[41m [m
[32m+[m[32m# 1.2 file names can be defined in the beginning as well as the amount of bp extension[m[41m [m
[32m+[m
[32m+[m
[1mdiff --git a/01_AC_AS_EH_extraction_v-1.0.R b/01_AC_AS_EH_extraction_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..2ccba92[m
[1m--- /dev/null[m
[1m+++ b/01_AC_AS_EH_extraction_v-1.0.R[m
[36m@@ -0,0 +1,153 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of sequences of methylation data for the AC, EH and AS[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32mbp_ext <- 100 # this will be the length of the extracted sequences around the CpG[m[41m [m
[32m+[m[32msave_folder <- "/powerplant/workspace/cfngle/results-data/" # folder where extracted sequences will be saved[m
[32m+[m[32mfile_ext <- ".fasta" # which file extension will be used for the sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AS/BisRAD-CpGs-Snapper.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAS_rgenome <- readDNAStringSet("raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta")[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mAS_rgenome_nvec <- names(AS_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" size.*$", "", .)[m
[32m+[m[32mnames(AS_rgenome) <- AS_rgenome_nvec[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mEH <- resize(EH,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(EH)[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mAC <- resize(AC,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(AC)[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS <- GRanges([m
[32m+[m[32m  seqnames = Rle(AS_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AS_raw$start), end = c(AS_raw$end), names = 1:length(AS_raw$chr)),[m
[32m+[m[32m  strand = Rle(AS_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mAS <- resize(AS,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32m# in this case this led to some sequences being positioned in nonexistent indexes (negative).[m
[32m+[m[32m# This happens when they are close to the start and then being extended[m[41m [m
[32m+[m[32m# FIX start: this shifts the sequences which are out of range in a way that they start with 1 again[m[41m [m
[32m+[m[32mAS[AS@ranges@start <= 0] <- shift(AS[AS@ranges@start <= 0], -1*c(AS@ranges@start[AS@ranges@start <= 0])+1)[m
[32m+[m
[32m+[m[32m# FIX end: the same goes for the ends of the sequences. Some have reached beyond the reference genome[m
[32m+[m[32m# filtering only the regions of the rgenome which are also in the methylation data[m
[32m+[m[32mAS_matching <- AS_rgenome[unique(AS_rgenome@ranges@NAMES) %in% unique(AS@seqnames@values)][m
[32m+[m
[32m+[m[32m# extracting the maximum possible sequence lengths for the methylation data[m[41m [m
[32m+[m[32mAS_max_length <- width(AS_matching[as.character(seqnames(AS))])[m
[32m+[m
[32m+[m[32m# updating the ends of AS[m
[32m+[m[32mend(AS) <- pmin(end(AS), AS_max_length)[m
[32m+[m
[32m+[m[32m# adjusting length to bp_ext again[m[41m [m
[32m+[m[32mstart(AS[width(AS) < bp_ext]) <- start(AS[width(AS) < bp_ext]) - c(bp_ext-width(AS[width(AS) < bp_ext]))[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(AS)[m
[32m+[m[32mAS <- reduce(AS)[m
[32m+[m
[32m+[m[32m#### Check ####[m
[32m+[m[32m# this just makes sure all the sequenced locations are also represented in the rgenome[m
[32m+[m[32munique(AS_raw$chr) %in% names(AS_rgenome)[m
[32m+[m[32munique(AC_raw$chr) %in% names(AC_rgenome)[m
[32m+[m[32munique(EH_raw$chr) %in% names(EH_rgenome)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mEH_filename <- paste0(save_folder, "EH_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = EH_filename)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAC_filename <- paste0(save_folder, "AC_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AC_seq, file = AC_filename)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAS_seq <- getSeq(AS_rgenome, AS)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AS_seq) <- paste0("AS_", as.character(seqnames(AS)), "_", start(AS),":", end(AS))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAS_filename <- paste0(save_folder, "AS_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AS_seq, file = AS_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Visualization ####[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m[41m      [m
[1mdiff --git a/01_AC_AS_EH_extraction_v-1.1.R b/01_AC_AS_EH_extraction_v-1.1.R[m
[1mnew file mode 100644[m
[1mindex 0000000..6b7b237[m
[1m--- /dev/null[m
[1m+++ b/01_AC_AS_EH_extraction_v-1.1.R[m
[36m@@ -0,0 +1,169 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of sequences of methylation data for the AC, EH and AS[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32mbp_ext <- 200 # this will be the length of the extracted sequences around the CpG[m[41m [m
[32m+[m[32msave_folder <- "/powerplant/workspace/cfngle/results-data/" # folder where extracted sequences will be saved[m
[32m+[m[32mfile_ext <- ".fasta" # which file extension will be used for the sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AS/BisRAD-CpGs-Snapper.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAS_rgenome <- readDNAStringSet("raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta")[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mAS_rgenome_nvec <- names(AS_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" size.*$", "", .)[m
[32m+[m[32mnames(AS_rgenome) <- AS_rgenome_nvec[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mEH <- resize(EH,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(EH)[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mAC <- resize(AC,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(AC)[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS <- GRanges([m
[32m+[m[32m  seqnames = Rle(AS_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AS_raw$start), end = c(AS_raw$end), names = 1:length(AS_raw$chr)),[m
[32m+[m[32m  strand = Rle(AS_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mAS <- resize(AS,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32m# in this case this led to some sequences being positioned in nonexistent indexes (negative).[m
[32m+[m[32m# This happens when they are close to the start and then being extended[m[41m [m
[32m+[m
[32m+[m[32m# function to fix this problem (see explanation at appendix)[m
[32m+[m[32mfix.seq() <- function(seq, rgenome, seq_width) {[m
[32m+[m[32m  seq[seq@ranges@start <= 0] <- shift(seq[seq@ranges@start <= 0], -1*c(seq@ranges@start[seq@ranges@start <= 0])+1)[m
[32m+[m[32m  matching_rgenome <- rgenome[unique(rgenome@ranges@NAMES) %in% unique(seq@seqnames@values)][m
[32m+[m[32m  rg_max_length <- width(matching_rgenome[seq.character(seqnames(seq))])[m
[32m+[m[32m  end(seq) <- pmin(end(seq), rg_max_length)[m
[32m+[m[32m  start(seq[width(seq) < seq_width]) <- start(seq[width(seq) < seq_width]) - c(seq_width-width(seq[width(seq) < seq_width]))[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(AS)[m
[32m+[m[32mAS <- reduce(AS)[m
[32m+[m
[32m+[m[32m#### Check ####[m
[32m+[m[32m# this just makes sure all the sequenced locations are also represented in the rgenome[m
[32m+[m[32munique(AS_raw$chr) %in% names(AS_rgenome)[m
[32m+[m[32munique(AC_raw$chr) %in% names(AC_rgenome)[m
[32m+[m[32munique(EH_raw$chr) %in% names(EH_rgenome)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mEH_filename <- paste0(save_folder, "EH_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = EH_filename)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAC_filename <- paste0(save_folder, "AC_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AC_seq, file = AC_filename)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAS_seq <- getSeq(AS_rgenome, AS)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AS_seq) <- paste0("AS_", as.character(seqnames(AS)), "_", start(AS),":", end(AS))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAS_filename <- paste0(save_folder, "AS_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AS_seq, file = AS_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Visualization and testing ####[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m[32mEH_rev <- reverseComplement(EH_seq)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = "/workspace/cfngle/results-data/EH_CpG_100bp_rev.fasta")[m
[32m+[m[41m      [m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m## function to fix out-of-boundary sequences[m
[32m+[m[32m"""[m
[32m+[m[32m# FIX start: this shifts the sequences which are out of range into the sequence range again so that it starts with 1[m
[32m+[m[32mAS[AS@ranges@start <= 0] <- shift(AS[AS@ranges@start <= 0], -1*c(AS@ranges@start[AS@ranges@start <= 0])+1)[m
[32m+[m
[32m+[m[32m# FIX end: the same goes for the ends of the sequences. Some have reached beyond the reference genome[m
[32m+[m[32m# filtering only the regions of the rgenome which are also in the methylation data[m
[32m+[m[32mAS_matching <- AS_rgenome[unique(AS_rgenome@ranges@NAMES) %in% unique(AS@seqnames@values)][m
[32m+[m
[32m+[m[32m# extracting the maximum possible sequence lengths for the methylation data[m[41m [m
[32m+[m[32mAS_max_length <- width(AS_matching[as.character(seqnames(AS))])[m
[32m+[m
[32m+[m[32m# updating the ends of AS[m
[32m+[m[32mend(AS) <- pmin(end(AS), AS_max_length)[m
[32m+[m
[32m+[m[32m# adjusting length to bp_ext again[m[41m [m
[32m+[m[32mstart(AS[width(AS) < bp_ext]) <- start(AS[width(AS) < bp_ext]) - c(bp_ext-width(AS[width(AS) < bp_ext]))[m
[32m+[m[32m"""[m
\ No newline at end of file[m
[1mdiff --git a/01_AC_AS_EH_extraction_v-1.2.R b/01_AC_AS_EH_extraction_v-1.2.R[m
[1mnew file mode 100644[m
[1mindex 0000000..7b8b91a[m
[1m--- /dev/null[m
[1m+++ b/01_AC_AS_EH_extraction_v-1.2.R[m
[36m@@ -0,0 +1,170 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of sequences of methylation data for the AC, EH and AS[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32mbp_ext <- 200 # this will be the length of the extracted sequences around the CpG[m[41m [m
[32m+[m[32msave_folder <- "/powerplant/workspace/cfngle/results-data/" # folder where extracted sequences will be saved[m
[32m+[m[32mfile_ext <- ".fasta" # which file extension will be used for the sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AS/BisRAD-CpGs-Snapper.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAS_rgenome <- readDNAStringSet("raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta")[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mAS_rgenome_nvec <- names(AS_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" size.*$", "", .)[m
[32m+[m[32mnames(AS_rgenome) <- AS_rgenome_nvec[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mEH <- resize(EH,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(EH)[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mAC <- resize(AC,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(AC)[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS <- GRanges([m
[32m+[m[32m  seqnames = Rle(AS_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AS_raw$start), end = c(AS_raw$end), names = 1:length(AS_raw$chr)),[m
[32m+[m[32m  strand = Rle(AS_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mAS <- resize(AS,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32m# in this case this led to some sequences being positioned in nonexistent indexes (negative).[m
[32m+[m[32m# This happens when they are close to the start and then being extended[m[41m [m
[32m+[m
[32m+[m[32m# function to fix this problem (see explanation at appendix)[m
[32m+[m[32mfix.seq <- function(seq, rgenome, seq_width) {[m
[32m+[m[32m  seq[seq@ranges@start <= 0] <- shift(seq[seq@ranges@start <= 0], -1*c(seq@ranges@start[seq@ranges@start <= 0])+1)[m
[32m+[m[32m  matching_rgenome <- rgenome[unique(rgenome@ranges@NAMES) %in% unique(seq@seqnames@values)][m
[32m+[m[32m  rg_max_length <- width(matching_rgenome[as.character(seqnames(seq))])[m
[32m+[m[32m  end(seq) <- pmin(end(seq), rg_max_length)[m
[32m+[m[32m  start(seq[width(seq) < seq_width]) <- start(seq[width(seq) < seq_width]) - c(seq_width-width(seq[width(seq) < seq_width]))[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfix.seq(AS,AS_rgenome,bp_ext)[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(AS)[m
[32m+[m[32mAS <- reduce(AS)[m
[32m+[m
[32m+[m[32m#### Check ####[m
[32m+[m[32m# this just makes sure all the sequenced locations are also represented in the rgenome[m
[32m+[m[32munique(AS_raw$chr) %in% names(AS_rgenome)[m
[32m+[m[32munique(AC_raw$chr) %in% names(AC_rgenome)[m
[32m+[m[32munique(EH_raw$chr) %in% names(EH_rgenome)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mEH_filename <- paste0(save_folder, "EH_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = EH_filename)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAC_filename <- paste0(save_folder, "AC_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AC_seq, file = AC_filename)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAS_seq <- getSeq(AS_rgenome, AS)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AS_seq) <- paste0("AS_", as.character(seqnames(AS)), "_", start(AS),":", end(AS))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAS_filename <- paste0(save_folder, "AS_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AS_seq, file = AS_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Visualization and testing ####[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m[32mEH_rev <- reverseComplement(EH_seq)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = "/workspace/cfngle/results-data/EH_CpG_100bp_rev.fasta")[m
[32m+[m[41m      [m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m## function to fix out-of-boundary sequences[m
[32m+[m[32m"""[m
[32m+[m[32m# FIX start: this shifts the sequences which are out of range into the sequence range again so that it starts with 1[m
[32m+[m[32mAS[AS@ranges@start <= 0] <- shift(AS[AS@ranges@start <= 0], -1*c(AS@ranges@start[AS@ranges@start <= 0])+1)[m
[32m+[m
[32m+[m[32m# FIX end: the same goes for the ends of the sequences. Some have reached beyond the reference genome[m
[32m+[m[32m# filtering only the regions of the rgenome which are also in the methylation data[m
[32m+[m[32mAS_matching <- AS_rgenome[unique(AS_rgenome@ranges@NAMES) %in% unique(AS@seqnames@values)][m
[32m+[m
[32m+[m[32m# extracting the maximum possible sequence lengths for the methylation data[m[41m [m
[32m+[m[32mAS_max_length <- width(AS_matching[as.character(seqnames(AS))])[m
[32m+[m
[32m+[m[32m# updating the ends of AS[m
[32m+[m[32mend(AS) <- pmin(end(AS), AS_max_length)[m
[32m+[m
[32m+[m[32m# adjusting length to bp_ext again[m[41m [m
[32m+[m[32mstart(AS[width(AS) < bp_ext]) <- start(AS[width(AS) < bp_ext]) - c(bp_ext-width(AS[width(AS) < bp_ext]))[m
[32m+[m[32m"""[m
\ No newline at end of file[m
[1mdiff --git a/01_AC_AS_EH_extraction_v-1.3.R b/01_AC_AS_EH_extraction_v-1.3.R[m
[1mnew file mode 100644[m
[1mindex 0000000..38da71f[m
[1m--- /dev/null[m
[1m+++ b/01_AC_AS_EH_extraction_v-1.3.R[m
[36m@@ -0,0 +1,227 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of sequences of methylation data for the AC, EH and AS[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32mbp_ext <- 1000 # this will be the length of the extracted sequences around the CpG[m[41m [m
[32m+[m[32msave_folder <- "/powerplant/workspace/cfngle/results-data/sequences/" # folder where extracted sequences will be saved[m
[32m+[m[32mfile_ext <- ".fasta" # which file extension will be used for the sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32m## function to fix overextending sequenced (see appendix)[m
[32m+[m[32m# in some cases extending the sequence width may lead to some sequences being positioned in nonexistent areas (negative, or number is greater than scaffold/chromosome).[m
[32m+[m[32m# This happens when they are close to the start/end and then being extended[m[41m [m
[32m+[m
[32m+[m[32m# function to fix this problem (see explanation at appendix)[m
[32m+[m[32mfix.seq <- function(seq, rgenome, seq_width) {[m
[32m+[m[32m  seq[seq@ranges@start <= 0] <- shift(seq[seq@ranges@start <= 0], -1*c(seq@ranges@start[seq@ranges@start <= 0])+1)[m
[32m+[m[32m  matching_rgenome <- rgenome[unique(rgenome@ranges@NAMES) %in% unique(seq@seqnames@values)][m
[32m+[m[32m  rg_max_length <- width(matching_rgenome[as.character(seqnames(seq))])[m
[32m+[m[32m  end(seq) <- pmin(end(seq), rg_max_length)[m
[32m+[m[32m  start(seq[width(seq) < seq_width]) <- start(seq[width(seq) < seq_width]) - c(seq_width-width(seq[width(seq) < seq_width]))[m
[32m+[m[32m  return(seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## function to add the methylation coordinates to the name of the sequence file. "seqs" are the extracted sequences, "seqs_GR" are the ranges saved as a GRanges object, "methylsites" the GRanges object of the methylation coordinates (start=end; meaning one bp)and "name" is a string which is added between the existing name of seqs and the methylation coordinates[m
[32m+[m[32madd.Methylnames <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = "_"))[m
[32m+[m[32m  names(seqs) <- paste0(seq_names, "_", name, "_", concat_methyl_sites)[m
[32m+[m[32m  return(seqs)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Loading data ####[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AS/BisRAD-CpGs-Snapper.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAS_rgenome <- readDNAStringSet("raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta")[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mAS_rgenome_nvec <- names(AS_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" size.*$", "", .)[m
[32m+[m[32mnames(AS_rgenome) <- AS_rgenome_nvec[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mEH <- resize(EH_methyl,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32mEH <- fix.seq(EH,EH_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mAC <- resize(AC,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32mAC <- fix.seq(AC,AC_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS <- GRanges([m
[32m+[m[32m  seqnames = Rle(AS_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AS_raw$start), end = c(AS_raw$end), names = 1:length(AS_raw$chr)),[m
[32m+[m[32m  strand = Rle(AS_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mAS <- resize(AS,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32mAS <- fix.seq(AS,AS_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAS <- reduce(AS)[m
[32m+[m
[32m+[m[32m#### Check ####[m
[32m+[m[32m# this just makes sure all the sequenced locations are also represented in the rgenome[m
[32m+[m[32munique(AS_raw$chr) %in% names(AS_rgenome)[m
[32m+[m[32munique(AC_raw$chr) %in% names(AC_rgenome)[m
[32m+[m[32munique(EH_raw$chr) %in% names(EH_rgenome)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32madd.Methylnames <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = "_"))[m
[32m+[m[32m  names(seqs) <- paste0(seq_names, "_", name, "_", concat_methyl_sites)[m
[32m+[m[32m  return(seqs)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#adding the methylation sites as name[m
[32m+[m
[32m+[m[32mEH_seq <- add.Methylnames(EH_seq, EH, EH_methyl)[m
[32m+[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# names(add.Methylnames(EH_seq, EH, EH_methyl))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# overlaps_t <- findOverlaps(EH, EH_t)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# subjectHits(overlaps_t)[m
[32m+[m[32m# queryHits(overlaps_t)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# xx <- names(EH_seq)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# start_positions <- start(EH_t[subjectHits(overlaps_t)])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# concatenated_starts <- tapply(start_positions, INDEX = queryHits(overlaps_t), FUN = function(x) paste0(x, collapse = "_"))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# xx <- paste0(xx,"_", name, "_", concatenated_starts)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mEH_filename <- paste0(save_folder, "EH_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = EH_filename)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAC_filename <- paste0(save_folder, "AC_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AC_seq, file = AC_filename)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAS_seq <- getSeq(AS_rgenome, AS)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AS_seq) <- paste0("AS_", as.character(seqnames(AS)), "_", start(AS),":", end(AS))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAS_filename <- paste0(save_folder, "AS_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AS_seq, file = AS_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Visualization and testing ####[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m
[32m+[m[32m# EH_rev <- reverseComplement(EH_seq)[m
[32m+[m[32m# writeXStringSet(EH_seq, file = "/workspace/cfngle/results-data/EH_CpG_100bp_rev.fasta")[m
[32m+[m[41m      [m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m## function to fix out-of-boundary sequences[m
[32m+[m
[32m+[m[32m# # FIX start: this shifts the sequences which are out of range into the sequence range again so that it starts with 1[m
[32m+[m[32m# AS[AS@ranges@start <= 0] <- shift(AS[AS@ranges@start <= 0], -1*c(AS@ranges@start[AS@ranges@start <= 0])+1)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # FIX end: the same goes for the ends of the sequences. Some have reached beyond the reference genome[m
[32m+[m[32m# # filtering only the regions of the rgenome which are also in the methylation data[m
[32m+[m[32m# AS_matching <- AS_rgenome[unique(AS_rgenome@ranges@NAMES) %in% unique(AS@seqnames@values)][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # extracting the maximum possible sequence lengths for the methylation data[m
[32m+[m[32m# AS_max_length <- width(AS_matching[as.character(seqnames(AS))])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # updating the ends of AS[m
[32m+[m[32m# end(AS) <- pmin(end(AS), AS_max_length)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # adjusting length to bp_ext again[m
[32m+[m[32m# start(AS[width(AS) < bp_ext]) <- start(AS[width(AS) < bp_ext]) - c(bp_ext-width(AS[width(AS) < bp_ext]))[m
[32m+[m
[32m+[m
[32m+[m[32m#### Version log ####[m
[32m+[m[32m# 1.3 added function to fix overextended sequences[m[41m [m
[32m+[m[32m# 1.2 file names can be defined in the beginning as well as the amount of bp extension[m[41m [m
[32m+[m
[32m+[m
[1mdiff --git a/01_AC_AS_EH_extraction_v-1.4.R b/01_AC_AS_EH_extraction_v-1.4.R[m
[1mnew file mode 100644[m
[1mindex 0000000..9a57194[m
[1m--- /dev/null[m
[1m+++ b/01_AC_AS_EH_extraction_v-1.4.R[m
[36m@@ -0,0 +1,308 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of sequences of methylation data for the AC, EH and AS[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32mbp_ext <- 1000 # this will be the length of the extracted sequences around the CpG[m[41m [m
[32m+[m[32msave_folder <- "/powerplant/workspace/cfngle/results-data/sequences/" # folder where extracted sequences will be saved[m
[32m+[m[32mfile_ext <- ".fasta" # which file extension will be used for the sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32m## function to fix overextending sequenced (see appendix)[m
[32m+[m[32m# in some cases extending the sequence width may lead to some sequences being positioned in nonexistent areas (negative, or number is greater than scaffold/chromosome).[m
[32m+[m[32m# This happens when they are close to the start/end and then being extended[m[41m [m
[32m+[m
[32m+[m[32m# function to fix this problem (see explanation at appendix)[m
[32m+[m[32mfix.seq <- function(seq, rgenome, seq_width) {[m
[32m+[m[32m  seq[seq@ranges@start <= 0] <- shift(seq[seq@ranges@start <= 0], -1*c(seq@ranges@start[seq@ranges@start <= 0])+1)[m
[32m+[m[32m  matching_rgenome <- rgenome[unique(rgenome@ranges@NAMES) %in% unique(seq@seqnames@values)][m
[32m+[m[32m  rg_max_length <- width(matching_rgenome[as.character(seqnames(seq))])[m
[32m+[m[32m  end(seq) <- pmin(end(seq), rg_max_length)[m
[32m+[m[32m  # start(seq[width(seq) < seq_width]) <- start(seq[width(seq) < seq_width]) - c(seq_width-width(seq[width(seq) < seq_width]))[m
[32m+[m[32m  return(seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## function to add the methylation coordinates to the name of the sequence file. "seqs" are the extracted sequences, "seqs_GR" are the ranges saved as a GRanges object, "methylsites" the GRanges object of the methylation coordinates (start=end; meaning one bp)and "name" is a string which is added between the existing name of seqs and the methylation coordinates[m
[32m+[m
[32m+[m[32m## NOT IN USE because the names get too long to convert aligned data (.sam) into .bam files. Other method (see below) is used instead[m
[32m+[m[32madd.Methylnames <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = "_"))[m
[32m+[m[32m  names(seqs) <- paste0(seq_names, "_", name, "_", concat_methyl_sites)[m
[32m+[m[32m  return(seqs)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## this creates a dataframe which stores the positions of the CpGs sites, the names of the seqs and the number of methylation sites per sequence[m
[32m+[m[32mcreate.MethylPos <- function(seqs, seqs_GR, methylsites, name = "CpGs") {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  seq_names <- names(seqs)[m
[32m+[m[32m  methyl_sites <- start(methylsites[subjectHits(overlaps)])[m
[32m+[m[32m  concat_methyl_sites <- tapply(methyl_sites, INDEX = queryHits(overlaps), FUN = function(x) paste0(x, collapse = ","))[m
[32m+[m[32m  df <- data.frame([m
[32m+[m[32m    seq = seq_names,[m
[32m+[m[32m    methyl_pos = concat_methyl_sites,[m
[32m+[m[32m    methyl_n = as.vector(table(queryHits(overlaps)))[m
[32m+[m[32m  )[m
[32m+[m[32m  return(df)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Loading data ####[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AS/BisRAD-CpGs-Snapper.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAS_rgenome <- readDNAStringSet("raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta")[m
[32m+[m[32m# renaming the rgenome[m[41m [m
[32m+[m[32mAS_rgenome_nvec <- names(AS_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(" size.*$", "", .)[m
[32m+[m[32mnames(AS_rgenome) <- AS_rgenome_nvec[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32m# EH <- resize(EH_methyl,bp_ext)[m[41m [m
[32m+[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = seqnames(EH_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(EH_methyl) - bp_ext/2, end = end(EH_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(EH_methyl))[m
[32m+[m
[32m+[m[32mEH <- fix.seq(EH,EH_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32mAC_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32m# AC <- resize(AC,bp_ext)[m[41m [m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AC_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AC_methyl) - bp_ext/2, end = end(AC_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AC_methyl))[m
[32m+[m
[32m+[m[32mAC <- fix.seq(AC,AC_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32mAS_methyl <- GRanges([m
[32m+[m[32m  seqnames = Rle(AS_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AS_raw$start), end = c(AS_raw$end), names = 1:length(AS_raw$chr)),[m
[32m+[m[32m  strand = Rle(AS_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32m# AS <- resize(AS,bp_ext)[m[41m [m
[32m+[m[32mAS <- GRanges([m
[32m+[m[32m  seqnames = seqnames(AS_methyl),[m
[32m+[m[32m  ranges = IRanges(start = start(AS_methyl) - bp_ext/2, end = end(AS_methyl) + bp_ext/2),[m
[32m+[m[32m  strand = strand(AS_methyl))[m
[32m+[m
[32m+[m[32mAS <- fix.seq(AS,AS_rgenome,bp_ext)[m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mAS <- reduce(AS)[m
[32m+[m
[32m+[m[32m#### Check ####[m
[32m+[m[32m# this just makes sure all the sequenced locations are also represented in the rgenome[m
[32m+[m[32munique(AS_raw$chr) %in% names(AS_rgenome)[m
[32m+[m[32munique(AC_raw$chr) %in% names(AC_rgenome)[m
[32m+[m[32munique(EH_raw$chr) %in% names(EH_rgenome)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m## EH[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32m#adding the methylation sites as name[m
[32m+[m[32m# EH_seq <- add.Methylnames(EH_seq, EH, EH_methyl)[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mEH_filename <- paste0(save_folder, "EH_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(EH_seq, file = EH_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mEH_metadata <- create.MethylPos(EH_seq, EH, EH_methyl)[m
[32m+[m
[32m+[m[32mEH_metadata_filename <- paste0(save_folder, "EH_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(EH_metadata, EH_metadata_filename)[m
[32m+[m
[32m+[m[32m## AC[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m#adding the methylation sites as name[m
[32m+[m[32m# AC_seq <- add.Methylnames(AC_seq, AC, AC_methyl)[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAC_filename <- paste0(save_folder, "AC_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AC_seq, file = AC_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAC_metadata <- create.MethylPos(AC_seq, AC, AC_methyl)[m
[32m+[m
[32m+[m[32mAC_metadata_filename <- paste0(save_folder, "AC_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AC_metadata, AC_metadata_filename)[m
[32m+[m
[32m+[m[32m## AS[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAS_seq <- getSeq(AS_rgenome, AS)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AS_seq) <- paste0("AS_", as.character(seqnames(AS)), "_", start(AS),":", end(AS))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mAS_filename <- paste0(save_folder, "AS_CpG_", bp_ext, "bp", file_ext)[m
[32m+[m[32mwriteXStringSet(AS_seq, file = AS_filename)[m
[32m+[m
[32m+[m[32m## METADATA[m
[32m+[m[32m# creating df with metadata (methylation)[m
[32m+[m[32mAS_metadata <- create.MethylPos(AS_seq, AS, AS_methyl)[m
[32m+[m
[32m+[m[32mAS_metadata_filename <- paste0(save_folder, "AS_metadata_", bp_ext, "bp.csv")[m
[32m+[m[32mwrite.csv(AS_metadata, AS_metadata_filename)[m
[32m+[m
[32m+[m[32m#### Visualization and testing ####[m
[32m+[m
[32m+[m[32m# sequence width distribution[m
[32m+[m[32mdf_width <- data.frame([m
[32m+[m[32m  values = c(width(AC),width(AS),width(EH)),[m
[32m+[m[32m  species = factor(rep(c("AC", "AS", "EH"), times = c(length(width(AC)), length(width(AS)), length(width(EH))))))[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_width, aes(x = species, y = values, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Sequence lengths",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Length (bp)")[m
[32m+[m
[32m+[m[32m# distribution of CpGs[m[41m [m
[32m+[m[32m# extract methyl sites per sequence[m
[32m+[m[32mcount.Methyl <- function(seqs_GR, methylsites) {[m
[32m+[m[32m  overlaps <- findOverlaps(seqs_GR, methylsites)[m
[32m+[m[32m  count_methyl <- table(queryHits(overlaps))[m
[32m+[m[32m  return(count_methyl)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdf_AC_methyl <- as.data.frame(count.Methyl(AC, AC_methyl))[m
[32m+[m[32mdf_AC_methyl$Var1 <- factor("AC")[m
[32m+[m
[32m+[m[32mdf_AS_methyl <- as.data.frame(count.Methyl(AS, AS_methyl))[m
[32m+[m[32mdf_AS_methyl$Var1 <- factor("AS")[m
[32m+[m
[32m+[m[32mdf_EH_methyl <- as.data.frame(count.Methyl(EH, EH_methyl))[m
[32m+[m[32mdf_EH_methyl$Var1 <- factor("EH")[m
[32m+[m
[32m+[m[32mdf_methyl <- rbind(df_AC_methyl, df_AS_methyl, df_EH_methyl)[m
[32m+[m[32mcolnames(df_methyl) <- c("species", "cpgs")[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(df_methyl, aes(x = species, y = cpgs, fill = species)) +[m
[32m+[m[32m  geom_boxplot() +[m
[32m+[m[32m  # scale_fill_distiller(palette = "Blues") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "CpGs per sequence",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Amount of CpGs")[m
[32m+[m
[32m+[m
[32m+[m[32m# sequence and CpG amount[m
[32m+[m[32mdf_seq_num <- data.frame([m
[32m+[m[32m  CpGs = c(length(AC_methyl), length(AS_methyl), length(EH_methyl)),[m
[32m+[m[32m  sequences = c(length(AC), length(AS), length(EH)),[m
[32m+[m[32m  species = factor(c("AC", "AS", "EH"))[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m# df_seq_num_long <- pivot_longer(df_seq_num, cols = c(sequences,CpGs), names_to = "variable", values_to = "value")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ggplot(df_seq_num_long, aes(x = species, fill = variable)) +[m
[32m+[m[32m#   geom_bar(position = "dodge") +[m
[32m+[m[32m#   facet_wrap( ~value)[m
[32m+[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m
[32m+[m[32m# EH_rev <- reverseComplement(EH_seq)[m
[32m+[m[32m# writeXStringSet(EH_seq, file = "/workspace/cfngle/results-data/EH_CpG_100bp_rev.fasta")[m
[32m+[m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m## function to fix out-of-boundary sequences[m
[32m+[m
[32m+[m[32m# # FIX start: this shifts the sequences which are out of range into the sequence range again so that it starts with 1[m
[32m+[m[32m# AS[AS@ranges@start <= 0] <- shift(AS[AS@ranges@start <= 0], -1*c(AS@ranges@start[AS@ranges@start <= 0])+1)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # FIX end: the same goes for the ends of the sequences. Some have reached beyond the reference genome[m
[32m+[m[32m# # filtering only the regions of the rgenome which are also in the methylation data[m
[32m+[m[32m# AS_matching <- AS_rgenome[unique(AS_rgenome@ranges@NAMES) %in% unique(AS@seqnames@values)][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # extracting the maximum possible sequence lengths for the methylation data[m
[32m+[m[32m# AS_max_length <- width(AS_matching[as.character(seqnames(AS))])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # updating the ends of AS[m
[32m+[m[32m# end(AS) <- pmin(end(AS), AS_max_length)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # adjusting length to bp_ext again[m
[32m+[m[32m# start(AS[width(AS) < bp_ext]) <- start(AS[width(AS) < bp_ext]) - c(bp_ext-width(AS[width(AS) < bp_ext]))[m
[32m+[m
[32m+[m
[32m+[m[32m#### Version log ####[m
[32m+[m[32m# 1.3 added function to fix overextended sequences[m[41m [m
[32m+[m[32m# 1.2 file names can be defined in the beginning as well as the amount of bp extension[m[41m [m
[32m+[m
[32m+[m
[1mdiff --git a/01a_alignments-v1.0.ipynb b/01a_alignments-v1.0.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..50dfca8[m
[1m--- /dev/null[m
[1m+++ b/01a_alignments-v1.0.ipynb[m
[36m@@ -0,0 +1,410 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Currently Loaded Modulefiles:\n",[m
[32m+[m[32m      " 1) \u001b[46mpowerPlant/core\u001b[0m    5) \u001b[46mSlurm/21.08.8-2\u001b[0m      9) bowtie2/2.3.4.3  \n",[m
[32m+[m[32m      " 2) texlive/20230914   6) perlbrew/0.76       10) minimap2/2.22    \n",[m
[32m+[m[32m      " 3) pandoc/1.19.2      7) perl/5.36.0         11) cd-hit/4.6.1     \n",[m
[32m+[m[32m      " 4) git/2.21.0         8) slurm-utils/latest  \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Key:\n",[m
[32m+[m[32m      "\u001b[46msticky\u001b[0m  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "module load cd-hit\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# checking active \n",[m
[32m+[m[32m    "# module list"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 32,[m
[32m+[m[32m   "id": "3eec4422-fd71-4360-90d1-1fe9b4aaddfd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "AC_CpG_200bp.fasta\n",[m
[32m+[m[32m      "3\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "AS_CpG_200bp.fasta\n",[m
[32m+[m[32m      "2\n",[m
[32m+[m[32m      "EH_CpG_200bp.fasta\n",[m
[32m+[m[32m      "EH_CpG_200bp.fasta\n",[m
[32m+[m[32m      "1\n",[m
[32m+[m[32m      "AS_CpG_200bp.fasta\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "# 200 bp sequences\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp.fasta\" \"AS_CpG_200bp.fasta\" \"EH_CpG_200bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#seq_100bp=\"AC_CpG_100bp.fasta AS_CpG_100bp.fasta EH_CpG_100bp.fasta\"\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "n=${#seq_200bp[@]}\n",[m
[32m+[m[32m    "for i in ${seq_200bp[@]}; do\n",[m
[32m+[m[32m    "    echo $i\n",[m
[32m+[m[32m    "    echo $n\n",[m
[32m+[m[32m    "    echo \"${seq_200bp[n]}\"\n",[m
[32m+[m[32m    "    n=$((n-1))\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 40,[m
[32m+[m[32m   "id": "e6b03971-a762-4410-9d0c-7ea102ede3a4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AC_AS_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:09:47 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 13755\n",[m
[32m+[m[32m      "total seq in db2: 24535\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 14M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 98M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 114M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985739687\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared         13  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "24535 compared\t13 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 568.32\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AC_EH_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:11:04 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 13755\n",[m
[32m+[m[32m      "total seq in db2: 18337\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 12M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 112M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985900866\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared        128  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "18337 compared\t128 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 302.58\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AS_EH_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:11:47 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 24535\n",[m
[32m+[m[32m      "total seq in db2: 18337\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 16M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 100M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 117M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985269016\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........    20000  finished\n",[m
[32m+[m[32m      "..........        0  compared         69  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "18337 compared\t69 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1146.57\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AS_AC_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:14:23 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 24535\n",[m
[32m+[m[32m      "total seq in db2: 13755\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 13M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 114M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985713868\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........    20000  finished\n",[m
[32m+[m[32m      "..........        0  compared         60  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "13755 compared\t60 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1368.23\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/EH_AC_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:17:35 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 18337\n",[m
[32m+[m[32m      "total seq in db2: 13755\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 12M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 112M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985961999\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared        828  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "13755 compared\t828 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1651.21\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/EH_AS_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:21:22 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 18337\n",[m
[32m+[m[32m      "total seq in db2: 24535\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 17M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 117M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985355968\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared         81  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "24535 compared\t81 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 2545.62\n",[m
[32m+[m[32m      "bash: \n",[m
[32m+[m[32m      "for i in AC_CpG_200bp.fasta; do\n",[m
[32m+[m[32m      "    cd-hit-est-2d -i /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2 /workspace/cfngle/results-data/AC -o /workspace/cfngle/results-data/cd-hit/EH_CpG_200bp.fastacd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m      "done\n",[m
[32m+[m[32m      ": No such file or directory\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "127",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### CD-HIT ####\n",[m
[32m+[m[32m    "# clustering sequences with cd-hit\n",[m
[32m+[m[32m    "cdhit_opt=\"-p 1 -c 0.85 -n 6 -T 8 -M 8000\"\n",[m
[32m+[m[32m    "cdhit_nmsfx=\"_85\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# AC\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# AS\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# EH\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loop test\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "for i in $seq_200bp; do\n",[m
[32m+[m[32m    "    cd-hit-est-2d -i ${path_results}$i -i2 ${path_results}AC -o ${path_results}cd-hit/${i}cd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "2bf8e06c-ab45-472d-b55d-0384f38d0bcd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### BOWTIE2 ##### \n",[m
[32m+[m[32m    "for i in \n",[m
[32m+[m[32m    "bowtie2 -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_results}EH_CpG_200bp.fasta -S ${path_results}ZF_EH_200_bt2_N_1.sam -N 1"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}EH_CpG_200bp.fasta > ${path_results}ZF_EH_200_minimap.sam "[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/01a_alignments-v1.1s.ipynb b/01a_alignments-v1.1s.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..3044509[m
[1m--- /dev/null[m
[1m+++ b/01a_alignments-v1.1s.ipynb[m
[36m@@ -0,0 +1,433 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 19,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Currently Loaded Modulefiles:\n",[m
[32m+[m[32m      " 1) \u001b[46mpowerPlant/core\u001b[0m    5) \u001b[46mSlurm/21.08.8-2\u001b[0m      9) bowtie2/2.3.4.3  \n",[m
[32m+[m[32m      " 2) texlive/20230914   6) perlbrew/0.76       10) minimap2/2.22    \n",[m
[32m+[m[32m      " 3) pandoc/1.19.2      7) perl/5.36.0         11) cd-hit/4.6.1     \n",[m
[32m+[m[32m      " 4) git/2.21.0         8) slurm-utils/latest  \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Key:\n",[m
[32m+[m[32m      "\u001b[46msticky\u001b[0m  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "module load cd-hit\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# checking active \n",[m
[32m+[m[32m    "# module list"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 41,[m
[32m+[m[32m   "id": "3eec4422-fd71-4360-90d1-1fe9b4aaddfd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "# 200 bp sequences\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp.fasta\" \"AS_CpG_200bp.fasta\" \"EH_CpG_200bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp.fasta\" \"AS_CpG_100bp.fasta\" \"EH_CpG_100bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "n=${#seq_200bp[@]}\n",[m
[32m+[m[32m    "for i in ${seq_200bp[@]}; do\n",[m
[32m+[m[32m    "    echo $i\n",[m
[32m+[m[32m    "    echo $n\n",[m
[32m+[m[32m    "    echo \"${seq_200bp[n]}\"\n",[m
[32m+[m[32m    "    n=$((n-1))\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 40,[m
[32m+[m[32m   "id": "e6b03971-a762-4410-9d0c-7ea102ede3a4",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AC_AS_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:09:47 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 13755\n",[m
[32m+[m[32m      "total seq in db2: 24535\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 14M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 98M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 114M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985739687\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared         13  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "24535 compared\t13 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 568.32\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AC_EH_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:11:04 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 13755\n",[m
[32m+[m[32m      "total seq in db2: 18337\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 12M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 112M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985900866\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared        128  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "18337 compared\t128 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 302.58\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AS_EH_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:11:47 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 24535\n",[m
[32m+[m[32m      "total seq in db2: 18337\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 16M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 100M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 117M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985269016\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........    20000  finished\n",[m
[32m+[m[32m      "..........        0  compared         69  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "18337 compared\t69 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1146.57\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/AS_AC_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:14:23 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 24535\n",[m
[32m+[m[32m      "total seq in db2: 13755\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 13M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 114M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985713868\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........    20000  finished\n",[m
[32m+[m[32m      "..........        0  compared         60  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "13755 compared\t60 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1368.23\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AC_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/EH_AC_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:17:35 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 18337\n",[m
[32m+[m[32m      "total seq in db2: 13755\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 635 and 200\n",[m
[32m+[m[32m      "Total letters: 3867239\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 12M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 112M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985961999\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared        828  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "13755 compared\t828 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 1651.21\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "Program: CD-HIT, V4.6 (+OpenMP), Jun 26 2013, 16:45:20\n",[m
[32m+[m[32m      "Command: cd-hit-est-2d -i\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/AS_CpG_200bp.fasta -o\n",[m
[32m+[m[32m      "         /workspace/cfngle/results-data/cd-hit/EH_AS_cd-hit_85.fasta\n",[m
[32m+[m[32m      "         -p 1 -c 0.85 -n 6 -T 8 -M 8000\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Started: Fri Feb  9 13:21:22 2024\n",[m
[32m+[m[32m      "================================================================\n",[m
[32m+[m[32m      "                            Output                              \n",[m
[32m+[m[32m      "----------------------------------------------------------------\n",[m
[32m+[m[32m      "total seq in db1: 18337\n",[m
[32m+[m[32m      "total seq in db2: 24535\n",[m
[32m+[m[32m      "longest and shortest : 941 and 200\n",[m
[32m+[m[32m      "Total letters: 6258566\n",[m
[32m+[m[32m      "Sequences have been sorted\n",[m
[32m+[m[32m      "longest and shortest : 579 and 200\n",[m
[32m+[m[32m      "Total letters: 7326339\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Approximated minimal memory consumption:\n",[m
[32m+[m[32m      "Sequence        : 17M\n",[m
[32m+[m[32m      "Buffer          : 8 X 12M = 99M\n",[m
[32m+[m[32m      "Table           : 2 X 0M = 0M\n",[m
[32m+[m[32m      "Miscellaneous   : 0M\n",[m
[32m+[m[32m      "Total           : 117M\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Table limit with the given memory limit:\n",[m
[32m+[m[32m      "Max number of representatives: 4000000\n",[m
[32m+[m[32m      "Max number of word counting entries: 985355968\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "..........    10000  finished\n",[m
[32m+[m[32m      "..........        0  compared         81  clusters\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "24535 compared\t81 clustered\n",[m
[32m+[m[32m      "writing non-redundant sequences from db2\n",[m
[32m+[m[32m      "writing clustering information\n",[m
[32m+[m[32m      "program completed !\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Total CPU time 2545.62\n",[m
[32m+[m[32m      "bash: \n",[m
[32m+[m[32m      "for i in AC_CpG_200bp.fasta; do\n",[m
[32m+[m[32m      "    cd-hit-est-2d -i /workspace/cfngle/results-data/EH_CpG_200bp.fasta -i2 /workspace/cfngle/results-data/AC -o /workspace/cfngle/results-data/cd-hit/EH_CpG_200bp.fastacd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m      "done\n",[m
[32m+[m[32m      ": No such file or directory\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "",[m
[32m+[m[32m     "evalue": "127",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### CD-HIT ####\n",[m
[32m+[m[32m    "# clustering sequences with cd-hit\n",[m
[32m+[m[32m    "cdhit_opt=\"-p 1 -c 0.75 -n 4 -T 0 -M 0\"\n",[m
[32m+[m[32m    "cdhit_nmsfx=\"_75\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# AC\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# AS\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# EH\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loop test\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "for i in $seq_200bp; do\n",[m
[32m+[m[32m    "    cd-hit-est-2d -i ${path_results}$i -i2 ${path_results}AC -o ${path_results}cd-hit/${i}cd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "2bf8e06c-ab45-472d-b55d-0384f38d0bcd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### BOWTIE2 ##### \n",[m
[32m+[m[32m    "#for i in \n",[m
[32m+[m[32m    "#bowtie2 -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_results}EH_CpG_200bp.fasta -S ${path_results}ZF_EH_200_bt2_N_1.sam -N 1"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 42,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[0]} > ${path_results}minimap2/ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[0]} > ${path_results}minimap2/ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[1]} > ${path_results}minimap2/ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[1]} > ${path_results}minimap2/ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[2]} > ${path_results}minimap2/ZF_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[2]} > ${path_results}minimap2/ZF_EH_100_minimap.sam \n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "ef724657-b0c3-4a76-b119-afe8bcbef7ad",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## view how many alignments alignments\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_200_minimap.sam\n",[m
[32m+[m[32m    "view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_100_minimap.sam"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/01a_alignments-v1.2.ipynb b/01a_alignments-v1.2.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..e9af573[m
[1m--- /dev/null[m
[1m+++ b/01a_alignments-v1.2.ipynb[m
[36m@@ -0,0 +1,549 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Currently Loaded Modulefiles:\n",[m
[32m+[m[32m      " 1) \u001b[46mpowerPlant/core\u001b[0m    5) \u001b[46mSlurm/21.08.8-2\u001b[0m      9) bowtie2/2.3.4.3  \n",[m
[32m+[m[32m      " 2) texlive/20230914   6) perlbrew/0.76       10) minimap2/2.22    \n",[m
[32m+[m[32m      " 3) pandoc/1.19.2      7) perl/5.36.0         11) cd-hit/4.6.1     \n",[m
[32m+[m[32m      " 4) git/2.21.0         8) slurm-utils/latest  12) samtools/1.16    \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Key:\n",[m
[32m+[m[32m      "\u001b[46msticky\u001b[0m  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "module load cd-hit\n",[m
[32m+[m[32m    "module load samtools\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# checking active \n",[m
[32m+[m[32m    "module list"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "3eec4422-fd71-4360-90d1-1fe9b4aaddfd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp.fasta\" \"AS_CpG_100bp.fasta\" \"EH_CpG_100bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp.fasta\" \"AS_CpG_200bp.fasta\" \"EH_CpG_200bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp.fasta\" \"AS_CpG_500bp.fasta\" \"EH_CpG_500bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp.fasta\" \"AS_CpG_1000bp.fasta\" \"EH_CpG_1000bp.fasta\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "cd4afcc3-a0e0-4fae-a616-e9b8dd291e89",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### CD-HIT ####\n",[m
[32m+[m[32m    "# clustering sequences with cd-hit\n",[m
[32m+[m[32m    "cdhit_opt=\"-p 1 -c 0.75 -n 4 -T 0 -M 0\"\n",[m
[32m+[m[32m    "cdhit_nmsfx=\"_75\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# AC\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# AS\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# EH\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loop test\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "for i in $seq_200bp; do\n",[m
[32m+[m[32m    "    cd-hit-est-2d -i ${path_results}$i -i2 ${path_results}AC -o ${path_results}cd-hit/${i}cd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "markdown",[m
[32m+[m[32m   "id": "c013d007-0f76-40fe-ac85-a0d3feeff46e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## BOWTIE2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## modules\n",[m
[32m+[m[32m    "module load bowtie\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/bowtie2/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp\" \"AS_CpG_100bp\" \"EH_CpG_100bp\")\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp\" \"AS_CpG_200bp\" \"EH_CpG_200bp\")\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp\" \"AS_CpG_500bp\" \"EH_CpG_500bp\")\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp\" \"AS_CpG_1000bp\" \"EH_CpG_1000bp\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# file ending\n",[m
[32m+[m[32m    "suffix=\".fasta\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# arguments\n",[m
[32m+[m[32m    "bowtie2_args=\"--very-sensitive --local -p 8\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for (( i=0; i<${#seq_100bp[@]}; i++ )); \n",[m
[32m+[m[32m    "do \n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}ZF_${seq_100bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}ZF_${seq_200bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}ZF_${seq_500bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 42,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[0]} > ${path_results}minimap2/ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[0]} > ${path_results}minimap2/ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[1]} > ${path_results}minimap2/ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[1]} > ${path_results}minimap2/ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[2]} > ${path_results}minimap2/ZF_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[2]} > ${path_results}minimap2/ZF_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"AC/GCF_902167405.1_gadMor3.0_genomic.fasta\"\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AC_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AC_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AC_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AC_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AC_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AC_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"Chrysophrys_auratus.v.1.0.all.male.map.fasta\"\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AS_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AS_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AS_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AS_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AS_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AS_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"fMerMel2.1_cnag1.scaffolds.fa\"\n",[m
[32m+[m[32m    "#EH\\\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/EH_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/EH_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/EH_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/EH_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/EH_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/EH_EH_100_minimap.sam \n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "id": "ef724657-b0c3-4a76-b119-afe8bcbef7ad",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "173\n",[m
[32m+[m[32m      "415\n",[m
[32m+[m[32m      "1391\n",[m
[32m+[m[32m      "2680\n",[m
[32m+[m[32m      "265\n",[m
[32m+[m[32m      "497\n",[m
[32m+[m[32m      "1081\n",[m
[32m+[m[32m      "1975\n",[m
[32m+[m[32m      "456\n",[m
[32m+[m[32m      "926\n",[m
[32m+[m[32m      "2863\n",[m
[32m+[m[32m      "5472\n",[m
[32m+[m[32m      "16349\n",[m
[32m+[m[32m      "15460\n",[m
[32m+[m[32m      "14918\n",[m
[32m+[m[32m      "14480\n",[m
[32m+[m[32m      "1397\n",[m
[32m+[m[32m      "2073\n",[m
[32m+[m[32m      "3218\n",[m
[32m+[m[32m      "4906\n",[m
[32m+[m[32m      "10165\n",[m
[32m+[m[32m      "12835\n",[m
[32m+[m[32m      "18254\n",[m
[32m+[m[32m      "25553\n",[m
[32m+[m[32m      "844\n",[m
[32m+[m[32m      "1231\n",[m
[32m+[m[32m      "2149\n",[m
[32m+[m[32m      "3650\n",[m
[32m+[m[32m      "28688\n",[m
[32m+[m[32m      "24797\n",[m
[32m+[m[32m      "24642\n",[m
[32m+[m[32m      "24530\n",[m
[32m+[m[32m      "2261\n",[m
[32m+[m[32m      "3698\n",[m
[32m+[m[32m      "5642\n",[m
[32m+[m[32m      "8460\n",[m
[32m+[m[32m      "5126\n",[m
[32m+[m[32m      "7118\n",[m
[32m+[m[32m      "12052\n",[m
[32m+[m[32m      "18420\n",[m
[32m+[m[32m      "1588\n",[m
[32m+[m[32m      "2508\n",[m
[32m+[m[32m      "4191\n",[m
[32m+[m[32m      "6812\n",[m
[32m+[m[32m      "24022\n",[m
[32m+[m[32m      "21442\n",[m
[32m+[m[32m      "20341\n",[m
[32m+[m[32m      "19491\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## view how many alignments (multiple alignments)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##EH\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_1000_minimap.sam"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "id": "05689c53-68b5-42de-bd55-bf1a229e93b6",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "107\n",[m
[32m+[m[32m      "207\n",[m
[32m+[m[32m      "515\n",[m
[32m+[m[32m      "887\n",[m
[32m+[m[32m      "158\n",[m
[32m+[m[32m      "280\n",[m
[32m+[m[32m      "543\n",[m
[32m+[m[32m      "896\n",[m
[32m+[m[32m      "268\n",[m
[32m+[m[32m      "430\n",[m
[32m+[m[32m      "970\n",[m
[32m+[m[32m      "1662\n",[m
[32m+[m[32m      "13879\n",[m
[32m+[m[32m      "13755\n",[m
[32m+[m[32m      "13720\n",[m
[32m+[m[32m      "13641\n",[m
[32m+[m[32m      "802\n",[m
[32m+[m[32m      "1165\n",[m
[32m+[m[32m      "1861\n",[m
[32m+[m[32m      "2809\n",[m
[32m+[m[32m      "6253\n",[m
[32m+[m[32m      "7767\n",[m
[32m+[m[32m      "10012\n",[m
[32m+[m[32m      "12323\n",[m
[32m+[m[32m      "514\n",[m
[32m+[m[32m      "768\n",[m
[32m+[m[32m      "1277\n",[m
[32m+[m[32m      "2051\n",[m
[32m+[m[32m      "27538\n",[m
[32m+[m[32m      "24535\n",[m
[32m+[m[32m      "24489\n",[m
[32m+[m[32m      "24410\n",[m
[32m+[m[32m      "1252\n",[m
[32m+[m[32m      "1768\n",[m
[32m+[m[32m      "2666\n",[m
[32m+[m[32m      "3912\n",[m
[32m+[m[32m      "3888\n",[m
[32m+[m[32m      "5192\n",[m
[32m+[m[32m      "7301\n",[m
[32m+[m[32m      "9543\n",[m
[32m+[m[32m      "958\n",[m
[32m+[m[32m      "1467\n",[m
[32m+[m[32m      "2493\n",[m
[32m+[m[32m      "3817\n",[m
[32m+[m[32m      "19904\n",[m
[32m+[m[32m      "18329\n",[m
[32m+[m[32m      "18192\n",[m
[32m+[m[32m      "18049\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# view single alignments\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##EH\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_1000_minimap.sam | wc -l"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "id": "3eafa8c1-2bc0-4d30-ad71-4e09ca7bbb37",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[M::mm_idx_gen::32.235*1.63] collected minimizers\n",[m
[32m+[m[32m      "[M::mm_idx_gen::40.264*1.89] sorted minimizers\n",[m
[32m+[m[32m      "[M::main::40.266*1.89] loaded/built the index for 1923 target sequence(s)\n",[m
[32m+[m[32m      "[M::mm_mapopt_update::41.644*1.86] mid_occ = 848\n",[m
[32m+[m[32m      "[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1923\n",[m
[32m+[m[32m      "[M::mm_idx_stat::42.496*1.84] distinct minimizers: 66057654 (43.51% are singletons); average occurrences: 4.867; average spacing: 5.223; total length: 1679203469\n",[m
[32m+[m[32m      "[M::worker_pipeline::66.027*2.21] mapped 16751 sequences\n",[m
[32m+[m[32m      "[M::main] Version: 2.22-r1101\n",[m
[32m+[m[32m      "[M::main] CMD: minimap2 -ax map-ont /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna /workspace/cfngle/results-data/sequences/EH_CpG_5000bp.fasta\n",[m
[32m+[m[32m      "[M::main] Real time: 66.285 sec; CPU: 146.265 sec; Peak RSS: 6.608 GB\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}EH_CpG_5000bp.fasta > ${path_results}minimap2/ZF_EH_5000_minimap.sam"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "id": "6a2dff7d-0080-4bfd-909b-726e2f3eefd3",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "5557\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_5000_minimap.sam | wc -l"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "f18465a1-e736-45c5-8a1a-9f8c8355800b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MAFFT ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## modules\n",[m
[32m+[m[32m    "module load mafft\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/mafft/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# arguments\n",[m
[32m+[m[32m    "mafft_args=\"--auto --thread -1\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_100bp.fasta > ${path_results}AC_AS_EH_CpG_100bp.fasta \n",[m
[32m+[m[32m    "mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_200bp.fasta > ${path_results}AC_AS_EH_CpG_200bp.fasta \n",[m
[32m+[m[32m    "mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_500bp.fasta > ${path_results}AC_AS_EH_CpG_500bp.fasta \n",[m
[32m+[m[32m    "mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_1000bp.fasta > ${path_results}AC_AS_EH_CpG_1000bp.fasta "[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/01a_alignments-v1.3.ipynb b/01a_alignments-v1.3.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..567bd21[m
[1m--- /dev/null[m
[1m+++ b/01a_alignments-v1.3.ipynb[m
[36m@@ -0,0 +1,1067 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Currently Loaded Modulefiles:\n",[m
[32m+[m[32m      " 1) \u001b[46mpowerPlant/core\u001b[0m    5) \u001b[46mSlurm/21.08.8-2\u001b[0m      9) bowtie2/2.3.4.3  \n",[m
[32m+[m[32m      " 2) texlive/20230914   6) perlbrew/0.76       10) minimap2/2.22    \n",[m
[32m+[m[32m      " 3) pandoc/1.19.2      7) perl/5.36.0         11) cd-hit/4.6.1     \n",[m
[32m+[m[32m      " 4) git/2.21.0         8) slurm-utils/latest  12) samtools/1.16    \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Key:\n",[m
[32m+[m[32m      "\u001b[46msticky\u001b[0m  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "module load cd-hit\n",[m
[32m+[m[32m    "module load samtools\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# checking active \n",[m
[32m+[m[32m    "module list"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 15,[m
[32m+[m[32m   "id": "3eec4422-fd71-4360-90d1-1fe9b4aaddfd",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp.fasta\" \"AS_CpG_100bp.fasta\" \"EH_CpG_100bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp.fasta\" \"AS_CpG_200bp.fasta\" \"EH_CpG_200bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp.fasta\" \"AS_CpG_500bp.fasta\" \"EH_CpG_500bp.fasta\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp.fasta\" \"AS_CpG_1000bp.fasta\" \"EH_CpG_1000bp.fasta\")\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "cd4afcc3-a0e0-4fae-a616-e9b8dd291e89",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### CD-HIT ####\n",[m
[32m+[m[32m    "# clustering sequences with cd-hit\n",[m
[32m+[m[32m    "cdhit_opt=\"-p 1 -c 0.75 -n 4 -T 0 -M 0\"\n",[m
[32m+[m[32m    "cdhit_nmsfx=\"_75\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# AC\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# AS\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "# EH\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "cd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loop test\n",[m
[32m+[m[32m    ": << 'COMMENT'\n",[m
[32m+[m[32m    "for i in $seq_200bp; do\n",[m
[32m+[m[32m    "    cd-hit-est-2d -i ${path_results}$i -i2 ${path_results}AC -o ${path_results}cd-hit/${i}cd-hit_AC.fasta -c 0.9 -p 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "COMMENT"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 45,[m
[32m+[m[32m   "id": "02f20b45-2815-4c8f-83e8-e57cafa7b3a1",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "13900 reads; of these:\n",[m
[32m+[m[32m      "  13900 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    12449 (89.56%) aligned 0 times\n",[m
[32m+[m[32m      "    487 (3.50%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    964 (6.94%) aligned >1 times\n",[m
[32m+[m[32m      "10.44% overall alignment rate\n",[m
[32m+[m[32m      "13755 reads; of these:\n",[m
[32m+[m[32m      "  13755 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    11497 (83.58%) aligned 0 times\n",[m
[32m+[m[32m      "    542 (3.94%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    1716 (12.48%) aligned >1 times\n",[m
[32m+[m[32m      "16.42% overall alignment rate\n",[m
[32m+[m[32m      "13720 reads; of these:\n",[m
[32m+[m[32m      "  13720 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    10136 (73.88%) aligned 0 times\n",[m
[32m+[m[32m      "    512 (3.73%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    3072 (22.39%) aligned >1 times\n",[m
[32m+[m[32m      "26.12% overall alignment rate\n",[m
[32m+[m[32m      "13641 reads; of these:\n",[m
[32m+[m[32m      "  13641 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    8586 (62.94%) aligned 0 times\n",[m
[32m+[m[32m      "    544 (3.99%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    4511 (33.07%) aligned >1 times\n",[m
[32m+[m[32m      "37.06% overall alignment rate\n",[m
[32m+[m[32m      "27560 reads; of these:\n",[m
[32m+[m[32m      "  27560 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    26269 (95.32%) aligned 0 times\n",[m
[32m+[m[32m      "    643 (2.33%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    648 (2.35%) aligned >1 times\n",[m
[32m+[m[32m      "4.68% overall alignment rate\n",[m
[32m+[m[32m      "24535 reads; of these:\n",[m
[32m+[m[32m      "  24535 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    22832 (93.06%) aligned 0 times\n",[m
[32m+[m[32m      "    700 (2.85%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    1003 (4.09%) aligned >1 times\n",[m
[32m+[m[32m      "6.94% overall alignment rate\n",[m
[32m+[m[32m      "24489 reads; of these:\n",[m
[32m+[m[32m      "  24489 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    21986 (89.78%) aligned 0 times\n",[m
[32m+[m[32m      "    794 (3.24%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    1709 (6.98%) aligned >1 times\n",[m
[32m+[m[32m      "10.22% overall alignment rate\n",[m
[32m+[m[32m      "24410 reads; of these:\n",[m
[32m+[m[32m      "  24410 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    21021 (86.12%) aligned 0 times\n",[m
[32m+[m[32m      "    919 (3.76%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    2470 (10.12%) aligned >1 times\n",[m
[32m+[m[32m      "13.88% overall alignment rate\n",[m
[32m+[m[32m      "20018 reads; of these:\n",[m
[32m+[m[32m      "  20018 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    16588 (82.87%) aligned 0 times\n",[m
[32m+[m[32m      "    792 (3.96%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    2638 (13.18%) aligned >1 times\n",[m
[32m+[m[32m      "17.13% overall alignment rate\n",[m
[32m+[m[32m      "18337 reads; of these:\n",[m
[32m+[m[32m      "  18337 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    13870 (75.64%) aligned 0 times\n",[m
[32m+[m[32m      "    782 (4.26%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    3685 (20.10%) aligned >1 times\n",[m
[32m+[m[32m      "24.36% overall alignment rate\n",[m
[32m+[m[32m      "18193 reads; of these:\n",[m
[32m+[m[32m      "  18193 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    12046 (66.21%) aligned 0 times\n",[m
[32m+[m[32m      "    777 (4.27%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    5370 (29.52%) aligned >1 times\n",[m
[32m+[m[32m      "33.79% overall alignment rate\n",[m
[32m+[m[32m      "18049 reads; of these:\n",[m
[32m+[m[32m      "  18049 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    10311 (57.13%) aligned 0 times\n",[m
[32m+[m[32m      "    815 (4.52%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    6923 (38.36%) aligned >1 times\n",[m
[32m+[m[32m      "42.87% overall alignment rate\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## BOWTIE2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## modules\n",[m
[32m+[m[32m    "module load bowtie\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/bowtie2/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp\" \"AS_CpG_100bp\" \"EH_CpG_100bp\")\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp\" \"AS_CpG_200bp\" \"EH_CpG_200bp\")\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp\" \"AS_CpG_500bp\" \"EH_CpG_500bp\")\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp\" \"AS_CpG_1000bp\" \"EH_CpG_1000bp\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# file ending\n",[m
[32m+[m[32m    "suffix=\".fasta\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# arguments\n",[m
[32m+[m[32m    "bowtie2_args=\"--very-sensitive --local -p 8\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## rgenome ZF\n",[m
[32m+[m[32m    "echo \"ZF\"\n",[m
[32m+[m[32m    "for (( i=0; i<${#seq_100bp[@]}; i++ )); \n",[m
[32m+[m[32m    "do \n",[m
[32m+[m[32m    "   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}ZF_${seq_100bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}ZF_${seq_200bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}ZF_${seq_500bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## rgenome AC\n",[m
[32m+[m[32m    "echo \"AC\"\n",[m
[32m+[m[32m    "for (( i=0; i<${#seq_100bp[@]}; i++ )); \n",[m
[32m+[m[32m    "do \n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}AC_${seq_100bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}AC_${seq_200bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}AC_${seq_500bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## rgenome AS\n",[m
[32m+[m[32m    "echo \"AS\"\n",[m
[32m+[m[32m    "for (( i=0; i<${#seq_100bp[@]}; i++ )); \n",[m
[32m+[m[32m    "do \n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}AS_${seq_100bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}AS_${seq_200bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}AS_${seq_500bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "done\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## rgenome EH\n",[m
[32m+[m[32m    "echo \"EH\"\n",[m
[32m+[m[32m    "for (( i=0; i<${#seq_100bp[@]}; i++ )); \n",[m
[32m+[m[32m    "do \n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}EH_${seq_100bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}EH_${seq_200bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}EH_${seq_500bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 46,[m
[32m+[m[32m   "id": "2183866e-6182-4acc-985b-0a4a03276aa4",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Settings:\n",[m
[32m+[m[32m      "  Output files: \"/workspace/cfngle/raw-data/AS/bowtie2-index/AS_bowtie2.*.bt2\"\n",[m
[32m+[m[32m      "  Line rate: 6 (line is 64 bytes)\n",[m
[32m+[m[32m      "  Lines per side: 1 (side is 64 bytes)\n",[m
[32m+[m[32m      "  Offset rate: 4 (one in 16)\n",[m
[32m+[m[32m      "  FTable chars: 10\n",[m
[32m+[m[32m      "  Strings: unpacked\n",[m
[32m+[m[32m      "  Max bucket size: default\n",[m
[32m+[m[32m      "  Max bucket size, sqrt multiplier: default\n",[m
[32m+[m[32m      "  Max bucket size, len divisor: 4\n",[m
[32m+[m[32m      "  Difference-cover sample period: 1024\n",[m
[32m+[m[32m      "  Endianness: little\n",[m
[32m+[m[32m      "  Actual local endianness: little\n",[m
[32m+[m[32m      "  Sanity checking: disabled\n",[m
[32m+[m[32m      "  Assertions: disabled\n",[m
[32m+[m[32m      "  Random seed: 0\n",[m
[32m+[m[32m      "  Sizeofs: void*:8, int:4, long:8, size_t:8\n",[m
[32m+[m[32m      "Input files DNA, FASTA:\n",[m
[32m+[m[32m      "  /workspace/cfngle/raw-data/AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta\n",[m
[32m+[m[32m      "Building a SMALL index\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:06\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:04\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 176668623\n",[m
[32m+[m[32m      "Using parameters --bmax 132501468 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 132501468 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:15\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:04\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:07\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.06674e+08 (target: 132501467)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 706674494 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:07:18\n",[m
[32m+[m[32m      "Returning block of 706674495 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 208442737\n",[m
[32m+[m[32m      "fchr[G]: 353300318\n",[m
[32m+[m[32m      "fchr[T]: 498179311\n",[m
[32m+[m[32m      "fchr[$]: 706674494\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 240273095 bytes to primary EBWT file: /workspace/cfngle/raw-data/AS/bowtie2-index/AS_bowtie2.1.bt2\n",[m
[32m+[m[32m      "Wrote 176668628 bytes to secondary EBWT file: /workspace/cfngle/raw-data/AS/bowtie2-index/AS_bowtie2.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 706674494\n",[m
[32m+[m[32m      "    bwtLen: 706674495\n",[m
[32m+[m[32m      "    sz: 176668624\n",[m
[32m+[m[32m      "    bwtSz: 176668624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44167156\n",[m
[32m+[m[32m      "    offsSz: 176668624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3680597\n",[m
[32m+[m[32m      "    numLines: 3680597\n",[m
[32m+[m[32m      "    ebwtTotLen: 235558208\n",[m
[32m+[m[32m      "    ebwtTotSz: 235558208\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 0\n",[m
[32m+[m[32m      "Total time for call to driver() for forward index: 00:09:46\n",[m
[32m+[m[32m      "Reading reference sizes\n",[m
[32m+[m[32m      "  Time reading reference sizes: 00:00:03\n",[m
[32m+[m[32m      "Calculating joined length\n",[m
[32m+[m[32m      "Writing header\n",[m
[32m+[m[32m      "Reserving space for joined string\n",[m
[32m+[m[32m      "Joining reference sequences\n",[m
[32m+[m[32m      "  Time to join reference sequences: 00:00:04\n",[m
[32m+[m[32m      "  Time to reverse reference sequence: 00:00:00\n",[m
[32m+[m[32m      "bmax according to bmaxDivN setting: 176668623\n",[m
[32m+[m[32m      "Using parameters --bmax 132501468 --dcv 1024\n",[m
[32m+[m[32m      "  Doing ahead-of-time memory usage test\n",[m
[32m+[m[32m      "  Passed!  Constructing with these parameters: --bmax 132501468 --dcv 1024\n",[m
[32m+[m[32m      "Constructing suffix-array element generator\n",[m
[32m+[m[32m      "Building DifferenceCoverSample\n",[m
[32m+[m[32m      "  Building sPrime\n",[m
[32m+[m[32m      "  Building sPrimeOrder\n",[m
[32m+[m[32m      "  V-Sorting samples\n",[m
[32m+[m[32m      "  V-Sorting samples time: 00:00:15\n",[m
[32m+[m[32m      "  Allocating rank array\n",[m
[32m+[m[32m      "  Ranking v-sort output\n",[m
[32m+[m[32m      "  Ranking v-sort output time: 00:00:04\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks\n",[m
[32m+[m[32m      "  Invoking Larsson-Sadakane on ranks time: 00:00:07\n",[m
[32m+[m[32m      "  Sanity-checking and returning\n",[m
[32m+[m[32m      "Building samples\n",[m
[32m+[m[32m      "Reserving space for 12 sample suffixes\n",[m
[32m+[m[32m      "Generating random suffixes\n",[m
[32m+[m[32m      "QSorting 12 sample offsets, eliminating duplicates\n",[m
[32m+[m[32m      "QSorting sample offsets, eliminating duplicates time: 00:00:00\n",[m
[32m+[m[32m      "Multikey QSorting 12 samples\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Multikey QSorting samples time: 00:00:00\n",[m
[32m+[m[32m      "Calculating bucket sizes\n",[m
[32m+[m[32m      "Splitting and merging\n",[m
[32m+[m[32m      "  Splitting and merging time: 00:00:00\n",[m
[32m+[m[32m      "Avg bucket size: 7.06674e+08 (target: 132501467)\n",[m
[32m+[m[32m      "Converting suffix-array elements to index image\n",[m
[32m+[m[32m      "Allocating ftab, absorbFtab\n",[m
[32m+[m[32m      "Entering Ebwt loop\n",[m
[32m+[m[32m      "Getting block 1 of 1\n",[m
[32m+[m[32m      "  No samples; assembling all-inclusive block\n",[m
[32m+[m[32m      "  Sorting block of length 706674494 for bucket 1\n",[m
[32m+[m[32m      "  (Using difference cover)\n",[m
[32m+[m[32m      "  Sorting block time: 00:07:05\n",[m
[32m+[m[32m      "Returning block of 706674495 for bucket 1\n",[m
[32m+[m[32m      "Exited Ebwt loop\n",[m
[32m+[m[32m      "fchr[A]: 0\n",[m
[32m+[m[32m      "fchr[C]: 208442737\n",[m
[32m+[m[32m      "fchr[G]: 353300318\n",[m
[32m+[m[32m      "fchr[T]: 498179311\n",[m
[32m+[m[32m      "fchr[$]: 706674494\n",[m
[32m+[m[32m      "Exiting Ebwt::buildToDisk()\n",[m
[32m+[m[32m      "Returning from initFromVector\n",[m
[32m+[m[32m      "Wrote 240273095 bytes to primary EBWT file: /workspace/cfngle/raw-data/AS/bowtie2-index/AS_bowtie2.rev.1.bt2\n",[m
[32m+[m[32m      "Wrote 176668628 bytes to secondary EBWT file: /workspace/cfngle/raw-data/AS/bowtie2-index/AS_bowtie2.rev.2.bt2\n",[m
[32m+[m[32m      "Re-opening _in1 and _in2 as input streams\n",[m
[32m+[m[32m      "Returning from Ebwt constructor\n",[m
[32m+[m[32m      "Headers:\n",[m
[32m+[m[32m      "    len: 706674494\n",[m
[32m+[m[32m      "    bwtLen: 706674495\n",[m
[32m+[m[32m      "    sz: 176668624\n",[m
[32m+[m[32m      "    bwtSz: 176668624\n",[m
[32m+[m[32m      "    lineRate: 6\n",[m
[32m+[m[32m      "    offRate: 4\n",[m
[32m+[m[32m      "    offMask: 0xfffffff0\n",[m
[32m+[m[32m      "    ftabChars: 10\n",[m
[32m+[m[32m      "    eftabLen: 20\n",[m
[32m+[m[32m      "    eftabSz: 80\n",[m
[32m+[m[32m      "    ftabLen: 1048577\n",[m
[32m+[m[32m      "    ftabSz: 4194308\n",[m
[32m+[m[32m      "    offsLen: 44167156\n",[m
[32m+[m[32m      "    offsSz: 176668624\n",[m
[32m+[m[32m      "    lineSz: 64\n",[m
[32m+[m[32m      "    sideSz: 64\n",[m
[32m+[m[32m      "    sideBwtSz: 48\n",[m
[32m+[m[32m      "    sideBwtLen: 192\n",[m
[32m+[m[32m      "    numSides: 3680597\n",[m
[32m+[m[32m      "    numLines: 3680597\n",[m
[32m+[m[32m      "    ebwtTotLen: 235558208\n",[m
[32m+[m[32m      "    ebwtTotSz: 235558208\n",[m
[32m+[m[32m      "    color: 0\n",[m
[32m+[m[32m      "    reverse: 1\n",[m
[32m+[m[32m      "Total time for backward call to driver() for mirror index: 00:09:30\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### Bowtie2 indexing ####\n",[m
[32m+[m[32m    "## modules\n",[m
[32m+[m[32m    "module load bowtie\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/bowtie2/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp\" \"AS_CpG_100bp\" \"EH_CpG_100bp\")\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp\" \"AS_CpG_200bp\" \"EH_CpG_200bp\")\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp\" \"AS_CpG_500bp\" \"EH_CpG_500bp\")\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp\" \"AS_CpG_1000bp\" \"EH_CpG_1000bp\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## ZF\n",[m
[32m+[m[32m    "#bowtie2-build ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2\n",[m
[32m+[m[32m    "## AC\n",[m
[32m+[m[32m    "#bowtie2-build ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_raw}AC/bowtie2-index/AC_bowtie2\n",[m
[32m+[m[32m    "## AS\n",[m
[32m+[m[32m    "#bowtie2-build ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_raw}AS/bowtie2-index/AS_bowtie2\n",[m
[32m+[m[32m    "## EH\n",[m
[32m+[m[32m    "#bowtie2-build ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_raw}EH/bowtie2-index/EH_bowtie2\n",[m
[32m+[m[32m    "## JM\n",[m
[32m+[m[32m    "#bowtie2-build ${path_raw}JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fna ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 42,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[0]} > ${path_results}minimap2/ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[0]} > ${path_results}minimap2/ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[1]} > ${path_results}minimap2/ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[1]} > ${path_results}minimap2/ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[2]} > ${path_results}minimap2/ZF_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[2]} > ${path_results}minimap2/ZF_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"AC/GCF_902167405.1_gadMor3.0_genomic.fasta\"\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AC_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AC_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AC_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AC_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AC_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AC_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"Chrysophrys_auratus.v.1.0.all.male.map.fasta\"\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AS_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AS_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AS_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AS_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AS_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AS_EH_100_minimap.sam \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "path_rgenome=\"fMerMel2.1_cnag1.scaffolds.fa\"\n",[m
[32m+[m[32m    "#EH\\\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/EH_AC_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/EH_AC_100_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/EH_AS_200_minimap.sam\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/EH_AS_100_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/EH_EH_200_minimap.sam \n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/EH_EH_100_minimap.sam \n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "id": "ef724657-b0c3-4a76-b119-afe8bcbef7ad",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "173\n",[m
[32m+[m[32m      "415\n",[m
[32m+[m[32m      "1391\n",[m
[32m+[m[32m      "2680\n",[m
[32m+[m[32m      "265\n",[m
[32m+[m[32m      "497\n",[m
[32m+[m[32m      "1081\n",[m
[32m+[m[32m      "1975\n",[m
[32m+[m[32m      "456\n",[m
[32m+[m[32m      "926\n",[m
[32m+[m[32m      "2863\n",[m
[32m+[m[32m      "5472\n",[m
[32m+[m[32m      "16349\n",[m
[32m+[m[32m      "15460\n",[m
[32m+[m[32m      "14918\n",[m
[32m+[m[32m      "14480\n",[m
[32m+[m[32m      "1397\n",[m
[32m+[m[32m      "2073\n",[m
[32m+[m[32m      "3218\n",[m
[32m+[m[32m      "4906\n",[m
[32m+[m[32m      "10165\n",[m
[32m+[m[32m      "12835\n",[m
[32m+[m[32m      "18254\n",[m
[32m+[m[32m      "25553\n",[m
[32m+[m[32m      "844\n",[m
[32m+[m[32m      "1231\n",[m
[32m+[m[32m      "2149\n",[m
[32m+[m[32m      "3650\n",[m
[32m+[m[32m      "28688\n",[m
[32m+[m[32m      "24797\n",[m
[32m+[m[32m      "24642\n",[m
[32m+[m[32m      "24530\n",[m
[32m+[m[32m      "2261\n",[m
[32m+[m[32m      "3698\n",[m
[32m+[m[32m      "5642\n",[m
[32m+[m[32m      "8460\n",[m
[32m+[m[32m      "5126\n",[m
[32m+[m[32m      "7118\n",[m
[32m+[m[32m      "12052\n",[m
[32m+[m[32m      "18420\n",[m
[32m+[m[32m      "1588\n",[m
[32m+[m[32m      "2508\n",[m
[32m+[m[32m      "4191\n",[m
[32m+[m[32m      "6812\n",[m
[32m+[m[32m      "24022\n",[m
[32m+[m[32m      "21442\n",[m
[32m+[m[32m      "20341\n",[m
[32m+[m[32m      "19491\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## view how many alignments (multiple alignments)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/ZF_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AC_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/AS_EH_1000_minimap.sam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##EH\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AC_1000_minimap.sam\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_AS_1000_minimap.sam\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_100_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_200_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_500_minimap.sam\n",[m
[32m+[m[32m    "samtools view -c -F 4 /workspace/cfngle/results-data/minimap2/EH_EH_1000_minimap.sam"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 10,[m
[32m+[m[32m   "id": "05689c53-68b5-42de-bd55-bf1a229e93b6",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "107\n",[m
[32m+[m[32m      "207\n",[m
[32m+[m[32m      "515\n",[m
[32m+[m[32m      "887\n",[m
[32m+[m[32m      "158\n",[m
[32m+[m[32m      "280\n",[m
[32m+[m[32m      "543\n",[m
[32m+[m[32m      "896\n",[m
[32m+[m[32m      "268\n",[m
[32m+[m[32m      "430\n",[m
[32m+[m[32m      "970\n",[m
[32m+[m[32m      "1662\n",[m
[32m+[m[32m      "13879\n",[m
[32m+[m[32m      "13755\n",[m
[32m+[m[32m      "13720\n",[m
[32m+[m[32m      "13641\n",[m
[32m+[m[32m      "802\n",[m
[32m+[m[32m      "1165\n",[m
[32m+[m[32m      "1861\n",[m
[32m+[m[32m      "2809\n",[m
[32m+[m[32m      "6253\n",[m
[32m+[m[32m      "7767\n",[m
[32m+[m[32m      "10012\n",[m
[32m+[m[32m      "12323\n",[m
[32m+[m[32m      "514\n",[m
[32m+[m[32m      "768\n",[m
[32m+[m[32m      "1277\n",[m
[32m+[m[32m      "2051\n",[m
[32m+[m[32m      "27538\n",[m
[32m+[m[32m      "24535\n",[m
[32m+[m[32m      "24489\n",[m
[32m+[m[32m      "24410\n",[m
[32m+[m[32m      "1252\n",[m
[32m+[m[32m      "1768\n",[m
[32m+[m[32m      "2666\n",[m
[32m+[m[32m      "3912\n",[m
[32m+[m[32m      "3888\n",[m
[32m+[m[32m      "5192\n",[m
[32m+[m[32m      "7301\n",[m
[32m+[m[32m      "9543\n",[m
[32m+[m[32m      "958\n",[m
[32m+[m[32m      "1467\n",[m
[32m+[m[32m      "2493\n",[m
[32m+[m[32m      "3817\n",[m
[32m+[m[32m      "19904\n",[m
[32m+[m[32m      "18329\n",[m
[32m+[m[32m      "18192\n",[m
[32m+[m[32m      "18049\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# view single alignments\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##ZF\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AC\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##AS\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_EH_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "##EH\n",[m
[32m+[m[32m    "#AC\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AC_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#AS\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_AS_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "#EH\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_100_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_200_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_500_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_EH_1000_minimap.sam | wc -l"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "id": "ce76fb89-78a8-44db-811a-be886dd467cb",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "single alignment hits\n",[m
[32m+[m[32m      "1373\n",[m
[32m+[m[32m      "1461\n",[m
[32m+[m[32m      "4868\n",[m
[32m+[m[32m      "2152\n",[m
[32m+[m[32m      "26351\n",[m
[32m+[m[32m      "multi alignment hits\n",[m
[32m+[m[32m      "5167\n",[m
[32m+[m[32m      "3109\n",[m
[32m+[m[32m      "8031\n",[m
[32m+[m[32m      "4935\n",[m
[32m+[m[32m      "27890\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "module load samtools\n",[m
[32m+[m[32m    "echo \"single alignment hits\"\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_JM_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AC_JM_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/AS_JM_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/EH_JM_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/JM_JM_1000_minimap.sam | wc -l\n",[m
[32m+[m[32m    "echo \"multi alignment hits\"\n",[m
[32m+[m[32m    "samtools view -F 4 /workspace/cfngle/results-data/minimap2/ZF_JM_1000_minimap.sam -c\n",[m
[32m+[m[32m    "samtools view -F 4 /workspace/cfngle/results-data/minimap2/AC_JM_1000_minimap.sam -c\n",[m
[32m+[m[32m    "samtools view -F 4 /workspace/cfngle/results-data/minimap2/AS_JM_1000_minimap.sam -c\n",[m
[32m+[m[32m    "samtools view -F 4 /workspace/cfngle/results-data/minimap2/EH_JM_1000_minimap.sam -c\n",[m
[32m+[m[32m    "samtools view -F 4 /workspace/cfngle/results-data/minimap2/JM_JM_1000_minimap.sam -c\n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 16,[m
[32m+[m[32m   "id": "3eafa8c1-2bc0-4d30-ad71-4e09ca7bbb37",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "[M::mm_idx_gen::32.235*1.63] collected minimizers\n",[m
[32m+[m[32m      "[M::mm_idx_gen::40.264*1.89] sorted minimizers\n",[m
[32m+[m[32m      "[M::main::40.266*1.89] loaded/built the index for 1923 target sequence(s)\n",[m
[32m+[m[32m      "[M::mm_mapopt_update::41.644*1.86] mid_occ = 848\n",[m
[32m+[m[32m      "[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1923\n",[m
[32m+[m[32m      "[M::mm_idx_stat::42.496*1.84] distinct minimizers: 66057654 (43.51% are singletons); average occurrences: 4.867; average spacing: 5.223; total length: 1679203469\n",[m
[32m+[m[32m      "[M::worker_pipeline::66.027*2.21] mapped 16751 sequences\n",[m
[32m+[m[32m      "[M::main] Version: 2.22-r1101\n",[m
[32m+[m[32m      "[M::main] CMD: minimap2 -ax map-ont /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna /workspace/cfngle/results-data/sequences/EH_CpG_5000bp.fasta\n",[m
[32m+[m[32m      "[M::main] Real time: 66.285 sec; CPU: 146.265 sec; Peak RSS: 6.608 GB\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}EH_CpG_5000bp.fasta > ${path_results}minimap2/ZF_EH_5000_minimap.sam"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 17,[m
[32m+[m[32m   "id": "6a2dff7d-0080-4bfd-909b-726e2f3eefd3",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "5557\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "samtools view -F 0x904 /workspace/cfngle/results-data/minimap2/ZF_EH_5000_minimap.sam | wc -l"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 48,[m
[32m+[m[32m   "id": "f18465a1-e736-45c5-8a1a-9f8c8355800b",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "OS = linux\n",[m
[32m+[m[32m      "The number of physical cores =  10\n",[m
[32m+[m[32m      "nthread = 10\n",[m
[32m+[m[32m      "stacksize: 8192 kb\n",[m
[32m+[m[32m      "generating a scoring matrix for nucleotide (dist=200) ... done\n",[m
[32m+[m[32m      "Gap Penalty = -1.53, +0.00, +0.00\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Making a distance matrix ..\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "There are 1751 ambiguous characters.\n",[m
[32m+[m[32m      "  401 / 402 (thread    6)\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Constructing a UPGMA tree (efffree=0) ... \n",[m
[32m+[m[32m      "  400 / 402\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Progressive alignment 1/2... \n",[m
[32m+[m[32m      "STEP   124 / 401 (thread    4)df\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 6014\n",[m
[32m+[m[32m      "STEP   252 / 401 (thread    6)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 7251\n",[m
[32m+[m[32m      "STEP   351 / 401 (thread    7)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 10612\n",[m
[32m+[m[32m      "STEP   360 / 401 (thread    9)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 12970\n",[m
[32m+[m[32m      "STEP   364 / 401 (thread    0)f\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 15349\n",[m
[32m+[m[32m      "STEP   363 / 401 (thread    9)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 16824\n",[m
[32m+[m[32m      "STEP   401 / 401 (thread    7)d\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Making a distance matrix from msa.. \n",[m
[32m+[m[32m      "  400 / 402 (thread    4)\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Constructing a UPGMA tree (efffree=1) ... \n",[m
[32m+[m[32m      "  400 / 402\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Progressive alignment 2/2... \n",[m
[32m+[m[32m      "STEP   160 / 401 (thread    3)f\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 5791\n",[m
[32m+[m[32m      "STEP   292 / 401 (thread    2)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 7741\n",[m
[32m+[m[32m      "STEP   356 / 401 (thread    6)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 10061\n",[m
[32m+[m[32m      "STEP   373 / 401 (thread    2)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 15183\n",[m
[32m+[m[32m      "STEP   378 / 401 (thread    8)d\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 16936\n",[m
[32m+[m[32m      "STEP   395 / 401 (thread    9)f\n",[m
[32m+[m[32m      "Reallocating..done. *alloclen = 20028\n",[m
[32m+[m[32m      "STEP   401 / 401 (thread    1)d\n",[m
[32m+[m[32m      "done.\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "disttbfast (nuc) Version 7.307 alg=A, model=DNA200 (2), 1.53 (4.59), -0.00 (-0.00), noshift, amax=0.0\n",[m
[32m+[m[32m      "10 thread(s)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "generating a scoring matrix for nucleotide (dist=200) ... done\n",[m
[32m+[m[32m      "  400 / 402 (thread    8)dndpre (nuc) Version 7.307 alg=X, model=DNA200 (2), 1.53 (4.59), 0.37 (1.11), noshift, amax=0.0\n",[m
[32m+[m[32m      "10 thread(s)\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "minimumweight = 0.000010\n",[m
[32m+[m[32m      "autosubalignment = 0.000000\n",[m
[32m+[m[32m      "nthread = 10\n",[m
[32m+[m[32m      "randomseed = 0\n",[m
[32m+[m[32m      "blosum 62 / kimura 200\n",[m
[32m+[m[32m      "poffset = 0\n",[m
[32m+[m[32m      "niter = 2\n",[m
[32m+[m[32m      "sueff_global = 0.100000\n",[m
[32m+[m[32m      "generating a scoring matrix for nucleotide (dist=200) ... done\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "  400 / 402\n",[m
[32m+[m[32m      "Segment   1/  1    1-15103\n",[m
[32m+[m[32m      "002-0653-0 (thread   10) better        \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### MAFFT ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## modules\n",[m
[32m+[m[32m    "module load mafft\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# arguments\n",[m
[32m+[m[32m    "mafft_args=\"--auto --thread -1\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "mafft $mafft_args ${path_results}02_conserved_seq/AC_AS_EH_1000_conserved.fasta > ${path_results}02_conserved_seq/AC_AS_EH_1000_conserved_MSA_mafft.fasta\n",[m
[32m+[m[32m    "#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_100bp.fasta > ${path_results}AC_AS_EH_CpG_100bp.fasta \n",[m
[32m+[m[32m    "#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_200bp.fasta > ${path_results}AC_AS_EH_CpG_200bp.fasta \n",[m
[32m+[m[32m    "#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_500bp.fasta > ${path_results}AC_AS_EH_CpG_500bp.fasta \n",[m
[32m+[m[32m    "#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_1000bp.fasta > ${path_results}AC_AS_EH_CpG_1000bp.fasta "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "1dbe01c7-dd09-4dd5-abdc-2cd289395391",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/01a_alignments.ipynb b/01a_alignments.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..fe3af15[m
[1m--- /dev/null[m
[1m+++ b/01a_alignments.ipynb[m
[36m@@ -0,0 +1,77 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "18337 reads; of these:\n",[m
[32m+[m[32m      "  18337 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    18329 (99.96%) aligned 0 times\n",[m
[32m+[m[32m      "    4 (0.02%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    4 (0.02%) aligned >1 times\n",[m
[32m+[m[32m      "0.04% overall alignment rate\n",[m
[32m+[m[32m      "[M::mm_idx_gen::31.402*1.70] collected minimizers\n",[m
[32m+[m[32m      "[M::mm_idx_gen::39.414*1.95] sorted minimizers\n",[m
[32m+[m[32m      "[M::main::39.416*1.95] loaded/built the index for 1923 target sequence(s)\n",[m
[32m+[m[32m      "[M::mm_mapopt_update::40.801*1.92] mid_occ = 848\n",[m
[32m+[m[32m      "[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1923\n",[m
[32m+[m[32m      "[M::mm_idx_stat::41.661*1.90] distinct minimizers: 66057654 (43.51% are singletons); average occurrences: 4.867; average spacing: 5.223; total length: 1679203469\n",[m
[32m+[m[32m      "[M::worker_pipeline::42.111*1.91] mapped 18337 sequences\n",[m
[32m+[m[32m      "[M::main] Version: 2.22-r1101\n",[m
[32m+[m[32m      "[M::main] CMD: minimap2 -ax map-ont /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna /workspace/cfngle/results-data/EH_CpG_200bp.fasta\n",[m
[32m+[m[32m      "[M::main] Real time: 42.367 sec; CPU: 80.620 sec; Peak RSS: 6.609 GB\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# setting up aariables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### BOWTIE2 ##### \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "bowtie2 -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_results}EH_CpG_200bp.fasta -S ${path_results}ZF_EH_200_bt2_N_1.sam -N 1\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}EH_CpG_200bp.fasta > ${path_results}ZF_EH_200_minimap.sam "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/01b_alignments.ipynb b/01b_alignments.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..9ee7059[m
[1m--- /dev/null[m
[1m+++ b/01b_alignments.ipynb[m
[36m@@ -0,0 +1,83 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "2685f3a6-cf6b-4c7d-bac3-37ca3d5157d2",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "18337 reads; of these:\n",[m
[32m+[m[32m      "  18337 (100.00%) were unpaired; of these:\n",[m
[32m+[m[32m      "    18329 (99.96%) aligned 0 times\n",[m
[32m+[m[32m      "    4 (0.02%) aligned exactly 1 time\n",[m
[32m+[m[32m      "    4 (0.02%) aligned >1 times\n",[m
[32m+[m[32m      "0.04% overall alignment rate\n",[m
[32m+[m[32m      "[M::mm_idx_gen::31.402*1.70] collected minimizers\n",[m
[32m+[m[32m      "[M::mm_idx_gen::39.414*1.95] sorted minimizers\n",[m
[32m+[m[32m      "[M::main::39.416*1.95] loaded/built the index for 1923 target sequence(s)\n",[m
[32m+[m[32m      "[M::mm_mapopt_update::40.801*1.92] mid_occ = 848\n",[m
[32m+[m[32m      "[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1923\n",[m
[32m+[m[32m      "[M::mm_idx_stat::41.661*1.90] distinct minimizers: 66057654 (43.51% are singletons); average occurrences: 4.867; average spacing: 5.223; total length: 1679203469\n",[m
[32m+[m[32m      "[M::worker_pipeline::42.111*1.91] mapped 18337 sequences\n",[m
[32m+[m[32m      "[M::main] Version: 2.22-r1101\n",[m
[32m+[m[32m      "[M::main] CMD: minimap2 -ax map-ont /workspace/cfngle/raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna /workspace/cfngle/results-data/EH_CpG_200bp.fasta\n",[m
[32m+[m[32m      "[M::main] Real time: 42.367 sec; CPU: 80.620 sec; Peak RSS: 6.609 GB\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load bowtie2\n",[m
[32m+[m[32m    "module load minimap2 \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# setting up aariables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### BOWTIE2 ##### \n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "bowtie2 -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_results}EH_CpG_200bp.fasta -S ${path_results}ZF_EH_200_bt2_N_1.sam -N 1\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "#### MINIMAP2 ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "minimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}EH_CpG_200bp.fasta > ${path_results}ZF_EH_200_minimap.sam "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "a6903d20-9dbf-45ef-8555-3bba82d40e5b",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/02_AC_AS_EH_JM_ZF_conserved_sequences_v-1.4.R b/02_AC_AS_EH_JM_ZF_conserved_sequences_v-1.4.R[m
[1mnew file mode 100644[m
[1mindex 0000000..2a28e19[m
[1m--- /dev/null[m
[1m+++ b/02_AC_AS_EH_JM_ZF_conserved_sequences_v-1.4.R[m
[36m@@ -0,0 +1,425 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Conserved sequences will be extracted from the aligned sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32m# library(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m[32m# data minimap2[m
[32m+[m[32mAC_EH_1000_mini <- readGAlignments("results-data/minimap2/AC_EH_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq"))) #creates another type of object which is similar to granges object[m
[32m+[m[32mAC_AC_1000_mini <- readGAlignments("results-data/minimap2/AC_AC_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_mini <- readGAlignments("results-data/minimap2/AC_AS_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_JM_1000_mini <- readGAlignments("results-data/minimap2/AC_JM_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32m# data bowtie2[m[41m [m
[32m+[m[32mAC_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_JM_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_JM_243285_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_ZF_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_ZF_757883_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m
[32m+[m[32m#### add metadata do GA object ####[m
[32m+[m[32m## MINIMAP2[m[41m [m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_mini), AC_metadata$seq),][m
[32m+[m[32mmcols(AC_AC_1000_mini) <- data.frame(mcols(AC_AC_1000_mini), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AC_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AC_AS_1000_mini), AS_metadata$seq),][m
[32m+[m[32mmcols(AC_AS_1000_mini) <- data.frame(mcols(AC_AS_1000_mini), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AS_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AC_EH_1000_mini), EH_metadata$seq),][m
[32m+[m[32mmcols(AC_EH_1000_mini) <- data.frame(mcols(AC_EH_1000_mini), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_EH_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("results-data/sequences/JM_metadata_1000bp.csv")[m
[32m+[m[32mJM_metadata_matched <- JM_metadata[match(names(AC_JM_1000_mini), JM_metadata$seq),][m
[32m+[m[32mmcols(AC_JM_1000_mini) <- data.frame(mcols(AC_JM_1000_mini), JM_metadata_matched$methyl_pos,JM_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_JM_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m
[32m+[m[32m## BOWTIE2[m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_bt2), AC_metadata$seq),][m
[32m+[m[32mmcols(AC_AC_1000_bt2) <- data.frame(mcols(AC_AC_1000_bt2), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AC_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AC_AS_1000_bt2), AS_metadata$seq),][m
[32m+[m[32mmcols(AC_AS_1000_bt2) <- data.frame(mcols(AC_AS_1000_bt2), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AS_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AC_EH_1000_bt2), EH_metadata$seq),][m
[32m+[m[32mmcols(AC_EH_1000_bt2) <- data.frame(mcols(AC_EH_1000_bt2), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_EH_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("results-data/sequences/JM_metadata_243285_1000bp.csv")[m
[32m+[m[32mJM_metadata_matched <- JM_metadata[match(names(AC_JM_1000_bt2), JM_metadata$seq),][m
[32m+[m[32mmcols(AC_JM_1000_bt2) <- data.frame(mcols(AC_JM_1000_bt2), JM_metadata_matched$methyl_pos,JM_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_JM_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mZF_metadata <- read.csv("results-data/sequences/ZF_metadata_7578831000bp.csv")[m
[32m+[m[32mZF_metadata_matched <- ZF_metadata[match(names(AC_ZF_1000_bt2), ZF_metadata$seq),][m
[32m+[m[32mmcols(AC_ZF_1000_bt2) <- data.frame(mcols(AC_ZF_1000_bt2), ZF_metadata_matched$methyl_pos,ZF_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_ZF_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32m# This is just checking which chromosomes/scaffolds/contigs are shared between all aligned seqs[m
[32m+[m[32m# shared_AC_1000_mini <- AC_AC_1000_mini[seqnames(AC_AC_1000_mini) %in% seqnames(AC_AS_1000_mini) & seqnames(AC_AC_1000_mini) %in% seqnames(AC_EH_1000_mini)][m
[32m+[m
[32m+[m[32m#### Finding overlapping sequences ####[m
[32m+[m[32mfind.Overlap <- function(...) {[m
[32m+[m[32m  seq_list <- list(...)[m
[32m+[m[32m  seqs <- seq_list[[1]][m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seqs <- seqs[unique(queryHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # creating a list of all shared sequences[m[41m [m
[32m+[m[32m  seq_list_overlap <- list()[m
[32m+[m[41m  [m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seq_list_overlap[[i]] <- seq_list[[i]][unique(subjectHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  return(seq_list_overlap)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Filtering ####[m
[32m+[m
[32m+[m[32m## using mapq score from bam files[m
[32m+[m[32m# AC_AS_1000_bt2[mcols(AC_AS_1000_bt2)$mapq > 20][m
[32m+[m
[32m+[m[32m# filtering by alignment width[m
[32m+[m[32m# AC_AS_1000_bt2[width(AC_AS_1000_bt2) > 200 & mcols(AC_AS_1000_bt2)$mapq > 20][m[41m [m
[32m+[m
[32m+[m[32m## function combining filter parameters[m
[32m+[m
[32m+[m[32mfilter.GAlignments <- function(seq, min_mapq, min_alignwidth, input = "single") {[m
[32m+[m[32m  if(input == "single") {[m
[32m+[m[32m    seq <- seq[mcols(seq)$mapq >= min_mapq][m
[32m+[m[32m    seq <- seq[width(seq) >= min_alignwidth][m
[32m+[m[32m    return(seq)[m
[32m+[m[32m  }[m
[32m+[m[32m  else if(input == "list") {[m
[32m+[m[32m    filtered_list <- list()[m
[32m+[m[32m    for (i in 1:length(seq)) {[m
[32m+[m[32m      x <- seq[[i]][m
[32m+[m[32m      # Apply the existing filtering criteria[m
[32m+[m[32m      x_filter <- x[mcols(x)$mapq >= min_mapq][m
[32m+[m[32m      x_filter <- x_filter[width(x_filter) >= min_alignwidth][m
[32m+[m[32m      # Store the filtered GAlignments in the new list[m
[32m+[m[32m      filtered_list[[i]] <- x_filter[m
[32m+[m[32m    }[m
[32m+[m[32m    return(filtered_list)[m
[32m+[m[32m  }[m
[32m+[m[32m  else {[m
[32m+[m[32m    stop("please check input argument (\"single\" for a single sequence, \"list\" when sequences are stored in a list. Must be GAlignments object(s)")[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Run sequences through function ####[m
[32m+[m
[32m+[m[32m## Bowtie2[m
[32m+[m[32moverlap_seqs_bt2 <- find.Overlap(AC_AC_1000_bt2,[m
[32m+[m[32m                                 AC_AS_1000_bt2,[m
[32m+[m[32m                                 AC_EH_1000_bt2,[m[41m [m
[32m+[m[32m                                 AC_JM_1000_bt2,[m
[32m+[m[32m                                 AC_ZF_1000_bt2)[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2_temp <- find.Overlap(AC_JM_1000_bt2,[m[41m [m
[32m+[m[32m                                      AC_ZF_1000_bt2) # testing ZF and JM only[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2_temp <- find.Overlap(AC_AC_1000_bt2,[m
[32m+[m[32m                                      AC_JM_1000_bt2,[m
[32m+[m[32m                                      AC_ZF_1000_bt2)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# overlap_seqs_bt2_filtered <- filter.GAlignments(overlap_seqs_bt2, 20, 200, input = "list")[m
[32m+[m
[32m+[m[32msave(overlap_seqs_bt2, file = "results-data/02_conserved_seq/AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m
[32m+[m[32m## Minimap2[m
[32m+[m[32moverlap_seqs_mini <- find.Overlap(AC_AC_1000_mini,AC_AS_1000_mini,AC_EH_1000_mini,AC_JM_1000_mini)[m
[32m+[m[32moverlap_seqs_mini_filtered <- filter.GAlignments(overlap_seqs_mini, 20, 200, input = "list")[m
[32m+[m[32msave(overlap_seqs_mini, file = "results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32m## Combined[m
[32m+[m[32moverlap_seqs_both <- list(overlap_seqs_bt2_filtered[[1]][names(overlap_seqs_bt2_filtered[[1]]) %in% names(overlap_seqs_mini_filtered[[1]])],[m
[32m+[m[32m                          overlap_seqs_bt2_filtered[[2]][names(overlap_seqs_bt2_filtered[[2]]) %in% names(overlap_seqs_mini_filtered[[2]])],[m
[32m+[m[32m                          overlap_seqs_bt2_filtered[[3]][names(overlap_seqs_bt2_filtered[[3]]) %in% names(overlap_seqs_mini_filtered[[3]])])[m
[32m+[m
[32m+[m[32m### rest is optional and not necessary for further steps[m
[32m+[m[32m#### Creating csv methyldata overview ####[m
[32m+[m[32mdf_methyl_data_bt2 <- data.frame([m
[32m+[m[32m  c("bt2"),[m
[32m+[m[32m  c("AC","AS","EH","JM"),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_bt2[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[3]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[4]])$methyl_n)),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_bt2_filtered[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[3]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[4]])$methyl_n)),[m
[32m+[m[32m  c(length(overlap_seqs_bt2[[1]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[2]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[3]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[4]])),[m
[32m+[m[32m  c(length(overlap_seqs_bt2_filtered[[1]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[2]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[3]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[4]])),[m
[32m+[m[32m  c(sum(mcols(AC_AC_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_AS_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_EH_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_JM_1000_bt2)$methyl_n)),[m
[32m+[m[32m  c(length(AC_AC_1000_bt2),[m
[32m+[m[32m    length(AC_AS_1000_bt2),[m
[32m+[m[32m    length(AC_EH_1000_bt2),[m
[32m+[m[32m    length(AC_JM_1000_bt2))[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_bt2) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered", "CpGs_aligned", "seqs_aligned")[m
[32m+[m
[32m+[m[32mdf_methyl_data_mini <- data.frame([m
[32m+[m[32m  c("mini"),[m
[32m+[m[32m  c("AC","AS","EH"),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_mini[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini[[3]])$methyl_n)),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_mini_filtered[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini_filtered[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini_filtered[[3]])$methyl_n)),[m
[32m+[m[32m  c(length(overlap_seqs_mini[[1]]),[m
[32m+[m[32m    length(overlap_seqs_mini[[2]]),[m
[32m+[m[32m    length(overlap_seqs_mini[[3]])),[m
[32m+[m[32m  c(length(overlap_seqs_mini_filtered[[1]]),[m
[32m+[m[32m    length(overlap_seqs_mini_filtered[[2]]),[m
[32m+[m[32m    length(overlap_seqs_mini_filtered[[3]])),[m
[32m+[m[32m  c(sum(mcols(AC_AC_1000_mini)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_AS_1000_mini)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_EH_1000_mini)$methyl_n)),[m
[32m+[m[32m  c(length(AC_AC_1000_mini),[m
[32m+[m[32m    length(AC_AS_1000_mini),[m
[32m+[m[32m    length(AC_EH_1000_mini))[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_mini) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered",  "CpGs_aligned", "seqs_aligned")[m
[32m+[m
[32m+[m[32mdf_methyl_data_both <- data.frame([m
[32m+[m[32m  c("both"),[m
[32m+[m[32m  c("AC","AS","EH"),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_both[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_both[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_both[[3]])$methyl_n)),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(length(overlap_seqs_both[[1]]),[m
[32m+[m[32m    length(overlap_seqs_both[[2]]),[m
[32m+[m[32m    length(overlap_seqs_both[[3]])),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA)[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_both) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered", "CpGs_aligned", "seqs_aligned")[m
[32m+[m[32m# combine dfs[m
[32m+[m[32mdf_methyl_data <- rbind(df_methyl_data_bt2,df_methyl_data_mini, df_methyl_data_both)[m
[32m+[m
[32m+[m[32mdf_save_name <- paste0(save_path, "methyl_overview.csv")[m
[32m+[m[32mwrite.csv(df_methyl_data, df_save_name)[m
[32m+[m
[32m+[m[32m#### visualising data ####[m
[32m+[m[32mdf_long_CpG <- pivot_longer(df_methyl_data[1:3], cols = -species, names_to = "type", values_to = "count")[m
[32m+[m[32mdf_long_seq <- pivot_longer(df_methyl_data[c(-2:-3)], cols = -species, names_to = "type", values_to = "count")[m
[32m+[m
[32m+[m[32mggplot(df_long_CpG, aes(x = species, y = count, fill = type)) +[m[41m [m
[32m+[m[32m  geom_bar(stat = "identity", position = "dodge") +[m
[32m+[m[32m  scale_fill_brewer(palette = "Set1") +[m[41m [m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Comparison of Original and Filtered Counts",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Count",[m
[32m+[m[32m       fill = "Measurement")[m
[32m+[m
[32m+[m[32mggplot(df_long_seq, aes(x = species, y = count, fill = type)) +[m[41m [m
[32m+[m[32m  geom_bar(stat = "identity", position = "dodge") +[m
[32m+[m[32m  scale_fill_brewer(palette = "Set2") +[m[41m [m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Comparison of Original and Filtered Counts",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Count",[m
[32m+[m[32m       fill = "Measurement")[m
[32m+[m
[32m+[m[32m#### other things ####[m
[32m+[m
[32m+[m[32m# test_overlaps <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # returns the indexes of overlapping sequences[m[41m [m
[32m+[m[32m# test_overlaps_count <- countOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # count how many ranges were overlapping how many times[m
[32m+[m[32m# filtered_overlaps <- test_overlaps[test_overlaps_count>0][m
[32m+[m
[32m+[m[32mZF_EH_1000_AC_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_EH_1000_AS_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AC_1000_AS_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_AS_1000_mini)[m
[32m+[m[32mZF_AC_1000_EH_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AS_1000_AC_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_AS_1000_EH_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32m# checking which sequences are overlapping in EH_AC and EH_AS[m
[32m+[m[32munique_ZF_EH_AC_AS_index_EH <- unique(queryHits(ZF_EH_1000_AC_ol_index)[queryHits(ZF_EH_1000_AC_ol_index) %in% queryHits(ZF_EH_1000_AS_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AC <- unique(queryHits(ZF_AC_1000_AS_ol_index)[queryHits(ZF_AC_1000_AS_ol_index) %in% queryHits(ZF_AC_1000_EH_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AS <- unique(queryHits(ZF_AS_1000_AC_ol_index)[queryHits(ZF_AS_1000_AC_ol_index) %in% queryHits(ZF_AS_1000_EH_ol_index)])[m
[32m+[m
[32m+[m[32m# making sure that the queryHits have the same number and objects in both AC and AS[m[41m [m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# subjectHits do have different values and amounts because the sequences are overlapping various times[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# getting sequence names which were overlapping[m
[32m+[m[32mseqnames_AC_1000 <-names(ZF_AC_1000_mini[unique_ZF_EH_AC_AS_index_AC])[m
[32m+[m[32mseqnames_AS_1000 <-names(ZF_AS_1000_mini[unique_ZF_EH_AC_AS_index_AS])[m
[32m+[m[32mseqnames_EH_1000 <- names(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH])[m
[32m+[m
[32m+[m[32m#### getting sequences which overlap ####[m
[32m+[m
[32m+[m[32m#loading sequences[m
[32m+[m[32mAC_1000_seq <- readDNAStringSet("results-data/sequences/AC_CpG_1000bp.fasta")[m
[32m+[m[32mAS_1000_seq <- readDNAStringSet("results-data/sequences/AS_CpG_1000bp.fasta")[m
[32m+[m[32mEH_1000_seq <- readDNAStringSet("results-data/sequences/EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32mconserved_AC_1000 <- AC_1000_seq[AC_1000_seq@ranges@NAMES %in% unique(seqnames_AC_1000)][m
[32m+[m[32mconserved_AS_1000 <- AS_1000_seq[AS_1000_seq@ranges@NAMES %in% unique(seqnames_AS_1000)][m
[32m+[m[32mconserved_EH_1000 <- EH_1000_seq[EH_1000_seq@ranges@NAMES %in% unique(seqnames_EH_1000)][m
[32m+[m
[32m+[m[32m# write sequences as fasta[m
[32m+[m[32mAC_1000_filename <- paste0(save_path, "AC_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AC_1000, AC_1000_filename)[m
[32m+[m
[32m+[m[32mAS_1000_filename <- paste0(save_path, "AS_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AS_1000, AS_1000_filename)[m
[32m+[m
[32m+[m[32mEH_1000_filename <- paste0(save_path, "EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_EH_1000, EH_1000_filename)[m
[32m+[m
[32m+[m[32m#combine fasta files[m
[32m+[m
[32m+[m[32mAC_AS_EH_1000_filename <- paste0(save_path, "AC_AS_EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(c(conserved_AC_1000,conserved_AS_1000,conserved_EH_1000), AC_AS_EH_1000_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m# xx <- as.data.frame(mergeByOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)) #merges overlapping sequences (non overlapping are retained as well)[m[41m [m
[32m+[m
[32m+[m[32m#### overlap settings ####[m
[32m+[m[32m# this is identifying what the amount of bps are which are overlapping[m
[32m+[m[32m# Extract the overlapping ranges[m
[32m+[m[32moverlappingRanges <- pintersect(granges(ZF_AC_1000_mini)[queryHits(ZF_AC_1000_AS_ol_index)], granges(ZF_AS_1000_mini)[subjectHits(ZF_AC_1000_AS_ol_index)])[m
[32m+[m
[32m+[m[32m# Calculate widths of the overlaps[m
[32m+[m[32moverlapWidths <- width(overlappingRanges)[m
[32m+[m[32mlength(overlapWidths[overlapWidths > 600])[m
[32m+[m
[32m+[m[32m#### visualizing overlaps ####[m
[32m+[m[32mdf <- data.frame(overlapWidths[overlapWidths > 600])[m
[32m+[m[32mggplot(df, aes(x = df$overlapWidths.overlapWidths...600.)) +[m
[32m+[m[32m  geom_histogram(binwidth = 10, fill = "darkblue") + # Adjust binwidth as needed[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = paste0("Distribution of Overlap Lengths n= ", length(df$overlapWidths)),[m
[32m+[m[32m       x = "Overlap Length",[m
[32m+[m[32m       y = "Frequency")[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_ZF_EH_AC <- ZF_EH_1000_mini[unique(queryHits(ZF_EH_1000_AC_ol_index))][m
[32m+[m[32moverlap_ZF_EH_AC_AS_index <- findOverlaps(overlap_ZF_EH_AC, ZF_AS_1000_mini)[m
[32m+[m[32moverlap_ZF_EH_AC_AS <- overlap_ZF_EH_AC[unique(queryHits(overlap_ZF_EH_AC_AS_index))][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_1000_mini[queryHits(ZF_EH_1000_AS_ol_index)][m
[32m+[m
[32m+[m
[32m+[m[32m# queryHits() # This returns the indexes of the query (the first sequence) which was overlapping with something[m
[32m+[m[32m# subjectHits()[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini[queryHits(test_overlaps)][m[41m [m
[32m+[m[32mZF_AC_1000_mini[subjectHits(test_overlaps)][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_5000 <- scanBam("results-data/minimap2/ZF_EH_5000_minimap.bam")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m[32m#### seq.len must be changed! The width refers to the aligned length and not sequence length[m
[32m+[m
[32m+[m[32mextract.seq <- function(seq.read, seq.len, name = "test", save.path = save_path, suffix = ".fasta", write = FALSE) {[m
[32m+[m[32m  extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  if(write == TRUE){[m
[32m+[m[32m    file_name <- paste0(save.path, name,"_conserved", suffix)[m
[32m+[m[32m    writeXStringSet(extracted_seq, file = file_name)[m
[32m+[m[32m  }[m
[32m+[m[32m  return(extracted_seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32mextract.seq(ZF_EH_100_mini, 100, name = "ZF_EH_100_mini", write = TRUE)[m
[32m+[m[32mextract.seq(ZF_EH_100_bt2, 100, name = "ZF_EH_100_bt2", write = TRUE)[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini <- extract.seq(ZF_EH_1000_mini, 1000)[m
[32m+[m[32mtable(width(ZF_EH_1000_mini)>999)[m
[32m+[m[32msort(ZF_EH_1000_mini[[1]][["pos"]][!is.na(ZF_EH_1000_mini[[1]][["pos"]]) & ZF_EH_1000_mini[[1]][["rname"]]=="NC_007112.7"])[m
[32m+[m
[32m+[m[32m# extracted_seq <- ZF_EH_100_mini[[1]][["seq"]][(ZF_EH_100_mini[[1]][["flag"]]) != 4][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extracted_seq <- ZF_EH_5000[[1]][["seq"]][!is.na(ZF_EH_5000[[1]][["pos"]]) & ZF_EH_5000[[1]][["qwidth"]] > 0][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# names(extracted_seq) <- ZF_EH_5000[[1]][["qname"]][!is.na(ZF_EH_5000[[1]][["pos"]])][m
[32m+[m[32m# writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# extract.seq <- function(seq.read, name, save.path = save_path,  suffix = suffix) {[m
[32m+[m[32m#   extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m[32m# }[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extract.seq(ZF_EH_5000, ZF_EH_5000, save_path, suffix)[m
[32m+[m
[32m+[m[32mwriteXStringSet(extracted_seq, file = "/workspace/cfngle/results-data/02_conserved_seq/ZF_EH_100_conserved.fasta")[m
[32m+[m[41m                      [m
\ No newline at end of file[m
[1mdiff --git a/02_AC_AS_EH_JM_conserved_sequences_v-1.4.R b/02_AC_AS_EH_JM_conserved_sequences_v-1.4.R[m
[1mnew file mode 100644[m
[1mindex 0000000..e9e0526[m
[1m--- /dev/null[m
[1m+++ b/02_AC_AS_EH_JM_conserved_sequences_v-1.4.R[m
[36m@@ -0,0 +1,405 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Conserved sequences will be extracted from the aligned sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32m# library(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m[32m# data minimap2[m
[32m+[m[32mAC_EH_1000_mini <- readGAlignments("results-data/minimap2/AC_EH_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq"))) #creates another type of object which is similar to granges object[m
[32m+[m[32mAC_AC_1000_mini <- readGAlignments("results-data/minimap2/AC_AC_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_mini <- readGAlignments("results-data/minimap2/AC_AS_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_JM_1000_mini <- readGAlignments("results-data/minimap2/AC_JM_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32m# data bowtie2[m[41m [m
[32m+[m[32mAC_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_JM_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_JM_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m
[32m+[m[32m#### add metadata do GA object ####[m
[32m+[m[32m## MINIMAP2[m[41m [m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_mini), AC_metadata$seq),][m
[32m+[m[32mmcols(AC_AC_1000_mini) <- data.frame(mcols(AC_AC_1000_mini), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AC_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AC_AS_1000_mini), AS_metadata$seq),][m
[32m+[m[32mmcols(AC_AS_1000_mini) <- data.frame(mcols(AC_AS_1000_mini), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AS_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AC_EH_1000_mini), EH_metadata$seq),][m
[32m+[m[32mmcols(AC_EH_1000_mini) <- data.frame(mcols(AC_EH_1000_mini), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_EH_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("results-data/sequences/JM_metadata_1000bp.csv")[m
[32m+[m[32mJM_metadata_matched <- JM_metadata[match(names(AC_JM_1000_mini), JM_metadata$seq),][m
[32m+[m[32mmcols(AC_JM_1000_mini) <- data.frame(mcols(AC_JM_1000_mini), JM_metadata_matched$methyl_pos,JM_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_JM_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m
[32m+[m[32m## BOWTIE2[m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_bt2), AC_metadata$seq),][m
[32m+[m[32mmcols(AC_AC_1000_bt2) <- data.frame(mcols(AC_AC_1000_bt2), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AC_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AC_AS_1000_bt2), AS_metadata$seq),][m
[32m+[m[32mmcols(AC_AS_1000_bt2) <- data.frame(mcols(AC_AS_1000_bt2), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AS_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AC_EH_1000_bt2), EH_metadata$seq),][m
[32m+[m[32mmcols(AC_EH_1000_bt2) <- data.frame(mcols(AC_EH_1000_bt2), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_EH_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("results-data/sequences/JM_metadata_1000bp.csv")[m
[32m+[m[32mJM_metadata_matched <- JM_metadata[match(names(AC_JM_1000_bt2), JM_metadata$seq),][m
[32m+[m[32mmcols(AC_JM_1000_bt2) <- data.frame(mcols(AC_JM_1000_bt2), JM_metadata_matched$methyl_pos,JM_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_JM_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m
[32m+[m[32m# This is just checking which chromosomes/scaffolds/contigs are shared between all aligned seqs[m
[32m+[m[32m# shared_AC_1000_mini <- AC_AC_1000_mini[seqnames(AC_AC_1000_mini) %in% seqnames(AC_AS_1000_mini) & seqnames(AC_AC_1000_mini) %in% seqnames(AC_EH_1000_mini)][m
[32m+[m
[32m+[m[32m#### Finding overlapping sequences ####[m
[32m+[m[32mfind.Overlap <- function(...) {[m
[32m+[m[32m  seq_list <- list(...)[m
[32m+[m[32m  seqs <- seq_list[[1]][m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seqs <- seqs[unique(queryHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # creating a list of all shared sequences[m[41m [m
[32m+[m[32m  seq_list_overlap <- list()[m
[32m+[m[41m  [m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seq_list_overlap[[i]] <- seq_list[[i]][unique(subjectHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  return(seq_list_overlap)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Filtering ####[m
[32m+[m
[32m+[m[32m## using mapq score from bam files[m
[32m+[m[32m# AC_AS_1000_bt2[mcols(AC_AS_1000_bt2)$mapq > 20][m
[32m+[m
[32m+[m[32m# filtering by alignment width[m
[32m+[m[32m# AC_AS_1000_bt2[width(AC_AS_1000_bt2) > 200 & mcols(AC_AS_1000_bt2)$mapq > 20][m[41m [m
[32m+[m
[32m+[m[32m## function combining filter parameters[m
[32m+[m
[32m+[m[32mfilter.GAlignments <- function(seq, min_mapq, min_alignwidth, input = "single") {[m
[32m+[m[32m  if(input == "single") {[m
[32m+[m[32m    seq <- seq[mcols(seq)$mapq >= min_mapq][m
[32m+[m[32m    seq <- seq[width(seq) >= min_alignwidth][m
[32m+[m[32m    return(seq)[m
[32m+[m[32m  }[m
[32m+[m[32m  else if(input == "list") {[m
[32m+[m[32m    filtered_list <- list()[m
[32m+[m[32m    for (i in 1:length(seq)) {[m
[32m+[m[32m      x <- seq[[i]][m
[32m+[m[32m      # Apply the existing filtering criteria[m
[32m+[m[32m      x_filter <- x[mcols(x)$mapq >= min_mapq][m
[32m+[m[32m      x_filter <- x_filter[width(x_filter) >= min_alignwidth][m
[32m+[m[32m      # Store the filtered GAlignments in the new list[m
[32m+[m[32m      filtered_list[[i]] <- x_filter[m
[32m+[m[32m    }[m
[32m+[m[32m    return(filtered_list)[m
[32m+[m[32m  }[m
[32m+[m[32m  else {[m
[32m+[m[32m    stop("please check input argument (\"single\" for a single sequence, \"list\" when sequences are stored in a list. Must be GAlignments object(s)")[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Run sequences through function ####[m
[32m+[m
[32m+[m[32m## Bowtie2[m
[32m+[m[32moverlap_seqs_bt2 <- find.Overlap(AC_AC_1000_bt2,AC_AS_1000_bt2,AC_EH_1000_bt2, AC_JM_1000_bt2)[m
[32m+[m[32moverlap_seqs_bt2_filtered <- filter.GAlignments(overlap_seqs_bt2, 20, 200, input = "list")[m
[32m+[m
[32m+[m[32msave(overlap_seqs_bt2, file = "results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_bt2.R")[m
[32m+[m
[32m+[m[32m## Minimap2[m
[32m+[m[32moverlap_seqs_mini <- find.Overlap(AC_AC_1000_mini,AC_AS_1000_mini,AC_EH_1000_mini,AC_JM_1000_mini)[m
[32m+[m[32moverlap_seqs_mini_filtered <- filter.GAlignments(overlap_seqs_mini, 20, 200, input = "list")[m
[32m+[m[32msave(overlap_seqs_mini, file = "results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32m## Combined[m
[32m+[m[32moverlap_seqs_both <- list(overlap_seqs_bt2_filtered[[1]][names(overlap_seqs_bt2_filtered[[1]]) %in% names(overlap_seqs_mini_filtered[[1]])],[m
[32m+[m[32m                          overlap_seqs_bt2_filtered[[2]][names(overlap_seqs_bt2_filtered[[2]]) %in% names(overlap_seqs_mini_filtered[[2]])],[m
[32m+[m[32m                          overlap_seqs_bt2_filtered[[3]][names(overlap_seqs_bt2_filtered[[3]]) %in% names(overlap_seqs_mini_filtered[[3]])])[m
[32m+[m
[32m+[m[32m#### Creating csv methyldata overview ####[m
[32m+[m[32mdf_methyl_data_bt2 <- data.frame([m
[32m+[m[32m  c("bt2"),[m
[32m+[m[32m  c("AC","AS","EH","JM"),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_bt2[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[3]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[4]])$methyl_n)),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_bt2_filtered[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[3]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[4]])$methyl_n)),[m
[32m+[m[32m  c(length(overlap_seqs_bt2[[1]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[2]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[3]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[4]])),[m
[32m+[m[32m  c(length(overlap_seqs_bt2_filtered[[1]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[2]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[3]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[4]])),[m
[32m+[m[32m  c(sum(mcols(AC_AC_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_AS_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_EH_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_JM_1000_bt2)$methyl_n)),[m
[32m+[m[32m  c(length(AC_AC_1000_bt2),[m
[32m+[m[32m    length(AC_AS_1000_bt2),[m
[32m+[m[32m    length(AC_EH_1000_bt2),[m
[32m+[m[32m    length(AC_JM_1000_bt2))[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_bt2) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered", "CpGs_aligned", "seqs_aligned")[m
[32m+[m
[32m+[m[32mdf_methyl_data_mini <- data.frame([m
[32m+[m[32m  c("mini"),[m
[32m+[m[32m  c("AC","AS","EH"),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_mini[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini[[3]])$methyl_n)),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_mini_filtered[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini_filtered[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini_filtered[[3]])$methyl_n)),[m
[32m+[m[32m  c(length(overlap_seqs_mini[[1]]),[m
[32m+[m[32m    length(overlap_seqs_mini[[2]]),[m
[32m+[m[32m    length(overlap_seqs_mini[[3]])),[m
[32m+[m[32m  c(length(overlap_seqs_mini_filtered[[1]]),[m
[32m+[m[32m    length(overlap_seqs_mini_filtered[[2]]),[m
[32m+[m[32m    length(overlap_seqs_mini_filtered[[3]])),[m
[32m+[m[32m  c(sum(mcols(AC_AC_1000_mini)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_AS_1000_mini)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_EH_1000_mini)$methyl_n)),[m
[32m+[m[32m  c(length(AC_AC_1000_mini),[m
[32m+[m[32m    length(AC_AS_1000_mini),[m
[32m+[m[32m    length(AC_EH_1000_mini))[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_mini) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered",  "CpGs_aligned", "seqs_aligned")[m
[32m+[m
[32m+[m[32mdf_methyl_data_both <- data.frame([m
[32m+[m[32m  c("both"),[m
[32m+[m[32m  c("AC","AS","EH"),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_both[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_both[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_both[[3]])$methyl_n)),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(length(overlap_seqs_both[[1]]),[m
[32m+[m[32m    length(overlap_seqs_both[[2]]),[m
[32m+[m[32m    length(overlap_seqs_both[[3]])),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA)[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_both) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered", "CpGs_aligned", "seqs_aligned")[m
[32m+[m[32m# combine dfs[m
[32m+[m[32mdf_methyl_data <- rbind(df_methyl_data_bt2,df_methyl_data_mini, df_methyl_data_both)[m
[32m+[m
[32m+[m[32mdf_save_name <- paste0(save_path, "methyl_overview.csv")[m
[32m+[m[32mwrite.csv(df_methyl_data, df_save_name)[m
[32m+[m
[32m+[m[32m#### visualising data ####[m
[32m+[m[32mdf_long_CpG <- pivot_longer(df_methyl_data[1:3], cols = -species, names_to = "type", values_to = "count")[m
[32m+[m[32mdf_long_seq <- pivot_longer(df_methyl_data[c(-2:-3)], cols = -species, names_to = "type", values_to = "count")[m
[32m+[m
[32m+[m[32mggplot(df_long_CpG, aes(x = species, y = count, fill = type)) +[m[41m [m
[32m+[m[32m  geom_bar(stat = "identity", position = "dodge") +[m
[32m+[m[32m  scale_fill_brewer(palette = "Set1") +[m[41m [m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Comparison of Original and Filtered Counts",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Count",[m
[32m+[m[32m       fill = "Measurement")[m
[32m+[m
[32m+[m[32mggplot(df_long_seq, aes(x = species, y = count, fill = type)) +[m[41m [m
[32m+[m[32m  geom_bar(stat = "identity", position = "dodge") +[m
[32m+[m[32m  scale_fill_brewer(palette = "Set2") +[m[41m [m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Comparison of Original and Filtered Counts",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Count",[m
[32m+[m[32m       fill = "Measurement")[m
[32m+[m
[32m+[m[32m#### other things ####[m
[32m+[m
[32m+[m[32m# test_overlaps <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # returns the indexes of overlapping sequences[m[41m [m
[32m+[m[32m# test_overlaps_count <- countOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # count how many ranges were overlapping how many times[m
[32m+[m[32m# filtered_overlaps <- test_overlaps[test_overlaps_count>0][m
[32m+[m
[32m+[m[32mZF_EH_1000_AC_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_EH_1000_AS_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AC_1000_AS_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_AS_1000_mini)[m
[32m+[m[32mZF_AC_1000_EH_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AS_1000_AC_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_AS_1000_EH_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32m# checking which sequences are overlapping in EH_AC and EH_AS[m
[32m+[m[32munique_ZF_EH_AC_AS_index_EH <- unique(queryHits(ZF_EH_1000_AC_ol_index)[queryHits(ZF_EH_1000_AC_ol_index) %in% queryHits(ZF_EH_1000_AS_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AC <- unique(queryHits(ZF_AC_1000_AS_ol_index)[queryHits(ZF_AC_1000_AS_ol_index) %in% queryHits(ZF_AC_1000_EH_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AS <- unique(queryHits(ZF_AS_1000_AC_ol_index)[queryHits(ZF_AS_1000_AC_ol_index) %in% queryHits(ZF_AS_1000_EH_ol_index)])[m
[32m+[m
[32m+[m[32m# making sure that the queryHits have the same number and objects in both AC and AS[m[41m [m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# subjectHits do have different values and amounts because the sequences are overlapping various times[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# getting sequence names which were overlapping[m
[32m+[m[32mseqnames_AC_1000 <-names(ZF_AC_1000_mini[unique_ZF_EH_AC_AS_index_AC])[m
[32m+[m[32mseqnames_AS_1000 <-names(ZF_AS_1000_mini[unique_ZF_EH_AC_AS_index_AS])[m
[32m+[m[32mseqnames_EH_1000 <- names(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH])[m
[32m+[m
[32m+[m[32m#### getting sequences which overlap ####[m
[32m+[m
[32m+[m[32m#loading sequences[m
[32m+[m[32mAC_1000_seq <- readDNAStringSet("results-data/sequences/AC_CpG_1000bp.fasta")[m
[32m+[m[32mAS_1000_seq <- readDNAStringSet("results-data/sequences/AS_CpG_1000bp.fasta")[m
[32m+[m[32mEH_1000_seq <- readDNAStringSet("results-data/sequences/EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32mconserved_AC_1000 <- AC_1000_seq[AC_1000_seq@ranges@NAMES %in% unique(seqnames_AC_1000)][m
[32m+[m[32mconserved_AS_1000 <- AS_1000_seq[AS_1000_seq@ranges@NAMES %in% unique(seqnames_AS_1000)][m
[32m+[m[32mconserved_EH_1000 <- EH_1000_seq[EH_1000_seq@ranges@NAMES %in% unique(seqnames_EH_1000)][m
[32m+[m
[32m+[m[32m# write sequences as fasta[m
[32m+[m[32mAC_1000_filename <- paste0(save_path, "AC_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AC_1000, AC_1000_filename)[m
[32m+[m
[32m+[m[32mAS_1000_filename <- paste0(save_path, "AS_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AS_1000, AS_1000_filename)[m
[32m+[m
[32m+[m[32mEH_1000_filename <- paste0(save_path, "EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_EH_1000, EH_1000_filename)[m
[32m+[m
[32m+[m[32m#combine fasta files[m
[32m+[m
[32m+[m[32mAC_AS_EH_1000_filename <- paste0(save_path, "AC_AS_EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(c(conserved_AC_1000,conserved_AS_1000,conserved_EH_1000), AC_AS_EH_1000_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m# xx <- as.data.frame(mergeByOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)) #merges overlapping sequences (non overlapping are retained as well)[m[41m [m
[32m+[m
[32m+[m[32m#### overlap settings ####[m
[32m+[m[32m# this is identifying what the amount of bps are which are overlapping[m
[32m+[m[32m# Extract the overlapping ranges[m
[32m+[m[32moverlappingRanges <- pintersect(granges(ZF_AC_1000_mini)[queryHits(ZF_AC_1000_AS_ol_index)], granges(ZF_AS_1000_mini)[subjectHits(ZF_AC_1000_AS_ol_index)])[m
[32m+[m
[32m+[m[32m# Calculate widths of the overlaps[m
[32m+[m[32moverlapWidths <- width(overlappingRanges)[m
[32m+[m[32mlength(overlapWidths[overlapWidths > 600])[m
[32m+[m
[32m+[m[32m#### visualizing overlaps ####[m
[32m+[m[32mdf <- data.frame(overlapWidths[overlapWidths > 600])[m
[32m+[m[32mggplot(df, aes(x = df$overlapWidths.overlapWidths...600.)) +[m
[32m+[m[32m  geom_histogram(binwidth = 10, fill = "darkblue") + # Adjust binwidth as needed[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = paste0("Distribution of Overlap Lengths n= ", length(df$overlapWidths)),[m
[32m+[m[32m       x = "Overlap Length",[m
[32m+[m[32m       y = "Frequency")[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_ZF_EH_AC <- ZF_EH_1000_mini[unique(queryHits(ZF_EH_1000_AC_ol_index))][m
[32m+[m[32moverlap_ZF_EH_AC_AS_index <- findOverlaps(overlap_ZF_EH_AC, ZF_AS_1000_mini)[m
[32m+[m[32moverlap_ZF_EH_AC_AS <- overlap_ZF_EH_AC[unique(queryHits(overlap_ZF_EH_AC_AS_index))][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_1000_mini[queryHits(ZF_EH_1000_AS_ol_index)][m
[32m+[m
[32m+[m
[32m+[m[32m# queryHits() # This returns the indexes of the query (the first sequence) which was overlapping with something[m
[32m+[m[32m# subjectHits()[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini[queryHits(test_overlaps)][m[41m [m
[32m+[m[32mZF_AC_1000_mini[subjectHits(test_overlaps)][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_5000 <- scanBam("results-data/minimap2/ZF_EH_5000_minimap.bam")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m[32m#### seq.len must be changed! The width refers to the aligned length and not sequence length[m
[32m+[m
[32m+[m[32mextract.seq <- function(seq.read, seq.len, name = "test", save.path = save_path, suffix = ".fasta", write = FALSE) {[m
[32m+[m[32m  extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  if(write == TRUE){[m
[32m+[m[32m    file_name <- paste0(save.path, name,"_conserved", suffix)[m
[32m+[m[32m    writeXStringSet(extracted_seq, file = file_name)[m
[32m+[m[32m  }[m
[32m+[m[32m  return(extracted_seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32mextract.seq(ZF_EH_100_mini, 100, name = "ZF_EH_100_mini", write = TRUE)[m
[32m+[m[32mextract.seq(ZF_EH_100_bt2, 100, name = "ZF_EH_100_bt2", write = TRUE)[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini <- extract.seq(ZF_EH_1000_mini, 1000)[m
[32m+[m[32mtable(width(ZF_EH_1000_mini)>999)[m
[32m+[m[32msort(ZF_EH_1000_mini[[1]][["pos"]][!is.na(ZF_EH_1000_mini[[1]][["pos"]]) & ZF_EH_1000_mini[[1]][["rname"]]=="NC_007112.7"])[m
[32m+[m
[32m+[m[32m# extracted_seq <- ZF_EH_100_mini[[1]][["seq"]][(ZF_EH_100_mini[[1]][["flag"]]) != 4][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extracted_seq <- ZF_EH_5000[[1]][["seq"]][!is.na(ZF_EH_5000[[1]][["pos"]]) & ZF_EH_5000[[1]][["qwidth"]] > 0][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# names(extracted_seq) <- ZF_EH_5000[[1]][["qname"]][!is.na(ZF_EH_5000[[1]][["pos"]])][m
[32m+[m[32m# writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# extract.seq <- function(seq.read, name, save.path = save_path,  suffix = suffix) {[m
[32m+[m[32m#   extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m[32m# }[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extract.seq(ZF_EH_5000, ZF_EH_5000, save_path, suffix)[m
[32m+[m
[32m+[m[32mwriteXStringSet(extracted_seq, file = "/workspace/cfngle/results-data/02_conserved_seq/ZF_EH_100_conserved.fasta")[m
[32m+[m[41m                      [m
\ No newline at end of file[m
[1mdiff --git a/02_AC_AS_EH_conserved_sequences_v-1.0.R b/02_AC_AS_EH_conserved_sequences_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..e3ca84d[m
[1m--- /dev/null[m
[1m+++ b/02_AC_AS_EH_conserved_sequences_v-1.0.R[m
[36m@@ -0,0 +1,174 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Conserved sequences will be extracted from the cd-hit files[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m[32mZF_EH_100_mini <- scanBam("results-data/minimap2/ZF_EH_100_minimap.bam")[m
[32m+[m[32mZF_EH_100_bt2 <- scanBam("results-data/bowtie2/ZF_EH_CpG_100bp_bt2_.bam")[m
[32m+[m[32mZF_EH_1000_mini <- scanBam("results-data/minimap2/ZF_EH_1000_minimap.bam") #creates list of lists (containing alignment region and other information)[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini <- readGAlignments("results-data/minimap2/ZF_EH_1000_minimap.bam", use.names = TRUE) #creates another type of object which is similar to granges object[m
[32m+[m[32mZF_AC_1000_mini <- readGAlignments("results-data/minimap2/ZF_AC_1000_minimap.bam", use.names = TRUE)[m
[32m+[m[32mZF_AS_1000_mini <- readGAlignments("results-data/minimap2/ZF_AS_1000_minimap.bam", use.names = TRUE)[m
[32m+[m
[32m+[m[32mZF_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/ZF_EH_CpG_1000bp_bt2_.bam", use.names = TRUE)[m
[32m+[m
[32m+[m[32m# compare bowtie2 and minimap same species[m
[32m+[m
[32m+[m[32mshared_ZF_EH_1000 <- ZF_EH_1000_bt2[names(ZF_EH_1000_bt2) %in% names(ZF_EH_1000_mini)][m
[32m+[m
[32m+[m[32m# test_overlaps <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # returns the indexes of overlapping sequences[m[41m [m
[32m+[m[32m# test_overlaps_count <- countOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # count how many ranges were overlapping how many times[m
[32m+[m[32m# filtered_overlaps <- test_overlaps[test_overlaps_count>0][m
[32m+[m
[32m+[m[32mZF_EH_1000_AC_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_EH_1000_AS_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AC_1000_AS_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_AS_1000_mini)[m
[32m+[m[32mZF_AC_1000_EH_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AS_1000_AC_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_AS_1000_EH_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32m# checking which sequences are overlapping in EH_AC and EH_AS[m
[32m+[m[32munique_ZF_EH_AC_AS_index_EH <- unique(queryHits(ZF_EH_1000_AC_ol_index)[queryHits(ZF_EH_1000_AC_ol_index) %in% queryHits(ZF_EH_1000_AS_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AC <- unique(queryHits(ZF_AC_1000_AS_ol_index)[queryHits(ZF_AC_1000_AS_ol_index) %in% queryHits(ZF_AC_1000_EH_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AS <- unique(queryHits(ZF_AS_1000_AC_ol_index)[queryHits(ZF_AS_1000_AC_ol_index) %in% queryHits(ZF_AS_1000_EH_ol_index)])[m
[32m+[m
[32m+[m[32m# making sure that the queryHits have the same number and objects in both AC and AS[m[41m [m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# subjectHits do have different values and amounts because the sequences are overlapping various times[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# getting sequence names which were overlapping[m
[32m+[m[32mseqnames_AC_1000 <-names(ZF_AC_1000_mini[unique_ZF_EH_AC_AS_index_AC])[m
[32m+[m[32mseqnames_AS_1000 <-names(ZF_AS_1000_mini[unique_ZF_EH_AC_AS_index_AS])[m
[32m+[m[32mseqnames_EH_1000 <- names(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH])[m
[32m+[m
[32m+[m[32m#### getting sequences which overlap ####[m
[32m+[m
[32m+[m[32m#loading sequences[m
[32m+[m[32mAC_1000_seq <- readDNAStringSet("results-data/sequences/AC_CpG_1000bp.fasta")[m
[32m+[m[32mAS_1000_seq <- readDNAStringSet("results-data/sequences/AS_CpG_1000bp.fasta")[m
[32m+[m[32mEH_1000_seq <- readDNAStringSet("results-data/sequences/EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32mconserved_AC_1000 <- AC_1000_seq[AC_1000_seq@ranges@NAMES %in% unique(seqnames_AC_1000)][m
[32m+[m[32mconserved_AS_1000 <- AS_1000_seq[AS_1000_seq@ranges@NAMES %in% unique(seqnames_AS_1000)][m
[32m+[m[32mconserved_EH_1000 <- EH_1000_seq[EH_1000_seq@ranges@NAMES %in% unique(seqnames_EH_1000)][m
[32m+[m
[32m+[m[32m# write sequences as fasta[m
[32m+[m[32mAC_1000_filename <- paste0(save_path, "AC_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AC_1000, AC_1000_filename)[m
[32m+[m
[32m+[m[32mAS_1000_filename <- paste0(save_path, "AS_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AS_1000, AS_1000_filename)[m
[32m+[m
[32m+[m[32mEH_1000_filename <- paste0(save_path, "EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_EH_1000, EH_1000_filename)[m
[32m+[m
[32m+[m[32m#combine fasta files[m
[32m+[m
[32m+[m[32mAC_AS_EH_1000_filename <- paste0(save_path, "AC_AS_EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(c(conserved_AC_1000,conserved_AS_1000,conserved_EH_1000), AC_AS_EH_1000_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m# xx <- as.data.frame(mergeByOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)) #merges overlapping sequences (non overlapping are retained as well)[m[41m [m
[32m+[m
[32m+[m[32m#### overlap settings ####[m
[32m+[m[32m# this is identifying what the amount of bps are which are overlapping[m
[32m+[m[32m# Extract the overlapping ranges[m
[32m+[m[32moverlappingRanges <- pintersect(granges(ZF_AC_1000_mini)[queryHits(ZF_AC_1000_AS_ol_index)], granges(ZF_AS_1000_mini)[subjectHits(ZF_AC_1000_AS_ol_index)])[m
[32m+[m
[32m+[m[32m# Calculate widths of the overlaps[m
[32m+[m[32moverlapWidths <- width(overlappingRanges)[m
[32m+[m[32mlength(overlapWidths[overlapWidths > 600])[m
[32m+[m
[32m+[m[32m#### visualizing overlaps ####[m
[32m+[m[32mdf <- data.frame(overlapWidths[overlapWidths > 600])[m
[32m+[m[32mggplot(df, aes(x = df$overlapWidths.overlapWidths...600.)) +[m
[32m+[m[32m  geom_histogram(binwidth = 10, fill = "darkblue") + # Adjust binwidth as needed[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = paste0("Distribution of Overlap Lengths n= ", length(df$overlapWidths)),[m
[32m+[m[32m       x = "Overlap Length",[m
[32m+[m[32m       y = "Frequency")[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_ZF_EH_AC <- ZF_EH_1000_mini[unique(queryHits(ZF_EH_1000_AC_ol_index))][m
[32m+[m[32moverlap_ZF_EH_AC_AS_index <- findOverlaps(overlap_ZF_EH_AC, ZF_AS_1000_mini)[m
[32m+[m[32moverlap_ZF_EH_AC_AS <- overlap_ZF_EH_AC[unique(queryHits(overlap_ZF_EH_AC_AS_index))][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_1000_mini[queryHits(ZF_EH_1000_AS_ol_index)][m
[32m+[m
[32m+[m
[32m+[m[32m# queryHits() # This returns the indexes of the query (the first sequence) which was overlapping with something[m
[32m+[m[32m# subjectHits()[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini[queryHits(test_overlaps)][m[41m [m
[32m+[m[32mZF_AC_1000_mini[subjectHits(test_overlaps)][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_5000 <- scanBam("results-data/minimap2/ZF_EH_5000_minimap.bam")[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m[32m#### seq.len must be change! The width refers to the aligned length and not sequence length[m
[32m+[m
[32m+[m[32mextract.seq <- function(seq.read, seq.len, name = "test", save.path = save_path, suffix = ".fasta", write = FALSE) {[m
[32m+[m[32m  extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  if(write == TRUE){[m
[32m+[m[32m    file_name <- paste0(save.path, name,"_conserved", suffix)[m
[32m+[m[32m    writeXStringSet(extracted_seq, file = file_name)[m
[32m+[m[32m  }[m
[32m+[m[32m  return(extracted_seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32mextract.seq(ZF_EH_100_mini, 100, name = "ZF_EH_100_mini", write = TRUE)[m
[32m+[m[32mextract.seq(ZF_EH_100_bt2, 100, name = "ZF_EH_100_bt2", write = TRUE)[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini <- extract.seq(ZF_EH_1000_mini, 1000)[m
[32m+[m[32mtable(width(ZF_EH_1000_mini)>999)[m
[32m+[m[32msort(ZF_EH_1000_mini[[1]][["pos"]][!is.na(ZF_EH_1000_mini[[1]][["pos"]]) & ZF_EH_1000_mini[[1]][["rname"]]=="NC_007112.7"])[m
[32m+[m
[32m+[m[32m# extracted_seq <- ZF_EH_100_mini[[1]][["seq"]][(ZF_EH_100_mini[[1]][["flag"]]) != 4][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extracted_seq <- ZF_EH_5000[[1]][["seq"]][!is.na(ZF_EH_5000[[1]][["pos"]]) & ZF_EH_5000[[1]][["qwidth"]] > 0][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# names(extracted_seq) <- ZF_EH_5000[[1]][["qname"]][!is.na(ZF_EH_5000[[1]][["pos"]])][m
[32m+[m[32m# writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# extract.seq <- function(seq.read, name, save.path = save_path,  suffix = suffix) {[m
[32m+[m[32m#   extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m[32m# }[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extract.seq(ZF_EH_5000, ZF_EH_5000, save_path, suffix)[m
[32m+[m
[32m+[m[32mwriteXStringSet(extracted_seq, file = "/workspace/cfngle/results-data/02_conserved_seq/ZF_EH_100_conserved.fasta")[m
[32m+[m[41m                      [m
\ No newline at end of file[m
[1mdiff --git a/02_AC_AS_EH_conserved_sequences_v-1.1.R b/02_AC_AS_EH_conserved_sequences_v-1.1.R[m
[1mnew file mode 100644[m
[1mindex 0000000..4027cf4[m
[1m--- /dev/null[m
[1m+++ b/02_AC_AS_EH_conserved_sequences_v-1.1.R[m
[36m@@ -0,0 +1,200 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Conserved sequences will be extracted from the aligned sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m[32m# data minimap2[m
[32m+[m[32mAC_EH_1000_mini <- readGAlignments("results-data/minimap2/AC_EH_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq"))) #creates another type of object which is similar to granges object[m
[32m+[m[32mAC_AC_1000_mini <- readGAlignments("results-data/minimap2/AC_AC_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_mini <- readGAlignments("results-data/minimap2/AC_AS_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32m# data bowtie2[m[41m [m
[32m+[m[32mAC_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32m# This is just checking which chromosomes/scaffolds/contigs are shared between all aligned seqs[m
[32m+[m[32m# shared_AC_1000_mini <- AC_AC_1000_mini[seqnames(AC_AC_1000_mini) %in% seqnames(AC_AS_1000_mini) & seqnames(AC_AC_1000_mini) %in% seqnames(AC_EH_1000_mini)][m
[32m+[m
[32m+[m[32m#### Filtering ####[m
[32m+[m
[32m+[m[32m## using mapq score from bam files[m
[32m+[m
[32m+[m[32m# # function to extract scores (parameter) from bam file[m
[32m+[m[32m# get.Param <- function(Bampath, parameter){[m
[32m+[m[32m#   # Define what to extract from the BAM file[m
[32m+[m[32m#   param <- ScanBamParam(what = c(as.character(parameter)))[m
[32m+[m[32m#   # Use scanBam to read the data[m
[32m+[m[32m#   bamData <- scanBam(Bampath, param = param)[m
[32m+[m[32m#   # bamData is a list, with quality scores accessible via[m
[32m+[m[32m#   Param <- bamData[[1]][[parameter]][m
[32m+[m[32m#   return(Param)[m
[32m+[m[32m# }[m
[32m+[m
[32m+[m[32m## add metadata do GA object[m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_bt2), AC_metadata$seq), ][m
[32m+[m[32mmcols(AC_AC_1000_bt2) <- data.frame(mcols(AC_AC_1000_bt2), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n )[m
[32m+[m
[32m+[m[32mAC_AS_1000_bt2[mcols(AC_AS_1000_bt2)$mapq > 20][m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### other things ####[m
[32m+[m
[32m+[m[32m# test_overlaps <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # returns the indexes of overlapping sequences[m[41m [m
[32m+[m[32m# test_overlaps_count <- countOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # count how many ranges were overlapping how many times[m
[32m+[m[32m# filtered_overlaps <- test_overlaps[test_overlaps_count>0][m
[32m+[m
[32m+[m[32mZF_EH_1000_AC_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_EH_1000_AS_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AC_1000_AS_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_AS_1000_mini)[m
[32m+[m[32mZF_AC_1000_EH_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AS_1000_AC_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_AS_1000_EH_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32m# checking which sequences are overlapping in EH_AC and EH_AS[m
[32m+[m[32munique_ZF_EH_AC_AS_index_EH <- unique(queryHits(ZF_EH_1000_AC_ol_index)[queryHits(ZF_EH_1000_AC_ol_index) %in% queryHits(ZF_EH_1000_AS_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AC <- unique(queryHits(ZF_AC_1000_AS_ol_index)[queryHits(ZF_AC_1000_AS_ol_index) %in% queryHits(ZF_AC_1000_EH_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AS <- unique(queryHits(ZF_AS_1000_AC_ol_index)[queryHits(ZF_AS_1000_AC_ol_index) %in% queryHits(ZF_AS_1000_EH_ol_index)])[m
[32m+[m
[32m+[m[32m# making sure that the queryHits have the same number and objects in both AC and AS[m[41m [m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# subjectHits do have different values and amounts because the sequences are overlapping various times[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# getting sequence names which were overlapping[m
[32m+[m[32mseqnames_AC_1000 <-names(ZF_AC_1000_mini[unique_ZF_EH_AC_AS_index_AC])[m
[32m+[m[32mseqnames_AS_1000 <-names(ZF_AS_1000_mini[unique_ZF_EH_AC_AS_index_AS])[m
[32m+[m[32mseqnames_EH_1000 <- names(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH])[m
[32m+[m
[32m+[m[32m#### getting sequences which overlap ####[m
[32m+[m
[32m+[m[32m#loading sequences[m
[32m+[m[32mAC_1000_seq <- readDNAStringSet("results-data/sequences/AC_CpG_1000bp.fasta")[m
[32m+[m[32mAS_1000_seq <- readDNAStringSet("results-data/sequences/AS_CpG_1000bp.fasta")[m
[32m+[m[32mEH_1000_seq <- readDNAStringSet("results-data/sequences/EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32mconserved_AC_1000 <- AC_1000_seq[AC_1000_seq@ranges@NAMES %in% unique(seqnames_AC_1000)][m
[32m+[m[32mconserved_AS_1000 <- AS_1000_seq[AS_1000_seq@ranges@NAMES %in% unique(seqnames_AS_1000)][m
[32m+[m[32mconserved_EH_1000 <- EH_1000_seq[EH_1000_seq@ranges@NAMES %in% unique(seqnames_EH_1000)][m
[32m+[m
[32m+[m[32m# write sequences as fasta[m
[32m+[m[32mAC_1000_filename <- paste0(save_path, "AC_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AC_1000, AC_1000_filename)[m
[32m+[m
[32m+[m[32mAS_1000_filename <- paste0(save_path, "AS_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AS_1000, AS_1000_filename)[m
[32m+[m
[32m+[m[32mEH_1000_filename <- paste0(save_path, "EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_EH_1000, EH_1000_filename)[m
[32m+[m
[32m+[m[32m#combine fasta files[m
[32m+[m
[32m+[m[32mAC_AS_EH_1000_filename <- paste0(save_path, "AC_AS_EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(c(conserved_AC_1000,conserved_AS_1000,conserved_EH_1000), AC_AS_EH_1000_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m# xx <- as.data.frame(mergeByOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)) #merges overlapping sequences (non overlapping are retained as well)[m[41m [m
[32m+[m
[32m+[m[32m#### overlap settings ####[m
[32m+[m[32m# this is identifying what the amount of bps are which are overlapping[m
[32m+[m[32m# Extract the overlapping ranges[m
[32m+[m[32moverlappingRanges <- pintersect(granges(ZF_AC_1000_mini)[queryHits(ZF_AC_1000_AS_ol_index)], granges(ZF_AS_1000_mini)[subjectHits(ZF_AC_1000_AS_ol_index)])[m
[32m+[m
[32m+[m[32m# Calculate widths of the overlaps[m
[32m+[m[32moverlapWidths <- width(overlappingRanges)[m
[32m+[m[32mlength(overlapWidths[overlapWidths > 600])[m
[32m+[m
[32m+[m[32m#### visualizing overlaps ####[m
[32m+[m[32mdf <- data.frame(overlapWidths[overlapWidths > 600])[m
[32m+[m[32mggplot(df, aes(x = df$overlapWidths.overlapWidths...600.)) +[m
[32m+[m[32m  geom_histogram(binwidth = 10, fill = "darkblue") + # Adjust binwidth as needed[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = paste0("Distribution of Overlap Lengths n= ", length(df$overlapWidths)),[m
[32m+[m[32m       x = "Overlap Length",[m
[32m+[m[32m       y = "Frequency")[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_ZF_EH_AC <- ZF_EH_1000_mini[unique(queryHits(ZF_EH_1000_AC_ol_index))][m
[32m+[m[32moverlap_ZF_EH_AC_AS_index <- findOverlaps(overlap_ZF_EH_AC, ZF_AS_1000_mini)[m
[32m+[m[32moverlap_ZF_EH_AC_AS <- overlap_ZF_EH_AC[unique(queryHits(overlap_ZF_EH_AC_AS_index))][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_1000_mini[queryHits(ZF_EH_1000_AS_ol_index)][m
[32m+[m
[32m+[m
[32m+[m[32m# queryHits() # This returns the indexes of the query (the first sequence) which was overlapping with something[m
[32m+[m[32m# subjectHits()[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini[queryHits(test_overlaps)][m[41m [m
[32m+[m[32mZF_AC_1000_mini[subjectHits(test_overlaps)][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_5000 <- scanBam("results-data/minimap2/ZF_EH_5000_minimap.bam")[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m[32m#### seq.len must be change! The width refers to the aligned length and not sequence length[m
[32m+[m
[32m+[m[32mextract.seq <- function(seq.read, seq.len, name = "test", save.path = save_path, suffix = ".fasta", write = FALSE) {[m
[32m+[m[32m  extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  if(write == TRUE){[m
[32m+[m[32m    file_name <- paste0(save.path, name,"_conserved", suffix)[m
[32m+[m[32m    writeXStringSet(extracted_seq, file = file_name)[m
[32m+[m[32m  }[m
[32m+[m[32m  return(extracted_seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32mextract.seq(ZF_EH_100_mini, 100, name = "ZF_EH_100_mini", write = TRUE)[m
[32m+[m[32mextract.seq(ZF_EH_100_bt2, 100, name = "ZF_EH_100_bt2", write = TRUE)[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini <- extract.seq(ZF_EH_1000_mini, 1000)[m
[32m+[m[32mtable(width(ZF_EH_1000_mini)>999)[m
[32m+[m[32msort(ZF_EH_1000_mini[[1]][["pos"]][!is.na(ZF_EH_1000_mini[[1]][["pos"]]) & ZF_EH_1000_mini[[1]][["rname"]]=="NC_007112.7"])[m
[32m+[m
[32m+[m[32m# extracted_seq <- ZF_EH_100_mini[[1]][["seq"]][(ZF_EH_100_mini[[1]][["flag"]]) != 4][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extracted_seq <- ZF_EH_5000[[1]][["seq"]][!is.na(ZF_EH_5000[[1]][["pos"]]) & ZF_EH_5000[[1]][["qwidth"]] > 0][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# names(extracted_seq) <- ZF_EH_5000[[1]][["qname"]][!is.na(ZF_EH_5000[[1]][["pos"]])][m
[32m+[m[32m# writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# extract.seq <- function(seq.read, name, save.path = save_path,  suffix = suffix) {[m
[32m+[m[32m#   extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m[32m# }[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extract.seq(ZF_EH_5000, ZF_EH_5000, save_path, suffix)[m
[32m+[m
[32m+[m[32mwriteXStringSet(extracted_seq, file = "/workspace/cfngle/results-data/02_conserved_seq/ZF_EH_100_conserved.fasta")[m
[32m+[m[41m                      [m
\ No newline at end of file[m
[1mdiff --git a/02_AC_AS_EH_conserved_sequences_v-1.2.R b/02_AC_AS_EH_conserved_sequences_v-1.2.R[m
[1mnew file mode 100644[m
[1mindex 0000000..81159d4[m
[1m--- /dev/null[m
[1m+++ b/02_AC_AS_EH_conserved_sequences_v-1.2.R[m
[36m@@ -0,0 +1,233 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Conserved sequences will be extracted from the aligned sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m[32m# data minimap2[m
[32m+[m[32mAC_EH_1000_mini <- readGAlignments("results-data/minimap2/AC_EH_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq"))) #creates another type of object which is similar to granges object[m
[32m+[m[32mAC_AC_1000_mini <- readGAlignments("results-data/minimap2/AC_AC_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_mini <- readGAlignments("results-data/minimap2/AC_AS_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32m# data bowtie2[m[41m [m
[32m+[m[32mAC_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m
[32m+[m[32m#### add metadata do GA object ####[m
[32m+[m[32m## MINIMAP2[m[41m [m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_mini), AC_metadata$seq),][m
[32m+[m[32mmcols(AC_AC_1000_mini) <- data.frame(mcols(AC_AC_1000_mini), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AC_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AC_AS_1000_mini), AS_metadata$seq),][m
[32m+[m[32mmcols(AC_AS_1000_mini) <- data.frame(mcols(AC_AS_1000_mini), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AS_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AC_EH_1000_mini), EH_metadata$seq),][m
[32m+[m[32mmcols(AC_EH_1000_mini) <- data.frame(mcols(AC_EH_1000_mini), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_EH_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m
[32m+[m[32m## BOWTIE2[m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_bt2), AC_metadata$seq),][m
[32m+[m[32mmcols(AC_AC_1000_bt2) <- data.frame(mcols(AC_AC_1000_bt2), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AC_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AC_AS_1000_bt2), AS_metadata$seq),][m
[32m+[m[32mmcols(AC_AS_1000_bt2) <- data.frame(mcols(AC_AS_1000_bt2), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AS_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AC_EH_1000_bt2), EH_metadata$seq),][m
[32m+[m[32mmcols(AC_EH_1000_bt2) <- data.frame(mcols(AC_EH_1000_bt2), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_EH_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m
[32m+[m[32m# This is just checking which chromosomes/scaffolds/contigs are shared between all aligned seqs[m
[32m+[m[32m# shared_AC_1000_mini <- AC_AC_1000_mini[seqnames(AC_AC_1000_mini) %in% seqnames(AC_AS_1000_mini) & seqnames(AC_AC_1000_mini) %in% seqnames(AC_EH_1000_mini)][m
[32m+[m
[32m+[m[32m#### Filtering ####[m
[32m+[m
[32m+[m[32m## using mapq score from bam files[m
[32m+[m
[32m+[m[32m# # function to extract scores (parameter) from bam file[m
[32m+[m[32m# get.Param <- function(Bampath, parameter){[m
[32m+[m[32m#   # Define what to extract from the BAM file[m
[32m+[m[32m#   param <- ScanBamParam(what = c(as.character(parameter)))[m
[32m+[m[32m#   # Use scanBam to read the data[m
[32m+[m[32m#   bamData <- scanBam(Bampath, param = param)[m
[32m+[m[32m#   # bamData is a list, with quality scores accessible via[m
[32m+[m[32m#   Param <- bamData[[1]][[parameter]][m
[32m+[m[32m#   return(Param)[m
[32m+[m[32m# }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mAC_AS_1000_bt2[mcols(AC_AS_1000_bt2)$mapq > 20][m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### other things ####[m
[32m+[m
[32m+[m[32m# test_overlaps <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # returns the indexes of overlapping sequences[m[41m [m
[32m+[m[32m# test_overlaps_count <- countOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # count how many ranges were overlapping how many times[m
[32m+[m[32m# filtered_overlaps <- test_overlaps[test_overlaps_count>0][m
[32m+[m
[32m+[m[32mZF_EH_1000_AC_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_EH_1000_AS_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AC_1000_AS_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_AS_1000_mini)[m
[32m+[m[32mZF_AC_1000_EH_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AS_1000_AC_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_AS_1000_EH_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32m# checking which sequences are overlapping in EH_AC and EH_AS[m
[32m+[m[32munique_ZF_EH_AC_AS_index_EH <- unique(queryHits(ZF_EH_1000_AC_ol_index)[queryHits(ZF_EH_1000_AC_ol_index) %in% queryHits(ZF_EH_1000_AS_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AC <- unique(queryHits(ZF_AC_1000_AS_ol_index)[queryHits(ZF_AC_1000_AS_ol_index) %in% queryHits(ZF_AC_1000_EH_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AS <- unique(queryHits(ZF_AS_1000_AC_ol_index)[queryHits(ZF_AS_1000_AC_ol_index) %in% queryHits(ZF_AS_1000_EH_ol_index)])[m
[32m+[m
[32m+[m[32m# making sure that the queryHits have the same number and objects in both AC and AS[m[41m [m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# subjectHits do have different values and amounts because the sequences are overlapping various times[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# getting sequence names which were overlapping[m
[32m+[m[32mseqnames_AC_1000 <-names(ZF_AC_1000_mini[unique_ZF_EH_AC_AS_index_AC])[m
[32m+[m[32mseqnames_AS_1000 <-names(ZF_AS_1000_mini[unique_ZF_EH_AC_AS_index_AS])[m
[32m+[m[32mseqnames_EH_1000 <- names(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH])[m
[32m+[m
[32m+[m[32m#### getting sequences which overlap ####[m
[32m+[m
[32m+[m[32m#loading sequences[m
[32m+[m[32mAC_1000_seq <- readDNAStringSet("results-data/sequences/AC_CpG_1000bp.fasta")[m
[32m+[m[32mAS_1000_seq <- readDNAStringSet("results-data/sequences/AS_CpG_1000bp.fasta")[m
[32m+[m[32mEH_1000_seq <- readDNAStringSet("results-data/sequences/EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32mconserved_AC_1000 <- AC_1000_seq[AC_1000_seq@ranges@NAMES %in% unique(seqnames_AC_1000)][m
[32m+[m[32mconserved_AS_1000 <- AS_1000_seq[AS_1000_seq@ranges@NAMES %in% unique(seqnames_AS_1000)][m
[32m+[m[32mconserved_EH_1000 <- EH_1000_seq[EH_1000_seq@ranges@NAMES %in% unique(seqnames_EH_1000)][m
[32m+[m
[32m+[m[32m# write sequences as fasta[m
[32m+[m[32mAC_1000_filename <- paste0(save_path, "AC_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AC_1000, AC_1000_filename)[m
[32m+[m
[32m+[m[32mAS_1000_filename <- paste0(save_path, "AS_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AS_1000, AS_1000_filename)[m
[32m+[m
[32m+[m[32mEH_1000_filename <- paste0(save_path, "EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_EH_1000, EH_1000_filename)[m
[32m+[m
[32m+[m[32m#combine fasta files[m
[32m+[m
[32m+[m[32mAC_AS_EH_1000_filename <- paste0(save_path, "AC_AS_EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(c(conserved_AC_1000,conserved_AS_1000,conserved_EH_1000), AC_AS_EH_1000_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m# xx <- as.data.frame(mergeByOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)) #merges overlapping sequences (non overlapping are retained as well)[m[41m [m
[32m+[m
[32m+[m[32m#### overlap settings ####[m
[32m+[m[32m# this is identifying what the amount of bps are which are overlapping[m
[32m+[m[32m# Extract the overlapping ranges[m
[32m+[m[32moverlappingRanges <- pintersect(granges(ZF_AC_1000_mini)[queryHits(ZF_AC_1000_AS_ol_index)], granges(ZF_AS_1000_mini)[subjectHits(ZF_AC_1000_AS_ol_index)])[m
[32m+[m
[32m+[m[32m# Calculate widths of the overlaps[m
[32m+[m[32moverlapWidths <- width(overlappingRanges)[m
[32m+[m[32mlength(overlapWidths[overlapWidths > 600])[m
[32m+[m
[32m+[m[32m#### visualizing overlaps ####[m
[32m+[m[32mdf <- data.frame(overlapWidths[overlapWidths > 600])[m
[32m+[m[32mggplot(df, aes(x = df$overlapWidths.overlapWidths...600.)) +[m
[32m+[m[32m  geom_histogram(binwidth = 10, fill = "darkblue") + # Adjust binwidth as needed[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = paste0("Distribution of Overlap Lengths n= ", length(df$overlapWidths)),[m
[32m+[m[32m       x = "Overlap Length",[m
[32m+[m[32m       y = "Frequency")[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_ZF_EH_AC <- ZF_EH_1000_mini[unique(queryHits(ZF_EH_1000_AC_ol_index))][m
[32m+[m[32moverlap_ZF_EH_AC_AS_index <- findOverlaps(overlap_ZF_EH_AC, ZF_AS_1000_mini)[m
[32m+[m[32moverlap_ZF_EH_AC_AS <- overlap_ZF_EH_AC[unique(queryHits(overlap_ZF_EH_AC_AS_index))][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_1000_mini[queryHits(ZF_EH_1000_AS_ol_index)][m
[32m+[m
[32m+[m
[32m+[m[32m# queryHits() # This returns the indexes of the query (the first sequence) which was overlapping with something[m
[32m+[m[32m# subjectHits()[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini[queryHits(test_overlaps)][m[41m [m
[32m+[m[32mZF_AC_1000_mini[subjectHits(test_overlaps)][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_5000 <- scanBam("results-data/minimap2/ZF_EH_5000_minimap.bam")[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m[32m#### seq.len must be change! The width refers to the aligned length and not sequence length[m
[32m+[m
[32m+[m[32mextract.seq <- function(seq.read, seq.len, name = "test", save.path = save_path, suffix = ".fasta", write = FALSE) {[m
[32m+[m[32m  extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  if(write == TRUE){[m
[32m+[m[32m    file_name <- paste0(save.path, name,"_conserved", suffix)[m
[32m+[m[32m    writeXStringSet(extracted_seq, file = file_name)[m
[32m+[m[32m  }[m
[32m+[m[32m  return(extracted_seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32mextract.seq(ZF_EH_100_mini, 100, name = "ZF_EH_100_mini", write = TRUE)[m
[32m+[m[32mextract.seq(ZF_EH_100_bt2, 100, name = "ZF_EH_100_bt2", write = TRUE)[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini <- extract.seq(ZF_EH_1000_mini, 1000)[m
[32m+[m[32mtable(width(ZF_EH_1000_mini)>999)[m
[32m+[m[32msort(ZF_EH_1000_mini[[1]][["pos"]][!is.na(ZF_EH_1000_mini[[1]][["pos"]]) & ZF_EH_1000_mini[[1]][["rname"]]=="NC_007112.7"])[m
[32m+[m
[32m+[m[32m# extracted_seq <- ZF_EH_100_mini[[1]][["seq"]][(ZF_EH_100_mini[[1]][["flag"]]) != 4][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extracted_seq <- ZF_EH_5000[[1]][["seq"]][!is.na(ZF_EH_5000[[1]][["pos"]]) & ZF_EH_5000[[1]][["qwidth"]] > 0][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# names(extracted_seq) <- ZF_EH_5000[[1]][["qname"]][!is.na(ZF_EH_5000[[1]][["pos"]])][m
[32m+[m[32m# writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# extract.seq <- function(seq.read, name, save.path = save_path,  suffix = suffix) {[m
[32m+[m[32m#   extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m[32m# }[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extract.seq(ZF_EH_5000, ZF_EH_5000, save_path, suffix)[m
[32m+[m
[32m+[m[32mwriteXStringSet(extracted_seq, file = "/workspace/cfngle/results-data/02_conserved_seq/ZF_EH_100_conserved.fasta")[m
[32m+[m[41m                      [m
\ No newline at end of file[m
[1mdiff --git a/02_AC_AS_EH_conserved_sequences_v-1.3.R b/02_AC_AS_EH_conserved_sequences_v-1.3.R[m
[1mnew file mode 100644[m
[1mindex 0000000..ceb129b[m
[1m--- /dev/null[m
[1m+++ b/02_AC_AS_EH_conserved_sequences_v-1.3.R[m
[36m@@ -0,0 +1,385 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Conserved sequences will be extracted from the aligned sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m[32m# data minimap2[m
[32m+[m[32mAC_EH_1000_mini <- readGAlignments("results-data/minimap2/AC_EH_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq"))) #creates another type of object which is similar to granges object[m
[32m+[m[32mAC_AC_1000_mini <- readGAlignments("results-data/minimap2/AC_AC_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_mini <- readGAlignments("results-data/minimap2/AC_AS_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32m# data bowtie2[m[41m [m
[32m+[m[32mAC_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m
[32m+[m[32m#### add metadata do GA object ####[m
[32m+[m[32m## MINIMAP2[m[41m [m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_mini), AC_metadata$seq),][m
[32m+[m[32mmcols(AC_AC_1000_mini) <- data.frame(mcols(AC_AC_1000_mini), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AC_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AC_AS_1000_mini), AS_metadata$seq),][m
[32m+[m[32mmcols(AC_AS_1000_mini) <- data.frame(mcols(AC_AS_1000_mini), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AS_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AC_EH_1000_mini), EH_metadata$seq),][m
[32m+[m[32mmcols(AC_EH_1000_mini) <- data.frame(mcols(AC_EH_1000_mini), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_EH_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m
[32m+[m[32m## BOWTIE2[m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_bt2), AC_metadata$seq),][m
[32m+[m[32mmcols(AC_AC_1000_bt2) <- data.frame(mcols(AC_AC_1000_bt2), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AC_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AC_AS_1000_bt2), AS_metadata$seq),][m
[32m+[m[32mmcols(AC_AS_1000_bt2) <- data.frame(mcols(AC_AS_1000_bt2), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AS_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AC_EH_1000_bt2), EH_metadata$seq),][m
[32m+[m[32mmcols(AC_EH_1000_bt2) <- data.frame(mcols(AC_EH_1000_bt2), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_EH_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m
[32m+[m[32m# This is just checking which chromosomes/scaffolds/contigs are shared between all aligned seqs[m
[32m+[m[32m# shared_AC_1000_mini <- AC_AC_1000_mini[seqnames(AC_AC_1000_mini) %in% seqnames(AC_AS_1000_mini) & seqnames(AC_AC_1000_mini) %in% seqnames(AC_EH_1000_mini)][m
[32m+[m
[32m+[m[32m#### Finding overlapping sequences ####[m
[32m+[m[32mfind.Overlap <- function(...) {[m
[32m+[m[32m  seq_list <- list(...)[m
[32m+[m[32m  seqs <- seq_list[[1]][m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seqs <- seqs[unique(queryHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # creating a list of all shared sequences[m[41m [m
[32m+[m[32m  seq_list_overlap <- list()[m
[32m+[m[41m  [m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seq_list_overlap[[i]] <- seq_list[[i]][unique(subjectHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  return(seq_list_overlap)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Filtering ####[m
[32m+[m
[32m+[m[32m## using mapq score from bam files[m
[32m+[m[32m# AC_AS_1000_bt2[mcols(AC_AS_1000_bt2)$mapq > 20][m
[32m+[m
[32m+[m[32m# filtering by alignment width[m
[32m+[m[32m# AC_AS_1000_bt2[width(AC_AS_1000_bt2) > 200 & mcols(AC_AS_1000_bt2)$mapq > 20][m[41m [m
[32m+[m
[32m+[m[32m## function combining filter parameters[m
[32m+[m
[32m+[m[32mfilter.GAlignments <- function(seq, min_mapq, min_alignwidth, input = "single") {[m
[32m+[m[32m  if(input == "single") {[m
[32m+[m[32m    seq <- seq[mcols(seq)$mapq >= min_mapq][m
[32m+[m[32m    seq <- seq[width(seq) >= min_alignwidth][m
[32m+[m[32m    return(seq)[m
[32m+[m[32m  }[m
[32m+[m[32m  else if(input == "list") {[m
[32m+[m[32m    filtered_list <- list()[m
[32m+[m[32m    for (i in 1:length(seq)) {[m
[32m+[m[32m      x <- seq[[i]][m
[32m+[m[32m      # Apply the existing filtering criteria[m
[32m+[m[32m      x_filter <- x[mcols(x)$mapq >= min_mapq][m
[32m+[m[32m      x_filter <- x_filter[width(x_filter) >= min_alignwidth][m
[32m+[m[32m      # Store the filtered GAlignments in the new list[m
[32m+[m[32m      filtered_list[[i]] <- x_filter[m
[32m+[m[32m    }[m
[32m+[m[32m    return(filtered_list)[m
[32m+[m[32m  }[m
[32m+[m[32m  else {[m
[32m+[m[32m    stop("please check input argument (\"single\" for a single sequence, \"list\" when sequences are stored in a list. Must be GAlignments object(s)")[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Run sequences through function ####[m
[32m+[m
[32m+[m[32m## Bowtie2[m
[32m+[m[32moverlap_seqs_bt2 <- find.Overlap(AC_AC_1000_bt2,AC_AS_1000_bt2,AC_EH_1000_bt2)[m
[32m+[m[32moverlap_seqs_bt2_filtered <- filter.GAlignments(overlap_seqs_bt2, 20, 200, input = "list")[m
[32m+[m[32m# save(overlap_seqs_bt2, file = "results-data/02_conserved_seq/AC_AS_EH_overlaps_bt2.R")[m
[32m+[m
[32m+[m[32m## Minimap2[m
[32m+[m[32moverlap_seqs_mini <- find.Overlap(AC_AC_1000_mini,AC_AS_1000_mini,AC_EH_1000_mini)[m
[32m+[m[32moverlap_seqs_mini_filtered <- filter.GAlignments(overlap_seqs_mini, 20, 200, input = "list")[m
[32m+[m[32m# save(overlap_seqs_mini, file = "results-data/02_conserved_seq/AC_AS_EH_overlaps_mini.R")[m
[32m+[m
[32m+[m[32m## Combined[m
[32m+[m[32moverlap_seqs_both <- list(overlap_seqs_bt2_filtered[[1]][names(overlap_seqs_bt2_filtered[[1]]) %in% names(overlap_seqs_mini_filtered[[1]])],[m
[32m+[m[32m                          overlap_seqs_bt2_filtered[[2]][names(overlap_seqs_bt2_filtered[[2]]) %in% names(overlap_seqs_mini_filtered[[2]])],[m
[32m+[m[32m                          overlap_seqs_bt2_filtered[[3]][names(overlap_seqs_bt2_filtered[[3]]) %in% names(overlap_seqs_mini_filtered[[3]])])[m
[32m+[m
[32m+[m[32m#### Creating csv methyldata overview ####[m
[32m+[m[32mdf_methyl_data_bt2 <- data.frame([m
[32m+[m[32m  c("bt2"),[m
[32m+[m[32m  c("AC","AS","EH"),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_bt2[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[3]])$methyl_n)),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_bt2_filtered[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[3]])$methyl_n)),[m
[32m+[m[32m  c(length(overlap_seqs_bt2[[1]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[2]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[3]])),[m
[32m+[m[32m  c(length(overlap_seqs_bt2_filtered[[1]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[2]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[3]])),[m
[32m+[m[32m  c(sum(mcols(AC_AC_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_AS_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_EH_1000_bt2)$methyl_n)),[m
[32m+[m[32m  c(length(AC_AC_1000_bt2),[m
[32m+[m[32m    length(AC_AS_1000_bt2),[m
[32m+[m[32m    length(AC_EH_1000_bt2))[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_bt2) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered", "CpGs_aligned", "seqs_aligned")[m
[32m+[m[32mdf_methyl_data_mini <- data.frame([m
[32m+[m[32m  c("mini"),[m
[32m+[m[32m  c("AC","AS","EH"),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_mini[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini[[3]])$methyl_n)),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_mini_filtered[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini_filtered[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini_filtered[[3]])$methyl_n)),[m
[32m+[m[32m  c(length(overlap_seqs_mini[[1]]),[m
[32m+[m[32m    length(overlap_seqs_mini[[2]]),[m
[32m+[m[32m    length(overlap_seqs_mini[[3]])),[m
[32m+[m[32m  c(length(overlap_seqs_mini_filtered[[1]]),[m
[32m+[m[32m    length(overlap_seqs_mini_filtered[[2]]),[m
[32m+[m[32m    length(overlap_seqs_mini_filtered[[3]])),[m
[32m+[m[32m  c(sum(mcols(AC_AC_1000_mini)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_AS_1000_mini)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_EH_1000_mini)$methyl_n)),[m
[32m+[m[32m  c(length(AC_AC_1000_mini),[m
[32m+[m[32m    length(AC_AS_1000_mini),[m
[32m+[m[32m    length(AC_EH_1000_mini))[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_mini) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered",  "CpGs_aligned", "seqs_aligned")[m
[32m+[m
[32m+[m[32mdf_methyl_data_both <- data.frame([m
[32m+[m[32m  c("both"),[m
[32m+[m[32m  c("AC","AS","EH"),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_both[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_both[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_both[[3]])$methyl_n)),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(length(overlap_seqs_both[[1]]),[m
[32m+[m[32m    length(overlap_seqs_both[[2]]),[m
[32m+[m[32m    length(overlap_seqs_both[[3]])),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA)[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_both) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered", "CpGs_aligned", "seqs_aligned")[m
[32m+[m[32m# combine dfs[m
[32m+[m[32mdf_methyl_data <- rbind(df_methyl_data_bt2,df_methyl_data_mini, df_methyl_data_both)[m
[32m+[m
[32m+[m[32mdf_save_name <- paste0(save_path, "methyl_overview.csv")[m
[32m+[m[32mwrite.csv(df_methyl_data, df_save_name)[m
[32m+[m
[32m+[m[32m#### visualising data ####[m
[32m+[m[32mdf_long_CpG <- pivot_longer(df_methyl_data[1:3], cols = -species, names_to = "type", values_to = "count")[m
[32m+[m[32mdf_long_seq <- pivot_longer(df_methyl_data[c(-2:-3)], cols = -species, names_to = "type", values_to = "count")[m
[32m+[m
[32m+[m[32mggplot(df_long_CpG, aes(x = species, y = count, fill = type)) +[m[41m [m
[32m+[m[32m  geom_bar(stat = "identity", position = "dodge") +[m
[32m+[m[32m  scale_fill_brewer(palette = "Set1") +[m[41m [m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Comparison of Original and Filtered Counts",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Count",[m
[32m+[m[32m       fill = "Measurement")[m
[32m+[m
[32m+[m[32mggplot(df_long_seq, aes(x = species, y = count, fill = type)) +[m[41m [m
[32m+[m[32m  geom_bar(stat = "identity", position = "dodge") +[m
[32m+[m[32m  scale_fill_brewer(palette = "Set2") +[m[41m [m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Comparison of Original and Filtered Counts",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Count",[m
[32m+[m[32m       fill = "Measurement")[m
[32m+[m
[32m+[m[32m#### other things ####[m
[32m+[m
[32m+[m[32m# test_overlaps <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # returns the indexes of overlapping sequences[m[41m [m
[32m+[m[32m# test_overlaps_count <- countOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # count how many ranges were overlapping how many times[m
[32m+[m[32m# filtered_overlaps <- test_overlaps[test_overlaps_count>0][m
[32m+[m
[32m+[m[32mZF_EH_1000_AC_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_EH_1000_AS_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AC_1000_AS_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_AS_1000_mini)[m
[32m+[m[32mZF_AC_1000_EH_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AS_1000_AC_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_AS_1000_EH_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32m# checking which sequences are overlapping in EH_AC and EH_AS[m
[32m+[m[32munique_ZF_EH_AC_AS_index_EH <- unique(queryHits(ZF_EH_1000_AC_ol_index)[queryHits(ZF_EH_1000_AC_ol_index) %in% queryHits(ZF_EH_1000_AS_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AC <- unique(queryHits(ZF_AC_1000_AS_ol_index)[queryHits(ZF_AC_1000_AS_ol_index) %in% queryHits(ZF_AC_1000_EH_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AS <- unique(queryHits(ZF_AS_1000_AC_ol_index)[queryHits(ZF_AS_1000_AC_ol_index) %in% queryHits(ZF_AS_1000_EH_ol_index)])[m
[32m+[m
[32m+[m[32m# making sure that the queryHits have the same number and objects in both AC and AS[m[41m [m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# subjectHits do have different values and amounts because the sequences are overlapping various times[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# getting sequence names which were overlapping[m
[32m+[m[32mseqnames_AC_1000 <-names(ZF_AC_1000_mini[unique_ZF_EH_AC_AS_index_AC])[m
[32m+[m[32mseqnames_AS_1000 <-names(ZF_AS_1000_mini[unique_ZF_EH_AC_AS_index_AS])[m
[32m+[m[32mseqnames_EH_1000 <- names(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH])[m
[32m+[m
[32m+[m[32m#### getting sequences which overlap ####[m
[32m+[m
[32m+[m[32m#loading sequences[m
[32m+[m[32mAC_1000_seq <- readDNAStringSet("results-data/sequences/AC_CpG_1000bp.fasta")[m
[32m+[m[32mAS_1000_seq <- readDNAStringSet("results-data/sequences/AS_CpG_1000bp.fasta")[m
[32m+[m[32mEH_1000_seq <- readDNAStringSet("results-data/sequences/EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32mconserved_AC_1000 <- AC_1000_seq[AC_1000_seq@ranges@NAMES %in% unique(seqnames_AC_1000)][m
[32m+[m[32mconserved_AS_1000 <- AS_1000_seq[AS_1000_seq@ranges@NAMES %in% unique(seqnames_AS_1000)][m
[32m+[m[32mconserved_EH_1000 <- EH_1000_seq[EH_1000_seq@ranges@NAMES %in% unique(seqnames_EH_1000)][m
[32m+[m
[32m+[m[32m# write sequences as fasta[m
[32m+[m[32mAC_1000_filename <- paste0(save_path, "AC_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AC_1000, AC_1000_filename)[m
[32m+[m
[32m+[m[32mAS_1000_filename <- paste0(save_path, "AS_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AS_1000, AS_1000_filename)[m
[32m+[m
[32m+[m[32mEH_1000_filename <- paste0(save_path, "EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_EH_1000, EH_1000_filename)[m
[32m+[m
[32m+[m[32m#combine fasta files[m
[32m+[m
[32m+[m[32mAC_AS_EH_1000_filename <- paste0(save_path, "AC_AS_EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(c(conserved_AC_1000,conserved_AS_1000,conserved_EH_1000), AC_AS_EH_1000_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m# xx <- as.data.frame(mergeByOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)) #merges overlapping sequences (non overlapping are retained as well)[m[41m [m
[32m+[m
[32m+[m[32m#### overlap settings ####[m
[32m+[m[32m# this is identifying what the amount of bps are which are overlapping[m
[32m+[m[32m# Extract the overlapping ranges[m
[32m+[m[32moverlappingRanges <- pintersect(granges(ZF_AC_1000_mini)[queryHits(ZF_AC_1000_AS_ol_index)], granges(ZF_AS_1000_mini)[subjectHits(ZF_AC_1000_AS_ol_index)])[m
[32m+[m
[32m+[m[32m# Calculate widths of the overlaps[m
[32m+[m[32moverlapWidths <- width(overlappingRanges)[m
[32m+[m[32mlength(overlapWidths[overlapWidths > 600])[m
[32m+[m
[32m+[m[32m#### visualizing overlaps ####[m
[32m+[m[32mdf <- data.frame(overlapWidths[overlapWidths > 600])[m
[32m+[m[32mggplot(df, aes(x = df$overlapWidths.overlapWidths...600.)) +[m
[32m+[m[32m  geom_histogram(binwidth = 10, fill = "darkblue") + # Adjust binwidth as needed[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = paste0("Distribution of Overlap Lengths n= ", length(df$overlapWidths)),[m
[32m+[m[32m       x = "Overlap Length",[m
[32m+[m[32m       y = "Frequency")[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_ZF_EH_AC <- ZF_EH_1000_mini[unique(queryHits(ZF_EH_1000_AC_ol_index))][m
[32m+[m[32moverlap_ZF_EH_AC_AS_index <- findOverlaps(overlap_ZF_EH_AC, ZF_AS_1000_mini)[m
[32m+[m[32moverlap_ZF_EH_AC_AS <- overlap_ZF_EH_AC[unique(queryHits(overlap_ZF_EH_AC_AS_index))][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_1000_mini[queryHits(ZF_EH_1000_AS_ol_index)][m
[32m+[m
[32m+[m
[32m+[m[32m# queryHits() # This returns the indexes of the query (the first sequence) which was overlapping with something[m
[32m+[m[32m# subjectHits()[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini[queryHits(test_overlaps)][m[41m [m
[32m+[m[32mZF_AC_1000_mini[subjectHits(test_overlaps)][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_5000 <- scanBam("results-data/minimap2/ZF_EH_5000_minimap.bam")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m[32m#### seq.len must be changed! The width refers to the aligned length and not sequence length[m
[32m+[m
[32m+[m[32mextract.seq <- function(seq.read, seq.len, name = "test", save.path = save_path, suffix = ".fasta", write = FALSE) {[m
[32m+[m[32m  extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  if(write == TRUE){[m
[32m+[m[32m    file_name <- paste0(save.path, name,"_conserved", suffix)[m
[32m+[m[32m    writeXStringSet(extracted_seq, file = file_name)[m
[32m+[m[32m  }[m
[32m+[m[32m  return(extracted_seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32mextract.seq(ZF_EH_100_mini, 100, name = "ZF_EH_100_mini", write = TRUE)[m
[32m+[m[32mextract.seq(ZF_EH_100_bt2, 100, name = "ZF_EH_100_bt2", write = TRUE)[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini <- extract.seq(ZF_EH_1000_mini, 1000)[m
[32m+[m[32mtable(width(ZF_EH_1000_mini)>999)[m
[32m+[m[32msort(ZF_EH_1000_mini[[1]][["pos"]][!is.na(ZF_EH_1000_mini[[1]][["pos"]]) & ZF_EH_1000_mini[[1]][["rname"]]=="NC_007112.7"])[m
[32m+[m
[32m+[m[32m# extracted_seq <- ZF_EH_100_mini[[1]][["seq"]][(ZF_EH_100_mini[[1]][["flag"]]) != 4][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extracted_seq <- ZF_EH_5000[[1]][["seq"]][!is.na(ZF_EH_5000[[1]][["pos"]]) & ZF_EH_5000[[1]][["qwidth"]] > 0][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# names(extracted_seq) <- ZF_EH_5000[[1]][["qname"]][!is.na(ZF_EH_5000[[1]][["pos"]])][m
[32m+[m[32m# writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# extract.seq <- function(seq.read, name, save.path = save_path,  suffix = suffix) {[m
[32m+[m[32m#   extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m[32m# }[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extract.seq(ZF_EH_5000, ZF_EH_5000, save_path, suffix)[m
[32m+[m
[32m+[m[32mwriteXStringSet(extracted_seq, file = "/workspace/cfngle/results-data/02_conserved_seq/ZF_EH_100_conserved.fasta")[m
[32m+[m[41m                      [m
\ No newline at end of file[m
[1mdiff --git a/02_bowtie2_02.sl b/02_bowtie2_02.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..44e8f85[m
[1m--- /dev/null[m
[1m+++ b/02_bowtie2_02.sl[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_02[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp" "AS_CpG_100bp" "EH_CpG_100bp")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp" "AS_CpG_200bp" "EH_CpG_200bp")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp" "AS_CpG_500bp" "EH_CpG_500bp")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp" "AS_CpG_1000bp" "EH_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 20"[m
[32m+[m
[32m+[m[32m## indexing[m
[32m+[m[32m# bowtie2-build ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_raw}EH/bowtie2-index/EH_bowtie2[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_100bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}EH_${seq_100bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}EH_${seq_200bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}EH_${seq_500bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/02_bowtie2_03_1000_all.sl b/02_bowtie2_03_1000_all.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..5d2a82a[m
[1m--- /dev/null[m
[1m+++ b/02_bowtie2_03_1000_all.sl[m
[36m@@ -0,0 +1,62 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp" "AS_CpG_100bp" "EH_CpG_100bp")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp" "AS_CpG_200bp" "EH_CpG_200bp")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp" "AS_CpG_500bp" "EH_CpG_500bp")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp" "AS_CpG_1000bp" "EH_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32m## rgenome ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/02_bowtie2_04_1000_JM.sl b/02_bowtie2_04_1000_JM.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..7c6d39f[m
[1m--- /dev/null[m
[1m+++ b/02_bowtie2_04_1000_JM.sl[m
[36m@@ -0,0 +1,44 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_JM[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp" "AS_CpG_100bp" "EH_CpG_100bp")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp" "AS_CpG_200bp" "EH_CpG_200bp")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp" "AS_CpG_500bp" "EH_CpG_500bp")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp" "AS_CpG_1000bp" "EH_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32mbowtie2-build ${path_raw}JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fna ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2[m
[32m+[m[32mecho "bowtie2 indexing for JM done"[m
[32m+[m
[32m+[m[32m## rgenome JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}JM_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/02_bowtie2_05_1000_all.sl b/02_bowtie2_05_1000_all.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..5d58ff1[m
[1m--- /dev/null[m
[1m+++ b/02_bowtie2_05_1000_all.sl[m
[36m@@ -0,0 +1,69 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp" "AS_CpG_100bp" "EH_CpG_100bp")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp" "AS_CpG_200bp" "EH_CpG_200bp")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp" "AS_CpG_500bp" "EH_CpG_500bp")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp" "AS_CpG_1000bp" "EH_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32m## rgenome ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}JM_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/02_bowtie2_06_1000_all_JM.sl b/02_bowtie2_06_1000_all_JM.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..6997257[m
[1m--- /dev/null[m
[1m+++ b/02_bowtie2_06_1000_all_JM.sl[m
[36m@@ -0,0 +1,66 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem=20G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 1                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_1000bp=("JM_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32m## rgenome ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}JM_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/02_bowtie2_07_1000_all_ZF.sl b/02_bowtie2_07_1000_all_ZF.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..dba8ded[m
[1m--- /dev/null[m
[1m+++ b/02_bowtie2_07_1000_all_ZF.sl[m
[36m@@ -0,0 +1,66 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=04:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem=20G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 2                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_1000bp=("ZF_757883_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32m## rgenome ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m   bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/EH_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}JM_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/02_bowtie2_08_1000_all_ZF.sl b/02_bowtie2_08_1000_all_ZF.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..69c5acd[m
[1m--- /dev/null[m
[1m+++ b/02_bowtie2_08_1000_all_ZF.sl[m
[36m@@ -0,0 +1,37 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem=10G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 1                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_1000bp=("ZF_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m[32m## rgenome JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}JM/rgenome/bowtie2-index/JM_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}JM_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/02_conserved_sequences_AC_v-1.0.R b/02_conserved_sequences_AC_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..2a28e19[m
[1m--- /dev/null[m
[1m+++ b/02_conserved_sequences_AC_v-1.0.R[m
[36m@@ -0,0 +1,425 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Conserved sequences will be extracted from the aligned sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32m# library(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m[32m# data minimap2[m
[32m+[m[32mAC_EH_1000_mini <- readGAlignments("results-data/minimap2/AC_EH_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq"))) #creates another type of object which is similar to granges object[m
[32m+[m[32mAC_AC_1000_mini <- readGAlignments("results-data/minimap2/AC_AC_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_mini <- readGAlignments("results-data/minimap2/AC_AS_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_JM_1000_mini <- readGAlignments("results-data/minimap2/AC_JM_1000_minimap.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32m# data bowtie2[m[41m [m
[32m+[m[32mAC_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_JM_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_JM_243285_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_ZF_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_ZF_757883_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m
[32m+[m[32m#### add metadata do GA object ####[m
[32m+[m[32m## MINIMAP2[m[41m [m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_mini), AC_metadata$seq),][m
[32m+[m[32mmcols(AC_AC_1000_mini) <- data.frame(mcols(AC_AC_1000_mini), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AC_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AC_AS_1000_mini), AS_metadata$seq),][m
[32m+[m[32mmcols(AC_AS_1000_mini) <- data.frame(mcols(AC_AS_1000_mini), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AS_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AC_EH_1000_mini), EH_metadata$seq),][m
[32m+[m[32mmcols(AC_EH_1000_mini) <- data.frame(mcols(AC_EH_1000_mini), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_EH_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("results-data/sequences/JM_metadata_1000bp.csv")[m
[32m+[m[32mJM_metadata_matched <- JM_metadata[match(names(AC_JM_1000_mini), JM_metadata$seq),][m
[32m+[m[32mmcols(AC_JM_1000_mini) <- data.frame(mcols(AC_JM_1000_mini), JM_metadata_matched$methyl_pos,JM_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_JM_1000_mini)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m
[32m+[m[32m## BOWTIE2[m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AC_AC_1000_bt2), AC_metadata$seq),][m
[32m+[m[32mmcols(AC_AC_1000_bt2) <- data.frame(mcols(AC_AC_1000_bt2), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AC_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AC_AS_1000_bt2), AS_metadata$seq),][m
[32m+[m[32mmcols(AC_AS_1000_bt2) <- data.frame(mcols(AC_AS_1000_bt2), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_AS_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AC_EH_1000_bt2), EH_metadata$seq),][m
[32m+[m[32mmcols(AC_EH_1000_bt2) <- data.frame(mcols(AC_EH_1000_bt2), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_EH_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("results-data/sequences/JM_metadata_243285_1000bp.csv")[m
[32m+[m[32mJM_metadata_matched <- JM_metadata[match(names(AC_JM_1000_bt2), JM_metadata$seq),][m
[32m+[m[32mmcols(AC_JM_1000_bt2) <- data.frame(mcols(AC_JM_1000_bt2), JM_metadata_matched$methyl_pos,JM_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_JM_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mZF_metadata <- read.csv("results-data/sequences/ZF_metadata_7578831000bp.csv")[m
[32m+[m[32mZF_metadata_matched <- ZF_metadata[match(names(AC_ZF_1000_bt2), ZF_metadata$seq),][m
[32m+[m[32mmcols(AC_ZF_1000_bt2) <- data.frame(mcols(AC_ZF_1000_bt2), ZF_metadata_matched$methyl_pos,ZF_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AC_ZF_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32m# This is just checking which chromosomes/scaffolds/contigs are shared between all aligned seqs[m
[32m+[m[32m# shared_AC_1000_mini <- AC_AC_1000_mini[seqnames(AC_AC_1000_mini) %in% seqnames(AC_AS_1000_mini) & seqnames(AC_AC_1000_mini) %in% seqnames(AC_EH_1000_mini)][m
[32m+[m
[32m+[m[32m#### Finding overlapping sequences ####[m
[32m+[m[32mfind.Overlap <- function(...) {[m
[32m+[m[32m  seq_list <- list(...)[m
[32m+[m[32m  seqs <- seq_list[[1]][m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seqs <- seqs[unique(queryHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # creating a list of all shared sequences[m[41m [m
[32m+[m[32m  seq_list_overlap <- list()[m
[32m+[m[41m  [m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seq_list_overlap[[i]] <- seq_list[[i]][unique(subjectHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  return(seq_list_overlap)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Filtering ####[m
[32m+[m
[32m+[m[32m## using mapq score from bam files[m
[32m+[m[32m# AC_AS_1000_bt2[mcols(AC_AS_1000_bt2)$mapq > 20][m
[32m+[m
[32m+[m[32m# filtering by alignment width[m
[32m+[m[32m# AC_AS_1000_bt2[width(AC_AS_1000_bt2) > 200 & mcols(AC_AS_1000_bt2)$mapq > 20][m[41m [m
[32m+[m
[32m+[m[32m## function combining filter parameters[m
[32m+[m
[32m+[m[32mfilter.GAlignments <- function(seq, min_mapq, min_alignwidth, input = "single") {[m
[32m+[m[32m  if(input == "single") {[m
[32m+[m[32m    seq <- seq[mcols(seq)$mapq >= min_mapq][m
[32m+[m[32m    seq <- seq[width(seq) >= min_alignwidth][m
[32m+[m[32m    return(seq)[m
[32m+[m[32m  }[m
[32m+[m[32m  else if(input == "list") {[m
[32m+[m[32m    filtered_list <- list()[m
[32m+[m[32m    for (i in 1:length(seq)) {[m
[32m+[m[32m      x <- seq[[i]][m
[32m+[m[32m      # Apply the existing filtering criteria[m
[32m+[m[32m      x_filter <- x[mcols(x)$mapq >= min_mapq][m
[32m+[m[32m      x_filter <- x_filter[width(x_filter) >= min_alignwidth][m
[32m+[m[32m      # Store the filtered GAlignments in the new list[m
[32m+[m[32m      filtered_list[[i]] <- x_filter[m
[32m+[m[32m    }[m
[32m+[m[32m    return(filtered_list)[m
[32m+[m[32m  }[m
[32m+[m[32m  else {[m
[32m+[m[32m    stop("please check input argument (\"single\" for a single sequence, \"list\" when sequences are stored in a list. Must be GAlignments object(s)")[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Run sequences through function ####[m
[32m+[m
[32m+[m[32m## Bowtie2[m
[32m+[m[32moverlap_seqs_bt2 <- find.Overlap(AC_AC_1000_bt2,[m
[32m+[m[32m                                 AC_AS_1000_bt2,[m
[32m+[m[32m                                 AC_EH_1000_bt2,[m[41m [m
[32m+[m[32m                                 AC_JM_1000_bt2,[m
[32m+[m[32m                                 AC_ZF_1000_bt2)[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2_temp <- find.Overlap(AC_JM_1000_bt2,[m[41m [m
[32m+[m[32m                                      AC_ZF_1000_bt2) # testing ZF and JM only[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2_temp <- find.Overlap(AC_AC_1000_bt2,[m
[32m+[m[32m                                      AC_JM_1000_bt2,[m
[32m+[m[32m                                      AC_ZF_1000_bt2)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# overlap_seqs_bt2_filtered <- filter.GAlignments(overlap_seqs_bt2, 20, 200, input = "list")[m
[32m+[m
[32m+[m[32msave(overlap_seqs_bt2, file = "results-data/02_conserved_seq/AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m
[32m+[m[32m## Minimap2[m
[32m+[m[32moverlap_seqs_mini <- find.Overlap(AC_AC_1000_mini,AC_AS_1000_mini,AC_EH_1000_mini,AC_JM_1000_mini)[m
[32m+[m[32moverlap_seqs_mini_filtered <- filter.GAlignments(overlap_seqs_mini, 20, 200, input = "list")[m
[32m+[m[32msave(overlap_seqs_mini, file = "results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32m## Combined[m
[32m+[m[32moverlap_seqs_both <- list(overlap_seqs_bt2_filtered[[1]][names(overlap_seqs_bt2_filtered[[1]]) %in% names(overlap_seqs_mini_filtered[[1]])],[m
[32m+[m[32m                          overlap_seqs_bt2_filtered[[2]][names(overlap_seqs_bt2_filtered[[2]]) %in% names(overlap_seqs_mini_filtered[[2]])],[m
[32m+[m[32m                          overlap_seqs_bt2_filtered[[3]][names(overlap_seqs_bt2_filtered[[3]]) %in% names(overlap_seqs_mini_filtered[[3]])])[m
[32m+[m
[32m+[m[32m### rest is optional and not necessary for further steps[m
[32m+[m[32m#### Creating csv methyldata overview ####[m
[32m+[m[32mdf_methyl_data_bt2 <- data.frame([m
[32m+[m[32m  c("bt2"),[m
[32m+[m[32m  c("AC","AS","EH","JM"),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_bt2[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[3]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2[[4]])$methyl_n)),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_bt2_filtered[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[3]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_bt2_filtered[[4]])$methyl_n)),[m
[32m+[m[32m  c(length(overlap_seqs_bt2[[1]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[2]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[3]]),[m
[32m+[m[32m    length(overlap_seqs_bt2[[4]])),[m
[32m+[m[32m  c(length(overlap_seqs_bt2_filtered[[1]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[2]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[3]]),[m
[32m+[m[32m    length(overlap_seqs_bt2_filtered[[4]])),[m
[32m+[m[32m  c(sum(mcols(AC_AC_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_AS_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_EH_1000_bt2)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_JM_1000_bt2)$methyl_n)),[m
[32m+[m[32m  c(length(AC_AC_1000_bt2),[m
[32m+[m[32m    length(AC_AS_1000_bt2),[m
[32m+[m[32m    length(AC_EH_1000_bt2),[m
[32m+[m[32m    length(AC_JM_1000_bt2))[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_bt2) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered", "CpGs_aligned", "seqs_aligned")[m
[32m+[m
[32m+[m[32mdf_methyl_data_mini <- data.frame([m
[32m+[m[32m  c("mini"),[m
[32m+[m[32m  c("AC","AS","EH"),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_mini[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini[[3]])$methyl_n)),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_mini_filtered[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini_filtered[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_mini_filtered[[3]])$methyl_n)),[m
[32m+[m[32m  c(length(overlap_seqs_mini[[1]]),[m
[32m+[m[32m    length(overlap_seqs_mini[[2]]),[m
[32m+[m[32m    length(overlap_seqs_mini[[3]])),[m
[32m+[m[32m  c(length(overlap_seqs_mini_filtered[[1]]),[m
[32m+[m[32m    length(overlap_seqs_mini_filtered[[2]]),[m
[32m+[m[32m    length(overlap_seqs_mini_filtered[[3]])),[m
[32m+[m[32m  c(sum(mcols(AC_AC_1000_mini)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_AS_1000_mini)$methyl_n),[m
[32m+[m[32m    sum(mcols(AC_EH_1000_mini)$methyl_n)),[m
[32m+[m[32m  c(length(AC_AC_1000_mini),[m
[32m+[m[32m    length(AC_AS_1000_mini),[m
[32m+[m[32m    length(AC_EH_1000_mini))[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_mini) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered",  "CpGs_aligned", "seqs_aligned")[m
[32m+[m
[32m+[m[32mdf_methyl_data_both <- data.frame([m
[32m+[m[32m  c("both"),[m
[32m+[m[32m  c("AC","AS","EH"),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(sum(mcols(overlap_seqs_both[[1]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_both[[2]])$methyl_n),[m
[32m+[m[32m    sum(mcols(overlap_seqs_both[[3]])$methyl_n)),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(length(overlap_seqs_both[[1]]),[m
[32m+[m[32m    length(overlap_seqs_both[[2]]),[m
[32m+[m[32m    length(overlap_seqs_both[[3]])),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA),[m
[32m+[m[32m  c(NA,[m
[32m+[m[32m    NA,[m
[32m+[m[32m    NA)[m
[32m+[m[32m)[m
[32m+[m[32mcolnames(df_methyl_data_both) <- c("method","species", "CpGs","CpGs_filtered","seqs_overlap","seqs_filtered", "CpGs_aligned", "seqs_aligned")[m
[32m+[m[32m# combine dfs[m
[32m+[m[32mdf_methyl_data <- rbind(df_methyl_data_bt2,df_methyl_data_mini, df_methyl_data_both)[m
[32m+[m
[32m+[m[32mdf_save_name <- paste0(save_path, "methyl_overview.csv")[m
[32m+[m[32mwrite.csv(df_methyl_data, df_save_name)[m
[32m+[m
[32m+[m[32m#### visualising data ####[m
[32m+[m[32mdf_long_CpG <- pivot_longer(df_methyl_data[1:3], cols = -species, names_to = "type", values_to = "count")[m
[32m+[m[32mdf_long_seq <- pivot_longer(df_methyl_data[c(-2:-3)], cols = -species, names_to = "type", values_to = "count")[m
[32m+[m
[32m+[m[32mggplot(df_long_CpG, aes(x = species, y = count, fill = type)) +[m[41m [m
[32m+[m[32m  geom_bar(stat = "identity", position = "dodge") +[m
[32m+[m[32m  scale_fill_brewer(palette = "Set1") +[m[41m [m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Comparison of Original and Filtered Counts",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Count",[m
[32m+[m[32m       fill = "Measurement")[m
[32m+[m
[32m+[m[32mggplot(df_long_seq, aes(x = species, y = count, fill = type)) +[m[41m [m
[32m+[m[32m  geom_bar(stat = "identity", position = "dodge") +[m
[32m+[m[32m  scale_fill_brewer(palette = "Set2") +[m[41m [m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Comparison of Original and Filtered Counts",[m
[32m+[m[32m       x = "Species",[m
[32m+[m[32m       y = "Count",[m
[32m+[m[32m       fill = "Measurement")[m
[32m+[m
[32m+[m[32m#### other things ####[m
[32m+[m
[32m+[m[32m# test_overlaps <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # returns the indexes of overlapping sequences[m[41m [m
[32m+[m[32m# test_overlaps_count <- countOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini) # count how many ranges were overlapping how many times[m
[32m+[m[32m# filtered_overlaps <- test_overlaps[test_overlaps_count>0][m
[32m+[m
[32m+[m[32mZF_EH_1000_AC_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_EH_1000_AS_ol_index <- findOverlaps(ZF_EH_1000_mini, ZF_AS_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AC_1000_AS_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_AS_1000_mini)[m
[32m+[m[32mZF_AC_1000_EH_ol_index <- findOverlaps(ZF_AC_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32mZF_AS_1000_AC_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_AC_1000_mini)[m
[32m+[m[32mZF_AS_1000_EH_ol_index <- findOverlaps(ZF_AS_1000_mini, ZF_EH_1000_mini)[m
[32m+[m
[32m+[m[32m# checking which sequences are overlapping in EH_AC and EH_AS[m
[32m+[m[32munique_ZF_EH_AC_AS_index_EH <- unique(queryHits(ZF_EH_1000_AC_ol_index)[queryHits(ZF_EH_1000_AC_ol_index) %in% queryHits(ZF_EH_1000_AS_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AC <- unique(queryHits(ZF_AC_1000_AS_ol_index)[queryHits(ZF_AC_1000_AS_ol_index) %in% queryHits(ZF_AC_1000_EH_ol_index)])[m
[32m+[m[32munique_ZF_EH_AC_AS_index_AS <- unique(queryHits(ZF_AS_1000_AC_ol_index)[queryHits(ZF_AS_1000_AC_ol_index) %in% queryHits(ZF_AS_1000_EH_ol_index)])[m
[32m+[m
[32m+[m[32m# making sure that the queryHits have the same number and objects in both AC and AS[m[41m [m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(queryHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# subjectHits do have different values and amounts because the sequences are overlapping various times[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AC_1000_mini)))[m
[32m+[m[32munique(subjectHits(findOverlaps(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH], ZF_AS_1000_mini)))[m
[32m+[m
[32m+[m[32m# getting sequence names which were overlapping[m
[32m+[m[32mseqnames_AC_1000 <-names(ZF_AC_1000_mini[unique_ZF_EH_AC_AS_index_AC])[m
[32m+[m[32mseqnames_AS_1000 <-names(ZF_AS_1000_mini[unique_ZF_EH_AC_AS_index_AS])[m
[32m+[m[32mseqnames_EH_1000 <- names(ZF_EH_1000_mini[unique_ZF_EH_AC_AS_index_EH])[m
[32m+[m
[32m+[m[32m#### getting sequences which overlap ####[m
[32m+[m
[32m+[m[32m#loading sequences[m
[32m+[m[32mAC_1000_seq <- readDNAStringSet("results-data/sequences/AC_CpG_1000bp.fasta")[m
[32m+[m[32mAS_1000_seq <- readDNAStringSet("results-data/sequences/AS_CpG_1000bp.fasta")[m
[32m+[m[32mEH_1000_seq <- readDNAStringSet("results-data/sequences/EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32mconserved_AC_1000 <- AC_1000_seq[AC_1000_seq@ranges@NAMES %in% unique(seqnames_AC_1000)][m
[32m+[m[32mconserved_AS_1000 <- AS_1000_seq[AS_1000_seq@ranges@NAMES %in% unique(seqnames_AS_1000)][m
[32m+[m[32mconserved_EH_1000 <- EH_1000_seq[EH_1000_seq@ranges@NAMES %in% unique(seqnames_EH_1000)][m
[32m+[m
[32m+[m[32m# write sequences as fasta[m
[32m+[m[32mAC_1000_filename <- paste0(save_path, "AC_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AC_1000, AC_1000_filename)[m
[32m+[m
[32m+[m[32mAS_1000_filename <- paste0(save_path, "AS_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_AS_1000, AS_1000_filename)[m
[32m+[m
[32m+[m[32mEH_1000_filename <- paste0(save_path, "EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(conserved_EH_1000, EH_1000_filename)[m
[32m+[m
[32m+[m[32m#combine fasta files[m
[32m+[m
[32m+[m[32mAC_AS_EH_1000_filename <- paste0(save_path, "AC_AS_EH_1000_conserved", suffix)[m
[32m+[m[32mwriteXStringSet(c(conserved_AC_1000,conserved_AS_1000,conserved_EH_1000), AC_AS_EH_1000_filename)[m
[32m+[m
[32m+[m
[32m+[m[32m# xx <- as.data.frame(mergeByOverlaps(ZF_EH_1000_mini, ZF_AC_1000_mini)) #merges overlapping sequences (non overlapping are retained as well)[m[41m [m
[32m+[m
[32m+[m[32m#### overlap settings ####[m
[32m+[m[32m# this is identifying what the amount of bps are which are overlapping[m
[32m+[m[32m# Extract the overlapping ranges[m
[32m+[m[32moverlappingRanges <- pintersect(granges(ZF_AC_1000_mini)[queryHits(ZF_AC_1000_AS_ol_index)], granges(ZF_AS_1000_mini)[subjectHits(ZF_AC_1000_AS_ol_index)])[m
[32m+[m
[32m+[m[32m# Calculate widths of the overlaps[m
[32m+[m[32moverlapWidths <- width(overlappingRanges)[m
[32m+[m[32mlength(overlapWidths[overlapWidths > 600])[m
[32m+[m
[32m+[m[32m#### visualizing overlaps ####[m
[32m+[m[32mdf <- data.frame(overlapWidths[overlapWidths > 600])[m
[32m+[m[32mggplot(df, aes(x = df$overlapWidths.overlapWidths...600.)) +[m
[32m+[m[32m  geom_histogram(binwidth = 10, fill = "darkblue") + # Adjust binwidth as needed[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = paste0("Distribution of Overlap Lengths n= ", length(df$overlapWidths)),[m
[32m+[m[32m       x = "Overlap Length",[m
[32m+[m[32m       y = "Frequency")[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_ZF_EH_AC <- ZF_EH_1000_mini[unique(queryHits(ZF_EH_1000_AC_ol_index))][m
[32m+[m[32moverlap_ZF_EH_AC_AS_index <- findOverlaps(overlap_ZF_EH_AC, ZF_AS_1000_mini)[m
[32m+[m[32moverlap_ZF_EH_AC_AS <- overlap_ZF_EH_AC[unique(queryHits(overlap_ZF_EH_AC_AS_index))][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_1000_mini[queryHits(ZF_EH_1000_AS_ol_index)][m
[32m+[m
[32m+[m
[32m+[m[32m# queryHits() # This returns the indexes of the query (the first sequence) which was overlapping with something[m
[32m+[m[32m# subjectHits()[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini[queryHits(test_overlaps)][m[41m [m
[32m+[m[32mZF_AC_1000_mini[subjectHits(test_overlaps)][m
[32m+[m
[32m+[m
[32m+[m[32m# ZF_EH_5000 <- scanBam("results-data/minimap2/ZF_EH_5000_minimap.bam")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m[32m#### seq.len must be changed! The width refers to the aligned length and not sequence length[m
[32m+[m
[32m+[m[32mextract.seq <- function(seq.read, seq.len, name = "test", save.path = save_path, suffix = ".fasta", write = FALSE) {[m
[32m+[m[32m  extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]]) & width(seq.read[[1]][["seq"]]) >= seq.len][m
[32m+[m[32m  if(write == TRUE){[m
[32m+[m[32m    file_name <- paste0(save.path, name,"_conserved", suffix)[m
[32m+[m[32m    writeXStringSet(extracted_seq, file = file_name)[m
[32m+[m[32m  }[m
[32m+[m[32m  return(extracted_seq)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32mextract.seq(ZF_EH_100_mini, 100, name = "ZF_EH_100_mini", write = TRUE)[m
[32m+[m[32mextract.seq(ZF_EH_100_bt2, 100, name = "ZF_EH_100_bt2", write = TRUE)[m
[32m+[m
[32m+[m[32mZF_EH_1000_mini <- extract.seq(ZF_EH_1000_mini, 1000)[m
[32m+[m[32mtable(width(ZF_EH_1000_mini)>999)[m
[32m+[m[32msort(ZF_EH_1000_mini[[1]][["pos"]][!is.na(ZF_EH_1000_mini[[1]][["pos"]]) & ZF_EH_1000_mini[[1]][["rname"]]=="NC_007112.7"])[m
[32m+[m
[32m+[m[32m# extracted_seq <- ZF_EH_100_mini[[1]][["seq"]][(ZF_EH_100_mini[[1]][["flag"]]) != 4][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extracted_seq <- ZF_EH_5000[[1]][["seq"]][!is.na(ZF_EH_5000[[1]][["pos"]]) & ZF_EH_5000[[1]][["qwidth"]] > 0][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# names(extracted_seq) <- ZF_EH_5000[[1]][["qname"]][!is.na(ZF_EH_5000[[1]][["pos"]])][m
[32m+[m[32m# writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# extract.seq <- function(seq.read, name, save.path = save_path,  suffix = suffix) {[m
[32m+[m[32m#   extracted_seq <- seq.read[[1]][["seq"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   names(extracted_seq) <- seq.read[[1]][["qname"]][!is.na(seq.read[[1]][["pos"]])][m
[32m+[m[32m#   writeXStringSet(extracted_seq, file = paste0(save.path, name,"_conserved", suffix))[m
[32m+[m[32m# }[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# extract.seq(ZF_EH_5000, ZF_EH_5000, save_path, suffix)[m
[32m+[m
[32m+[m[32mwriteXStringSet(extracted_seq, file = "/workspace/cfngle/results-data/02_conserved_seq/ZF_EH_100_conserved.fasta")[m
[32m+[m[41m                      [m
\ No newline at end of file[m
[1mdiff --git a/02_conserved_sequences_AS_v-1.0.R b/02_conserved_sequences_AS_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..7e1e485[m
[1m--- /dev/null[m
[1m+++ b/02_conserved_sequences_AS_v-1.0.R[m
[36m@@ -0,0 +1,198 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Conserved sequences will be extracted from the aligned sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32m# library(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m[32m# data bowtie2[m[41m [m
[32m+[m[32mAC_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_JM_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_JM_243285_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAC_ZF_1000_bt2 <- readGAlignments("results-data/bowtie2/AC_ZF_757883_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32mAS_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/AS_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAS_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/AS_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAS_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/AS_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAS_JM_1000_bt2 <- readGAlignments("results-data/bowtie2/AS_JM_243285_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mAS_ZF_1000_bt2 <- readGAlignments("results-data/bowtie2/AS_ZF_757883_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32mEH_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/EH_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mEH_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/EH_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mEH_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/EH_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mEH_JM_1000_bt2 <- readGAlignments("results-data/bowtie2/EH_JM_243285_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mEH_ZF_1000_bt2 <- readGAlignments("results-data/bowtie2/EH_ZF_757883_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32mJM_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/JM_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mJM_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/JM_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mJM_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/JM_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mJM_JM_1000_bt2 <- readGAlignments("results-data/bowtie2/JM_JM_243285_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mJM_ZF_1000_bt2 <- readGAlignments("results-data/bowtie2/JM_ZF_757883_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32mZF_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/ZF_AC_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mZF_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/ZF_AS_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mZF_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/ZF_EH_CpG_1000bp_bt2_.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mZF_JM_1000_bt2 <- readGAlignments("results-data/bowtie2/ZF_JM_243285_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mZF_ZF_1000_bt2 <- readGAlignments("results-data/bowtie2/ZF_ZF_757883_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m[32m## BOWTIE2[m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(AS_AC_1000_bt2), AC_metadata$seq),][m
[32m+[m[32mmcols(AS_AC_1000_bt2) <- data.frame(mcols(AS_AC_1000_bt2), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AS_AC_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(AS_AS_1000_bt2), AS_metadata$seq),][m
[32m+[m[32mmcols(AS_AS_1000_bt2) <- data.frame(mcols(AS_AS_1000_bt2), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AS_AS_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(AS_EH_1000_bt2), EH_metadata$seq),][m
[32m+[m[32mmcols(AS_EH_1000_bt2) <- data.frame(mcols(AS_EH_1000_bt2), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AS_EH_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("results-data/sequences/JM_metadata_243285_1000bp.csv")[m
[32m+[m[32mJM_metadata_matched <- JM_metadata[match(names(AS_JM_1000_bt2), JM_metadata$seq),][m
[32m+[m[32mmcols(AS_JM_1000_bt2) <- data.frame(mcols(AS_JM_1000_bt2), JM_metadata_matched$methyl_pos,JM_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AS_JM_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mZF_metadata <- read.csv("results-data/sequences/ZF_metadata_7578831000bp.csv")[m
[32m+[m[32mZF_metadata_matched <- ZF_metadata[match(names(AS_ZF_1000_bt2), ZF_metadata$seq),][m
[32m+[m[32mmcols(AS_ZF_1000_bt2) <- data.frame(mcols(AS_ZF_1000_bt2), ZF_metadata_matched$methyl_pos,ZF_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(AS_ZF_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32m## BOWTIE2 ##JM[m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(JM_AC_1000_bt2), AC_metadata$seq),][m
[32m+[m[32mmcols(JM_AC_1000_bt2) <- data.frame(mcols(JM_AC_1000_bt2), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(JM_AC_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(JM_AS_1000_bt2), AS_metadata$seq),][m
[32m+[m[32mmcols(JM_AS_1000_bt2) <- data.frame(mcols(JM_AS_1000_bt2), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(JM_AS_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(JM_EH_1000_bt2), EH_metadata$seq),][m
[32m+[m[32mmcols(JM_EH_1000_bt2) <- data.frame(mcols(JM_EH_1000_bt2), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(JM_EH_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("results-data/sequences/JM_metadata_243285_1000bp.csv")[m
[32m+[m[32mJM_metadata_matched <- JM_metadata[match(names(JM_JM_1000_bt2), JM_metadata$seq),][m
[32m+[m[32mmcols(JM_JM_1000_bt2) <- data.frame(mcols(JM_JM_1000_bt2), JM_metadata_matched$methyl_pos,JM_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(JM_JM_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mZF_metadata <- read.csv("results-data/sequences/ZF_metadata_7578831000bp.csv")[m
[32m+[m[32mZF_metadata_matched <- ZF_metadata[match(names(JM_ZF_1000_bt2), ZF_metadata$seq),][m
[32m+[m[32mmcols(JM_ZF_1000_bt2) <- data.frame(mcols(JM_ZF_1000_bt2), ZF_metadata_matched$methyl_pos,ZF_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(JM_ZF_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32m# This is just checking which chromosomes/scaffolds/contigs are shared between all aligned seqs[m
[32m+[m[32m# shared_AC_1000_mini <- AC_AC_1000_mini[seqnames(AC_AC_1000_mini) %in% seqnames(AC_AS_1000_mini) & seqnames(AC_AC_1000_mini) %in% seqnames(AC_EH_1000_mini)][m
[32m+[m
[32m+[m[32m#### Finding overlapping sequences ####[m
[32m+[m[32mfind.Overlap <- function(...) {[m
[32m+[m[32m  seq_list <- list(...)[m
[32m+[m[32m  seqs <- seq_list[[1]][m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seqs <- seqs[unique(queryHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # creating a list of all shared sequences[m[41m [m
[32m+[m[32m  seq_list_overlap <- list()[m
[32m+[m[41m  [m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seq_list_overlap[[i]] <- seq_list[[i]][unique(subjectHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  return(seq_list_overlap)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m## Bowtie2[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32moverlap_seqs_bt2_AC <- find.Overlap(AC_AC_1000_bt2,[m
[32m+[m[32m                                    AC_AS_1000_bt2,[m
[32m+[m[32m                                    AC_EH_1000_bt2,[m[41m [m
[32m+[m[32m                                    AC_JM_1000_bt2,[m
[32m+[m[32m                                    AC_ZF_1000_bt2[m
[32m+[m[32m                                    )[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32moverlap_seqs_bt2_AS <- find.Overlap(AS_AC_1000_bt2,[m
[32m+[m[32m                                    AS_AS_1000_bt2,[m
[32m+[m[32m                                    AS_EH_1000_bt2,[m[41m [m
[32m+[m[32m                                    AS_JM_1000_bt2,[m
[32m+[m[32m                                    AS_ZF_1000_bt2[m
[32m+[m[32m                                    )[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32moverlap_seqs_bt2_EH <- find.Overlap(EH_AC_1000_bt2,[m
[32m+[m[32m                                    EH_AS_1000_bt2,[m
[32m+[m[32m                                    EH_EH_1000_bt2,[m[41m [m
[32m+[m[32m                                    EH_JM_1000_bt2,[m
[32m+[m[32m                                    EH_ZF_1000_bt2[m
[32m+[m[32m                                    )[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32moverlap_seqs_bt2_JM <- find.Overlap(JM_AC_1000_bt2,[m
[32m+[m[32m                                    JM_AS_1000_bt2,[m
[32m+[m[32m                                    JM_EH_1000_bt2,[m[41m [m
[32m+[m[32m                                    JM_JM_1000_bt2,[m
[32m+[m[32m                                    JM_ZF_1000_bt2[m
[32m+[m[32m                                    )[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32moverlap_seqs_bt2_ZF <- find.Overlap(ZF_AC_1000_bt2,[m
[32m+[m[32m                                    ZF_AS_1000_bt2,[m
[32m+[m[32m                                    ZF_EH_1000_bt2,[m[41m [m
[32m+[m[32m                                    ZF_JM_1000_bt2,[m
[32m+[m[32m                                    ZF_ZF_1000_bt2[m
[32m+[m[32m                                    )[m
[32m+[m
[32m+[m[32m# unlist(lapply(overlap_seqs_bt2_AC, function(x) length(x)))[m
[32m+[m[32m# unlist(lapply(overlap_seqs_bt2_AS, function(x) length(x)))[m
[32m+[m[32m# unlist(lapply(overlap_seqs_bt2_EH, function(x) length(x)))[m
[32m+[m[32m# unlist(lapply(overlap_seqs_bt2_JM, function(x) length(x)))[m
[32m+[m[32m# unlist(lapply(overlap_seqs_bt2_ZF, function(x) length(x)))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# table(unlist(lapply(overlap_seqs_bt2_AC, function(x) width(x))) > 250)[m
[32m+[m[32m# table(unlist(lapply(overlap_seqs_bt2_AS, function(x) width(x))) > 250)[m
[32m+[m[32m# table(unlist(lapply(overlap_seqs_bt2_EH, function(x) width(x))) > 250)[m
[32m+[m[32m# table(unlist(lapply(overlap_seqs_bt2_JM, function(x) width(x))) > 250)[m
[32m+[m[32m# table(unlist(lapply(overlap_seqs_bt2_ZF, function(x) width(x))) > 250)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# table(unlist(lapply(overlap_seqs_bt2_JM, function(x) width(x))) > 100)[m
[32m+[m[32m# table(unlist(lapply(overlap_seqs_bt2_JM, function(x) width(x))) > 250)[m
[32m+[m[32m# table(unlist(lapply(overlap_seqs_bt2_JM, function(x) width(x))) > 250)[m
[32m+[m[32m# table(unlist(lapply(overlap_seqs_bt2_JM, function(x) width(x))) > 250)[m
[32m+[m[32m# overlap_seqs_bt2_filtered <- filter.GAlignments(overlap_seqs_bt2, 20, 200, input = "list")[m
[32m+[m
[32m+[m[32msave(overlap_seqs_bt2_AC, file = "results-data/02_conserved_seq/AC_overlaps_bt2.RData")[m
[32m+[m[32msave(overlap_seqs_bt2_AS, file = "results-data/02_conserved_seq/AS_overlaps_bt2.RData")[m
[32m+[m[32msave(overlap_seqs_bt2_EH, file = "results-data/02_conserved_seq/EH_overlaps_bt2.RData")[m
[32m+[m[32msave(overlap_seqs_bt2_JM, file = "results-data/02_conserved_seq/JM_overlaps_bt2.RData")[m
[32m+[m[32msave(overlap_seqs_bt2_ZF, file = "results-data/02_conserved_seq/ZF_overlaps_bt2.RData")[m
[32m+[m[41m      [m
\ No newline at end of file[m
[1mdiff --git a/02_human_AC_AS_EH_JM_conserved_sequences_v-1.0.R b/02_human_AC_AS_EH_JM_conserved_sequences_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..4aaf71a[m
[1m--- /dev/null[m
[1m+++ b/02_human_AC_AS_EH_JM_conserved_sequences_v-1.0.R[m
[36m@@ -0,0 +1,84 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Conserved sequences will be extracted from the aligned sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32m# library(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m[32m# data bowtie2[m[41m [m
[32m+[m[32mHS_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/human_AC_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mHS_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/human_AS_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mHS_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/human_EH_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mHS_JM_1000_bt2 <- readGAlignments("results-data/bowtie2/human_JM_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m
[32m+[m[32m## BOWTIE2[m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(HS_AC_1000_bt2), AC_metadata$seq),][m
[32m+[m[32mmcols(HS_AC_1000_bt2) <- data.frame(mcols(HS_AC_1000_bt2), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(HS_AC_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(HS_AS_1000_bt2), AS_metadata$seq),][m
[32m+[m[32mmcols(HS_AS_1000_bt2) <- data.frame(mcols(HS_AS_1000_bt2), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(HS_AS_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(HS_EH_1000_bt2), EH_metadata$seq),][m
[32m+[m[32mmcols(HS_EH_1000_bt2) <- data.frame(mcols(HS_EH_1000_bt2), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(HS_EH_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("results-data/sequences/JM_metadata_1000bp.csv")[m
[32m+[m[32mJM_metadata_matched <- JM_metadata[match(names(HS_JM_1000_bt2), JM_metadata$seq),][m
[32m+[m[32mmcols(HS_JM_1000_bt2) <- data.frame(mcols(HS_JM_1000_bt2), JM_metadata_matched$methyl_pos,JM_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(HS_JM_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m
[32m+[m[32m# This is just checking which chromosomes/scaffolds/contigs are shared between all aligned seqs[m
[32m+[m[32m# shared_AC_1000_mini <- AC_AC_1000_mini[seqnames(AC_AC_1000_mini) %in% seqnames(AC_AS_1000_mini) & seqnames(AC_AC_1000_mini) %in% seqnames(AC_EH_1000_mini)][m
[32m+[m
[32m+[m[32m#### Finding overlapping sequences ####[m
[32m+[m[32mfind.Overlap <- function(...) {[m
[32m+[m[32m  seq_list <- list(...)[m
[32m+[m[32m  seqs <- seq_list[[1]][m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seqs <- seqs[unique(queryHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # creating a list of all shared sequences[m[41m [m
[32m+[m[32m  seq_list_overlap <- list()[m
[32m+[m[41m  [m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seq_list_overlap[[i]] <- seq_list[[i]][unique(subjectHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  return(seq_list_overlap)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Run sequences through function ####[m
[32m+[m
[32m+[m[32m## Bowtie2[m
[32m+[m[32mHS_overlap_seqs_bt2 <- find.Overlap(HS_AC_1000_bt2,[m
[32m+[m[32m                                 HS_AS_1000_bt2,[m
[32m+[m[32m                                 HS_EH_1000_bt2,[m[41m [m
[32m+[m[32m                                 HS_JM_1000_bt2)[m
[32m+[m[32msave(HS_overlap_seqs_bt2, file = "results-data/02_conserved_seq/HS_AC_AS_EH_JM_overlaps_bt2.Rdata")[m
[32m+[m
[1mdiff --git a/02_human_AC_AS_EH_ZF_conserved_sequences_v-1.1.R b/02_human_AC_AS_EH_ZF_conserved_sequences_v-1.1.R[m
[1mnew file mode 100644[m
[1mindex 0000000..a2656dd[m
[1m--- /dev/null[m
[1m+++ b/02_human_AC_AS_EH_ZF_conserved_sequences_v-1.1.R[m
[36m@@ -0,0 +1,91 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Conserved sequences will be extracted from the aligned sequences[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32m# library(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m[32m# data bowtie2[m[41m [m
[32m+[m[32mHS_AC_1000_bt2 <- readGAlignments("results-data/bowtie2/human_AC_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mHS_AS_1000_bt2 <- readGAlignments("results-data/bowtie2/human_AS_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mHS_EH_1000_bt2 <- readGAlignments("results-data/bowtie2/human_EH_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mHS_JM_1000_bt2 <- readGAlignments("results-data/bowtie2/human_JM_243285_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m[32mHS_ZF_1000_bt2 <- readGAlignments("results-data/bowtie2/human_ZF_757883_CpG_1000bp_bt2.bam", use.names = TRUE, param = ScanBamParam(what = c("mapq")))[m
[32m+[m
[32m+[m
[32m+[m[32m## BOWTIE2 ##JM[m
[32m+[m[32mAC_metadata <- read.csv("results-data/sequences/AC_metadata_1000bp.csv")[m
[32m+[m[32mAC_metadata_matched <- AC_metadata[match(names(HS_AC_1000_bt2), AC_metadata$seq),][m
[32m+[m[32mmcols(HS_AC_1000_bt2) <- data.frame(mcols(HS_AC_1000_bt2), AC_metadata_matched$methyl_pos,AC_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(HS_AC_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mAS_metadata <- read.csv("results-data/sequences/AS_metadata_1000bp.csv")[m
[32m+[m[32mAS_metadata_matched <- AS_metadata[match(names(HS_AS_1000_bt2), AS_metadata$seq),][m
[32m+[m[32mmcols(HS_AS_1000_bt2) <- data.frame(mcols(HS_AS_1000_bt2), AS_metadata_matched$methyl_pos,AS_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(HS_AS_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mEH_metadata <- read.csv("results-data/sequences/EH_metadata_1000bp.csv")[m
[32m+[m[32mEH_metadata_matched <- EH_metadata[match(names(HS_EH_1000_bt2), EH_metadata$seq),][m
[32m+[m[32mmcols(HS_EH_1000_bt2) <- data.frame(mcols(HS_EH_1000_bt2), EH_metadata_matched$methyl_pos,EH_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(HS_EH_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("results-data/sequences/JM_metadata_243285_1000bp.csv")[m
[32m+[m[32mJM_metadata_matched <- JM_metadata[match(names(HS_JM_1000_bt2), JM_metadata$seq),][m
[32m+[m[32mmcols(HS_JM_1000_bt2) <- data.frame(mcols(HS_JM_1000_bt2), JM_metadata_matched$methyl_pos,JM_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(HS_JM_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32mZF_metadata <- read.csv("results-data/sequences/ZF_metadata_7578831000bp.csv")[m
[32m+[m[32mZF_metadata_matched <- ZF_metadata[match(names(HS_ZF_1000_bt2), ZF_metadata$seq),][m
[32m+[m[32mmcols(HS_ZF_1000_bt2) <- data.frame(mcols(HS_ZF_1000_bt2), ZF_metadata_matched$methyl_pos,ZF_metadata_matched$methyl_n)[m
[32m+[m[32mcolnames(mcols(HS_ZF_1000_bt2)) <- c("mapq", "methyl_pos", "methyl_n")[m
[32m+[m
[32m+[m[32m# This is just checking which chromosomes/scaffolds/contigs are shared between all aligned seqs[m
[32m+[m[32m# shared_AC_1000_mini <- AC_AC_1000_mini[seqnames(AC_AC_1000_mini) %in% seqnames(AC_AS_1000_mini) & seqnames(AC_AC_1000_mini) %in% seqnames(AC_EH_1000_mini)][m
[32m+[m
[32m+[m[32m#### Finding overlapping sequences ####[m
[32m+[m[32mfind.Overlap <- function(...) {[m
[32m+[m[32m  seq_list <- list(...)[m
[32m+[m[32m  seqs <- seq_list[[1]][m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seqs <- seqs[unique(queryHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # creating a list of all shared sequences[m[41m [m
[32m+[m[32m  seq_list_overlap <- list()[m
[32m+[m[41m  [m
[32m+[m[32m  for(i in 1:length(seq_list)) {[m
[32m+[m[32m    overlaps <- findOverlaps(seqs,seq_list[[i]])[m
[32m+[m[32m    seq_list_overlap[[i]] <- seq_list[[i]][unique(subjectHits(overlaps))][m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  return(seq_list_overlap)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### Run sequences through function ####[m
[32m+[m
[32m+[m[32m## Bowtie2[m
[32m+[m[32mHS_overlap_seqs_bt2 <- find.Overlap(HS_AC_1000_bt2,[m
[32m+[m[32m                                 HS_AS_1000_bt2,[m
[32m+[m[32m                                 HS_EH_1000_bt2,[m[41m [m
[32m+[m[32m                                 HS_JM_1000_bt2,[m
[32m+[m[32m                                 HS_ZF_1000_bt2[m
[32m+[m[32m                                 )[m
[32m+[m[32msave(HS_overlap_seqs_bt2, file = "results-data/02_conserved_seq/HS_AC_EH_ZF_overlaps_bt2.Rdata")[m
[32m+[m
[1mdiff --git a/02_minimap2_04_ZF.sl b/02_minimap2_04_ZF.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..38f6277[m
[1m--- /dev/null[m
[1m+++ b/02_minimap2_04_ZF.sl[m
[36m@@ -0,0 +1,48 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:10:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m
[32m+[m[32m## ZF rgenome[m
[32m+[m[32mpath_rgenome=ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna[m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_1000bp[0]} > ${path_results}minimap2/ZF_AC_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_500bp[0]} > ${path_results}minimap2/ZF_AC_500_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_1000bp[1]} > ${path_results}minimap2/ZF_AS_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_500bp[1]} > ${path_results}minimap2/ZF_AS_500_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_1000bp[2]} > ${path_results}minimap2/ZF_EH_1000_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}sequences/${seq_500bp[2]} > ${path_results}minimap2/ZF_EH_500_minimap.sam -t 20[m[41m [m
[1mdiff --git a/02_minimap2_05_1000_JM.sl b/02_minimap2_05_1000_JM.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..13abd66[m
[1m--- /dev/null[m
[1m+++ b/02_minimap2_05_1000_JM.sl[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:10:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_1000bp=("JM_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32m#JM[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/ZF_JM_1000_minimap.sam[m
[32m+[m
[32m+[m[32mpath_rgenome="AC/GCF_902167405.1_gadMor3.0_genomic.fasta"[m
[32m+[m[32m#AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32m#JM[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/AC_JM_1000_minimap.sam[m
[32m+[m
[32m+[m[32mpath_rgenome="AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta"[m
[32m+[m[32m#AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32m#JM[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/AS_JM_1000_minimap.sam[m
[32m+[m
[32m+[m[32mpath_rgenome="EH/fMerMel2.1_cnag1.scaffolds.fa"[m
[32m+[m[32m#EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32m#JM[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/EH_JM_1000_minimap.sam[m
[32m+[m
[32m+[m[32mpath_rgenome="JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fna"[m
[32m+[m[32m#JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32m#JM[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/JM_JM_1000_minimap.sam[m
[1mdiff --git a/02_minimap2_05_1000_all.sl b/02_minimap2_05_1000_all.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..8b8b908[m
[1m--- /dev/null[m
[1m+++ b/02_minimap2_05_1000_all.sl[m
[36m@@ -0,0 +1,80 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:10:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mecho "ZF"[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/ZF_AC_1000_minimap.sam[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}${seq_1000bp[1]} > ${path_results}minimap2/ZF_AS_1000_minimap.sam[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_sequences}${seq_1000bp[2]} > ${path_results}minimap2/ZF_EH_1000_minimap.sam[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="AC/GCF_902167405.1_gadMor3.0_genomic.fasta"[m
[32m+[m[32m#AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/AC_AC_1000_minimap.sam[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[1]} > ${path_results}minimap2/AC_AS_1000_minimap.sam[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[2]} > ${path_results}minimap2/AC_EH_1000_minimap.sam[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta"[m
[32m+[m[32m#AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/AS_AC_1000_minimap.sam[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[1]} > ${path_results}minimap2/AS_AS_1000_minimap.sam[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[2]} > ${path_results}minimap2/AS_EH_1000_minimap.sam[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="EH/fMerMel2.1_cnag1.scaffolds.fa"[m
[32m+[m[32m#EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/EH_AC_1000_minimap.sam[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[1]} > ${path_results}minimap2/EH_AS_1000_minimap.sam[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[2]} > ${path_results}minimap2/EH_EH_1000_minimap.sam[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="JM/rgenome/GCF_002234675.1_ASM223467v1_genomic.fna"[m
[32m+[m[32m#JM[m
[32m+[m[32mecho "JM"[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[0]} > ${path_results}minimap2/JM_AC_1000_minimap.sam[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[1]} > ${path_results}minimap2/JM_AS_1000_minimap.sam[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}$path_rgenome ${path_sequences}${seq_1000bp[2]} > ${path_results}minimap2/JM_EH_1000_minimap.sam[m[41m [m
[1mdiff --git a/02a_extract_conserved_seq.ipynb b/02a_extract_conserved_seq.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..1469127[m
[1m--- /dev/null[m
[1m+++ b/02a_extract_conserved_seq.ipynb[m
[36m@@ -0,0 +1,484 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "id": "22cc4be0-6889-46cb-9bc2-4c12611d9108",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Currently Loaded Modulefiles:\n",[m
[32m+[m[32m      " 1) \u001b[46mpowerPlant/core\u001b[0m    4) git/2.21.0        7) perl/5.36.0         \n",[m
[32m+[m[32m      " 2) texlive/20230914   5) \u001b[46mSlurm/21.08.8-2\u001b[0m   8) slurm-utils/latest  \n",[m
[32m+[m[32m      " 3) pandoc/1.19.2      6) perlbrew/0.76     9) samtools/1.16       \n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Key:\n",[m
[32m+[m[32m      "\u001b[46msticky\u001b[0m  \n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "# Alignments for various species to reference genomes\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# loading modules\n",[m
[32m+[m[32m    "module load samtools\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# checking active \n",[m
[32m+[m[32m    "module list"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "bfe7d9f7-6ee6-4b2c-a78d-2128970086be",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## setting up variables \n",[m
[32m+[m[32m    "# paths\n",[m
[32m+[m[32m    "path_raw=/workspace/cfngle/raw-data/\n",[m
[32m+[m[32m    "path_results=/workspace/cfngle/results-data/\n",[m
[32m+[m[32m    "path_sequences=/workspace/cfngle/results-data/sequences/\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# filenames\n",[m
[32m+[m[32m    "# seqs\n",[m
[32m+[m[32m    "seq_100bp=(\"AC_CpG_100bp\" \"AS_CpG_100bp\" \"EH_CpG_100bp\")\n",[m
[32m+[m[32m    "seq_200bp=(\"AC_CpG_200bp\" \"AS_CpG_200bp\" \"EH_CpG_200bp\")\n",[m
[32m+[m[32m    "seq_500bp=(\"AC_CpG_500bp\" \"AS_CpG_500bp\" \"EH_CpG_500bp\")\n",[m
[32m+[m[32m    "seq_1000bp=(\"AC_CpG_1000bp\" \"AS_CpG_1000bp\" \"EH_CpG_1000bp\")\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# suffix\n",[m
[32m+[m[32m    "suffix=\".fasta\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "568595ba-6783-41a9-b03b-dd060f22ee60",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### samtools ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## indexing files (.fasta)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "samtools faidx ${path_results}02_conserved_seq/ZF_EH_100_bt2_conserved$suffix \n"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "a2a802f9-52bf-496d-a996-996ad00186c2",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "#### samtools ####\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## sort (.bam)\n",[m
[32m+[m[32m    "samtools sort ${path_results}02_conserved_seq/ZF_EH_100_bt2_conserved -o ${path_results}\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "## indexing files (.bam)\n",[m
[32m+[m[32m    "samtools faidx ${path_results}02_conserved_seq/ZF_EH_100_bt2_conserved$suffix "[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "09ffc3ce-4b41-46f4-9aa1-9f232f844b8b",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "indexed sorted_AC_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AC_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_AS_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_EH_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "indexed sorted_ZF_EH_CpG_500bp_bt2_.bam\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "##03 index (.bam)\n",[m
[32m+[m[32m    "cd \"${path_results}bowtie2/\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for files in sorted*; do\n",[m
[32m+[m[32m    "    # Index\n",[m
[32m+[m[32m    "    samtools index \"$files\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    echo \"indexed $files\"\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 3,[m
[32m+[m[32m   "id": "03bd0dc2-b92d-43fc-a902-90a5c6f032e5",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Sorted AC_AC_CpG_1000bp_bt2_.bam to sorted_AC_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AC_CpG_100bp_bt2_.bam to sorted_AC_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AC_CpG_200bp_bt2_.bam to sorted_AC_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AC_CpG_500bp_bt2_.bam to sorted_AC_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AS_CpG_1000bp_bt2_.bam to sorted_AC_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AS_CpG_100bp_bt2_.bam to sorted_AC_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AS_CpG_200bp_bt2_.bam to sorted_AC_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_AS_CpG_500bp_bt2_.bam to sorted_AC_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_EH_CpG_1000bp_bt2_.bam to sorted_AC_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_EH_CpG_100bp_bt2_.bam to sorted_AC_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_EH_CpG_200bp_bt2_.bam to sorted_AC_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AC_EH_CpG_500bp_bt2_.bam to sorted_AC_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AC_CpG_1000bp_bt2_.bam to sorted_AS_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AC_CpG_100bp_bt2_.bam to sorted_AS_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AC_CpG_200bp_bt2_.bam to sorted_AS_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AC_CpG_500bp_bt2_.bam to sorted_AS_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AS_CpG_1000bp_bt2_.bam to sorted_AS_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AS_CpG_100bp_bt2_.bam to sorted_AS_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AS_CpG_200bp_bt2_.bam to sorted_AS_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_AS_CpG_500bp_bt2_.bam to sorted_AS_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_EH_CpG_1000bp_bt2_.bam to sorted_AS_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_EH_CpG_100bp_bt2_.bam to sorted_AS_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_EH_CpG_200bp_bt2_.bam to sorted_AS_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted AS_EH_CpG_500bp_bt2_.bam to sorted_AS_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AC_CpG_1000bp_bt2_.bam to sorted_EH_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AC_CpG_100bp_bt2_.bam to sorted_EH_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AC_CpG_200bp_bt2_.bam to sorted_EH_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AC_CpG_500bp_bt2_.bam to sorted_EH_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AS_CpG_1000bp_bt2_.bam to sorted_EH_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AS_CpG_100bp_bt2_.bam to sorted_EH_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AS_CpG_200bp_bt2_.bam to sorted_EH_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_AS_CpG_500bp_bt2_.bam to sorted_EH_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_EH_CpG_1000bp_bt2_.bam to sorted_EH_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_EH_CpG_100bp_bt2_.bam to sorted_EH_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_EH_CpG_200bp_bt2_.bam to sorted_EH_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted EH_EH_CpG_500bp_bt2_.bam to sorted_EH_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AC_CpG_1000bp_bt2_.bam to sorted_ZF_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AC_CpG_100bp_bt2_.bam to sorted_ZF_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AC_CpG_200bp_bt2_.bam to sorted_ZF_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AC_CpG_500bp_bt2_.bam to sorted_ZF_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AS_CpG_1000bp_bt2_.bam to sorted_ZF_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AS_CpG_100bp_bt2_.bam to sorted_ZF_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AS_CpG_200bp_bt2_.bam to sorted_ZF_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_AS_CpG_500bp_bt2_.bam to sorted_ZF_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_EH_CpG_1000bp_bt2_.bam to sorted_ZF_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_EH_CpG_100bp_bt2_.bam to sorted_ZF_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_EH_CpG_200bp_bt2_.bam to sorted_ZF_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Sorted ZF_EH_CpG_500bp_bt2_.bam to sorted_ZF_EH_CpG_500bp_bt2_.bam\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## sort (.bam)\n",[m
[32m+[m[32m    "cd \"${path_results}bowtie2/\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "for bamfile in *.bam; do\n",[m
[32m+[m[32m    "    # Output is defined as bam file + \"sorted\"\n",[m
[32m+[m[32m    "    bamfile_sorted=\"sorted_$bamfile\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Sort bam files\n",[m
[32m+[m[32m    "    samtools sort \"$bamfile\" > \"$bamfile_sorted\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    echo \"Sorted $bamfile to $bamfile_sorted\"\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 7,[m
[32m+[m[32m   "id": "bbd0b598-e898-499f-8b72-e59c95ebf3f8",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Converted AC_AC_CpG_1000bp_bt2_.sam to AC_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AC_CpG_100bp_bt2_.sam to AC_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AC_CpG_200bp_bt2_.sam to AC_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AC_CpG_500bp_bt2_.sam to AC_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AS_CpG_1000bp_bt2_.sam to AC_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AS_CpG_100bp_bt2_.sam to AC_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AS_CpG_200bp_bt2_.sam to AC_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_AS_CpG_500bp_bt2_.sam to AC_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_EH_CpG_1000bp_bt2_.sam to AC_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_EH_CpG_100bp_bt2_.sam to AC_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_EH_CpG_200bp_bt2_.sam to AC_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_EH_CpG_500bp_bt2_.sam to AC_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_JM_243285_CpG_1000bp_bt2.sam to AC_JM_243285_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted AC_JM_CpG_1000bp_bt2_.sam to AC_JM_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AC_ZF_757883_CpG_1000bp_bt2.sam to AC_ZF_757883_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted AC_ZF_CpG_1000bp_bt2.sam to AC_ZF_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted AS_AC_CpG_1000bp_bt2_.sam to AS_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AC_CpG_100bp_bt2_.sam to AS_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AC_CpG_200bp_bt2_.sam to AS_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AC_CpG_500bp_bt2_.sam to AS_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AS_CpG_1000bp_bt2_.sam to AS_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AS_CpG_100bp_bt2_.sam to AS_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AS_CpG_200bp_bt2_.sam to AS_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_AS_CpG_500bp_bt2_.sam to AS_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_EH_CpG_1000bp_bt2_.sam to AS_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_EH_CpG_100bp_bt2_.sam to AS_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_EH_CpG_200bp_bt2_.sam to AS_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_EH_CpG_500bp_bt2_.sam to AS_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_JM_243285_CpG_1000bp_bt2.sam to AS_JM_243285_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted AS_JM_CpG_1000bp_bt2_.sam to AS_JM_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted AS_ZF_757883_CpG_1000bp_bt2.sam to AS_ZF_757883_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted AS_ZF_CpG_1000bp_bt2.sam to AS_ZF_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted EH_AC_CpG_1000bp_bt2_.sam to EH_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AC_CpG_100bp_bt2_.sam to EH_AC_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AC_CpG_200bp_bt2_.sam to EH_AC_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AC_CpG_500bp_bt2_.sam to EH_AC_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AS_CpG_1000bp_bt2_.sam to EH_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AS_CpG_100bp_bt2_.sam to EH_AS_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AS_CpG_200bp_bt2_.sam to EH_AS_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_AS_CpG_500bp_bt2_.sam to EH_AS_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_EH_CpG_1000bp_bt2_.sam to EH_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_EH_CpG_100bp_bt2_.sam to EH_EH_CpG_100bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_EH_CpG_200bp_bt2_.sam to EH_EH_CpG_200bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_EH_CpG_500bp_bt2_.sam to EH_EH_CpG_500bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_JM_243285_CpG_1000bp_bt2.sam to EH_JM_243285_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted EH_JM_CpG_1000bp_bt2_.sam to EH_JM_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted EH_ZF_757883_CpG_1000bp_bt2.sam to EH_ZF_757883_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted EH_ZF_CpG_1000bp_bt2.sam to EH_ZF_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted human_AC_CpG_1000bp_bt2.sam to human_AC_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted human_AS_CpG_1000bp_bt2.sam to human_AS_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted human_EH_CpG_1000bp_bt2.sam to human_EH_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted human_JM_243285_CpG_1000bp_bt2.sam to human_JM_243285_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted human_JM_CpG_1000bp_bt2.sam to human_JM_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted human_ZF_757883_CpG_1000bp_bt2.sam to human_ZF_757883_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted JM_AC_CpG_1000bp_bt2_.sam to JM_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted JM_AS_CpG_1000bp_bt2_.sam to JM_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted JM_EH_CpG_1000bp_bt2_.sam to JM_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted JM_JM_243285_CpG_1000bp_bt2.sam to JM_JM_243285_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted JM_JM_CpG_1000bp_bt2_.sam to JM_JM_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted JM_ZF_757883_CpG_1000bp_bt2.sam to JM_ZF_757883_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted JM_ZF_CpG_1000bp_bt2.sam to JM_ZF_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted ZF_AC_CpG_1000bp_bt2_.sam to ZF_AC_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted ZF_AS_CpG_1000bp_bt2_.sam to ZF_AS_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted ZF_EH_CpG_1000bp_bt2_.sam to ZF_EH_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted ZF_JM_243285_CpG_1000bp_bt2.sam to ZF_JM_243285_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted ZF_JM_CpG_1000bp_bt2_.sam to ZF_JM_CpG_1000bp_bt2_.bam\n",[m
[32m+[m[32m      "Converted ZF_ZF_757883_CpG_1000bp_bt2.sam to ZF_ZF_757883_CpG_1000bp_bt2.bam\n",[m
[32m+[m[32m      "Converted ZF_ZF_CpG_1000bp_bt2.sam to ZF_ZF_CpG_1000bp_bt2.bam\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## converting .sam to .bam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "cd \"${path_results}bowtie2/\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Loop through all .sam files in the directory\n",[m
[32m+[m[32m    "for samfile in *.sam; do\n",[m
[32m+[m[32m    "    # Define the output BAM file name by replacing the .sam extension with .bam\n",[m
[32m+[m[32m    "    bamfile=\"${samfile%.sam}.bam\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Convert SAM to BAM\n",[m
[32m+[m[32m    "    samtools view -Sb \"$samfile\" > \"$bamfile\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    echo \"Converted $samfile to $bamfile\"\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 6,[m
[32m+[m[32m   "id": "4a4e8923-2cee-4487-9729-b1a50522973c",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "cd \"${path_results}bowtie2/\"\n",[m
[32m+[m[32m    "module load samtools\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "samtools view -Sb \"AC_JM_243285_CpG_1000bp_bt2.sam\" > \"AC_JM_243285_CpG_1000bp_bt2.bam\"\n",[m
[32m+[m[32m    "samtools view -Sb \"AC_ZF_757883_CpG_1000bp_bt2.sam\" > \"AC_ZF_757883_CpG_1000bp_bt2.bam\""[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 9,[m
[32m+[m[32m   "id": "75ed680d-ebed-4ee0-bc32-330b371e8e5c",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stdout",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Converted AC_AC_1000_minimap.sam to AC_AC_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_AC_100_minimap.sam to AC_AC_100_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_AC_200_minimap.sam to AC_AC_200_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_AC_500_minimap.sam to AC_AC_500_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_AS_1000_minimap.sam to AC_AS_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_AS_100_minimap.sam to AC_AS_100_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_AS_200_minimap.sam to AC_AS_200_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_AS_500_minimap.sam to AC_AS_500_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_EH_1000_minimap.sam to AC_EH_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_EH_100_minimap.sam to AC_EH_100_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_EH_200_minimap.sam to AC_EH_200_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_EH_500_minimap.sam to AC_EH_500_minimap.bam\n",[m
[32m+[m[32m      "Converted AC_JM_1000_minimap.sam to AC_JM_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_AC_1000_minimap.sam to AS_AC_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_AC_100_minimap.sam to AS_AC_100_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_AC_200_minimap.sam to AS_AC_200_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_AC_500_minimap.sam to AS_AC_500_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_AS_1000_minimap.sam to AS_AS_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_AS_100_minimap.sam to AS_AS_100_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_AS_200_minimap.sam to AS_AS_200_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_AS_500_minimap.sam to AS_AS_500_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_EH_1000_minimap.sam to AS_EH_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_EH_100_minimap.sam to AS_EH_100_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_EH_200_minimap.sam to AS_EH_200_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_EH_500_minimap.sam to AS_EH_500_minimap.bam\n",[m
[32m+[m[32m      "Converted AS_JM_1000_minimap.sam to AS_JM_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_AC_1000_minimap.sam to EH_AC_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_AC_100_minimap.sam to EH_AC_100_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_AC_200_minimap.sam to EH_AC_200_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_AC_500_minimap.sam to EH_AC_500_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_AS_1000_minimap.sam to EH_AS_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_AS_100_minimap.sam to EH_AS_100_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_AS_200_minimap.sam to EH_AS_200_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_AS_500_minimap.sam to EH_AS_500_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_EH_1000_minimap.sam to EH_EH_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_EH_100_minimap.sam to EH_EH_100_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_EH_200_minimap.sam to EH_EH_200_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_EH_500_minimap.sam to EH_EH_500_minimap.bam\n",[m
[32m+[m[32m      "Converted EH_JM_1000_minimap.sam to EH_JM_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted JM_AC_1000_minimap.sam to JM_AC_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted JM_AS_1000_minimap.sam to JM_AS_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted JM_EH_1000_minimap.sam to JM_EH_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted JM_JM_1000_minimap.sam to JM_JM_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_AC_1000_minimap.sam to ZF_AC_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_AC_100_minimap.sam to ZF_AC_100_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_AC_200_minimap.sam to ZF_AC_200_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_AC_500_minimap.sam to ZF_AC_500_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_AS_1000_minimap.sam to ZF_AS_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_AS_100_minimap.sam to ZF_AS_100_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_AS_200_minimap.sam to ZF_AS_200_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_AS_500_minimap.sam to ZF_AS_500_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_EH_1000_minimap.sam to ZF_EH_1000_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_EH_100_minimap.sam to ZF_EH_100_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_EH_200_minimap.sam to ZF_EH_200_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_EH_5000_minimap.sam to ZF_EH_5000_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_EH_500_minimap.sam to ZF_EH_500_minimap.bam\n",[m
[32m+[m[32m      "Converted ZF_JM_1000_minimap.sam to ZF_JM_1000_minimap.bam\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "## converting .sam to .bam\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "cd \"${path_results}minimap2/\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Loop through all .sam files in the directory\n",[m
[32m+[m[32m    "for samfile in *.sam; do\n",[m
[32m+[m[32m    "    # Define the output BAM file name by replacing the .sam extension with .bam\n",[m
[32m+[m[32m    "    bamfile=\"${samfile%.sam}.bam\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    # Convert SAM to BAM\n",[m
[32m+[m[32m    "    samtools view -Sb \"$samfile\" > \"$bamfile\"\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "    echo \"Converted $samfile to $bamfile\"\n",[m
[32m+[m[32m    "done"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "eb240606-bd9d-45c9-bb95-c2450573c8da",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "Bash",[m
[32m+[m[32m   "language": "bash",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "shell",[m
[32m+[m[32m   "file_extension": ".sh",[m
[32m+[m[32m   "mimetype": "text/x-sh",[m
[32m+[m[32m   "name": "bash"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/03a_AC_AS_EH_ZF_genomic_region_v-1.0.R b/03a_AC_AS_EH_ZF_genomic_region_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..72f8375[m
[1m--- /dev/null[m
[1m+++ b/03a_AC_AS_EH_ZF_genomic_region_v-1.0.R[m
[36m@@ -0,0 +1,40 @@[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(GenomicFeatures)[m
[32m+[m[32mlibrary(rtracklayer)[m
[32m+[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m[32mAC_annotations <- import("raw-data/AC/rgenome/annotations/ncbi_dataset/data/GCF_902167405.1/genomic.gff")[m
[32m+[m
[32m+[m[32mAC_all_mini <- c(overlap_seqs_mini[[1]],overlap_seqs_mini[[3]],overlap_seqs_mini[[3]])[m
[32m+[m[32msort(table(seqnames(AC_all_mini)))[m
[32m+[m
[32m+[m[32mAC_all_mini_ano_overlaps_index <- findOverlaps(AC_all_mini, AC_annotations)[m
[32m+[m[32mAC_all_mini_ano_overlaps <- AC_annotations[subjectHits(AC_all_mini_ano_overlaps_index)][m
[32m+[m
[32m+[m[32mtable(mcols(AC_all_mini_ano_overlaps)$type)[m
[32m+[m
[32m+[m[32mAC_all_mini_genes <- AC_all_mini_ano_overlaps[mcols(AC_all_mini_ano_overlaps)$type == "gene"][m
[32m+[m[32mAC_all_mini_genes_names <- unique(mcols(AC_all_mini_genes)$Name)[m
[32m+[m
[32m+[m[32m##bowtie2[m
[32m+[m[32mAC_all_bt2 <- c(overlap_seqs_bt2[[1]],overlap_seqs_bt2[[3]],overlap_seqs_bt2[[3]])[m
[32m+[m[32msort(table(seqnames(AC_all_bt2)))[m
[32m+[m
[32m+[m[32mAC_all_bt2_ano_overlaps_index <- findOverlaps(AC_all_bt2, AC_annotations)[m
[32m+[m[32mAC_all_bt2_ano_overlaps <- AC_annotations[subjectHits(AC_all_bt2_ano_overlaps_index)][m
[32m+[m
[32m+[m[32mtable(mcols(AC_all_bt2_ano_overlaps)$type)[m
[32m+[m
[32m+[m[32mAC_all_bt2_genes <- AC_all_bt2_ano_overlaps[mcols(AC_all_bt2_ano_overlaps)$type == "gene"][m
[32m+[m[32mAC_all_bt2_genes_names <- unique(mcols(AC_all_bt2_genes)$Name)[m
[32m+[m
[32m+[m
[32m+[m[32munique(mcols(AC_annotations)$type)[m
[32m+[m
[32m+[m
[32m+[m[32mtest_granges <- granges(overlap_seqs_mini_filtered[[2]])[m
[1mdiff --git a/03a_AC_AS_EH_genomic_region_v-1.0.R b/03a_AC_AS_EH_genomic_region_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..72f8375[m
[1m--- /dev/null[m
[1m+++ b/03a_AC_AS_EH_genomic_region_v-1.0.R[m
[36m@@ -0,0 +1,40 @@[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(GenomicFeatures)[m
[32m+[m[32mlibrary(rtracklayer)[m
[32m+[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m[32mAC_annotations <- import("raw-data/AC/rgenome/annotations/ncbi_dataset/data/GCF_902167405.1/genomic.gff")[m
[32m+[m
[32m+[m[32mAC_all_mini <- c(overlap_seqs_mini[[1]],overlap_seqs_mini[[3]],overlap_seqs_mini[[3]])[m
[32m+[m[32msort(table(seqnames(AC_all_mini)))[m
[32m+[m
[32m+[m[32mAC_all_mini_ano_overlaps_index <- findOverlaps(AC_all_mini, AC_annotations)[m
[32m+[m[32mAC_all_mini_ano_overlaps <- AC_annotations[subjectHits(AC_all_mini_ano_overlaps_index)][m
[32m+[m
[32m+[m[32mtable(mcols(AC_all_mini_ano_overlaps)$type)[m
[32m+[m
[32m+[m[32mAC_all_mini_genes <- AC_all_mini_ano_overlaps[mcols(AC_all_mini_ano_overlaps)$type == "gene"][m
[32m+[m[32mAC_all_mini_genes_names <- unique(mcols(AC_all_mini_genes)$Name)[m
[32m+[m
[32m+[m[32m##bowtie2[m
[32m+[m[32mAC_all_bt2 <- c(overlap_seqs_bt2[[1]],overlap_seqs_bt2[[3]],overlap_seqs_bt2[[3]])[m
[32m+[m[32msort(table(seqnames(AC_all_bt2)))[m
[32m+[m
[32m+[m[32mAC_all_bt2_ano_overlaps_index <- findOverlaps(AC_all_bt2, AC_annotations)[m
[32m+[m[32mAC_all_bt2_ano_overlaps <- AC_annotations[subjectHits(AC_all_bt2_ano_overlaps_index)][m
[32m+[m
[32m+[m[32mtable(mcols(AC_all_bt2_ano_overlaps)$type)[m
[32m+[m
[32m+[m[32mAC_all_bt2_genes <- AC_all_bt2_ano_overlaps[mcols(AC_all_bt2_ano_overlaps)$type == "gene"][m
[32m+[m[32mAC_all_bt2_genes_names <- unique(mcols(AC_all_bt2_genes)$Name)[m
[32m+[m
[32m+[m
[32m+[m[32munique(mcols(AC_annotations)$type)[m
[32m+[m
[32m+[m
[32m+[m[32mtest_granges <- granges(overlap_seqs_mini_filtered[[2]])[m
[1mdiff --git a/03b.1_JM_ZF_read_methyl_data_v-1.0.ipynb b/03b.1_JM_ZF_read_methyl_data_v-1.0.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..fab089a[m
[1m--- /dev/null[m
[1m+++ b/03b.1_JM_ZF_read_methyl_data_v-1.0.ipynb[m
[36m@@ -0,0 +1,166 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 1,[m
[32m+[m[32m   "id": "203d8a2b-9396-4d9a-b731-c8c3414a0b35",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Loading required package: GenomicRanges\n",[m
[32m+[m[32m      "Loading required package: stats4\n",[m
[32m+[m[32m      "Loading required package: BiocGenerics\n",[m
[32m+[m[32m      "Loading required package: parallel\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Attaching package: 'BiocGenerics'\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "The following objects are masked from 'package:parallel':\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,\n",[m
[32m+[m[32m      "    clusterExport, clusterMap, parApply, parCapply, parLapply,\n",[m
[32m+[m[32m      "    parLapplyLB, parRapply, parSapply, parSapplyLB\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "The following objects are masked from 'package:stats':\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    IQR, mad, sd, var, xtabs\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "The following objects are masked from 'package:base':\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    anyDuplicated, append, as.data.frame, basename, cbind, colMeans,\n",[m
[32m+[m[32m      "    colnames, colSums, dirname, do.call, duplicated, eval, evalq,\n",[m
[32m+[m[32m      "    Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply,\n",[m
[32m+[m[32m      "    lengths, Map, mapply, match, mget, order, paste, pmax, pmax.int,\n",[m
[32m+[m[32m      "    pmin, pmin.int, Position, rank, rbind, Reduce, rowMeans, rownames,\n",[m
[32m+[m[32m      "    rowSums, sapply, setdiff, sort, table, tapply, union, unique,\n",[m
[32m+[m[32m      "    unsplit, which, which.max, which.min\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading required package: S4Vectors\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Attaching package: 'S4Vectors'\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "The following object is masked from 'package:base':\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "    expand.grid\n",[m
[32m+[m[32m      "\n",[m
[32m+[m[32m      "Loading required package: IRanges\n",[m
[32m+[m[32m      "Loading required package: GenomeInfoDb\n",[m
[32m+[m[32m      "Warning message:\n",[m
[32m+[m[32m      "\"no function found corresponding to methods exports from 'GenomicAlignments' for: 'concatenateObjects'\"── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──\n",[m
[32m+[m[32m      "✔ ggplot2 3.3.2     ✔ purrr   0.3.4\n",[m
[32m+[m[32m      "✔ tibble  3.1.1     ✔ dplyr   1.0.5\n",[m
[32m+[m[32m      "✔ tidyr   1.1.3     ✔ stringr 1.4.0\n",[m
[32m+[m[32m      "✔ readr   1.3.1     ✔ forcats 0.4.0\n",[m
[32m+[m[32m      "── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n",[m
[32m+[m[32m      "✖ dplyr::collapse()   masks IRanges::collapse()\n",[m
[32m+[m[32m      "✖ dplyr::combine()    masks BiocGenerics::combine()\n",[m
[32m+[m[32m      "✖ dplyr::desc()       masks IRanges::desc()\n",[m
[32m+[m[32m      "✖ tidyr::expand()     masks S4Vectors::expand()\n",[m
[32m+[m[32m      "✖ dplyr::filter()     masks stats::filter()\n",[m
[32m+[m[32m      "✖ dplyr::first()      masks S4Vectors::first()\n",[m
[32m+[m[32m      "✖ dplyr::lag()        masks stats::lag()\n",[m
[32m+[m[32m      "✖ ggplot2::Position() masks BiocGenerics::Position(), base::Position()\n",[m
[32m+[m[32m      "✖ purrr::reduce()     masks GenomicRanges::reduce(), IRanges::reduce()\n",[m
[32m+[m[32m      "✖ dplyr::rename()     masks S4Vectors::rename()\n",[m
[32m+[m[32m      "✖ dplyr::select()     masks methylKit::select()\n",[m
[32m+[m[32m      "✖ dplyr::slice()      masks IRanges::slice()\n",[m
[32m+[m[32m      "✖ tidyr::unite()      masks methylKit::unite()\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "library(methylKit)\n",[m
[32m+[m[32m    "library(tidyverse)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "setwd(\"/workspace/cfngle/raw-data/\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 2,[m
[32m+[m[32m   "id": "7d8f99e0-c117-4ab2-9a81-ab803a4619ce",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "ZF_file_names <- list.files(\"ZF/008.methylkit_BM_local/\", pattern = \"*.txt\")\n",[m
[32m+[m[32m    "ZF_sample_names <- as.list(substr(ZF_file_names, start = 1, stop = 6))\n",[m
[32m+[m[32m    "ZF_file_names <- as.list(paste0(\"ZF/008.methylkit_BM_local/\", ZF_file_names))\n",[m
[32m+[m[32m    "ZF_treatment <- c(rep(c(0, 1), length.out = length(ZF_file_names)))\n",[m
[32m+[m[32m    "methyl_data_ZF <- methRead(ZF_file_names,\n",[m
[32m+[m[32m    "                            sample.id = ZF_sample_names,\n",[m
[32m+[m[32m    "                            assembly=\"GRCz11\",\n",[m
[32m+[m[32m    "                            header=TRUE, mincov = 1,\n",[m
[32m+[m[32m    "                            treatment = ZF_treatment)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "b9256dce-3a46-4931-bdd6-7b2626343869",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "save(methyl_data_ZF, file =\"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2_local.RData\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "0b177615-936e-4386-b732-a709cc840a44",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "JM_file_names <- list.files(\"JM/008.methylkit_BM_local/\", pattern = \"*.txt\")\n",[m
[32m+[m[32m    "JM_sample_names <- as.list(substr(JM_file_names, start = 1, stop = 6))\n",[m
[32m+[m[32m    "JM_file_names <- as.list(paste0(\"JM/008.methylkit_BM_local/\", JM_file_names))\n",[m
[32m+[m[32m    "JM_treatment <- c(rep(c(0, 1), length.out = length(JM_file_names)))\n",[m
[32m+[m[32m    "methyl_data_JM <- methRead(JM_file_names,\n",[m
[32m+[m[32m    "                            sample.id = JM_sample_names,\n",[m
[32m+[m[32m    "                            assembly=\"ASM223467v1\",\n",[m
[32m+[m[32m    "                            header=TRUE, mincov = 1,\n",[m
[32m+[m[32m    "                            treatment = JM_treatment)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "id": "96330d24-b8b5-4b09-b94f-c03f2a62bb9e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "save(methyl_data_JM, file = \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_JM_bt2_local.RData\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "R-3.5.0",[m
[32m+[m[32m   "language": "R",[m
[32m+[m[32m   "name": "ir3.5.0"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "r",[m
[32m+[m[32m   "file_extension": ".r",[m
[32m+[m[32m   "mimetype": "text/x-r-source",[m
[32m+[m[32m   "name": "R",[m
[32m+[m[32m   "pygments_lexer": "r",[m
[32m+[m[32m   "version": "3.5.0"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/03b_AC_AS_EH_JM_ZF_methylation_extraction_v-1.2.R b/03b_AC_AS_EH_JM_ZF_methylation_extraction_v-1.2.R[m
[1mnew file mode 100644[m
[1mindex 0000000..2f876bb[m
[1m--- /dev/null[m
[1m+++ b/03b_AC_AS_EH_JM_ZF_methylation_extraction_v-1.2.R[m
[36m@@ -0,0 +1,396 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of methylation data based on overlapping sequences[m[41m [m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m
[32m+[m[32mload("results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_bt2.R")[m
[32m+[m[32mload("results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32moverlap_seqs_mini[m
[32m+[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_AC_JM_bt2 <- overlap_seqs_bt2[[4]][m
[32m+[m[32moverlap_AC_ZF_bt2 <- overlap_seqs_bt2[[5]][m
[32m+[m
[32m+[m[32moverlap_AC_AC_mini <- overlap_seqs_mini[[1]][m
[32m+[m[32moverlap_AC_AS_mini <- overlap_seqs_mini[[2]][m
[32m+[m[32moverlap_AC_EH_mini <- overlap_seqs_mini[[3]][m
[32m+[m[32moverlap_AC_JM_mini <- overlap_seqs_mini[[4]][m
[32m+[m
[32m+[m[32m#### Extracting alignment data from CIGAR code ####[m
[32m+[m[32m# (see appendix)[m
[32m+[m[32m## function[m
[32m+[m[32mcigar.to.width <- function(seqs_aligned) {[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[32m  return(cigar_width_df)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### getting methylation position on aligned sequences ####[m
[32m+[m[32m# see appendix for explanation[m
[32m+[m[32m### function[m
[32m+[m[32mmap.methyl.to.align <- function(seqs_aligned, cigar_width_df, species = "undefined") {[m
[32m+[m[32m  # getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m[41m [m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[41m  [m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[41m  [m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m### master function[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m[32m#### getting all species transformed ####[m
[32m+[m
[32m+[m[32m### BT2[m
[32m+[m[32m#AC[m
[32m+[m[32m# df_cigar_AC_bt2 <- cigar.to.width(overlap_AC_AC_bt2)[m
[32m+[m[32m# AC_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_AC_bt2, df_cigar_AC_bt2, "AC")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #AS[m
[32m+[m[32m# df_cigar_AS_bt2 <- cigar.to.width(overlap_AC_AS_bt2)[m
[32m+[m[32m# AS_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_AS_bt2, df_cigar_AS_bt2, "AS")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #EH[m
[32m+[m[32m# df_cigar_EH_bt2 <- cigar.to.width(overlap_AC_EH_bt2)[m
[32m+[m[32m# EH_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_EH_bt2, df_cigar_EH_bt2, "EH")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #JM[m
[32m+[m[32m# df_cigar_JM_bt2 <- cigar.to.width(overlap_AC_JM_bt2)[m
[32m+[m[32m# JM_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_JM_bt2, df_cigar_JM_bt2, "JM")[m
[32m+[m
[32m+[m[32m#ALL Bowtie2[m
[32m+[m
[32m+[m[32mAC_methyl_df_bt2 <- get.methyl.sites(overlap_AC_AC_bt2, species = "AC", SMRs = SMR_b_bt2)[m
[32m+[m[32mAS_methyl_df_bt2 <- get.methyl.sites(overlap_AC_AS_bt2, species = "AS", SMRs = SMR_b_bt2)[m
[32m+[m[32mEH_methyl_df_bt2 <- get.methyl.sites(overlap_AC_EH_bt2, species = "EH", SMRs = SMR_b_bt2)[m
[32m+[m[32mJM_methyl_df_bt2 <- get.methyl.sites(overlap_AC_JM_bt2, species = "JM", SMRs = SMR_b_bt2)[m
[32m+[m[32mZF_methyl_df_bt2 <- get.methyl.sites(overlap_AC_ZF_bt2, species = "ZF", SMRs = SMR_b_bt2)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- bind_rows(AC_methyl_df_bt2, AS_methyl_df_bt2, EH_methyl_df_bt2,JM_methyl_df_bt2)[m
[32m+[m
[32m+[m[32mAC_chr_names <- sort(unique(combined_df_bt2$chr_align))[m
[32m+[m[32mAC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- cbind(combined_df_bt2, data.frame(Chr_align_simple = AC_chr_names_simple[match(combined_df_bt2$chr_align, AC_chr_names)], align_method = "Bowtie2"))[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ### Mini[m
[32m+[m[32m# #AC[m
[32m+[m[32m# df_cigar_AC_mini <- cigar.to.width(overlap_AC_AC_mini)[m
[32m+[m[32m# AC_methyl_df_mini <- map.methyl.to.align(overlap_AC_AC_mini, df_cigar_AC_mini, "AC")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #AS[m
[32m+[m[32m# df_cigar_AS_mini <- cigar.to.width(overlap_AC_AS_mini)[m
[32m+[m[32m# AS_methyl_df_mini <- map.methyl.to.align(overlap_AC_AS_mini, df_cigar_AS_mini, "AS")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #EH[m
[32m+[m[32m# df_cigar_EH_mini <- cigar.to.width(overlap_AC_EH_mini)[m
[32m+[m[32m# EH_methyl_df_mini <- map.methyl.to.align(overlap_AC_EH_mini, df_cigar_EH_mini, "EH")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #JM[m
[32m+[m[32m# df_cigar_JM_mini <- cigar.to.width(overlap_AC_JM_mini)[m
[32m+[m[32m# JM_methyl_df_mini <- map.methyl.to.align(overlap_AC_JM_mini, df_cigar_JM_mini, "JM")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #ALL Mini[m
[32m+[m[32m# combined_df_mini <- bind_rows(AC_methyl_df_mini, AS_methyl_df_mini, EH_methyl_df_mini,JM_methyl_df_mini)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# AC_chr_names <- sort(unique(combined_df_mini$chr_align))[m
[32m+[m[32m# AC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# combined_df_mini <- cbind(combined_df_mini, data.frame(Chr_align_simple = AC_chr_names_simple[match(combined_df_mini$chr_align, AC_chr_names)], align_method ="Minimap"))[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ### MINI & BOWTIE2[m
[32m+[m[32m# combined_df_bt2_mini <- rbind(combined_df_bt2, combined_df_mini)[m
[32m+[m[32m# combined_df_bt2_mini$Chr_align_simple <- factor(combined_df_bt2_mini$Chr_align_simple, levels = AC_chr_names_simple)[m
[32m+[m[32m# combined_df_bt2$Chr_align_simple <- factor(combined_df_bt2_mini$Chr_align_simple, levels = AC_chr_names_simple)[m
[32m+[m[32m# combined_df_mini$Chr_align_simple <- factor(combined_df_bt2_mini$Chr_align_simple, levels = AC_chr_names_simple)[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting data ####[m
[32m+[m[32m##bt2[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m# library(ggpattern)[m
[32m+[m
[32m+[m[32mggplot(combined_df_bt2, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2, chr_align == "NC_044048.1"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2, chr_align == "NC_044048.1" & aligned == TRUE), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1 on SMRs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2, aligned == TRUE), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr_align, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs on SMRs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m# stacked[m
[32m+[m[32mggplot(combined_df_bt2, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 1) +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 1, position = "dodge") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m
[32m+[m[32m##combined[m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All shared methylation regions for bowtie2 and minimap") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = species, shape = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 1) +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All shared methylation regions for bowtie2 and minimap") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 5"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 1, position = "dodge") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on one Chromosome") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m## mini only[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, align_method == "Minimap"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m# stacked[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, align_method == "Minimap"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 1) +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 1, position = "dodge") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m
[32m+[m[32m## Density plots[m[41m [m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = align_method, alpha = 0.5)) +[m
[32m+[m[32m  geom_density() +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method, alpha = 0.5)) +[m
[32m+[m[32m  geom_density() +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m#### FIND OUT >>> why the width for some ranges vary from the calculated width based on the CIGAR code ANSWER: it was the inserts (add to width) and deletion (take from width)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m# # getting start of alignment of CIGAR[m
[32m+[m[32m# cigar_sep <- cigar(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m#   sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# start_AS_AC <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m#   x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m# }) %>%[m[41m [m
[32m+[m[32m#   gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # getting end of alignment of CIGAR[m
[32m+[m[32m# end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m#   if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m#     x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m#   }) %>%[m[41m [m
[32m+[m[32m#   gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# seq_end <- qwidth(overlap_AC_AS_bt2) - end_AS_AC[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# cigar_width_df <- data.frame(row.names = names(overlap_AC_AS_bt2),start_AS_AC, seq_end, seq_end-start_AS_AC, width(overlap_AC_AS_bt2),width(overlap_AC_AS_bt2)-(seq_end-start_AS_AC))[m
[32m+[m[32m# names(cigar_width_df) <- c("start","end","width","width_align","diff")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # getting the start of sequence which was aligned[m
[32m+[m[32m# seq_start_pos <- names(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m#   gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m#   gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# seq_chr_name <- names(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m#   gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m#   gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # getting methylation site and normalizing to the aligned sequence part[m
[32m+[m[32m# methyl_sites <- mcols(overlap_AC_AS_bt2)$methyl_pos %>%[m[41m [m
[32m+[m[32m#   strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m# normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m# mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m# aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(overlap_AC_AS_bt2), SIMPLIFY = FALSE)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(overlap_AC_AS_bt2), SIMPLIFY = FALSE)[m
[32m+[m[32m# # giving the elements in the list the corresponding chromosome names[m[41m [m
[32m+[m[32m# # Map(function(l, v) list(l, list(v)), mapped_methyl_sites, seq_chr_name)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # creating a list of dataframes to be able to identify the CpGs and where they were coming from[m
[32m+[m[32m# final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m#   df <- data.frame(pos_rgenome = methyl_sites[[i]],[m[41m [m
[32m+[m[32m#                    pos_seq = mapped_methyl_sites[[i]],[m[41m [m
[32m+[m[32m#                    pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m#                    width_align = width(overlap_AC_AS_bt2)[i],[m[41m [m
[32m+[m[32m#                    chr_align = seqnames(overlap_AC_AS_bt2)[i],[m[41m [m
[32m+[m[32m#                    aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m#                    seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i])[m
[32m+[m[32m#   df$Chr <- seq_chr_name[i][m
[32m+[m[32m#   df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m#   return(df)[m
[32m+[m[32m# })[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m# df_final <- df_final_methyl_sites_AS[m
[1mdiff --git a/03b_AC_AS_EH_JM_methylation_extraction_v-1.1.R b/03b_AC_AS_EH_JM_methylation_extraction_v-1.1.R[m
[1mnew file mode 100644[m
[1mindex 0000000..7e80a3c[m
[1m--- /dev/null[m
[1m+++ b/03b_AC_AS_EH_JM_methylation_extraction_v-1.1.R[m
[36m@@ -0,0 +1,368 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of methylation data based on overlapping sequences[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m
[32m+[m[32mload("results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_bt2.R")[m
[32m+[m[32mload("results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32moverlap_seqs_mini[m
[32m+[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_AC_JM_bt2 <- overlap_seqs_bt2[[4]][m
[32m+[m
[32m+[m[32moverlap_AC_AC_mini <- overlap_seqs_mini[[1]][m
[32m+[m[32moverlap_AC_AS_mini <- overlap_seqs_mini[[2]][m
[32m+[m[32moverlap_AC_EH_mini <- overlap_seqs_mini[[3]][m
[32m+[m[32moverlap_AC_JM_mini <- overlap_seqs_mini[[4]][m
[32m+[m
[32m+[m[32m#### Extracting alignment data from CIGAR code ####[m
[32m+[m[32m# (see appendix)[m
[32m+[m[32m## function[m
[32m+[m[32mcigar.to.width <- function(seqs_aligned) {[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[32m  return(cigar_width_df)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### getting methylation position on aligned sequences ####[m
[32m+[m[32m# see appendix for explanation[m
[32m+[m[32m### function[m
[32m+[m[32mmap.methyl.to.align <- function(seqs_aligned, cigar_width_df, species = "undefined") {[m
[32m+[m[32m  # getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m[41m [m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[41m  [m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[41m  [m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m### master function[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m[41m [m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m[32m#### getting all species transformed ####[m
[32m+[m
[32m+[m[32m### BT2[m
[32m+[m[32m#AC[m
[32m+[m[32mdf_cigar_AC_bt2 <- cigar.to.width(overlap_AC_AC_bt2)[m
[32m+[m[32mAC_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_AC_bt2, df_cigar_AC_bt2, "AC")[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mdf_cigar_AS_bt2 <- cigar.to.width(overlap_AC_AS_bt2)[m
[32m+[m[32mAS_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_AS_bt2, df_cigar_AS_bt2, "AS")[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mdf_cigar_EH_bt2 <- cigar.to.width(overlap_AC_EH_bt2)[m
[32m+[m[32mEH_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_EH_bt2, df_cigar_EH_bt2, "EH")[m
[32m+[m
[32m+[m[32m#JM[m
[32m+[m[32mdf_cigar_JM_bt2 <- cigar.to.width(overlap_AC_JM_bt2)[m
[32m+[m[32mJM_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_JM_bt2, df_cigar_JM_bt2, "JM")[m
[32m+[m
[32m+[m[32m#ALL Bowtie2[m
[32m+[m[32mcombined_df_bt2 <- bind_rows(AC_methyl_df_bt2, AS_methyl_df_bt2, EH_methyl_df_bt2,JM_methyl_df_bt2)[m
[32m+[m
[32m+[m[32mAC_chr_names <- sort(unique(combined_df_bt2$chr_align))[m
[32m+[m[32mAC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- cbind(combined_df_bt2, data.frame(Chr_align_simple = AC_chr_names_simple[match(combined_df_bt2$chr_align, AC_chr_names)], align_method = "Bowtie2"))[m[41m [m
[32m+[m
[32m+[m[32m### Mini[m
[32m+[m[32m#AC[m
[32m+[m[32mdf_cigar_AC_mini <- cigar.to.width(overlap_AC_AC_mini)[m
[32m+[m[32mAC_methyl_df_mini <- map.methyl.to.align(overlap_AC_AC_mini, df_cigar_AC_mini, "AC")[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mdf_cigar_AS_mini <- cigar.to.width(overlap_AC_AS_mini)[m
[32m+[m[32mAS_methyl_df_mini <- map.methyl.to.align(overlap_AC_AS_mini, df_cigar_AS_mini, "AS")[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mdf_cigar_EH_mini <- cigar.to.width(overlap_AC_EH_mini)[m
[32m+[m[32mEH_methyl_df_mini <- map.methyl.to.align(overlap_AC_EH_mini, df_cigar_EH_mini, "EH")[m
[32m+[m
[32m+[m[32m#JM[m
[32m+[m[32mdf_cigar_JM_mini <- cigar.to.width(overlap_AC_JM_mini)[m
[32m+[m[32mJM_methyl_df_mini <- map.methyl.to.align(overlap_AC_JM_mini, df_cigar_JM_mini, "JM")[m
[32m+[m
[32m+[m[32m#ALL Mini[m
[32m+[m[32mcombined_df_mini <- bind_rows(AC_methyl_df_mini, AS_methyl_df_mini, EH_methyl_df_mini,JM_methyl_df_mini)[m
[32m+[m
[32m+[m[32mAC_chr_names <- sort(unique(combined_df_mini$chr_align))[m
[32m+[m[32mAC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m
[32m+[m[32mcombined_df_mini <- cbind(combined_df_mini, data.frame(Chr_align_simple = AC_chr_names_simple[match(combined_df_mini$chr_align, AC_chr_names)], align_method ="Minimap"))[m[41m [m
[32m+[m
[32m+[m[32m### MINI & BOWTIE2[m
[32m+[m[32mcombined_df_bt2_mini <- rbind(combined_df_bt2, combined_df_mini)[m
[32m+[m[32mcombined_df_bt2_mini$Chr_align_simple <- factor(combined_df_bt2_mini$Chr_align_simple, levels = AC_chr_names_simple)[m
[32m+[m[32mcombined_df_bt2$Chr_align_simple <- factor(combined_df_bt2_mini$Chr_align_simple, levels = AC_chr_names_simple)[m
[32m+[m[32mcombined_df_mini$Chr_align_simple <- factor(combined_df_bt2_mini$Chr_align_simple, levels = AC_chr_names_simple)[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting data ####[m
[32m+[m[32m##bt2[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m# library(ggpattern)[m
[32m+[m
[32m+[m[32mggplot(combined_df_bt2, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2, chr_align == "NC_044048.1"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2, chr_align == "NC_044048.1" & aligned == TRUE), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1 on SMRs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2, aligned == TRUE), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr_align, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs on SMRs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m##combineds[m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All shared methylation regions for bowtie2 and minimap") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = species, shape = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 1) +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All shared methylation regions for bowtie2 and minimap") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 5"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 1, position = "dodge") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on one Chromosome") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m## mini only[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, align_method == "Minimap"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m# stacked[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, align_method == "Minimap"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 1) +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 1, position = "dodge") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m
[32m+[m[32m## Density plots[m[41m [m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = align_method, alpha = 0.5)) +[m
[32m+[m[32m  geom_density() +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method, alpha = 0.5)) +[m
[32m+[m[32m  geom_density() +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m#### FIND OUT >>> why the width for some ranges vary from the calculated width based on the CIGAR code ANSWER: it was the inserts (add to width) and deletion (take from width)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m# # getting start of alignment of CIGAR[m
[32m+[m[32m# cigar_sep <- cigar(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m#   sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# start_AS_AC <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m#   x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m# }) %>%[m[41m [m
[32m+[m[32m#   gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # getting end of alignment of CIGAR[m
[32m+[m[32m# end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m#   if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m#     x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m#   }) %>%[m[41m [m
[32m+[m[32m#   gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# seq_end <- qwidth(overlap_AC_AS_bt2) - end_AS_AC[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# cigar_width_df <- data.frame(row.names = names(overlap_AC_AS_bt2),start_AS_AC, seq_end, seq_end-start_AS_AC, width(overlap_AC_AS_bt2),width(overlap_AC_AS_bt2)-(seq_end-start_AS_AC))[m
[32m+[m[32m# names(cigar_width_df) <- c("start","end","width","width_align","diff")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # getting the start of sequence which was aligned[m
[32m+[m[32m# seq_start_pos <- names(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m#   gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m#   gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# seq_chr_name <- names(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m#   gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m#   gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # getting methylation site and normalizing to the aligned sequence part[m
[32m+[m[32m# methyl_sites <- mcols(overlap_AC_AS_bt2)$methyl_pos %>%[m[41m [m
[32m+[m[32m#   strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m# normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m# mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m# aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(overlap_AC_AS_bt2), SIMPLIFY = FALSE)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(overlap_AC_AS_bt2), SIMPLIFY = FALSE)[m
[32m+[m[32m# # giving the elements in the list the corresponding chromosome names[m[41m [m
[32m+[m[32m# # Map(function(l, v) list(l, list(v)), mapped_methyl_sites, seq_chr_name)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # creating a list of dataframes to be able to identify the CpGs and where they were coming from[m
[32m+[m[32m# final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m#   df <- data.frame(pos_rgenome = methyl_sites[[i]],[m[41m [m
[32m+[m[32m#                    pos_seq = mapped_methyl_sites[[i]],[m[41m [m
[32m+[m[32m#                    pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m#                    width_align = width(overlap_AC_AS_bt2)[i],[m[41m [m
[32m+[m[32m#                    chr_align = seqnames(overlap_AC_AS_bt2)[i],[m[41m [m
[32m+[m[32m#                    aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m#                    seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i])[m
[32m+[m[32m#   df$Chr <- seq_chr_name[i][m
[32m+[m[32m#   df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m#   return(df)[m
[32m+[m[32m# })[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m# df_final <- df_final_methyl_sites_AS[m
[1mdiff --git a/03b_AC_AS_EH_JM_methylation_extraction_v-1.2.R b/03b_AC_AS_EH_JM_methylation_extraction_v-1.2.R[m
[1mnew file mode 100644[m
[1mindex 0000000..0f517f2[m
[1m--- /dev/null[m
[1m+++ b/03b_AC_AS_EH_JM_methylation_extraction_v-1.2.R[m
[36m@@ -0,0 +1,394 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of methylation data based on overlapping sequences[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m
[32m+[m[32mload("results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_bt2.R")[m
[32m+[m[32mload("results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32moverlap_seqs_mini[m
[32m+[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_AC_JM_bt2 <- overlap_seqs_bt2[[4]][m
[32m+[m
[32m+[m[32moverlap_AC_AC_mini <- overlap_seqs_mini[[1]][m
[32m+[m[32moverlap_AC_AS_mini <- overlap_seqs_mini[[2]][m
[32m+[m[32moverlap_AC_EH_mini <- overlap_seqs_mini[[3]][m
[32m+[m[32moverlap_AC_JM_mini <- overlap_seqs_mini[[4]][m
[32m+[m
[32m+[m[32m#### Extracting alignment data from CIGAR code ####[m
[32m+[m[32m# (see appendix)[m
[32m+[m[32m## function[m
[32m+[m[32mcigar.to.width <- function(seqs_aligned) {[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[32m  return(cigar_width_df)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#### getting methylation position on aligned sequences ####[m
[32m+[m[32m# see appendix for explanation[m
[32m+[m[32m### function[m
[32m+[m[32mmap.methyl.to.align <- function(seqs_aligned, cigar_width_df, species = "undefined") {[m
[32m+[m[32m  # getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m[41m [m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[41m  [m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[41m  [m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m### master function[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m[32m#### getting all species transformed ####[m
[32m+[m
[32m+[m[32m### BT2[m
[32m+[m[32m#AC[m
[32m+[m[32m# df_cigar_AC_bt2 <- cigar.to.width(overlap_AC_AC_bt2)[m
[32m+[m[32m# AC_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_AC_bt2, df_cigar_AC_bt2, "AC")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #AS[m
[32m+[m[32m# df_cigar_AS_bt2 <- cigar.to.width(overlap_AC_AS_bt2)[m
[32m+[m[32m# AS_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_AS_bt2, df_cigar_AS_bt2, "AS")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #EH[m
[32m+[m[32m# df_cigar_EH_bt2 <- cigar.to.width(overlap_AC_EH_bt2)[m
[32m+[m[32m# EH_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_EH_bt2, df_cigar_EH_bt2, "EH")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #JM[m
[32m+[m[32m# df_cigar_JM_bt2 <- cigar.to.width(overlap_AC_JM_bt2)[m
[32m+[m[32m# JM_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_JM_bt2, df_cigar_JM_bt2, "JM")[m
[32m+[m
[32m+[m[32m#ALL Bowtie2[m
[32m+[m
[32m+[m[32mAC_methyl_df_bt2 <- get.methyl.sites(overlap_AC_AC_bt2, species = "AC", SMRs = SMR_b_bt2)[m
[32m+[m[32mAS_methyl_df_bt2 <- get.methyl.sites(overlap_AC_AS_bt2, species = "AS", SMRs = SMR_b_bt2)[m
[32m+[m[32mEH_methyl_df_bt2 <- get.methyl.sites(overlap_AC_EH_bt2, species = "EH", SMRs = SMR_b_bt2)[m
[32m+[m[32mJM_methyl_df_bt2 <- get.methyl.sites(overlap_AC_JM_bt2, species = "JM", SMRs = SMR_b_bt2)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- bind_rows(AC_methyl_df_bt2, AS_methyl_df_bt2, EH_methyl_df_bt2,JM_methyl_df_bt2)[m
[32m+[m
[32m+[m[32mAC_chr_names <- sort(unique(combined_df_bt2$chr_align))[m
[32m+[m[32mAC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- cbind(combined_df_bt2, data.frame(Chr_align_simple = AC_chr_names_simple[match(combined_df_bt2$chr_align, AC_chr_names)], align_method = "Bowtie2"))[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ### Mini[m
[32m+[m[32m# #AC[m
[32m+[m[32m# df_cigar_AC_mini <- cigar.to.width(overlap_AC_AC_mini)[m
[32m+[m[32m# AC_methyl_df_mini <- map.methyl.to.align(overlap_AC_AC_mini, df_cigar_AC_mini, "AC")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #AS[m
[32m+[m[32m# df_cigar_AS_mini <- cigar.to.width(overlap_AC_AS_mini)[m
[32m+[m[32m# AS_methyl_df_mini <- map.methyl.to.align(overlap_AC_AS_mini, df_cigar_AS_mini, "AS")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #EH[m
[32m+[m[32m# df_cigar_EH_mini <- cigar.to.width(overlap_AC_EH_mini)[m
[32m+[m[32m# EH_methyl_df_mini <- map.methyl.to.align(overlap_AC_EH_mini, df_cigar_EH_mini, "EH")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #JM[m
[32m+[m[32m# df_cigar_JM_mini <- cigar.to.width(overlap_AC_JM_mini)[m
[32m+[m[32m# JM_methyl_df_mini <- map.methyl.to.align(overlap_AC_JM_mini, df_cigar_JM_mini, "JM")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# #ALL Mini[m
[32m+[m[32m# combined_df_mini <- bind_rows(AC_methyl_df_mini, AS_methyl_df_mini, EH_methyl_df_mini,JM_methyl_df_mini)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# AC_chr_names <- sort(unique(combined_df_mini$chr_align))[m
[32m+[m[32m# AC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# combined_df_mini <- cbind(combined_df_mini, data.frame(Chr_align_simple = AC_chr_names_simple[match(combined_df_mini$chr_align, AC_chr_names)], align_method ="Minimap"))[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ### MINI & BOWTIE2[m
[32m+[m[32m# combined_df_bt2_mini <- rbind(combined_df_bt2, combined_df_mini)[m
[32m+[m[32m# combined_df_bt2_mini$Chr_align_simple <- factor(combined_df_bt2_mini$Chr_align_simple, levels = AC_chr_names_simple)[m
[32m+[m[32m# combined_df_bt2$Chr_align_simple <- factor(combined_df_bt2_mini$Chr_align_simple, levels = AC_chr_names_simple)[m
[32m+[m[32m# combined_df_mini$Chr_align_simple <- factor(combined_df_bt2_mini$Chr_align_simple, levels = AC_chr_names_simple)[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting data ####[m
[32m+[m[32m##bt2[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m# library(ggpattern)[m
[32m+[m
[32m+[m[32mggplot(combined_df_bt2, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2, chr_align == "NC_044048.1"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2, chr_align == "NC_044048.1" & aligned == TRUE), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1 on SMRs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2, aligned == TRUE), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr_align, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs on SMRs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m# stacked[m
[32m+[m[32mggplot(combined_df_bt2, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 1) +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 1, position = "dodge") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m
[32m+[m[32m##combined[m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All shared methylation regions for bowtie2 and minimap") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = species, shape = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 1) +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All shared methylation regions for bowtie2 and minimap") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 5"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 1, position = "dodge") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on one Chromosome") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m## mini only[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, align_method == "Minimap"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m# stacked[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, align_method == "Minimap"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 1) +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 1, position = "dodge") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m
[32m+[m[32m## Density plots[m[41m [m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = align_method, alpha = 0.5)) +[m
[32m+[m[32m  geom_density() +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method, alpha = 0.5)) +[m
[32m+[m[32m  geom_density() +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m#### FIND OUT >>> why the width for some ranges vary from the calculated width based on the CIGAR code ANSWER: it was the inserts (add to width) and deletion (take from width)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Appendix ####[m
[32m+[m
[32m+[m[32m# # getting start of alignment of CIGAR[m
[32m+[m[32m# cigar_sep <- cigar(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m#   sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# start_AS_AC <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m#   x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m# }) %>%[m[41m [m
[32m+[m[32m#   gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # getting end of alignment of CIGAR[m
[32m+[m[32m# end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m#   if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m#     x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m#   }) %>%[m[41m [m
[32m+[m[32m#   gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# seq_end <- qwidth(overlap_AC_AS_bt2) - end_AS_AC[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# cigar_width_df <- data.frame(row.names = names(overlap_AC_AS_bt2),start_AS_AC, seq_end, seq_end-start_AS_AC, width(overlap_AC_AS_bt2),width(overlap_AC_AS_bt2)-(seq_end-start_AS_AC))[m
[32m+[m[32m# names(cigar_width_df) <- c("start","end","width","width_align","diff")[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # getting the start of sequence which was aligned[m
[32m+[m[32m# seq_start_pos <- names(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m#   gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m#   gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# seq_chr_name <- names(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m#   gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m#   gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # getting methylation site and normalizing to the aligned sequence part[m
[32m+[m[32m# methyl_sites <- mcols(overlap_AC_AS_bt2)$methyl_pos %>%[m[41m [m
[32m+[m[32m#   strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m# normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m# mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m# aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(overlap_AC_AS_bt2), SIMPLIFY = FALSE)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(overlap_AC_AS_bt2), SIMPLIFY = FALSE)[m
[32m+[m[32m# # giving the elements in the list the corresponding chromosome names[m[41m [m
[32m+[m[32m# # Map(function(l, v) list(l, list(v)), mapped_methyl_sites, seq_chr_name)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # creating a list of dataframes to be able to identify the CpGs and where they were coming from[m
[32m+[m[32m# final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m#   df <- data.frame(pos_rgenome = methyl_sites[[i]],[m[41m [m
[32m+[m[32m#                    pos_seq = mapped_methyl_sites[[i]],[m[41m [m
[32m+[m[32m#                    pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m#                    width_align = width(overlap_AC_AS_bt2)[i],[m[41m [m
[32m+[m[32m#                    chr_align = seqnames(overlap_AC_AS_bt2)[i],[m[41m [m
[32m+[m[32m#                    aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m#                    seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i])[m
[32m+[m[32m#   df$Chr <- seq_chr_name[i][m
[32m+[m[32m#   df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m#   return(df)[m
[32m+[m[32m# })[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m# df_final <- df_final_methyl_sites_AS[m
[1mdiff --git a/03b_AC_AS_EH_methylation_extraction_v-1.0.R b/03b_AC_AS_EH_methylation_extraction_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..1bcf799[m
[1m--- /dev/null[m
[1m+++ b/03b_AC_AS_EH_methylation_extraction_v-1.0.R[m
[36m@@ -0,0 +1,82 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of methylation data based on overlapping sequences[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m
[32m+[m[32mload("results-data/02_conserved_seq/AC_AS_EH_overlaps_bt2.R")[m
[32m+[m[32mload("results-data/02_conserved_seq/AC_AS_EH_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32moverlap_seqs_mini[m
[32m+[m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m# getting start of alignment of CIGAR[m
[32m+[m[32mcigar_sep <- cigar(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m  sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m
[32m+[m[32mstart_AS_AC <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m  x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m}) %>%[m[41m [m
[32m+[m[32m  gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m
[32m+[m[32m# getting end of alignment of CIGAR[m
[32m+[m[32mend_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m  if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m    x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m  gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m
[32m+[m[32mseq_end <- qwidth(overlap_AC_AS_bt2) - end_AS_AC[m[41m [m
[32m+[m
[32m+[m[32mdf_start_end <- data.frame(row.names = names(overlap_AC_AS_bt2),start_AS_AC, seq_end, seq_end-start_AS_AC, width(overlap_AC_AS_bt2),width(overlap_AC_AS_bt2)-(seq_end-start_AS_AC))[m
[32m+[m[32mnames(df_start_end) <- c("start","end","width","width_align","diff")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m## getting methylation position on aligned sequences[m[41m [m
[32m+[m[32m# getting the start of sequence which was aligned[m
[32m+[m[32mseq_start_pos <- names(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m  gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m  gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m
[32m+[m[32mseq_chr_name <- names(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m  gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m  gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m
[32m+[m[32m# getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32mmethyl_sites <- mcols(overlap_AC_AS_bt2)$methyl_pos %>%[m[41m [m
[32m+[m[32m  strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32mnormalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32mmapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, df_start_end$start, SIMPLIFY = FALSE)[m
[32m+[m
[32m+[m[32mmethyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(overlap_AC_AS_bt2), SIMPLIFY = FALSE)[m
[32m+[m
[32m+[m[32m# giving the elements in the list the corresponding chromosome names[m[41m [m
[32m+[m[32mMap(function(l, v) list(l, list(v)), mapped_methyl_sites, seq_chr_name)[m
[32m+[m
[32m+[m[32mfinal_methyl_sites <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m  df <- data.frame(pos_rgenome = methyl_sites[[i]],pos_aglin = mapped_methyl_sites[[i]], width_align = width(overlap_AC_AS_bt2)[i], chr_align = seqnames(overlap_AC_AS_bt2)[i], aligned = methyl_on_aligned[[i]])[m
[32m+[m[32m  df$Chr <- seq_chr_name[i][m
[32m+[m[32m  df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m  return(df)[m
[32m+[m[32m})[m
[32m+[m
[32m+[m
[32m+[m[32mtestt <- cigar(overlap_AC_AS_bt2[names(overlap_AC_AS_bt2)=="AS_LG3_4867166:4868268"])[m
[32m+[m[32mregmatches(testt, gregexpr("\\d+[A-Z]", testt))[m
[32m+[m[41m           [m
[32m+[m[32mfiltered_mapped_methyl_sites <- mapped_methyl_sites[m
[32m+[m
[32m+[m
[1mdiff --git a/03b_AC_AS_EH_methylation_extraction_v-1.1.R b/03b_AC_AS_EH_methylation_extraction_v-1.1.R[m
[1mnew file mode 100644[m
[1mindex 0000000..cdf1445[m
[1m--- /dev/null[m
[1m+++ b/03b_AC_AS_EH_methylation_extraction_v-1.1.R[m
[36m@@ -0,0 +1,269 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of methylation data based on overlapping sequences[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m
[32m+[m[32mload("results-data/02_conserved_seq/AC_AS_EH_overlaps_bt2.R")[m
[32m+[m[32mload("results-data/02_conserved_seq/AC_AS_EH_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32moverlap_seqs_mini[m
[32m+[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m
[32m+[m[32moverlap_AC_AC_mini <- overlap_seqs_mini[[1]][m
[32m+[m[32moverlap_AC_AS_mini <- overlap_seqs_mini[[2]][m
[32m+[m[32moverlap_AC_EH_mini <- overlap_seqs_mini[[3]][m
[32m+[m
[32m+[m
[32m+[m[32m# getting start of alignment of CIGAR[m
[32m+[m[32mcigar_sep <- cigar(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m  sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m
[32m+[m[32mstart_AS_AC <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m  x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m}) %>%[m[41m [m
[32m+[m[32m  gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m
[32m+[m[32m# getting end of alignment of CIGAR[m
[32m+[m[32mend_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m  if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m    x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m  gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m
[32m+[m[32mseq_end <- qwidth(overlap_AC_AS_bt2) - end_AS_AC[m[41m [m
[32m+[m
[32m+[m[32mcigar_width_df <- data.frame(row.names = names(overlap_AC_AS_bt2),start_AS_AC, seq_end, seq_end-start_AS_AC, width(overlap_AC_AS_bt2),width(overlap_AC_AS_bt2)-(seq_end-start_AS_AC))[m
[32m+[m[32mnames(cigar_width_df) <- c("start","end","width","width_align","diff")[m
[32m+[m
[32m+[m[32m## function[m
[32m+[m[32mcigar.to.width <- function(seqs_aligned) {[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[32m  return(cigar_width_df)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdf_cigar_EH <- cigar.to.width(overlap_AC_EH_bt2)[m
[32m+[m
[32m+[m[32m#### getting methylation position on aligned sequences ####[m
[32m+[m[32m# getting the start of sequence which was aligned[m
[32m+[m[32mseq_start_pos <- names(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m  gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m  gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m
[32m+[m[32mseq_chr_name <- names(overlap_AC_AS_bt2) %>%[m[41m [m
[32m+[m[32m  gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m  gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m
[32m+[m[32m# getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32mmethyl_sites <- mcols(overlap_AC_AS_bt2)$methyl_pos %>%[m[41m [m
[32m+[m[32m  strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32mnormalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32mmapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32maligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(overlap_AC_AS_bt2), SIMPLIFY = FALSE)[m
[32m+[m
[32m+[m[32mmethyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(overlap_AC_AS_bt2), SIMPLIFY = FALSE)[m
[32m+[m[32m# giving the elements in the list the corresponding chromosome names[m[41m [m
[32m+[m[32m# Map(function(l, v) list(l, list(v)), mapped_methyl_sites, seq_chr_name)[m
[32m+[m
[32m+[m
[32m+[m[32m# creating a list of dataframes to be able to identify the CpGs and where they were coming from[m
[32m+[m[32mfinal_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m  df <- data.frame(pos_rgenome = methyl_sites[[i]],pos_seq = mapped_methyl_sites[[i]],pos_align = aligned_methyl_sites[[i]], width_align = width(overlap_AC_AS_bt2)[i], chr_align = seqnames(overlap_AC_AS_bt2)[i], aligned = methyl_on_aligned[[i]], seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i])[m
[32m+[m[32m  df$Chr <- seq_chr_name[i][m
[32m+[m[32m  df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m  return(df)[m
[32m+[m[32m})[m
[32m+[m
[32m+[m[32mdf_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32mdf_final <- df_final_methyl_sites_AS[m
[32m+[m
[32m+[m[32m### function[m
[32m+[m[32mmap.methyl.to.align <- function(seqs_aligned, cigar_width_df, species = "undefined") {[m
[32m+[m[32m  # getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i], pos_rgenome = methyl_sites[[i]],pos_seq = mapped_methyl_sites[[i]],pos_align = aligned_methyl_sites[[i]], width_align = width(seqs_aligned)[i], chr_align = seqnames(seqs_aligned)[i], aligned = methyl_on_aligned[[i]], seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i], species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[41m  [m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[41m  [m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### getting all species transformed ####[m
[32m+[m
[32m+[m[32m### BT2[m
[32m+[m[32m#AC[m
[32m+[m[32mdf_cigar_AC_bt2 <- cigar.to.width(overlap_AC_AC_bt2)[m
[32m+[m[32mAC_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_AC_bt2, df_cigar_AC_bt2, "AC")[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mdf_cigar_AS_bt2 <- cigar.to.width(overlap_AC_AS_bt2)[m
[32m+[m[32mAS_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_AS_bt2, df_cigar_AS_bt2, "AS")[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mdf_cigar_EH_bt2 <- cigar.to.width(overlap_AC_EH_bt2)[m
[32m+[m[32mEH_methyl_df_bt2 <- map.methyl.to.align(overlap_AC_EH_bt2, df_cigar_EH_bt2, "EH")[m
[32m+[m
[32m+[m[32m#ALL Bowtie2[m
[32m+[m[32mcombined_df_bt2 <- bind_rows(AC_methyl_df_bt2, AS_methyl_df_bt2, EH_methyl_df_bt2)[m
[32m+[m
[32m+[m[32mAC_chr_names <- sort(unique(combined_df_bt2$chr_align))[m
[32m+[m[32mAC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- cbind(combined_df_bt2, data.frame(Chr_align_simple = AC_chr_names_simple[match(combined_df_bt2$chr_align, AC_chr_names)], align_method = "Bowtie2"))[m[41m [m
[32m+[m
[32m+[m[32m### Mini[m
[32m+[m[32m#AC[m
[32m+[m[32mdf_cigar_AC_mini <- cigar.to.width(overlap_AC_AC_mini)[m
[32m+[m[32mAC_methyl_df_mini <- map.methyl.to.align(overlap_AC_AC_mini, df_cigar_AC_mini, "AC")[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mdf_cigar_AS_mini <- cigar.to.width(overlap_AC_AS_mini)[m
[32m+[m[32mAS_methyl_df_mini <- map.methyl.to.align(overlap_AC_AS_mini, df_cigar_AS_mini, "AS")[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mdf_cigar_EH_mini <- cigar.to.width(overlap_AC_EH_mini)[m
[32m+[m[32mEH_methyl_df_mini <- map.methyl.to.align(overlap_AC_EH_mini, df_cigar_EH_mini, "EH")[m
[32m+[m
[32m+[m[32m#ALL Mini[m
[32m+[m[32mcombined_df_mini <- bind_rows(AC_methyl_df_mini, AS_methyl_df_mini, EH_methyl_df_mini)[m
[32m+[m
[32m+[m[32mAC_chr_names <- sort(unique(combined_df_mini$chr_align))[m
[32m+[m[32mAC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m
[32m+[m[32mcombined_df_mini <- cbind(combined_df_mini, data.frame(Chr_align_simple = AC_chr_names_simple[match(combined_df_mini$chr_align, AC_chr_names)], align_method ="Minimap"))[m[41m [m
[32m+[m
[32m+[m
[32m+[m[32mcombined_df_bt2_mini <- rbind(combined_df_bt2, combined_df_mini)[m
[32m+[m[32mcombined_df_bt2_mini$Chr_align_simple <- factor(combined_df_bt2_mini$Chr_align_simple, levels = AC_chr_names_simple)[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting data ####[m
[32m+[m[32m##bt2[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mggplot(combined_df, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df, chr_align == "NC_044048.1"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df, chr_align == "NC_044048.1" & aligned == TRUE), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1 on SMRs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df, aligned == TRUE), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr_align, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs on SMRs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m##combineds[m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All shared methylation regions for bowtie2 and minimap") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 1, position = "dodge") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m## mini only[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, align_method == "Minimap"), aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method)) +[m
[32m+[m[32m  geom_histogram(alpha = 1, position = "dodge") +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m## Density plots[m[41m [m
[32m+[m[32mggplot(combined_df_bt2_mini, aes(x = pos_align, fill = align_method, alpha = 0.5)) +[m
[32m+[m[32m  geom_density() +[m[41m  [m
[32m+[m[32m  facet_wrap(~ Chr_align_simple, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m
[32m+[m
[32m+[m[32mggplot(subset(combined_df_bt2_mini, Chr_align_simple == "Chr 20"), aes(x = pos_align, fill = align_method, alpha = 0.5)) +[m
[32m+[m[32m  geom_density() +[m[41m  [m
[32m+[m[32m  labs(x = "Position", y = "CpGs",title = "CpGs on Chromosome 1") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m#### FIND OUT >>> why the width for some ranges vary from the calculated width based on the CIGAR code ANSWER: it was the inserts (add to width) and deletion (take from width)[m
[32m+[m
[1mdiff --git a/03b_human_AC_AS_EH_JM_methylation_extraction_v-1.0.R b/03b_human_AC_AS_EH_JM_methylation_extraction_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..1fa38e0[m
[1m--- /dev/null[m
[1m+++ b/03b_human_AC_AS_EH_JM_methylation_extraction_v-1.0.R[m
[36m@@ -0,0 +1,272 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of methylation data based on overlapping sequences[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m
[32m+[m[32mload("results-data/02_conserved_seq/HS_AC_AS_EH_JM_overlaps_bt2.Rdata")[m
[32m+[m
[32m+[m
[32m+[m[32mHS_overlap_seqs_bt2[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_HS_AC_bt2 <- HS_overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_HS_AS_bt2 <- HS_overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_HS_EH_bt2 <- HS_overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_HS_JM_bt2 <- HS_overlap_seqs_bt2[[4]][m
[32m+[m
[32m+[m[32m## getting SMR[m[41m [m
[32m+[m[32mHS_gr_overlap_seqs_bt2 <- lapply(HS_overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m
[32m+[m[32mHS_group_gr_overlap_bt2 <-  c(HS_gr_overlap_seqs_bt2[[1]], HS_gr_overlap_seqs_bt2[[2]], HS_gr_overlap_seqs_bt2[[3]], HS_gr_overlap_seqs_bt2[[4]])[m
[32m+[m[32mHS_SMR_b_bt2 <- GenomicRanges::reduce(HS_group_gr_overlap_bt2)[m
[32m+[m[32mnames(HS_SMR_b_bt2) <- sprintf("HS_SMR_b_bt2_%03d", 1:length(HS_SMR_b_bt2))[m
[32m+[m
[32m+[m[32mHS_AC_AS_EH_JM_SMR_b_bt2 <- HS_SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(HS_AC_AS_EH_JM_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/HS_AC_AS_EH_JM_SMR_b_bt2.Rdata")[m
[32m+[m
[32m+[m[32m### master function[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m[32m#### getting all species transformed ####[m
[32m+[m[32m#ALL Bowtie2[m
[32m+[m
[32m+[m[32mAC_methyl_df_bt2 <- get.methyl.sites(overlap_HS_AC_bt2, species = "AC", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mAS_methyl_df_bt2 <- get.methyl.sites(overlap_HS_AS_bt2, species = "AS", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mEH_methyl_df_bt2 <- get.methyl.sites(overlap_HS_EH_bt2, species = "EH", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mJM_methyl_df_bt2 <- get.methyl.sites(overlap_HS_JM_bt2, species = "JM", SMRs = HS_SMR_b_bt2)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- bind_rows(AC_methyl_df_bt2, AS_methyl_df_bt2, EH_methyl_df_bt2,JM_methyl_df_bt2)[m
[32m+[m
[32m+[m[32mHS_chr_names <- sort(unique(combined_df_bt2$chr_align))[m
[32m+[m[32m# AC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- cbind(combined_df_bt2, data.frame(align_method = "Bowtie2"))[m[41m [m
[32m+[m
[32m+[m[32m#### plotting data ####[m
[32m+[m[32m##bt2[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m# library(ggpattern)[m
[32m+[m
[32m+[m[32mggplot(combined_df_bt2, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr_align, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m#### get methyl sitesand value ####[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- get.methyl.sites(overlap_HS_AC_bt2, species = "AC", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mAS_methyl_sites <- get.methyl.sites(overlap_HS_AS_bt2, species = "AS", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mEH_methyl_sites <- get.methyl.sites(overlap_HS_EH_bt2, species = "EH", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mJM_methyl_sites <- get.methyl.sites(overlap_HS_JM_bt2, species = "JM", SMRs = HS_SMR_b_bt2)[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AS_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32m# JM_meth_data <- read.csv("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m[32mJM_meth_data <- load("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_179818_CpGs.Rdata")[m
[32m+[m[32mJM_meth_data <- JM_24_methyl_data[m
[32m+[m
[32m+[m[32mJM_age <- JM_meth_data$age[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_align) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp %in% AC_meth_data_test)[m
[32m+[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp[meth_sites_names_tmp %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values <- AC_meth_data[,meth_columns_tmp][m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites$Chr), ":", JM_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mJM_meth_values <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# JM_meth_values_t <- t(JM_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = JM_methyl_sites$SMR))[m
[1mdiff --git a/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.1.R b/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.1.R[m
[1mnew file mode 100644[m
[1mindex 0000000..d671929[m
[1m--- /dev/null[m
[1m+++ b/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.1.R[m
[36m@@ -0,0 +1,741 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of methylation data based on overlapping sequences[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m
[32m+[m[32mload("results-data/02_conserved_seq/HS_AC_AS_EH_ZF_overlaps_bt2.Rdata")[m
[32m+[m
[32m+[m
[32m+[m[32mHS_overlap_seqs_bt2[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_HS_AC_bt2 <- HS_overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_HS_AS_bt2 <- HS_overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_HS_EH_bt2 <- HS_overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_HS_ZF_bt2 <- HS_overlap_seqs_bt2[[4]][m
[32m+[m
[32m+[m[32m## getting SMR[m[41m [m
[32m+[m[32mHS_gr_overlap_seqs_bt2 <- lapply(HS_overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m
[32m+[m[32mHS_group_gr_overlap_bt2 <-  c(HS_gr_overlap_seqs_bt2[[1]], HS_gr_overlap_seqs_bt2[[2]], HS_gr_overlap_seqs_bt2[[3]], HS_gr_overlap_seqs_bt2[[4]])[m
[32m+[m[32mHS_SMR_b_bt2 <- GenomicRanges::reduce(HS_group_gr_overlap_bt2)[m
[32m+[m[32mnames(HS_SMR_b_bt2) <- sprintf("HS_SMR_b_bt2_%03d", 1:length(HS_SMR_b_bt2))[m
[32m+[m
[32m+[m[32mHS_AC_AS_EH_ZF_SMR_b_bt2 <- HS_SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(HS_AC_AS_EH_ZF_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/HS_AC_AS_EH_ZF_SMR_b_bt2.Rdata")[m
[32m+[m
[32m+[m[32m### master function[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m[32m#### getting all species transformed ####[m
[32m+[m[32m#ALL Bowtie2[m
[32m+[m
[32m+[m[32mAC_methyl_df_bt2 <- get.methyl.sites(overlap_HS_AC_bt2, species = "AC", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mAS_methyl_df_bt2 <- get.methyl.sites(overlap_HS_AS_bt2, species = "AS", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mEH_methyl_df_bt2 <- get.methyl.sites(overlap_HS_EH_bt2, species = "EH", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mZF_methyl_df_bt2 <- get.methyl.sites(overlap_HS_ZF_bt2, species = "JM", SMRs = HS_SMR_b_bt2)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- bind_rows(AC_methyl_df_bt2, AS_methyl_df_bt2, EH_methyl_df_bt2, ZF_methyl_df_bt2)[m
[32m+[m
[32m+[m[32mHS_chr_names <- sort(unique(combined_df_bt2$chr_align))[m
[32m+[m[32m# AC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m
[32m+[m[32m# combined_df_bt2 <- cbind(combined_df_bt2, data.frame(align_method = "Bowtie2"))[m[41m [m
[32m+[m
[32m+[m[32m#### plotting data ####[m
[32m+[m[32m##bt2[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m# library(ggpattern)[m
[32m+[m
[32m+[m[32mggplot(combined_df_bt2, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr_align, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m#### get methyl sites and value ####[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- get.methyl.sites(overlap_HS_AC_bt2, species = "AC", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mAS_methyl_sites <- get.methyl.sites(overlap_HS_AS_bt2, species = "AS", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mEH_methyl_sites <- get.methyl.sites(overlap_HS_EH_bt2, species = "EH", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mZF_methyl_sites <- get.methyl.sites(overlap_HS_ZF_bt2, species = "ZF", SMRs = HS_SMR_b_bt2)[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AS_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m[32mEH_metadata_samples <- read.csv("/workspace/cfngle/raw-data/EH/zzz-methyl_data/hake-samples.txt", sep = "\t")[m
[32m+[m[32mEH_sex <- EH_metadata_samples$sex[m
[32m+[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m
[32m+[m[32mZF_age <- ZF_meth_data$age/52[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp_AC <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values <- AC_meth_data[ ,meth_columns_tmp][m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32m# if males ONLY[m
[32m+[m[32mEH_meth_values <- EH_meth_values[EH_sex == "M",][m
[32m+[m[32mEH_age <- EH_age[EH_sex == "M"][m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites$Chr), ":", ZF_methyl_sites$pos_rgenome)[m
[32m+[m[32mtable(meth_sites_names_tmp %in% colnames(ZF_meth_data))[m
[32m+[m[32mmeth_columns_tmp <- ZF_meth_data[meth_sites_names_tmp] %>% as.vector()[m
[32m+[m[32mmeth_columns_tmp <- unlist(meth_columns_tmp)[m
[32m+[m[32m# ZF_meth_values_JM <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32mZF_meth_values <- ZF_meth_data[meth_sites_names_tmp][m
[32m+[m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values, file = paste0(save_dir, "HS_AC_meth_values.csv") )[m
[32m+[m[32msave(AC_meth_values, file = paste0(save_dir, "HS_AC_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values, file = paste0(save_dir, "HS_AS_meth_values.csv") )[m
[32m+[m[32msave(AS_meth_values, file = paste0(save_dir, "HS_AS_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values, file = paste0(save_dir, "HS_EH_meth_values.csv") )[m
[32m+[m[32msave(EH_meth_values, file = paste0(save_dir, "HS_EH_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values, file = paste0(save_dir, "HS_ZF_meth_values.csv") )[m
[32m+[m[32msave(ZF_meth_values, file = paste0(save_dir, "HS_ZF_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m#### Imputation ####[m
[32m+[m
[32m+[m[32m# There are several ways of imputing missing values, here we present two of them. Always set.seed() for imputations.[m
[32m+[m[32m#a) Method 1 using package “mice” (Multiple Imputation by Chained Equation)[m
[32m+[m[32mlibrary(mice)[m
[32m+[m
[32m+[m[32mset.seed(123)[m
[32m+[m
[32m+[m[32minit <- mice(ZF_meth_values, maxit=0)[m
[32m+[m
[32m+[m[32mm_method <- init$method[m
[32m+[m
[32m+[m[32mpred_matrix <- init$predictorMatrix[m
[32m+[m
[32m+[m[32mcolnames(ZF_meth_values)[m
[32m+[m[32mpredM[, c("age")]=0[m
[32m+[m[32mmeth[c("age")]=""[m
[32m+[m
[32m+[m[32mimputed <- mice(ZF_meth_values, method = m_method, predictorMatrix = pred_matrix, m = 5)[m
[32m+[m
[32m+[m[32m#b) Method 2 using package “zoo” (Missing values replaced by the mean or other function of its group)[m
[32m+[m[32mlibrary(zoo)[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mZF_meth_values_imputed <- na.aggregate(ZF_meth_values)[m
[32m+[m
[32m+[m[32m#### PCA ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values_imputed,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m[32m### plotting PCA[m
[32m+[m[32mlibrary(patchwork)[m
[32m+[m[32m# color palettes[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m[41m [m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mAC_pca_plot <- ggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[1], high = colpalOI[2]) +[m
[32m+[m[32m  # geom_text(aes(label = 1:nrow(AC_meth_data)), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mAS_pca_plot <- ggplot(PCA_values_AS, aes(x = PC1, y = PC2, color = AS_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[3], high = colpalOI[4]) +[m
[32m+[m[32m  # geom_text(aes(label = AS_meth_data$id), nudge_x = 0, nudge_y = 0.5) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mEH_pca_plot <- ggplot(PCA_values_EH, aes(x = PC2, y = PC1, color = EH_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[5], high = colpalOI[6]) +[m
[32m+[m[32m  # geom_text(aes(label = EH_meth_data$id), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_pca_plot <- ggplot(PCA_values_ZF, aes(x = PC1, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[1], high = colpalOI[5]) +[m
[32m+[m[32m  # geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m## plot all[m[41m [m
[32m+[m[32mAC_pca_plot + AS_pca_plot + EH_pca_plot + ZF_pca_plot +[m
[32m+[m[32m  plot_layout(nrow=2)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Methylation values ####[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, each = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$max_age <- 54[m
[32m+[m[32mAS_meth_values_long$rel_age <- AS_meth_values_long$age / AS_meth_values_long$max_age[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, each = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$max_age <- 25[m
[32m+[m[32mAC_meth_values_long$rel_age <- AC_meth_values_long$age / AC_meth_values_long$max_age[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, each = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$max_age <- 20[m
[32m+[m[32mEH_meth_values_long$rel_age <- EH_meth_values_long$age / EH_meth_values_long$max_age[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values_imputed, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, each = ncol(ZF_meth_values)) / 52[m
[32m+[m[32mZF_meth_values_long$max_age <- 5[m
[32m+[m[32mZF_meth_values_long$rel_age <- ZF_meth_values_long$age / ZF_meth_values_long$max_age[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m[32m### plotting[m
[32m+[m
[32m+[m[32mggplot(AS_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = colpal[1], high = colpal[7], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AS (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AC (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(ZF_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, cex = 0.1,  alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "#E69F00", high = "#0072B2", guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values ZF (human rgenome)")[m
[32m+[m
[32m+[m[32m## all boxplot[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
[32m+[m
[32m+[m
[32m+[m[32m#### correlation testing ####[m
[32m+[m[32m## correlation test between the selected CpGs and to age as well[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32mcor.test.age <- function(methyl_values, age, SMR = "not_defined", species = "undefined", method = "pearson") {[m
[32m+[m[32m  correlation_results <- list()[m
[32m+[m[32m  print(paste0("Running correlation test against age with ", method, " method. Results are stored in tibble."))[m
[32m+[m[32m  # Loop through each methylation site[m
[32m+[m[32m  for (i in 1:ncol(methyl_values)) {[m
[32m+[m[32m    site_name <- colnames(methyl_values)[i][m
[32m+[m[32m    # Perform correlation test with age[m
[32m+[m[32m    test_result <- cor.test(methyl_values[,i], age, method = method) # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m    [m
[32m+[m[32m    # Store the results[m
[32m+[m[32m    correlation_results[[site_name]] <- list([m
[32m+[m[32m      correlation_coefficient = test_result$estimate,[m
[32m+[m[32m      p_value = test_result$p.value[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32m  correlation_summary <- tibble([m
[32m+[m[32m    Site = names(correlation_results),[m
[32m+[m[32m    Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m    P_value = sapply(correlation_results, function(x) x$p_value),[m
[32m+[m[32m    SMR = SMR,[m
[32m+[m[32m    species = species[m
[32m+[m[32m  )[m
[32m+[m[32m  return(correlation_summary)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcor.test.age.filter <- function(input, p_value = 0.05) {[m
[32m+[m[32m  significant_vector <- as.vector(ifelse(input$P_value <= p_value, TRUE, FALSE))[m
[32m+[m[32m  input$significant <- significant_vector[m
[32m+[m[32m  return(input)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Correlation tests ####[m
[32m+[m
[32m+[m[32mAC_cor_age_pearson <- cor.test.age(AC_meth_values, AC_age, AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], species = "AC")[m
[32m+[m[32mAC_cor_age_filtered_pearson <- cor.test.age.filter(AC_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mAS_cor_age_pearson <- cor.test.age(AS_meth_values, AS_age, AS_methyl_sites$SMR, species = "AS")[m
[32m+[m[32mAS_cor_age_filtered_pearson <- cor.test.age.filter(AS_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mEH_cor_age_pearson <- cor.test.age(EH_meth_values, EH_age, EH_methyl_sites$SMR, species = "EH")[m
[32m+[m[32mEH_cor_age_filtered_pearson <- cor.test.age.filter(EH_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mZF_cor_age_pearson <- cor.test.age(ZF_meth_values, ZF_age, ZF_methyl_sites$SMR, species = "ZF")[m
[32m+[m[32mZF_cor_age_filtered_pearson <- cor.test.age.filter(ZF_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mcor_all <- rbind(AC_cor_age_filtered_pearson,[m
[32m+[m[32m                 AS_cor_age_filtered_pearson,[m
[32m+[m[32m                 EH_cor_age_filtered_pearson,[m[41m [m
[32m+[m[32m                 ZF_cor_age_filtered_pearson)[m
[32m+[m
[32m+[m[32m## selecting CpGs[m
[32m+[m
[32m+[m[32mncol(AC_meth_values[AC_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(AS_meth_values[AS_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(EH_meth_values[EH_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(ZF_meth_values[ZF_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m
[32m+[m[32m#### function to choose only the highest correlating CpGs per SMR[m
[32m+[m
[32m+[m[32mselect.max.cor <- function(cor_tibble, filter_significant = FALSE) {[m
[32m+[m[32m  filtered_data <- cor_tibble[m
[32m+[m[32m  if(filter_significant == TRUE) {filtered_data <- filter(filtered_data, significant)}[m
[32m+[m[41m   [m
[32m+[m[32m  filtered_data <- filtered_data %>%[m[41m [m
[32m+[m[32m    group_by(SMR) %>%[m
[32m+[m[32m    # Add a temporary column for the absolute correlation values[m
[32m+[m[32m    mutate(abs_correlation = abs(Correlation)) %>%[m
[32m+[m[32m    # For each group, filter the row with the max absolute correlation[m
[32m+[m[32m    filter(abs_correlation == max(abs_correlation)) %>%[m
[32m+[m[32m    # Remove the temporary column[m
[32m+[m[32m    select(-abs_correlation) %>%[m
[32m+[m[32m    # Optionally, ensure only one row per group if there are ties[m
[32m+[m[32m    slice(1)[m
[32m+[m[32m  return(filtered_data)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mselect.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mselect.max.cor(AS_cor_age_filtered_pearson)[m
[32m+[m[32mselect.max.cor(EH_cor_age_filtered_pearson)[m
[32m+[m[32mselect.max.cor(ZF_cor_age_filtered_pearson)[m
[32m+[m
[32m+[m[32mAC_pos_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mAS_pos_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mEH_pos_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mZF_pos_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m
[32m+[m[32mall_pos_cor_CpG <- rbind(AC_pos_cor_CpGs, AS_pos_cor_CpGs, EH_pos_cor_CpGs, ZF_pos_cor_CpGs)[m
[32m+[m[32mall_pos_cor_CpG_common  <- all_pos_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32mAC_sig_CpGs <- select.max.cor(AC_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mAS_sig_CpGs <- select.max.cor(AS_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mEH_sig_CpGs <- select.max.cor(EH_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mZF_sig_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson, TRUE)[m
[32m+[m
[32m+[m[32mall_sig_CpGs <- rbind(AC_sig_CpGs, AS_sig_CpGs, EH_sig_CpGs, ZF_sig_CpGs)[m
[32m+[m
[32m+[m[32mall_sig_CpGs_common <- all_sig_CpGs %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m
[32m+[m[32m#### model creation ####[m
[32m+[m[32mlibrary(glmnet)[m
[32m+[m[32mAC_glm <- cv.glmnet(as.matrix(AC_meth_values), AC_age, alpha = 0.5)[m
[32m+[m[32mcoef(AC_glm, s=0.01)[m
[32m+[m[32mAC_glm_prediction <- predict(AC_glm, newx = as.matrix(AC_meth_values))[m
[32m+[m[32mplot(AC_glm)[m
[32m+[m
[32m+[m
[32m+[m[32m### selecting only pos cor ones[m[41m [m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_pos_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_pos_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m
[32m+[m[32mall_meth_values_selected <- rbind(AC_meth_values_selected, AS_meth_values_selected, EH_meth_values_selected, ZF_meth_values_selected)[m
[32m+[m
[32m+[m[32mall_meth_values_selected_train <- all_meth_values_selected[-seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m[32mall_meth_values_selected_test <- all_meth_values_selected[seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m
[32m+[m[32mX <- all_meth_values_selected_train %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m
[32m+[m[32mX_test <- all_meth_values_selected_test %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mglm_test <- cv.glmnet(X, Y, alpha = 0.5)[m
[32m+[m[32mplot(glm_test)[m
[32m+[m
[32m+[m[32mcoef(glm_test, s=glm_test$lambda.min)[m
[32m+[m
[32m+[m[32mpredictions_test <- predict(glm_test, newx= X_test, s = glm_test$lambda.min)[m
[32m+[m[32mresult_df <- data.frame(predictions = predictions_test,[m
[32m+[m[32m                        rel_age = all_meth_values_selected_test$rel_age,[m
[32m+[m[32m                        species = all_meth_values_selected_test$species)[m
[32m+[m[32mcolnames(result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mggplot(result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted)) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.65) +[m
[32m+[m[32m  xlim(0,0.65) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m
[32m+[m[32m## evaluation[m
[32m+[m
[32m+[m[32mmse <- mean((predictions_test - all_meth_values_selected_test$rel_age)^2)[m
[32m+[m[32mprint(paste("MSE:", mse))[m
[32m+[m
[32m+[m[32mrmse <- sqrt(mse)[m
[32m+[m[32mprint(paste("RMSE:", rmse))[m
[32m+[m
[32m+[m[32mmae <- mean(abs(predictions_test - all_meth_values_selected_test$rel_age))[m
[32m+[m[32mprint(paste("MAE:", mae))[m
[32m+[m
[32m+[m[32mpearson_cor <- cor(predictions_test, all_meth_values_selected_test$rel_age, method = "pearson")[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting ####[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m## all[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # facet_row(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(x = Site, y = Correlation, color = species, alpha = significant)) +[m
[32m+[m[32m  # geom_line(aes(x = c(-1,1), y = log2(0.05), color = "#CC79A7")) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  facet_wrap(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only significant[m
[32m+[m[32mggplot(subset(cor_all, significant == TRUE), aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  # facet_wrap(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only selected[m[41m [m
[32m+[m[32mggplot(all_sig_CpGs_common, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only cor positive[m[41m [m
[32m+[m[32mggplot(all_pos_cor_CpG, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## plotting SMR groups 24 and 28[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% subset(all_sig_CpGs_common, SMR == "SMR_024" | SMR == "SMR_026")$Site)[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% all_pos_cor_CpG$Site)[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = species, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = rel_age, shape = species)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_manual(aesthetics = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  # theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
[1mdiff --git a/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.2.R b/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.2.R[m
[1mnew file mode 100644[m
[1mindex 0000000..d9ace58[m
[1m--- /dev/null[m
[1m+++ b/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.2.R[m
[36m@@ -0,0 +1,869 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of methylation data based on overlapping sequences[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m
[32m+[m[32mload("results-data/02_conserved_seq/HS_AC_AS_EH_ZF_overlaps_bt2.Rdata")[m
[32m+[m
[32m+[m
[32m+[m[32mHS_overlap_seqs_bt2[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_HS_AC_bt2 <- HS_overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_HS_AS_bt2 <- HS_overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_HS_EH_bt2 <- HS_overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_HS_ZF_bt2 <- HS_overlap_seqs_bt2[[4]][m
[32m+[m
[32m+[m[32m## getting SMR[m[41m [m
[32m+[m[32mHS_gr_overlap_seqs_bt2 <- lapply(HS_overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m
[32m+[m[32mHS_group_gr_overlap_bt2 <-  c(HS_gr_overlap_seqs_bt2[[1]], HS_gr_overlap_seqs_bt2[[2]], HS_gr_overlap_seqs_bt2[[3]], HS_gr_overlap_seqs_bt2[[4]])[m
[32m+[m[32mHS_SMR_b_bt2 <- GenomicRanges::reduce(HS_group_gr_overlap_bt2)[m
[32m+[m[32mnames(HS_SMR_b_bt2) <- sprintf("HS_SMR_b_bt2_%03d", 1:length(HS_SMR_b_bt2))[m
[32m+[m
[32m+[m[32mHS_AC_AS_EH_ZF_SMR_b_bt2 <- HS_SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(HS_AC_AS_EH_ZF_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/HS_AC_AS_EH_ZF_SMR_b_bt2.Rdata")[m
[32m+[m
[32m+[m[32m### master function[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m[32m#### getting all species transformed ####[m
[32m+[m[32m#ALL Bowtie2[m
[32m+[m
[32m+[m[32mAC_methyl_df_bt2 <- get.methyl.sites(overlap_HS_AC_bt2, species = "AC", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mAS_methyl_df_bt2 <- get.methyl.sites(overlap_HS_AS_bt2, species = "AS", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mEH_methyl_df_bt2 <- get.methyl.sites(overlap_HS_EH_bt2, species = "EH", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mZF_methyl_df_bt2 <- get.methyl.sites(overlap_HS_ZF_bt2, species = "JM", SMRs = HS_SMR_b_bt2)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- bind_rows(AC_methyl_df_bt2, AS_methyl_df_bt2, EH_methyl_df_bt2, ZF_methyl_df_bt2)[m
[32m+[m
[32m+[m[32mHS_chr_names <- sort(unique(combined_df_bt2$chr_align))[m
[32m+[m[32m# AC_chr_names_simple <-  paste0("Chr ", 1:23)[m
[32m+[m
[32m+[m[32m# combined_df_bt2 <- cbind(combined_df_bt2, data.frame(align_method = "Bowtie2"))[m[41m [m
[32m+[m
[32m+[m[32m#### plotting data ####[m
[32m+[m[32m##bt2[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m# library(ggpattern)[m
[32m+[m
[32m+[m[32mggplot(combined_df_bt2, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr_align, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m#### get methyl sites and value ####[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- get.methyl.sites(overlap_HS_AC_bt2, species = "AC", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mAS_methyl_sites <- get.methyl.sites(overlap_HS_AS_bt2, species = "AS", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mEH_methyl_sites <- get.methyl.sites(overlap_HS_EH_bt2, species = "EH", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mZF_methyl_sites <- get.methyl.sites(overlap_HS_ZF_bt2, species = "ZF", SMRs = HS_SMR_b_bt2)[m
[32m+[m
[32m+[m[32mnrow(rbind(AC_methyl_sites,AS_methyl_sites,EH_methyl_sites,ZF_methyl_sites))[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AS_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m[32mEH_metadata_samples <- read.csv("/workspace/cfngle/raw-data/EH/zzz-methyl_data/hake-samples.txt", sep = "\t")[m
[32m+[m[32mEH_sex <- EH_metadata_samples$sex[m
[32m+[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m
[32m+[m[32mZF_age <- ZF_meth_data$age/52[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp_AC <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values <- AC_meth_data[ ,meth_columns_tmp][m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32m# if males ONLY[m
[32m+[m[32mEH_meth_values <- EH_meth_values[EH_sex == "M",][m
[32m+[m[32mEH_age <- EH_age[EH_sex == "M"][m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites$Chr), ":", ZF_methyl_sites$pos_rgenome)[m
[32m+[m[32mtable(meth_sites_names_tmp %in% colnames(ZF_meth_data))[m
[32m+[m[32mmeth_columns_tmp <- ZF_meth_data[meth_sites_names_tmp] %>% as.vector()[m
[32m+[m[32mmeth_columns_tmp <- unlist(meth_columns_tmp)[m
[32m+[m[32m# ZF_meth_values_JM <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32mZF_meth_values <- ZF_meth_data[meth_sites_names_tmp][m
[32m+[m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values, file = paste0(save_dir, "HS_AC_meth_values.csv") )[m
[32m+[m[32msave(AC_meth_values, file = paste0(save_dir, "HS_AC_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values, file = paste0(save_dir, "HS_AS_meth_values.csv") )[m
[32m+[m[32msave(AS_meth_values, file = paste0(save_dir, "HS_AS_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values, file = paste0(save_dir, "HS_EH_meth_values.csv") )[m
[32m+[m[32msave(EH_meth_values, file = paste0(save_dir, "HS_EH_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values, file = paste0(save_dir, "HS_ZF_meth_values.csv") )[m
[32m+[m[32msave(ZF_meth_values, file = paste0(save_dir, "HS_ZF_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m#### Imputation ####[m
[32m+[m
[32m+[m[32m# There are several ways of imputing missing values, here we present two of them. Always set.seed() for imputations.[m
[32m+[m[32m#a) Method 1 using package “mice” (Multiple Imputation by Chained Equation)[m
[32m+[m[32mlibrary(mice)[m
[32m+[m
[32m+[m[32mset.seed(123)[m
[32m+[m
[32m+[m[32minit <- mice(ZF_meth_values, maxit=0)[m
[32m+[m
[32m+[m[32mm_method <- init$method[m
[32m+[m
[32m+[m[32mpred_matrix <- init$predictorMatrix[m
[32m+[m
[32m+[m[32mcolnames(ZF_meth_values)[m
[32m+[m[32mpredM[, c("age")]=0[m
[32m+[m[32mmeth[c("age")]=""[m
[32m+[m
[32m+[m[32mimputed <- mice(ZF_meth_values, method = m_method, predictorMatrix = pred_matrix, m = 5)[m
[32m+[m
[32m+[m[32m#b) Method 2 using package “zoo” (Missing values replaced by the mean or other function of its group)[m
[32m+[m[32mlibrary(zoo)[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mZF_meth_values_imputed <- na.aggregate(ZF_meth_values)[m
[32m+[m
[32m+[m[32m#### PCA ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values_imputed,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m[32m### plotting PCA[m
[32m+[m[32mlibrary(patchwork)[m
[32m+[m[32m# color palettes[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m[41m [m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mAC_pca_plot <- ggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[1], high = colpalOI[2]) +[m
[32m+[m[32m  # geom_text(aes(label = 1:nrow(AC_meth_data)), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mAS_pca_plot <- ggplot(PCA_values_AS, aes(x = PC1, y = PC2, color = AS_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[3], high = colpalOI[4]) +[m
[32m+[m[32m  # geom_text(aes(label = AS_meth_data$id), nudge_x = 0, nudge_y = 0.5) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mEH_pca_plot <- ggplot(PCA_values_EH, aes(x = PC2, y = PC1, color = EH_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[5], high = colpalOI[6]) +[m
[32m+[m[32m  # geom_text(aes(label = EH_meth_data$id), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_pca_plot <- ggplot(PCA_values_ZF, aes(x = PC1, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[1], high = colpalOI[5]) +[m
[32m+[m[32m  # geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m## plot all[m[41m [m
[32m+[m[32mAC_pca_plot + AS_pca_plot + EH_pca_plot + ZF_pca_plot +[m
[32m+[m[32m  plot_layout(nrow=2)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Methylation values ####[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, each = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$max_age <- 54[m
[32m+[m[32mAS_meth_values_long$rel_age <- AS_meth_values_long$age / AS_meth_values_long$max_age[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, each = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$max_age <- 25[m
[32m+[m[32mAC_meth_values_long$rel_age <- AC_meth_values_long$age / AC_meth_values_long$max_age[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, each = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$max_age <- 20[m
[32m+[m[32mEH_meth_values_long$rel_age <- EH_meth_values_long$age / EH_meth_values_long$max_age[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values_imputed, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, each = ncol(ZF_meth_values)) / 52[m
[32m+[m[32mZF_meth_values_long$max_age <- 5[m
[32m+[m[32mZF_meth_values_long$rel_age <- ZF_meth_values_long$age / ZF_meth_values_long$max_age[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m[32m### plotting[m
[32m+[m
[32m+[m[32mggplot(AS_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = colpal[1], high = colpal[7], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AS (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AC (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(ZF_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, cex = 0.1,  alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "#E69F00", high = "#0072B2", guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values ZF (human rgenome)")[m
[32m+[m
[32m+[m[32m## all boxplot[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
[32m+[m
[32m+[m
[32m+[m[32m#### correlation testing ####[m
[32m+[m[32m## correlation test between the selected CpGs and to age as well[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32mcor.test.age <- function(methyl_values, age, SMR = "not_defined", species = "undefined", method = "pearson") {[m
[32m+[m[32m  correlation_results <- list()[m
[32m+[m[32m  print(paste0("Running correlation test against age with ", method, " method. Results are stored in tibble."))[m
[32m+[m[32m  # Loop through each methylation site[m
[32m+[m[32m  for (i in 1:ncol(methyl_values)) {[m
[32m+[m[32m    site_name <- colnames(methyl_values)[i][m
[32m+[m[32m    # Perform correlation test with age[m
[32m+[m[32m    test_result <- cor.test(methyl_values[,i], age, method = method) # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m    [m
[32m+[m[32m    # Store the results[m
[32m+[m[32m    correlation_results[[site_name]] <- list([m
[32m+[m[32m      correlation_coefficient = test_result$estimate,[m
[32m+[m[32m      p_value = test_result$p.value[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32m  correlation_summary <- tibble([m
[32m+[m[32m    Site = names(correlation_results),[m
[32m+[m[32m    Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m    P_value = sapply(correlation_results, function(x) x$p_value),[m
[32m+[m[32m    SMR = SMR,[m
[32m+[m[32m    species = species[m
[32m+[m[32m  )[m
[32m+[m[32m  return(correlation_summary)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcor.test.age.filter <- function(input, p_value = 0.05) {[m
[32m+[m[32m  significant_vector <- as.vector(ifelse(input$P_value <= p_value, TRUE, FALSE))[m
[32m+[m[32m  input$significant <- significant_vector[m
[32m+[m[32m  return(input)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Correlation tests ####[m
[32m+[m
[32m+[m[32mAC_cor_age_pearson <- cor.test.age(AC_meth_values, AC_age, AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], species = "AC")[m
[32m+[m[32mAC_cor_age_filtered_pearson <- cor.test.age.filter(AC_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mAS_cor_age_pearson <- cor.test.age(AS_meth_values, AS_age, AS_methyl_sites$SMR, species = "AS")[m
[32m+[m[32mAS_cor_age_filtered_pearson <- cor.test.age.filter(AS_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mEH_cor_age_pearson <- cor.test.age(EH_meth_values, EH_age, EH_methyl_sites$SMR, species = "EH")[m
[32m+[m[32mEH_cor_age_filtered_pearson <- cor.test.age.filter(EH_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mZF_cor_age_pearson <- cor.test.age(ZF_meth_values, ZF_age, ZF_methyl_sites$SMR, species = "ZF")[m
[32m+[m[32mZF_cor_age_filtered_pearson <- cor.test.age.filter(ZF_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mcor_all <- rbind(AC_cor_age_filtered_pearson,[m
[32m+[m[32m                 AS_cor_age_filtered_pearson,[m
[32m+[m[32m                 EH_cor_age_filtered_pearson,[m[41m [m
[32m+[m[32m                 ZF_cor_age_filtered_pearson)[m
[32m+[m
[32m+[m[32m## selecting CpGs[m
[32m+[m
[32m+[m[32mncol(AC_meth_values[AC_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(AS_meth_values[AS_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(EH_meth_values[EH_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(ZF_meth_values[ZF_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m
[32m+[m[32m#### function to choose only the highest correlating CpGs per SMR[m
[32m+[m
[32m+[m[32mselect.max.cor <- function(cor_tibble, filter_significant = FALSE) {[m
[32m+[m[32m  filtered_data <- cor_tibble[m
[32m+[m[32m  if(filter_significant == TRUE) {filtered_data <- filter(filtered_data, significant)}[m
[32m+[m[41m   [m
[32m+[m[32m  filtered_data <- filtered_data %>%[m[41m [m
[32m+[m[32m    group_by(SMR) %>%[m
[32m+[m[32m    # Add a temporary column for the absolute correlation values[m
[32m+[m[32m    mutate(abs_correlation = abs(Correlation)) %>%[m
[32m+[m[32m    # For each group, filter the row with the max absolute correlation[m
[32m+[m[32m    filter(abs_correlation == max(abs_correlation)) %>%[m
[32m+[m[32m    # Remove the temporary column[m
[32m+[m[32m    select(-abs_correlation) %>%[m
[32m+[m[32m    # Optionally, ensure only one row per group if there are ties[m
[32m+[m[32m    slice(1)[m
[32m+[m[32m  return(filtered_data)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mselect.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mselect.max.cor(AS_cor_age_filtered_pearson)[m
[32m+[m[32mselect.max.cor(EH_cor_age_filtered_pearson)[m
[32m+[m[32mselect.max.cor(ZF_cor_age_filtered_pearson)[m
[32m+[m
[32m+[m[32m## selecting only positively correlating samples[m
[32m+[m[32mAC_pos_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mAS_pos_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mEH_pos_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mZF_pos_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m
[32m+[m[32mall_pos_cor_CpG <- rbind(AC_pos_cor_CpGs, AS_pos_cor_CpGs, EH_pos_cor_CpGs, ZF_pos_cor_CpGs)[m
[32m+[m[32mall_pos_cor_CpG_common  <- all_pos_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting only negatively correlating samples[m
[32m+[m[32mAC_neg_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mAS_neg_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mEH_neg_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mZF_neg_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m
[32m+[m[32mall_neg_cor_CpG <- rbind(AC_neg_cor_CpGs, AS_neg_cor_CpGs, EH_neg_cor_CpGs, ZF_neg_cor_CpGs)[m
[32m+[m[32mall_neg_cor_CpG_common  <- all_neg_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting a mixture of both[m
[32m+[m[32mtemp_index_vec <- (all_pos_cor_CpG_common$SMR %in% all_neg_cor_CpG_common$SMR) == FALSE[m
[32m+[m[32mall_mix_cor_CpG_common  <- rbind(all_neg_cor_CpG_common, all_pos_cor_CpG_common[temp_index_vec,]) %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting significant ones[m
[32m+[m[32mAC_sig_CpGs <- select.max.cor(AC_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mAS_sig_CpGs <- select.max.cor(AS_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mEH_sig_CpGs <- select.max.cor(EH_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mZF_sig_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson, TRUE)[m
[32m+[m
[32m+[m[32mall_sig_CpGs <- rbind(AC_sig_CpGs, AS_sig_CpGs, EH_sig_CpGs, ZF_sig_CpGs)[m
[32m+[m
[32m+[m[32mall_sig_CpGs_common <- all_sig_CpGs %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m
[32m+[m[32m#### model creation ####[m
[32m+[m[32mlibrary(glmnet)[m
[32m+[m[32mAC_glm <- cv.glmnet(as.matrix(AC_meth_values), AC_age, alpha = 0.5)[m
[32m+[m[32mcoef(AC_glm, s=0.01)[m
[32m+[m[32mAC_glm_prediction <- predict(AC_glm, newx = as.matrix(AC_meth_values))[m
[32m+[m[32mplot(AC_glm)[m
[32m+[m
[32m+[m
[32m+[m[32m### selecting only pos cor ones[m[41m [m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_pos_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_pos_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m### selecting only neg cor ones[m[41m [m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_neg_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_neg_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_neg_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_neg_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m# selecting a mixture of them[m[41m [m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_mix_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_mix_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_mix_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_mix_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m### ------[m[41m [m
[32m+[m
[32m+[m[32mall_meth_values_selected <- rbind(AC_meth_values_selected, AS_meth_values_selected, EH_meth_values_selected, ZF_meth_values_selected)[m
[32m+[m
[32m+[m[32mall_meth_values_selected_train <- all_meth_values_selected[-seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m[32mall_meth_values_selected_test <- all_meth_values_selected[seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m
[32m+[m[32mZF_meth_values_selected_train <- ZF_meth_values_selected[-seq(1, nrow(ZF_meth_values_selected), 4),][m
[32m+[m[32mZF_meth_values_selected_test <- ZF_meth_values_selected[seq(1, nrow(ZF_meth_values_selected), 4),][m
[32m+[m
[32m+[m[32m# for all[m
[32m+[m[32mX <- all_meth_values_selected_train %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m
[32m+[m[32mX_test <- all_meth_values_selected_test %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m
[32m+[m[32m# for ZF only[m
[32m+[m[32mX_ZF <- ZF_meth_values_selected_train %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m
[32m+[m[32mY_ZF <- ZF_meth_values_selected_train[,"rel_age"][m
[32m+[m
[32m+[m[32mX_test_ZF <- ZF_meth_values_selected_test %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m[32mY_test_ZF <- ZF_meth_values_selected_test[,"rel_age"][m
[32m+[m
[32m+[m[32mset.seed(123)[m
[32m+[m
[32m+[m[32mglm_test <- cv.glmnet(X, Y, alpha = 0.5)[m
[32m+[m[32m# plot(glm_test)[m
[32m+[m
[32m+[m[32mcoef(glm_test, s=glm_test$lambda.min)[m
[32m+[m
[32m+[m[32mpredictions_test <- predict(glm_test, newx= X_test, s = glm_test$lambda.min)[m
[32m+[m[32mpredictions_cor_test <- cor(predictions_test, all_meth_values_selected_test$rel_age, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mmse_test <- mean((predictions_test - all_meth_values_selected_test$rel_age)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mmae_test <- mean(abs(predictions_test - all_meth_values_selected_test$rel_age)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mresult_df <- data.frame(predictions = predictions_test,[m
[32m+[m[32m                        rel_age = all_meth_values_selected_test$rel_age,[m
[32m+[m[32m                        species = all_meth_values_selected_test$species)[m
[32m+[m[32mcolnames(result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mmodel_plot_test <- ggplot(result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.25) +[m
[32m+[m[32m  xlim(0,0.25) +[m
[32m+[m[32m  labs(title = "Multispecies age prediction (test data set)", subtitle = paste("R=", predictions_cor_test, "MSE=", mse_test, "MAE=", mae_test)) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m
[32m+[m[32mpredictions_train <- predict(glm_test, newx= X, s = glm_test$lambda.min)[m
[32m+[m[32mpredictions_cor_train <- cor(predictions_train, all_meth_values_selected_train$rel_age, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mmse_train <- mean((predictions_train - all_meth_values_selected_train$rel_age)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mmae_train <- mean(abs(predictions_train - all_meth_values_selected_train$rel_age)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mresult_df_train <- data.frame(predictions = predictions_train,[m
[32m+[m[32m                        rel_age = all_meth_values_selected_train$rel_age,[m
[32m+[m[32m                        species = all_meth_values_selected_train$species)[m
[32m+[m[32mcolnames(result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mmodel_plot_train <- ggplot(result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.25) +[m
[32m+[m[32m  xlim(0,0.25) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative) prediction (train data set)", subtitle = paste("R=", predictions_cor_train, "MSE=", mse_train, "MAE=", mae_train)) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32mmodel_plot_train + model_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting ####[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m## all[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # facet_row(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(x = Site, y = Correlation, color = species, alpha = significant)) +[m
[32m+[m[32m  # geom_line(aes(x = c(-1,1), y = log2(0.05), color = "#CC79A7")) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  facet_wrap(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only significant[m
[32m+[m[32mggplot(subset(cor_all, significant == TRUE), aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  # facet_wrap(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only selected[m[41m [m
[32m+[m[32mggplot(all_sig_CpGs_common, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only cor positive[m[41m [m
[32m+[m[32mggplot(all_pos_cor_CpG, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## plotting SMR groups 24 and 28[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% subset(all_sig_CpGs_common, SMR == "SMR_024" | SMR == "SMR_026")$Site)[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% all_mix_cor_CpG_common$Site)[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species, color = species), alpha = 0.9, outlier.size = 0.1) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)",[m
[32m+[m[32m       subtitle = "Selected values are correlating with age")[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = species, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = rel_age, shape = species)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_manual(aesthetics = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  # theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
[1mdiff --git a/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.3.R b/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.3.R[m
[1mnew file mode 100644[m
[1mindex 0000000..11f4875[m
[1m--- /dev/null[m
[1m+++ b/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.3.R[m
[36m@@ -0,0 +1,811 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of methylation data based on overlapping sequences[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m
[32m+[m[32mload("results-data/02_conserved_seq/HS_AC_AS_EH_ZF_overlaps_bt2.Rdata")[m
[32m+[m
[32m+[m
[32m+[m[32mHS_overlap_seqs_bt2[m
[32m+[m
[32m+[m
[32m+[m[32moverlap_HS_AC_bt2 <- HS_overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_HS_AS_bt2 <- HS_overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_HS_EH_bt2 <- HS_overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_HS_ZF_bt2 <- HS_overlap_seqs_bt2[[4]][m
[32m+[m
[32m+[m[32m#### getting SHARED METHYLATION REGION[m[41m [m
[32m+[m[32mHS_gr_overlap_seqs_bt2 <- lapply(HS_overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m
[32m+[m[32mHS_group_gr_overlap_bt2 <-  c(HS_gr_overlap_seqs_bt2[[1]], HS_gr_overlap_seqs_bt2[[2]], HS_gr_overlap_seqs_bt2[[3]], HS_gr_overlap_seqs_bt2[[4]])[m
[32m+[m[32mHS_SMR_b_bt2 <- GenomicRanges::reduce(HS_group_gr_overlap_bt2)[m
[32m+[m[32mnames(HS_SMR_b_bt2) <- sprintf("HS_SMR_b_bt2_%03d", 1:length(HS_SMR_b_bt2))[m
[32m+[m
[32m+[m[32mHS_AC_AS_EH_ZF_SMR_b_bt2 <- HS_SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(HS_AC_AS_EH_ZF_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/HS_AC_AS_EH_ZF_SMR_b_bt2.Rdata")[m
[32m+[m
[32m+[m[32m### function for methylation extraction[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m[32m#### getting all species transformed ####[m
[32m+[m
[32m+[m[32mAC_methyl_df_bt2 <- get.methyl.sites(overlap_HS_AC_bt2, species = "AC", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mAS_methyl_df_bt2 <- get.methyl.sites(overlap_HS_AS_bt2, species = "AS", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mEH_methyl_df_bt2 <- get.methyl.sites(overlap_HS_EH_bt2, species = "EH", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mZF_methyl_df_bt2 <- get.methyl.sites(overlap_HS_ZF_bt2, species = "ZF", SMRs = HS_SMR_b_bt2)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- bind_rows(AC_methyl_df_bt2, AS_methyl_df_bt2, EH_methyl_df_bt2, ZF_methyl_df_bt2)[m
[32m+[m
[32m+[m[32mHS_chr_names <- sort(unique(combined_df_bt2$chr_align))[m
[32m+[m
[32m+[m[32m### plotting data[m[41m [m
[32m+[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m# library(ggpattern)[m
[32m+[m
[32m+[m[32mggplot(combined_df_bt2, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(alpha = 0.5, position = "identity") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr_align, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m[41m  [m
[32m+[m
[32m+[m[32m#### getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- AC_methyl_df_bt2[m
[32m+[m[32mAS_methyl_sites <- AS_methyl_df_bt2[m
[32m+[m[32mEH_methyl_sites <- EH_methyl_df_bt2[m
[32m+[m[32mZF_methyl_sites <- ZF_methyl_df_bt2[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m[32mAC_age[AC_age == 0] <- 0.001[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AS_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m[32mEH_metadata_samples <- read.csv("/workspace/cfngle/raw-data/EH/zzz-methyl_data/hake-samples.txt", sep = "\t")[m
[32m+[m[32mEH_sex <- EH_metadata_samples$sex[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m
[32m+[m[32mZF_age <- ZF_meth_data$age/52[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp_AC <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values <- AC_meth_data[ ,meth_columns_tmp][m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values <- EH_meth_data[,meth_columns_tmp][m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m
[32m+[m[32m# if males ONLY[m
[32m+[m[32mEH_meth_values <- EH_meth_values[EH_sex == "M",][m
[32m+[m[32mEH_age <- EH_age[EH_sex == "M"][m
[32m+[m
[32m+[m[32m# if only fish younger than 0.25 relative age[m
[32m+[m[32mEH_meth_values <- EH_meth_values[EH_age <= 5,][m
[32m+[m[32mEH_age <- EH_age[EH_age <= 5][m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites$Chr), ":", ZF_methyl_sites$pos_rgenome)[m
[32m+[m[32mtable(meth_sites_names_tmp %in% colnames(ZF_meth_data))[m
[32m+[m[32mmeth_columns_tmp <- ZF_meth_data[meth_sites_names_tmp] %>% as.vector()[m
[32m+[m[32mmeth_columns_tmp <- unlist(meth_columns_tmp)[m
[32m+[m[32m# ZF_meth_values_JM <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32mZF_meth_values <- ZF_meth_data[meth_sites_names_tmp][m
[32m+[m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values, file = paste0(save_dir, "HS_AC_meth_values.csv") )[m
[32m+[m[32msave(AC_meth_values, file = paste0(save_dir, "HS_AC_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values, file = paste0(save_dir, "HS_AS_meth_values.csv") )[m
[32m+[m[32msave(AS_meth_values, file = paste0(save_dir, "HS_AS_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values, file = paste0(save_dir, "HS_EH_meth_values.csv") )[m
[32m+[m[32msave(EH_meth_values, file = paste0(save_dir, "HS_EH_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values, file = paste0(save_dir, "HS_ZF_meth_values.csv") )[m
[32m+[m[32msave(ZF_meth_values, file = paste0(save_dir, "HS_ZF_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m#### Imputation ####[m
[32m+[m
[32m+[m[32m# There are several ways of imputing missing values, here we present two of them. Always set.seed() for imputations.[m
[32m+[m[32m#a) Method 1 using package “mice” (Multiple Imputation by Chained Equation)[m
[32m+[m[32m# library(mice)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# set.seed(123)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# init <- mice(ZF_meth_values, maxit=0)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# m_method <- init$method[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# pred_matrix <- init$predictorMatrix[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# colnames(ZF_meth_values)[m
[32m+[m[32m# predM[, c("age")]=0[m
[32m+[m[32m# meth[c("age")]=""[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# imputed <- mice(ZF_meth_values, method = m_method, predictorMatrix = pred_matrix, m = 5)[m
[32m+[m
[32m+[m[32m#b) Method 2 using package “zoo” (Missing values replaced by the mean or other function of its group)[m
[32m+[m[32mlibrary(zoo)[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mZF_meth_values_imputed <- na.aggregate(ZF_meth_values)[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values_imputed, file = paste0(save_dir, "HS_ZF_meth_values_imputed.csv"))[m
[32m+[m[32msave(ZF_meth_values_imputed, file = paste0(save_dir, "HS_ZF_meth_values_imputed.Rdata"))[m
[32m+[m
[32m+[m[32m#### PCA ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values_imputed,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m[32m### plotting PCA[m
[32m+[m[32mlibrary(patchwork)[m
[32m+[m[32m# color palettes[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m[41m [m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mAC_pca_plot <- ggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[1], high = colpalOI[2]) +[m
[32m+[m[32m  # geom_text(aes(label = 1:nrow(AC_meth_data)), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mAS_pca_plot <- ggplot(PCA_values_AS, aes(x = PC1, y = PC2, color = AS_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[3], high = colpalOI[4]) +[m
[32m+[m[32m  # geom_text(aes(label = AS_meth_data$id), nudge_x = 0, nudge_y = 0.5) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mEH_pca_plot <- ggplot(PCA_values_EH, aes(x = PC2, y = PC1, color = EH_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[5], high = colpalOI[6]) +[m
[32m+[m[32m  # geom_text(aes(label = EH_meth_data$id), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_pca_plot <- ggplot(PCA_values_ZF, aes(x = PC1, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[1], high = colpalOI[5]) +[m
[32m+[m[32m  # geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m## plot all[m[41m [m
[32m+[m[32mAC_pca_plot + AS_pca_plot + EH_pca_plot + ZF_pca_plot +[m
[32m+[m[32m  plot_layout(nrow=2)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Methylation values ####[m
[32m+[m[32m## max age span modifier[m
[32m+[m[32mAC_max_age_mod <- 1.3 #30% more[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, each = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$max_age <- 54[m
[32m+[m[32mAS_meth_values_long$rel_age <- AS_meth_values_long$age / AS_meth_values_long$max_age[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, each = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$max_age <- 25[m
[32m+[m[32mAC_meth_values_long$rel_age <- AC_meth_values_long$age / AC_meth_values_long$max_age[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, each = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$max_age <- 20[m
[32m+[m[32mEH_meth_values_long$rel_age <- EH_meth_values_long$age / EH_meth_values_long$max_age[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values_imputed, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, each = ncol(ZF_meth_values)) / 52[m
[32m+[m[32mZF_meth_values_long$max_age <- 5[m
[32m+[m[32mZF_meth_values_long$rel_age <- ZF_meth_values_long$age / ZF_meth_values_long$max_age[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m[32m### plotting[m
[32m+[m
[32m+[m[32mggplot(AS_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = colpal[1], high = colpal[7], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AS (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AC (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(ZF_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, cex = 0.1,  alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "#E69F00", high = "#0072B2", guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values ZF (human rgenome)")[m
[32m+[m
[32m+[m[32m## all boxplot[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
[32m+[m
[32m+[m
[32m+[m[32m#### correlation testing ####[m
[32m+[m[32m## correlation test between the selected CpGs and to age as well[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32mcor.test.age <- function(methyl_values, age, SMR = "not_defined", species = "undefined", method = "pearson") {[m
[32m+[m[32m  correlation_results <- list()[m
[32m+[m[32m  print(paste0("Running correlation test against age with ", method, " method. Results are stored in tibble."))[m
[32m+[m[32m  # Loop through each methylation site[m
[32m+[m[32m  for (i in 1:ncol(methyl_values)) {[m
[32m+[m[32m    site_name <- colnames(methyl_values)[i][m
[32m+[m[32m    # Perform correlation test with age[m
[32m+[m[32m    test_result <- cor.test(methyl_values[,i], age, method = method) # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m    [m
[32m+[m[32m    # Store the results[m
[32m+[m[32m    correlation_results[[site_name]] <- list([m
[32m+[m[32m      correlation_coefficient = test_result$estimate,[m
[32m+[m[32m      p_value = test_result$p.value[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32m  correlation_summary <- tibble([m
[32m+[m[32m    Site = names(correlation_results),[m
[32m+[m[32m    Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m    P_value = sapply(correlation_results, function(x) x$p_value),[m
[32m+[m[32m    SMR = SMR,[m
[32m+[m[32m    species = species[m
[32m+[m[32m  )[m
[32m+[m[32m  return(correlation_summary)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcor.test.age.filter <- function(input, p_value = 0.05) {[m
[32m+[m[32m  significant_vector <- as.vector(ifelse(input$P_value <= p_value, TRUE, FALSE))[m
[32m+[m[32m  input$significant <- significant_vector[m
[32m+[m[32m  return(input)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Correlation tests ####[m
[32m+[m
[32m+[m[32mAC_cor_age_pearson <- cor.test.age(AC_meth_values, AC_age, AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], species = "AC")[m
[32m+[m[32mAC_cor_age_filtered_pearson <- cor.test.age.filter(AC_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mAS_cor_age_pearson <- cor.test.age(AS_meth_values, AS_age, AS_methyl_sites$SMR, species = "AS")[m
[32m+[m[32mAS_cor_age_filtered_pearson <- cor.test.age.filter(AS_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mEH_cor_age_pearson <- cor.test.age(EH_meth_values, EH_age, EH_methyl_sites$SMR, species = "EH")[m
[32m+[m[32mEH_cor_age_filtered_pearson <- cor.test.age.filter(EH_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mZF_cor_age_pearson <- cor.test.age(ZF_meth_values, ZF_age, ZF_methyl_sites$SMR, species = "ZF")[m
[32m+[m[32mZF_cor_age_filtered_pearson <- cor.test.age.filter(ZF_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mcor_all <- rbind(AC_cor_age_filtered_pearson,[m
[32m+[m[32m                 AS_cor_age_filtered_pearson,[m
[32m+[m[32m                 EH_cor_age_filtered_pearson,[m[41m [m
[32m+[m[32m                 ZF_cor_age_filtered_pearson)[m
[32m+[m
[32m+[m[32m## selecting CpGs[m
[32m+[m
[32m+[m[32mncol(AC_meth_values[AC_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(AS_meth_values[AS_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(EH_meth_values[EH_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(ZF_meth_values[ZF_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m
[32m+[m[32m#### function to choose only the highest correlating CpGs per SMR[m
[32m+[m
[32m+[m[32mselect.max.cor <- function(cor_tibble, filter_significant = FALSE) {[m
[32m+[m[32m  filtered_data <- cor_tibble[m
[32m+[m[32m  if(filter_significant == TRUE) {filtered_data <- filter(filtered_data, significant)}[m
[32m+[m[41m   [m
[32m+[m[32m  filtered_data <- filtered_data %>%[m[41m [m
[32m+[m[32m    group_by(SMR) %>%[m
[32m+[m[32m    # Add a temporary column for the absolute correlation values[m
[32m+[m[32m    mutate(abs_correlation = abs(Correlation)) %>%[m
[32m+[m[32m    # For each group, filter the row with the max absolute correlation[m
[32m+[m[32m    filter(abs_correlation == max(abs_correlation)) %>%[m
[32m+[m[32m    # Remove the temporary column[m
[32m+[m[32m    select(-abs_correlation) %>%[m
[32m+[m[32m    # Optionally, ensure only one row per group if there are ties[m
[32m+[m[32m    slice(1)[m
[32m+[m[32m  return(filtered_data)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mselect.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mselect.max.cor(AS_cor_age_filtered_pearson)[m
[32m+[m[32mselect.max.cor(EH_cor_age_filtered_pearson)[m
[32m+[m[32mselect.max.cor(ZF_cor_age_filtered_pearson)[m
[32m+[m
[32m+[m[32m## selecting only positively correlating samples[m
[32m+[m[32mAC_pos_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mAS_pos_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mEH_pos_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mZF_pos_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m
[32m+[m[32mall_pos_cor_CpG <- rbind(AC_pos_cor_CpGs, AS_pos_cor_CpGs, EH_pos_cor_CpGs, ZF_pos_cor_CpGs)[m
[32m+[m[32mall_pos_cor_CpG_common  <- all_pos_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting only negatively correlating samples[m
[32m+[m[32mAC_neg_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mAS_neg_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mEH_neg_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mZF_neg_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m
[32m+[m[32mall_neg_cor_CpG <- rbind(AC_neg_cor_CpGs, AS_neg_cor_CpGs, EH_neg_cor_CpGs, ZF_neg_cor_CpGs)[m
[32m+[m[32mall_neg_cor_CpG_common  <- all_neg_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting a mixture of both[m
[32m+[m[32mtemp_index_vec <- (all_pos_cor_CpG_common$SMR %in% all_neg_cor_CpG_common$SMR) == FALSE[m
[32m+[m[32mall_mix_cor_CpG_common  <- rbind(all_neg_cor_CpG_common, all_pos_cor_CpG_common[temp_index_vec,]) %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting significant ones[m
[32m+[m[32mAC_sig_CpGs <- select.max.cor(AC_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mAS_sig_CpGs <- select.max.cor(AS_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mEH_sig_CpGs <- select.max.cor(EH_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mZF_sig_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson, TRUE)[m
[32m+[m
[32m+[m[32mall_sig_CpGs <- rbind(AC_sig_CpGs, AS_sig_CpGs, EH_sig_CpGs, ZF_sig_CpGs)[m
[32m+[m
[32m+[m[32mall_sig_CpGs_common <- all_sig_CpGs %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m
[32m+[m[32m#### model creation ####[m
[32m+[m[32mlibrary(glmnet)[m
[32m+[m[32mAC_glm <- cv.glmnet(as.matrix(AC_meth_values), AC_age, alpha = 0.5)[m
[32m+[m[32mcoef(AC_glm, s=0.01)[m
[32m+[m[32mAC_glm_prediction <- predict(AC_glm, newx = as.matrix(AC_meth_values))[m
[32m+[m[32mplot(AC_glm)[m
[32m+[m
[32m+[m
[32m+[m[32m### selecting only pos cor ones[m[41m [m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_pos_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_pos_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m### selecting only neg cor ones[m[41m [m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_neg_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_neg_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_neg_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_neg_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m# selecting a mixture of them[m[41m [m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_mix_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_mix_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_mix_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_mix_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m### ------[m[41m [m
[32m+[m
[32m+[m[32mall_meth_values_selected <- rbind(AC_meth_values_selected, AS_meth_values_selected, EH_meth_values_selected, ZF_meth_values_selected)[m
[32m+[m
[32m+[m[32mall_meth_values_selected_train <- all_meth_values_selected[-seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m[32mall_meth_values_selected_test <- all_meth_values_selected[seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m
[32m+[m[32mZF_meth_values_selected_train <- ZF_meth_values_selected[-seq(1, nrow(ZF_meth_values_selected), 4),][m
[32m+[m[32mZF_meth_values_selected_test <- ZF_meth_values_selected[seq(1, nrow(ZF_meth_values_selected), 4),][m
[32m+[m
[32m+[m[32m# for all[m
[32m+[m[32mX <- all_meth_values_selected_train %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m
[32m+[m[32mX_test <- all_meth_values_selected_test %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m
[32m+[m[32m# for ZF only[m
[32m+[m[32mX_ZF <- ZF_meth_values_selected_train %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m
[32m+[m[32mY_ZF <- ZF_meth_values_selected_train[,"rel_age"][m
[32m+[m
[32m+[m[32mX_test_ZF <- ZF_meth_values_selected_test %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m[32mY_test_ZF <- ZF_meth_values_selected_test[,"rel_age"][m
[32m+[m
[32m+[m[32mset.seed(123)[m
[32m+[m
[32m+[m[32mglm_test <- cv.glmnet(X, Y, alpha = 0.5)[m
[32m+[m[32m# plot(glm_test)[m
[32m+[m
[32m+[m[32mcoef(glm_test, s=glm_test$lambda.min)[m
[32m+[m
[32m+[m[32mpredictions_test <- predict(glm_test, newx= X_test, s = glm_test$lambda.min)[m
[32m+[m[32mpredictions_cor_test <- cor(predictions_test, all_meth_values_selected_test$rel_age, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mmse_test <- mean((predictions_test - all_meth_values_selected_test$rel_age)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mmae_test <- mean(abs(predictions_test - all_meth_values_selected_test$rel_age)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mresult_df <- data.frame(predictions = predictions_test,[m
[32m+[m[32m                        rel_age = all_meth_values_selected_test$rel_age,[m
[32m+[m[32m                        species = all_meth_values_selected_test$species)[m
[32m+[m[32mcolnames(result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mmodel_plot_test <- ggplot(result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.25) +[m
[32m+[m[32m  xlim(0,0.25) +[m
[32m+[m[32m  labs(title = "Multispecies age prediction (test data set)", subtitle = paste("R=", predictions_cor_test, "MSE=", mse_test, "MAE=", mae_test)) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m
[32m+[m[32mpredictions_train <- predict(glm_test, newx= X, s = glm_test$lambda.min)[m
[32m+[m[32mpredictions_cor_train <- cor(predictions_train, all_meth_values_selected_train$rel_age, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mmse_train <- mean((predictions_train - all_meth_values_selected_train$rel_age)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mmae_train <- mean(abs(predictions_train - all_meth_values_selected_train$rel_age)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mresult_df_train <- data.frame(predictions = predictions_train,[m
[32m+[m[32m                        rel_age = all_meth_values_selected_train$rel_age,[m
[32m+[m[32m                        species = all_meth_values_selected_train$species)[m
[32m+[m[32mcolnames(result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mmodel_plot_train <- ggplot(result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.25) +[m
[32m+[m[32m  xlim(0,0.25) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative) prediction (train data set)", subtitle = paste("R=", predictions_cor_train, "MSE=", mse_train, "MAE=", mae_train)) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32mmodel_plot_train + model_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting ####[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m## all[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # facet_row(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(x = Site, y = Correlation, color = species, alpha = significant)) +[m
[32m+[m[32m  # geom_line(aes(x = c(-1,1), y = log2(0.05), color = "#CC79A7")) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  facet_wrap(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only significant[m
[32m+[m[32mggplot(subset(cor_all, significant == TRUE), aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  # facet_wrap(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only selected[m[41m [m
[32m+[m[32mggplot(all_sig_CpGs_common, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only cor positive[m[41m [m
[32m+[m[32mggplot(all_pos_cor_CpG, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## plotting SMR groups 24 and 28[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% subset(all_sig_CpGs_common, SMR == "SMR_024" | SMR == "SMR_026")$Site)[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% all_mix_cor_CpG_common$Site)[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species, color = species), alpha = 0.9, outlier.size = 0.1) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)",[m
[32m+[m[32m       subtitle = "Selected values are correlating with age")[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = species, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = rel_age, shape = species)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_manual(aesthetics = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  # theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
[1mdiff --git a/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.4.R b/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.4.R[m
[1mnew file mode 100644[m
[1mindex 0000000..aeb285e[m
[1m--- /dev/null[m
[1m+++ b/03b_human_AC_AS_EH_ZF_methylation_extraction_v-1.4.R[m
[36m@@ -0,0 +1,446 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Extraction of methylation data based on overlapping sequences[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m[32mlibrary(ggforce)[m
[32m+[m
[32m+[m[32m#### getting SHARED METHYLATION REGION[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m[32m# loading overlapping alignment reads (rgenome: human)[m
[32m+[m[32mload("results-data/02_conserved_seq/HS_AC_AS_EH_ZF_overlaps_bt2.Rdata")[m
[32m+[m
[32m+[m[32m# assign overlapping sequences for each species[m
[32m+[m[32moverlap_HS_AC_bt2 <- HS_overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_HS_AS_bt2 <- HS_overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_HS_EH_bt2 <- HS_overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_HS_ZF_bt2 <- HS_overlap_seqs_bt2[[4]][m
[32m+[m
[32m+[m[32m# transforming aligned reads into GRanges object[m
[32m+[m[32mHS_gr_overlap_seqs_bt2 <- lapply(HS_overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m[32m# using the overlap of the sequences to get the SMRs[m
[32m+[m[32mHS_group_gr_overlap_bt2 <-  c(HS_gr_overlap_seqs_bt2[[1]], HS_gr_overlap_seqs_bt2[[2]], HS_gr_overlap_seqs_bt2[[3]], HS_gr_overlap_seqs_bt2[[4]])[m
[32m+[m[32mHS_SMR_b_bt2 <- GenomicRanges::reduce(HS_group_gr_overlap_bt2)[m
[32m+[m[32mnames(HS_SMR_b_bt2) <- sprintf("HS_SMR_b_bt2_%03d", 1:length(HS_SMR_b_bt2))[m
[32m+[m[32m# renaming[m
[32m+[m[32mHS_AC_AS_EH_ZF_SMR_b_bt2 <- HS_SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(HS_AC_AS_EH_ZF_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/HS_AC_AS_EH_ZF_SMR_b_bt2.Rdata")[m
[32m+[m
[32m+[m[32m### function for methylation extraction[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m[32m#### getting all species transformed ####[m
[32m+[m
[32m+[m[32mAC_methyl_df_bt2 <- get.methyl.sites(overlap_HS_AC_bt2, species = "AC", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mAS_methyl_df_bt2 <- get.methyl.sites(overlap_HS_AS_bt2, species = "AS", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mEH_methyl_df_bt2 <- get.methyl.sites(overlap_HS_EH_bt2, species = "EH", SMRs = HS_SMR_b_bt2)[m
[32m+[m[32mZF_methyl_df_bt2 <- get.methyl.sites(overlap_HS_ZF_bt2, species = "ZF", SMRs = HS_SMR_b_bt2)[m
[32m+[m
[32m+[m[32mcombined_df_bt2 <- bind_rows(AC_methyl_df_bt2, AS_methyl_df_bt2, EH_methyl_df_bt2, ZF_methyl_df_bt2)[m
[32m+[m
[32m+[m[32mHS_chr_names <- sort(unique(combined_df_bt2$chr_align))[m
[32m+[m
[32m+[m[32m### plotting data[m[41m [m
[32m+[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32m# library(ggpattern)[m
[32m+[m
[32m+[m[32m# adding color palette[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m
[32m+[m[32m# this is visualising the genomic locations and the frequency of CpGs per species[m
[32m+[m[32mggplot(combined_df_bt2, aes(x = pos_align, fill = species)) +[m
[32m+[m[32m  geom_histogram(position = "dodge") +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr_align, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "CpGs", title = "All CpGs") +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m[41m [m
[32m+[m[32m  labs(title = "Number of CpGs and their genomic position") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0), )[m[41m  [m
[32m+[m
[32m+[m[32m#### getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- AC_methyl_df_bt2[m
[32m+[m[32mAS_methyl_sites <- AS_methyl_df_bt2[m
[32m+[m[32mEH_methyl_sites <- EH_methyl_df_bt2[m
[32m+[m[32mZF_methyl_sites <- ZF_methyl_df_bt2[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m[32mAC_age[AC_age == 0] <- 0.01[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AS_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m[32mEH_metadata_samples <- read.csv("/workspace/cfngle/raw-data/EH/zzz-methyl_data/hake-samples.txt", sep = "\t")[m
[32m+[m[32mEH_sex <- EH_metadata_samples$sex[m
[32m+[m[32mEH_age <- EH_metadata_samples$age[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m
[32m+[m[32mZF_age <- ZF_meth_data$age/52[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp_AC <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values <- AC_meth_data[ ,meth_columns_tmp][m
[32m+[m[32mAC_methyl_sites <- AC_methyl_sites[meth_sites_names_tmp_AC %in% AC_meth_data_test,][m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32m# EH_meth_values <- EH_meth_data[,meth_columns_tmp][m
[32m+[m[32mEH_meth_values <- EH_meth_data[meth_sites_names_tmp][m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m
[32m+[m[32m# # if males ONLY[m
[32m+[m[32m# EH_meth_values <- EH_meth_values[EH_sex == "M",][m
[32m+[m[32m# EH_age <- EH_age[EH_sex == "M"][m
[32m+[m
[32m+[m[32m# if only fish younger than 0.25 relative age[m
[32m+[m[32mEH_meth_values <- EH_meth_values[EH_age <= 5,][m
[32m+[m[32mEH_sex <- EH_metadata_samples$sex[EH_age <= 5][m
[32m+[m[32mEH_age <- EH_age[EH_age <= 5][m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites$Chr), ":", ZF_methyl_sites$pos_rgenome)[m
[32m+[m[32mtable(meth_sites_names_tmp %in% colnames(ZF_meth_data))[m
[32m+[m[32mmeth_columns_tmp <- ZF_meth_data[meth_sites_names_tmp] %>% as.vector()[m
[32m+[m[32mmeth_columns_tmp <- unlist(meth_columns_tmp)[m
[32m+[m[32m# ZF_meth_values_JM <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32mZF_meth_values <- ZF_meth_data[meth_sites_names_tmp][m
[32m+[m
[32m+[m
[32m+[m[41m  [m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values, file = paste0(save_dir, "HS_AC_meth_values.csv") )[m
[32m+[m[32msave(AC_meth_values, file = paste0(save_dir, "HS_AC_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values, file = paste0(save_dir, "HS_AS_meth_values.csv") )[m
[32m+[m[32msave(AS_meth_values, file = paste0(save_dir, "HS_AS_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values, file = paste0(save_dir, "HS_EH_meth_values.csv") )[m
[32m+[m[32msave(EH_meth_values, file = paste0(save_dir, "HS_EH_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values, file = paste0(save_dir, "HS_ZF_meth_values.csv") )[m
[32m+[m[32msave(ZF_meth_values, file = paste0(save_dir, "HS_ZF_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m### saving methyl_sites[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_methyl_sites, file = paste0(save_dir, "HS_AC_methyl_sites.csv") )[m
[32m+[m[32msave(AC_methyl_sites, file = paste0(save_dir, "HS_AC_methyl_sites.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_methyl_sites, file = paste0(save_dir, "HS_AS_methyl_sites.csv") )[m
[32m+[m[32msave(AS_methyl_sites, file = paste0(save_dir, "HS_AS_methyl_sites.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_methyl_sites, file = paste0(save_dir, "HS_EH_methyl_sites.csv") )[m
[32m+[m[32msave(EH_methyl_sites, file = paste0(save_dir, "HS_EH_methyl_sites.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_methyl_sites, file = paste0(save_dir, "HS_ZF_methyl_sites.csv") )[m
[32m+[m[32msave(ZF_methyl_sites, file = paste0(save_dir, "HS_ZF_methyl_sites.Rdata"))[m
[32m+[m
[32m+[m[32m### age metadata[m
[32m+[m[32msave(AC_age, AS_age, EH_age, ZF_age, file = paste0(save_dir, "HS_all_age.Rdata"))[m
[32m+[m[32m#### Imputation ####[m
[32m+[m
[32m+[m[32m# There are several ways of imputing missing values, here we present two of them. Always set.seed() for imputations.[m
[32m+[m[32m#a) Method 1 using package “mice” (Multiple Imputation by Chained Equation)[m
[32m+[m[32m# library(mice)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# set.seed(123)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# init <- mice(ZF_meth_values, maxit=0)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# m_method <- init$method[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# pred_matrix <- init$predictorMatrix[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# colnames(ZF_meth_values)[m
[32m+[m[32m# predM[, c("age")]=0[m
[32m+[m[32m# meth[c("age")]=""[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# imputed <- mice(ZF_meth_values, method = m_method, predictorMatrix = pred_matrix, m = 5)[m
[32m+[m
[32m+[m[32m#b) Method 2 using package “zoo” (Missing values replaced by the mean or other function of its group)[m
[32m+[m[32mlibrary(zoo)[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mZF_meth_values_imputed <- na.aggregate(ZF_meth_values)[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values_imputed, file = paste0(save_dir, "HS_ZF_meth_values_imputed.csv"))[m
[32m+[m[32msave(ZF_meth_values_imputed, file = paste0(save_dir, "HS_ZF_meth_values_imputed.Rdata"))[m
[32m+[m
[32m+[m[32m#### PCA ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values, scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m[32mPCA_values_EH$sex <- EH_sex[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values_imputed,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m[32m### plotting PCA[m
[32m+[m[32mlibrary(patchwork)[m
[32m+[m[32m# color palettes[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m[41m [m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mAC_pca_plot <- ggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[1], high = colpalOI[2]) +[m
[32m+[m[32m  # geom_text(aes(label = 1:nrow(AC_meth_data)), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mAS_pca_plot <- ggplot(PCA_values_AS, aes(x = PC1, y = PC2, color = AS_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[3], high = colpalOI[4]) +[m
[32m+[m[32m  # geom_text(aes(label = AS_meth_data$id), nudge_x = 0, nudge_y = 0.5) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mEH_pca_plot <- ggplot(PCA_values_EH, aes(x = PC2, y = PC1, color = EH_age)) +[m
[32m+[m[32m  geom_point(cex = 3, aes(shape = sex)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[5], high = colpalOI[6]) +[m
[32m+[m[32m  # geom_text(aes(label = EH_meth_data$id), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_pca_plot <- ggplot(PCA_values_ZF, aes(x = PC1, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(cex = 3) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = colpalOI[1], high = colpalOI[5]) +[m
[32m+[m[32m  # geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.4, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m## plot all[m[41m [m
[32m+[m[32mAC_pca_plot + AS_pca_plot + EH_pca_plot + ZF_pca_plot +[m
[32m+[m[32m  plot_layout(nrow=2)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Plotting Methylation values ####[m
[32m+[m[32m## max age span modifier[m
[32m+[m[32mAC_max_age_mod <- 1.3 #30% more[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, each = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$max_age <- 54[m
[32m+[m[32mAS_meth_values_long$rel_age <- AS_meth_values_long$age / AS_meth_values_long$max_age[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, each = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$max_age <- 25[m
[32m+[m[32mAC_meth_values_long$rel_age <- AC_meth_values_long$age / AC_meth_values_long$max_age[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_age, each = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$max_age <- 20[m
[32m+[m[32mEH_meth_values_long$rel_age <- EH_meth_values_long$age / EH_meth_values_long$max_age[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values_imputed, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, each = ncol(ZF_meth_values)) / 52[m
[32m+[m[32mZF_meth_values_long$max_age <- 5[m
[32m+[m[32mZF_meth_values_long$rel_age <- ZF_meth_values_long$age / ZF_meth_values_long$max_age[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m[32m### plotting[m
[32m+[m
[32m+[m[32mggplot(AS_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = colpal[1], high = colpal[7], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AS (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AC (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age), alpha = 0.7) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f), alpha = 0.5) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values EH (human rgenome)")[m
[32m+[m
[32m+[m[32mggplot(ZF_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age), alpha = 0.7) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f), alpha = 0.5) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "#E69F00", high = "#0072B2", guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values ZF (human rgenome)")[m
[32m+[m
[32m+[m[32m## all boxplot[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
\ No newline at end of file[m
[1mdiff --git a/03c.1_ZF_methylation_extraction_SLURM_v-1.2.R b/03c.1_ZF_methylation_extraction_SLURM_v-1.2.R[m
[1mnew file mode 100644[m
[1mindex 0000000..0e46fae[m
[1m--- /dev/null[m
[1m+++ b/03c.1_ZF_methylation_extraction_SLURM_v-1.2.R[m
[36m@@ -0,0 +1,55 @@[m
[32m+[m[32mlibrary(methylKit)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32msetwd("/workspace/cfngle/raw-data/")[m
[32m+[m
[32m+[m[32mZF_file_names <- list.files("ZF/008.methylkit_BM_local/", pattern = "*.txt")[m
[32m+[m[32mZF_sample_names <- as.list(substr(ZF_file_names, start = 1, stop = 6))[m
[32m+[m[32mZF_file_names <- as.list(paste0("ZF/008.methylkit_BM_local/", ZF_file_names))[m
[32m+[m[32mZF_treatment <- c(rep(c(0, 1), length.out = length(ZF_file_names)))[m
[32m+[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2_local.RData")[m
[32m+[m
[32m+[m[32mmeth.extraction <- function(methyl_data, min_per_group = NULL, samples_age, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9) {[m
[32m+[m[32m  print("filtering...")[m
[32m+[m[32m  temp = filterByCoverage(methyl_data, lo.count=lo.count, lo.perc=lo.perc, hi.count=hi.count, hi.perc=hi.perc)[m[41m [m
[32m+[m[32m  print("filtered, normalizing...")[m
[32m+[m[32m  temp = normalizeCoverage(temp)[m
[32m+[m[32m  print("normalized, uniting all samples...")[m
[32m+[m[32m  meth = methylKit::unite(temp, destrand=FALSE, min.per.group=min_per_group)[m
[32m+[m[32m  print("united, further downstream processes...")[m
[32m+[m[32m  # Obtain percent methylation values[m
[32m+[m[32m  perc.meth=percMethylation(meth)[m
[32m+[m[32m  # Transpose dataframe to have samples as rows and CpGs as columns[m
[32m+[m[32m  perc.meth.df <- as.data.frame(t(perc.meth))[m
[32m+[m[41m  [m
[32m+[m[32m  # Obtain the unique names of CpGs in the form of chromosome.start[m
[32m+[m[32m  meth.df <- as.data.frame(meth)[m
[32m+[m[32m  cpg.df <- bind_cols(chr=meth$chr, start=meth$start)[m
[32m+[m[32m  cpgs <- tidyr::unite(cpg.df, cpgs, chr:start, sep=":")[m
[32m+[m[32m  # Add the unique CpG names as column names in the dataframe[m
[32m+[m[32m  colnames(perc.meth.df) <- t(cpgs)[m
[32m+[m[41m  [m
[32m+[m[32m  meth.age.df <- perc.meth.df %>% mutate(age=samples_age$age, sex = samples_age$sex)[m
[32m+[m[41m  [m
[32m+[m[32m  # Obtain a dataframe listing all the CpGs and their position on the genome[m
[32m+[m[32m  meth_pos <- as.data.frame(bind_cols(chr = meth$chr, chr_pos = meth$start, strand = meth$strand, CpG_name = cpgs))[m
[32m+[m[32m  print("Done!")[m
[32m+[m[32m  print("List will be returned with first element being a dataframe containing the mthylation positions and the second one a dataframe containing the metadata and names")[m
[32m+[m[32m  return(list(meth_pos,meth.age.df))[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# metadata[m
[32m+[m[32msamples.age_ZF <- read.csv("ZF/metadata/ZF_metadata.csv", sep=",")[m[41m [m
[32m+[m[32mcolnames(samples.age_ZF) <- gsub("Age_Weeks", "age", colnames(samples.age_ZF))[m
[32m+[m
[32m+[m[32mZF_methyl_data_pos <- meth.extraction(methyl_data_ZF, samples_age = samples.age_ZF, min_per_group = 44L)[m
[32m+[m
[32m+[m[32mZF_methyl_data <- ZF_methyl_data_pos[[2]][m[41m [m
[32m+[m[32mZF_methyl_pos <- ZF_methyl_data_pos[[1]][m
[32m+[m
[32m+[m[32msave(ZF_methyl_data, file = "ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32msave(ZF_methyl_pos, file = "ZF/zzz_methyldata/ZF_methylpos_88.RData")[m
[32m+[m
[32m+[m[32mwrite.csv(ZF_methyl_data, file = "ZF/zzz_methyldata/ZF_methyldata_88.csv")[m
[32m+[m[32mwrite.csv(ZF_methyl_pos, file = "ZF/zzz_methyldata/ZF_methylpos_88.csv")[m
\ No newline at end of file[m
[1mdiff --git a/03c.1_methyl_extraction_ZF_R-v.1.0.sl b/03c.1_methyl_extraction_ZF_R-v.1.0.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..d17d385[m
[1m--- /dev/null[m
[1m+++ b/03c.1_methyl_extraction_ZF_R-v.1.0.sl[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J R_methyl_01[m
[32m+[m[32m#SBATCH --time=01:59:59        # Walltime[m
[32m+[m[32m#SBATCH --mem=70G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 1                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/raw-data/ZF/zzz_methyldata/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/raw-data/ZF/zzz_methyldata/err_%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32mmodule load R[m[41m [m
[32m+[m
[32m+[m[32mRscript /workspace/cfngle/scripts/03c.1_ZF_methylation_extraction_SLURM_v-1.2.R[m
\ No newline at end of file[m
[1mdiff --git a/03c_JM_ZF_methylation_extraction_v-1.0.R b/03c_JM_ZF_methylation_extraction_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..46bf91f[m
[1m--- /dev/null[m
[1m+++ b/03c_JM_ZF_methylation_extraction_v-1.0.R[m
[36m@@ -0,0 +1,124 @@[m
[32m+[m[32m# Preparation of a single methylation matrix from several individual sample files. The process follows the standard procedure suggested by methylKit. After uniting the samples we find that very few CpGs are left and we re-iterate the process using only samples with initial >100.000 CpGs.[m
[32m+[m[32m# NOTE: for my setup methylKit seems to run properly only in R version below 3.5.3.[m
[32m+[m[32m# Input data: individual sample files in methylKit format.[m
[32m+[m[32m# Output data: a methylBase object from the methylKit package containing methylation data from all samples.[m
[32m+[m
[32m+[m[32m# 1. Prepare the environment[m
[32m+[m[32m# Load required packages[m
[32m+[m[32mlibrary(methylKit)[m
[32m+[m[32m# library(tidyverse)[m
[32m+[m
[32m+[m[32m# Set working directory: CHANGE TO YOUR WORKING DIRECTORY[m
[32m+[m[32msetwd("/workspace/cfngle/raw-data/")[m
[32m+[m
[32m+[m[32m# 2. Prepare data[m
[32m+[m[32m# INPUT: Read individual sample  files[m
[32m+[m[32m# List files names[m
[32m+[m[32mJM_file_names <- list.files("JM/008.methylkit/", pattern = "*.txt")[m[41m [m
[32m+[m[32mJM_sample_names <- as.list(substr(JM_file_names, start = 1, stop = 6))[m
[32m+[m[32mJM_file_names <- as.list(paste0("JM/008.methylkit/", JM_file_names))[m
[32m+[m
[32m+[m[32m# creating arbitrary vector of zeros and ones for the treatment parameter in methRead[m
[32m+[m[32mJM_treatment <- c(rep(c(0, 1), length.out = length(JM_file_names)))[m
[32m+[m
[32m+[m[32m# test <- read.csv(JM_file_names[[1]][[1]], sep = "\t")[m
[32m+[m[32m# test_methyl <- methRead(JM_file_names[[1]], sample.id = JM_sample_names[1], assembly="ASM223467v1", header=TRUE, mincov = 1, treatment = JM_treatment[1])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# str(JM_file_names)[m
[32m+[m
[32m+[m[32m# 3. Read files. List contains samples names and treatment vector is arbitrary since we don't have 2 groups only.[m
[32m+[m
[32m+[m[32m# does ot work for some reason[m
[32m+[m[32mmethyl_data_JM <- methRead(JM_file_names,[m
[32m+[m[32m                            sample.id = JM_sample_names,[m
[32m+[m[32m                            assembly="ASM223467v1",[m
[32m+[m[32m                            header=TRUE, mincov = 1,[m
[32m+[m[32m                            treatment = JM_treatment)[m
[32m+[m
[32m+[m[32m# workaround[m[41m [m
[32m+[m[32mJM_methylation_list <- lapply(seq_along(JM_file_names), function(i) {[m
[32m+[m[32m  methRead(JM_file_names[[i]],[m
[32m+[m[32m           sample.id = JM_sample_names[i],[m
[32m+[m[32m           treatment = JM_treatment[i],[m
[32m+[m[32m           assembly = "ASM223467v1",[m
[32m+[m[32m           mincov = 1,[m
[32m+[m[32m           header = TRUE)[m
[32m+[m[32m})[m
[32m+[m
[32m+[m[32mmethyl_data_JM <- methRead(JM_file_names[[1]][[1]], sample.id = JM_sample_names[1], assembly="ASM223467v1", treatment = JM_treatment[1])[m
[32m+[m
[32m+[m[32m# Check the object[m
[32m+[m[32mmethyl_data_JM[m
[32m+[m
[32m+[m[32m# 4. Filter for reads with very low number of reads (<10) and exceeding the 99.9% percentile[m
[32m+[m[32mfiltered = filterByCoverage(m.data, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9)[m[41m [m
[32m+[m[32m# Check the object[m
[32m+[m[32mfiltered[m
[32m+[m
[32m+[m[32m# 5. Normalize coverage across samples[m
[32m+[m[32mnorm = normalizeCoverage(filtered)[m
[32m+[m[32m# Check the object[m
[32m+[m[32mnorm[m
[32m+[m
[32m+[m[32m# 6. Keep CpGs present in all samples. This option has to be evaluated for each experimental design, here we start with the most conservative approach which is to only keep CpGs present in all samples.[m
[32m+[m[32mmeth = methylKit::unite(norm, destrand=FALSE)[m
[32m+[m[32m# Check object[m
[32m+[m[32mmeth[m
[32m+[m[32m# dim(meth)[m
[32m+[m[32m# 405 364[m
[32m+[m[32m# RESULT: Only 405 CpGs are left after the procedure. This is likely to occur if few samples have very low number of reads and are driving down all samples CpGs after the unite function. Our strategy in this case will be to identify these samples, eliminate them and start the process again.[m
[32m+[m
[32m+[m[32m# START AGAIN. 2. Prepare data[m
[32m+[m[32m# INPUT: Read individual sample  files[m
[32m+[m[32m# List files names[m
[32m+[m[32mfile.list <- list('102F.txt',	'106F.txt',	'107F.txt',	'111F.txt',	'118F.txt',	'123F.txt',	'124F.txt',	'12F.txt',	'136F.txt',	'140F.txt',	'144F.txt',	'148F.txt',	'154F.txt',	'155F.txt',	'158F.txt',	'15F.txt',	'169F.txt',	'175F.txt',	'181F.txt',	'183F.txt',	'190F.txt',	'195F.txt',	'196F.txt',	'214F.txt',	'223F.txt',	'228F.txt',	'22F.txt',	'238F.txt',	'242F.txt',	'247F.txt',	'248F.txt',	'249F.txt',	'250F.txt',	'37F.txt',	'43F.txt',	'48F.txt',	'53F.txt',	'57F.txt',	'58F.txt',	'60F.txt',	'65F.txt',	'6F.txt',	'71F.txt',	'72F.txt',	'74F.txt',	'75F.txt',	'76F.txt',	'7F.txt',	'81F.txt',	'82F.txt',	'92F.txt',	'96F.txt',	'97F.txt',	'9F.txt',	'275.txt',	'1.txt',	'2.txt',	'4.txt',	'5.txt',	'8.txt',	'38.txt',	'39.txt',	'40.txt',	'41.txt',	'47.txt',	'54.txt',	'56.txt',	'61.txt',	'62.txt',	'70.txt',	'79.txt',	'88.txt',	'90.txt',	'94.txt',	'98.txt',	'117.txt',	'141.txt',	'26.txt',	'52.txt',	'55.txt',	'63.txt',	'80.txt',	'112.txt',	'128.txt',	'151.txt',	'153.txt',	'167.txt',	'191.txt',	'193.txt',	'212.txt',	'222.txt',	'225.txt',	'21.txt',	'23.txt',	'28.txt',	'29.txt',	'83.txt',	'84.txt',	'127.txt',	'161.txt',	'163.txt',	'165.txt',	'166.txt',	'188.txt',	'199.txt',	'255.txt',	'257.txt',	'258.txt',	'261.txt',	'264.txt')[m[41m [m
[32m+[m
[32m+[m[32m# 3. Read files. List contains samples names and treatment vector is arbitrary since we don't have 2 groups only.[m
[32m+[m[32mm.data <- methRead(file.list, sample.id=list('y5s1', 'y1s1',	'y7s1',	'y3s1',	'y2s1',	'y1s2',	'y1s3',	'y3s2',	'y1s4',	'y1s5',	'y2s2',	'y3s3',	'y1s6',	'y1s7',	'y2s3',	'y2s4',	'y2s5',	'y1s8',	'y1s9',	'y1s10',	'y0s1',	'y0s2',	'y1s11',	'y4s1',	'y1s12',	'y1s13',	'y2s8',	'y4s2',	'y0s3',	'y4s3',	'y6s1',	'y5s3',	'y6s2',	'y1s14',	'y4s4',	'y7s2',	'y2s9',	'y2s10',	'y1s15',	'y3s6',	'y4s5',	'y0s4',	'y4s6',	'y3s7',	'y0s6',	'y4s7',	'y3s8',	'y5s4',	'y4s8',	'y5s5',	'y0s7',	'y4s9',	'y3s9',	'y3s10',	'y0s8',	'y1s16',	'y1s17',	'y1s18',	'y1s19',	'y1s20',	'y1s21',	'y1s22',	'y1s23',	'y1s24',	'y1s25',	'y1s26',	'y1s27',	'y1s28',	'y1s29',	'y1s30',	'y1s32',	'y1s33',	'y1s34',	'y1s35',	'y1s36',	'y1s37',	'y1s38',	'y2s11',	'y2s12',	'y2s13',	'y2s14',	'y2s15',	'y2s16',	'y2s17',	'y2s18',	'y2s19',	'y2s20',	'y2s21',	'y2s22',	'y2s23',	'y2s24',	'y2s25',	'y3s11',	'y3s12',	'y3s13',	'y3s14',	'y3s15',	'y3s16',	'y3s17',	'y3s19',	'y3s20',	'y3s21',	'y3s22',	'y3s24',	'y3s25',	'y4s10',	'y4s11',	'y4s12',	'y4s13',	'y4s14'),[m[41m  [m
[32m+[m[32m                                             assembly="cod", mincov = 1, treatment=c(0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1, 1))[m
[32m+[m[32m# Check the object[m
[32m+[m[32mm.data[m
[32m+[m
[32m+[m[32m# 4. Filter for reads with very low number of reads (<10) and exceeding the 99.9% percentile[m
[32m+[m[32mfiltered = filterByCoverage(m.data, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9)[m[41m [m
[32m+[m[32m# Check the object[m
[32m+[m[32mfiltered[m
[32m+[m
[32m+[m[32m# 5. Normalize coverage across samples[m
[32m+[m[32mnorm = normalizeCoverage(filtered)[m
[32m+[m[32m# Check the object[m
[32m+[m[32mnorm[m
[32m+[m
[32m+[m[32m# 6. Keep CpGs present in 48 samples per group. We relaxed this criterion to obtain more CpGs but later we will need to missing data.[m
[32m+[m[32mmeth = methylKit::unite(norm, destrand=FALSE, min.per.group=48L)[m
[32m+[m[32m# Check object[m
[32m+[m[32mmeth[m
[32m+[m[32m# dim(meth)[m
[32m+[m[32m# 85735   334[m
[32m+[m
[32m+[m[32m# 7. Save the object[m
[32m+[m[32msave(meth, file="meth-10cov-100000CpGs.Rdata")[m
[32m+[m
[32m+[m
[32m+[m[32m# Obtain percent methylation values[m
[32m+[m[32mperc.meth=percMethylation(meth)[m
[32m+[m[32m# Transpose dataframe to have samples as rows and CpGs as columns[m
[32m+[m[32mperc.meth.df <- as.data.frame(t(perc.meth))[m
[32m+[m[32m# Obtain the unique names of CpGs in the form of chromosome.start[m
[32m+[m[32mmeth.df <- as.data.frame(meth)[m
[32m+[m[32mcpg.df <- bind_cols(chr=meth$chr, start=meth$start)[m
[32m+[m[32mcpgs <- tidyr::unite(cpg.df, cpgs, chr:start, sep=".")[m
[32m+[m[32m# Add the unique CpG names as column names in the dataframe[m
[32m+[m[32mcolnames(perc.meth.df) <- t(cpgs)[m
[32m+[m[32m# Add the variables of interest. In this case we add "age" and "batch". Read the file containing this information in the following format with the samples ordered as in our dataframe (perc.meth.df):[m
[32m+[m[32msamples.age <- read.table("samples.txt", sep="\t", stringsAsFactors = FALSE, quote="", header=TRUE)[m[41m [m
[32m+[m[32mhead(samples.age)[m
[32m+[m[32m#filename sample_file age sample batch[m
[32m+[m[32m#1 102F.txt        102F   5   y5s1     1[m
[32m+[m[32m#2 106F.txt        106F   1   y1s1     1[m
[32m+[m[32m#3 107F.txt        107F   7   y7s1     1[m
[32m+[m[32m#4 111F.txt        111F   3   y3s1     1[m
[32m+[m[32m#5 118F.txt        118F   2   y2s1     1[m
[32m+[m[32m#6 123F.txt        123F   1   y1s2     1[m
[32m+[m[32m# Rownames of our dataframe (perc.meth.df) are in the same order[m
[32m+[m[32mmeth.age.df <- perc.meth.df %>% mutate(age=samples.age$age)[m
\ No newline at end of file[m
[1mdiff --git a/03c_JM_ZF_methylation_extraction_v-1.1.R b/03c_JM_ZF_methylation_extraction_v-1.1.R[m
[1mnew file mode 100644[m
[1mindex 0000000..cf96106[m
[1m--- /dev/null[m
[1m+++ b/03c_JM_ZF_methylation_extraction_v-1.1.R[m
[36m@@ -0,0 +1,254 @@[m
[32m+[m[32m# Preparation of a single methylation matrix from several individual sample files. The process follows the standard procedure suggested by methylKit. After uniting the samples we find that very few CpGs are left and we re-iterate the process using only samples with initial >100.000 CpGs.[m
[32m+[m[32m# NOTE: for my setup methylKit seems to run properly only in R version below 3.5.3.[m
[32m+[m[32m# Input data: individual sample files in methylKit format.[m
[32m+[m[32m# Output data: a methylBase object from the methylKit package containing methylation data from all samples.[m
[32m+[m
[32m+[m[32m# 1. Prepare the environment[m
[32m+[m[32m# Load required packages[m
[32m+[m[32mlibrary(methylKit)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m# Set working directory: CHANGE TO YOUR WORKING DIRECTORY[m
[32m+[m[32msetwd("/workspace/cfngle/raw-data/")[m
[32m+[m
[32m+[m[32m# 2. Prepare data[m
[32m+[m[32m# INPUT: Read individual sample  files[m
[32m+[m[32m# List files names[m
[32m+[m[32mJM_file_names <- list.files("JM/008.methylkit/", pattern = "*.txt")[m
[32m+[m[32mJM_sample_names <- as.list(substr(JM_file_names, start = 1, stop = 6))[m
[32m+[m[32mJM_file_names <- as.list(paste0("JM/008.methylkit/", JM_file_names))[m
[32m+[m
[32m+[m[32m# creating arbitrary vector of zeros and ones for the treatment parameter in methRead[m
[32m+[m[32mJM_treatment <- c(rep(c(0, 1), length.out = length(JM_file_names)))[m
[32m+[m
[32m+[m[32m# test <- read.csv(JM_file_names[[1]][[1]], sep = "\t")[m
[32m+[m[32m# test_methyl <- methRead(JM_file_names[[1]], sample.id = JM_sample_names[1], assembly="ASM223467v1", header=TRUE, mincov = 1, treatment = JM_treatment[1])[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# str(JM_file_names)[m
[32m+[m
[32m+[m[32m# 3. Read files. List contains samples names and treatment vector is arbitrary since we don't have 2 groups only.[m
[32m+[m
[32m+[m[32m# does not work for some reason. >>> This script ran in jupyter notebook and in version R 3.5.2[m[41m  [m
[32m+[m[32m# methyl_data_JM <- methRead(JM_file_names,[m
[32m+[m[32m#                             sample.id = JM_sample_names,[m
[32m+[m[32m#                             assembly="ASM223467v1",[m
[32m+[m[32m#                             header=TRUE, mincov = 1,[m
[32m+[m[32m#                             treatment = JM_treatment)[m
[32m+[m
[32m+[m[32m# List files names[m
[32m+[m[32mZF_file_names <- list.files("ZF/008.methylkit/", pattern = "*.txt")[m
[32m+[m[32mZF_sample_names <- as.list(substr(ZF_file_names, start = 1, stop = 6))[m
[32m+[m[32mZF_file_names <- as.list(paste0("ZF/008.methylkit/", ZF_file_names))[m
[32m+[m[32mZF_treatment <- c(rep(c(0, 1), length.out = length(ZF_file_names)))[m
[32m+[m
[32m+[m[32mmethyl_data_ZF <- methRead(ZF_file_names,[m
[32m+[m[32m                            sample.id = ZF_sample_names,[m
[32m+[m[32m                            assembly="GRCz11",[m
[32m+[m[32m                            header=TRUE, mincov = 1,[m
[32m+[m[32m                            treatment = ZF_treatment)[m
[32m+[m
[32m+[m[32m# creating arbitrary vector of zeros and ones for the treatment parameter in methRead[m
[32m+[m[32mJM_treatment <- c(rep(c(0, 1), length.out = length(JM_file_names)))[m
[32m+[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_JM_bt2_local.RData")[m
[32m+[m
[32m+[m[32m# Check the object[m
[32m+[m[32mmethyl_data_JM[m
[32m+[m
[32m+[m[32mmethyl_data_JM_23 <- reorganize(methyl_data_JM, sample.ids = unlist(JM_sample_names)[1:23], treatment = JM_treatment[1:23])[m
[32m+[m[32mmethyl_data_JM_24 <- reorganize(methyl_data_JM, sample.ids = unlist(JM_sample_names)[1:24], treatment = JM_treatment[1:24])[m
[32m+[m
[32m+[m[32mgetMethylationStats(methyl_data_JM[[24]],plot=TRUE,both.strands=FALSE)[m
[32m+[m[32mgetMethylationStats(methyl_data_JM_23[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m[32mgetCoverageStats(methyl_data_JM[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m
[32m+[m
[32m+[m[32m# 4. Filter for reads with very low number of reads (<10) and exceeding the 99.9% percentile[m
[32m+[m[32mfiltered = filterByCoverage(methyl_data_JM, lo.count=10, lo.perc=NULL, hi.count=100, hi.perc=NULL)[m
[32m+[m[32mfiltered_JM_23 = filterByCoverage(methyl_data_JM_23, lo.count=10, lo.perc=NULL, hi.count=100, hi.perc=NULL)[m
[32m+[m[32mfiltered_JM_24 = filterByCoverage(methyl_data_JM_24, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9)[m
[32m+[m[32mfiltered_JM_24_100 = filterByCoverage(methyl_data_JM_24, lo.count=10, lo.perc=NULL, hi.count=100, hi.perc=NULL)[m
[32m+[m
[32m+[m[32mgetMethylationStats(filtered_JM_24[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m[32mgetCoverageStats(filtered_JM_24[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m[32mgetCoverageStats(filtered_JM_24_100[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m
[32m+[m
[32m+[m[32m# Check the object[m
[32m+[m[32mfiltered[m
[32m+[m
[32m+[m[32m# 5. Normalize coverage across samples[m
[32m+[m[32mnorm <-  normalizeCoverage(filtered)[m
[32m+[m[32mnorm_JM_23 <- normalizeCoverage(filtered_JM_23)[m
[32m+[m[32mnorm_JM_24 <- normalizeCoverage(filtered_JM_24)[m
[32m+[m
[32m+[m[32m# Check the object[m
[32m+[m[32mnorm[m
[32m+[m[32mgetMethylationStats(norm_JM_24[[10]],plot=TRUE,both.strands=FALSE)[m
[32m+[m[32mgetCoverageStats(norm_JM_24[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m
[32m+[m[32msave(norm, file ="/workspace/cfngle/results-data/03_extracted_methyl/TMP_methyl_norm_JM.RData")[m
[32m+[m[32msave(norm_JM_23, file ="/workspace/cfngle/results-data/03_extracted_methyl/TMP_methyl_norm_JM_23.RData")[m
[32m+[m[32msave(norm_JM_24, file ="/workspace/cfngle/results-data/03_extracted_methyl/TMP_methyl_norm_JM_24.RData")[m
[32m+[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/TMP_methyl_norm_JM.RData")[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/TMP_methyl_norm_JM_23.RData")[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/TMP_methyl_norm_JM_24.RData")[m
[32m+[m
[32m+[m[32m# 6. Keep CpGs present in all samples. This option has to be evaluated for each experimental design, here we start with the most conservative approach which is to only keep CpGs present in all samples.[m
[32m+[m
[32m+[m[32mmeth = methylKit::unite(norm, destrand=FALSE, min.per.group = 17L)[m
[32m+[m[32mmeth_JM_23 = methylKit::unite(norm_JM_23, destrand=FALSE, min.per.group = 10L)[m
[32m+[m[32mmeth_JM_24 = methylKit::unite(norm_JM_24, destrand=FALSE, min.per.group = 10L)[m
[32m+[m
[32m+[m[32m# Check object[m
[32m+[m[32mmeth[m
[32m+[m[32mdim(meth)[m
[32m+[m[32msave(meth, file ="/workspace/cfngle/results-data/03_extracted_methyl/TMP_JM_methyl_78621_CpGs.RData")[m
[32m+[m[32msave(meth_JM_24, file ="/workspace/cfngle/results-data/03_extracted_methyl/TMP_JM_methyl_179818_CpGs.RData")[m
[32m+[m
[32m+[m[32m# creating df for overview[m[41m [m
[32m+[m[32moverview_CpGs <- c(6254, 54772, 66079, 78621)[m
[32m+[m[32moverview_min_grp <- c(23.5, 18, 17, 16)[m[41m [m
[32m+[m
[32m+[m[32mmetadata_CpGs <- data.frame(CpGs = overview_CpGs, included_samples = overview_min_grp*2, total_samples = 47, ratio_samples = (overview_min_grp*2)/47 )[m
[32m+[m[32mwrite.csv(metadata_CpGs, file ="/workspace/cfngle/results-data/03_extracted_methyl/TMP_JM_methyl_metadata.csv")[m
[32m+[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # 4. Filter for reads with very low number of reads (<10) and exceeding the 99.9% percentile[m
[32m+[m[32m# filtered = filterByCoverage(m.data, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9)[m[41m [m
[32m+[m[32m# # Check the object[m
[32m+[m[32m# filtered[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # 5. Normalize coverage across samples[m
[32m+[m[32m# norm = normalizeCoverage(filtered)[m
[32m+[m[32m# # Check the object[m
[32m+[m[32m# norm[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# # 6. Keep CpGs present in 48 samples per group. We relaxed this criterion to obtain more CpGs but later we will need to missing data.[m
[32m+[m[32m# meth = methylKit::unite(norm, destrand=FALSE)[m
[32m+[m[32m# # Check object[m
[32m+[m
[32m+[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/TMP_JM_methyl_66079_CpGs.RData")[m
[32m+[m[32mmeth[m
[32m+[m[32mdim(meth)[m
[32m+[m
[32m+[m[32m# Obtain percent methylation values[m
[32m+[m[32mperc.meth_JM_24 <-percMethylation(meth_JM_24)[m
[32m+[m
[32m+[m[32m# Transpose dataframe to have samples as rows and CpGs as columns[m
[32m+[m[32mperc.meth.df_JM_24 <- as.data.frame(t(perc.meth_JM_24))[m
[32m+[m
[32m+[m
[32m+[m[32m# Obtain the unique names of CpGs in the form of chromosome.start[m
[32m+[m[32mmeth.df_JM_24 <- as.data.frame(meth_JM_24)[m
[32m+[m[32mcpg.df <- bind_cols(chr=meth_JM_24$chr, start=meth_JM_24$start)[m
[32m+[m[32mcpgs <- tidyr::unite(cpg.df, cpgs, chr:start, sep=":")[m
[32m+[m[32m# Add the unique CpG names as column names in the dataframe[m
[32m+[m[32mcolnames(perc.meth.df_JM_24) <- t(cpgs)[m
[32m+[m[32m# Add the variables of interest. In this case we add "age" and "batch". Read the file containing this information in the following format with the samples ordered as in our dataframe (perc.meth.df):[m
[32m+[m
[32m+[m[32msamples.age_JM <- read.csv("JM/raw-reads/00_metadata/00_JM_metadata.csv", sep=",")[m[41m [m
[32m+[m[32mhead(samples.age)[m
[32m+[m
[32m+[m[32mmeth.age.df <- perc.meth.df %>% mutate(age=samples.age$age, sex = samples.age$sex)[m
[32m+[m
[32m+[m[32mwrite.csv(meth.age.df, file = "JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m
[32m+[m[32m# Obtain a dataframe listing all the CpGs and their position on the genome[m
[32m+[m[32mmeth_pos <- as.data.frame(bind_cols(chr = meth$chr, chr_pos = meth$start, strand = meth$strand, CpG_name = cpgs))[m
[32m+[m[32mwrite.csv(meth_pos, file = "JM/zzz-methyldata/01_JM_methylpos_179818_CpGs.csv")[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m
[32m+[m[32mmeth.extraction <- function(methyl_data, min_per_group = NULL, samples_age, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9) {[m
[32m+[m[32m  print("filtering...")[m
[32m+[m[32m  temp = filterByCoverage(methyl_data, lo.count=lo.count, lo.perc=lo.perc, hi.count=hi.count, hi.perc=hi.perc)[m[41m [m
[32m+[m[32m  print("filtered, normalizing...")[m
[32m+[m[32m  temp = normalizeCoverage(temp)[m
[32m+[m[32m  print("normalized, uniting all samples...")[m
[32m+[m[32m  meth = methylKit::unite(temp, destrand=FALSE, min.per.group=min_per_group)[m
[32m+[m[32m  print("united, further downstream processes...")[m
[32m+[m[32m  # Obtain percent methylation values[m
[32m+[m[32m  perc.meth=percMethylation(meth)[m
[32m+[m[32m  # Transpose dataframe to have samples as rows and CpGs as columns[m
[32m+[m[32m  perc.meth.df <- as.data.frame(t(perc.meth))[m
[32m+[m[41m  [m
[32m+[m[32m  # Obtain the unique names of CpGs in the form of chromosome.start[m
[32m+[m[32m  meth.df <- as.data.frame(meth)[m
[32m+[m[32m  cpg.df <- bind_cols(chr=meth$chr, start=meth$start)[m
[32m+[m[32m  cpgs <- tidyr::unite(cpg.df, cpgs, chr:start, sep=":")[m
[32m+[m[32m  # Add the unique CpG names as column names in the dataframe[m
[32m+[m[32m  colnames(perc.meth.df) <- t(cpgs)[m
[32m+[m[41m  [m
[32m+[m[32m  meth.age.df <- perc.meth.df %>% mutate(age=samples_age$age, sex = samples_age$sex)[m
[32m+[m[41m  [m
[32m+[m[32m  # Obtain a dataframe listing all the CpGs and their position on the genome[m
[32m+[m[32m  meth_pos <- as.data.frame(bind_cols(chr = meth$chr, chr_pos = meth$start, strand = meth$strand, CpG_name = cpgs))[m
[32m+[m[32m  print("Done!")[m
[32m+[m[32m  print("List will be returned with first element being a dataframe containing the mthylation positions and the second one a dataframe containing the metadata and names")[m
[32m+[m[32m  return(list(meth_pos,meth.age.df))[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32msamples.age_JM <- read.csv("JM/raw-reads/00_metadata/00_JM_metadata.csv", sep=",")[m[41m [m
[32m+[m[32msamples_age_JM_24 <- samples.age_JM[1:24,][m
[32m+[m
[32m+[m[32m# test <- meth.extraction(methyl_data_JM_24, samples_age = samples_age_JM_24, min_per_group = 10L)[m
[32m+[m
[32m+[m[32mJM_24_methyl_data_pos <- meth.extraction(methyl_data_JM_24, samples_age = samples_age_JM_24, min_per_group = 10L)[m
[32m+[m
[32m+[m[32mJM_24_methyl_data <- JM_24_methyl_data_pos[[2]][m
[32m+[m[32mJM_24_methyl_pos <- JM_24_methyl_data_pos[[1]][m
[32m+[m
[32m+[m
[32m+[m[32mwrite.csv(JM_24_methyl_data_pos[[2]], file = "JM/zzz-methyldata/00_JM_methyldata_179818_CpGs.csv")[m
[32m+[m
[32m+[m[32mwrite.csv(JM_24_methyl_data_pos[[1]], file = "JM/zzz-methyldata/01_JM_methylpos_179818_CpGs.csv")[m
[32m+[m
[32m+[m[32m#### corr testing and plotting ####[m
[32m+[m[32mmeth_ <- meth[m
[32m+[m[32mmeth_@sample.ids <- as.character(JM_metadata$age)[m
[32m+[m
[32m+[m[32mgetCorrelation(methylKit::select(meth,c(1:5)))[m
[32m+[m
[32m+[m[32mclusterSamples(meth_, dist="correlation", method="ward", plot=TRUE)[m
[32m+[m
[32m+[m[32mPCASamples(meth_JM_23, screeplot=TRUE)[m
[32m+[m[32mPCASamples(meth_JM_23)[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("JM/raw-reads/00_metadata/00_JM_metadata.csv")[m
[32m+[m[32mJM_age <- data.frame(age = JM_metadata$age)[m
[32m+[m
[32m+[m
[32m+[m[32mPC_age_JM <- assocComp(mBase=meth,JM_age)[m
[32m+[m[32msort(PC_age_JM$association)[m
[32m+[m[32m##38 , 33[m
[32m+[m
[32m+[m[32mdf_temp_PCA <- data.frame(ID = JM_metadata$JM_names, PC1 = as.vector(PC_age_JM$pcs[,1]),PC10 = as.vector(PC_age_JM$pcs[,10]), PC2 = as.vector(PC_age_JM$pcs[,2]),PC3 = as.vector(PC_age_JM$pcs[,3]), PC33 = as.vector(PC_age_JM$pcs[,33]), PC38 = as.vector(PC_age_JM$pcs[,38]), age = JM_metadata$age)[m
[32m+[m
[32m+[m[32mmeth@treatment <- rep(c(1,2,3), 10)[m
[32m+[m
[32m+[m[32mtiles = tileMethylCounts(meth,win.size=1000,step.size=1000,cov.bases = 10)[m
[32m+[m
[32m+[m[32mmyDiff=calculateDiffMeth(meth)[m
[32m+[m
[32m+[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m
[32m+[m
[32m+[m[32mtemp_df <- data.frame(chr = as.factor(meth$chr), pos = meth$start, coverage = meth$coverage1)[m
[32m+[m
[32m+[m[32mggplot(temp_df, aes(x = pos, y = coverage, alpha = 0.5)) +[m
[32m+[m[32m  geom_point() +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "", title = "JM medaka CpGs associated with age (in weeks)") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m
[32m+[m
[32m+[m[32mggplot(df_temp_PCA, aes(x = PC10, y = PC3, color = age, cex = 2)) +[m
[32m+[m[32m  geom_point() +[m[41m  [m
[32m+[m[32m  labs(title = "JM medaka CpGs associated with age (in weeks)") +[m
[32m+[m[32m  scale_color_gradient(low = "red", high = "darkblue") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m
[1mdiff --git a/03c_JM_ZF_methylation_extraction_v-1.2.R b/03c_JM_ZF_methylation_extraction_v-1.2.R[m
[1mnew file mode 100644[m
[1mindex 0000000..e9a7d94[m
[1m--- /dev/null[m
[1m+++ b/03c_JM_ZF_methylation_extraction_v-1.2.R[m
[36m@@ -0,0 +1,242 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# extraction of metyltion values for all species in all samples[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(methylKit)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32msetwd("/workspace/cfngle/raw-data/")[m
[32m+[m
[32m+[m[32m#### Data preparation ####[m
[32m+[m[32m##JM[m
[32m+[m[32mJM_file_names <- list.files("JM/008.methylkit/", pattern = "*.txt")[m
[32m+[m[32mJM_sample_names <- as.list(substr(JM_file_names, start = 1, stop = 6))[m
[32m+[m[32mJM_file_names <- as.list(paste0("JM/008.methylkit/", JM_file_names))[m
[32m+[m[32m# creating arbitrary vector of zeros and ones for the treatment parameter in methRead[m
[32m+[m[32mJM_treatment <- c(rep(c(0, 1), length.out = length(JM_file_names)))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_file_names <- list.files("ZF/008.methylkit_BM_local/", pattern = "*.txt")[m
[32m+[m[32mZF_sample_names <- as.list(substr(ZF_file_names, start = 1, stop = 6))[m
[32m+[m[32mZF_file_names <- as.list(paste0("ZF/008.methylkit_BM_local/", ZF_file_names))[m
[32m+[m[32mZF_treatment <- c(rep(c(0, 1), length.out = length(ZF_file_names)))[m
[32m+[m
[32m+[m[32m### preparing methylKitList objects (does only work in Jupyter notebook and R version < 3.5.3)[m
[32m+[m
[32m+[m[32m# does not work for some reason. >>> This script ran in jupyter notebook and in version R 3.5.2[m[41m  [m
[32m+[m[32m# methyl_data_JM <- methRead(JM_file_names,[m
[32m+[m[32m#                             sample.id = JM_sample_names,[m
[32m+[m[32m#                             assembly="ASM223467v1",[m
[32m+[m[32m#                             header=TRUE, mincov = 1,[m
[32m+[m[32m#                             treatment = JM_treatment)[m
[32m+[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# methyl_data_ZF <- methRead(ZF_file_names,[m
[32m+[m[32m#                             sample.id = ZF_sample_names,[m
[32m+[m[32m#                             assembly="GRCz11",[m
[32m+[m[32m#                             header=TRUE, mincov = 1,[m
[32m+[m[32m#                             treatment = ZF_treatment)[m
[32m+[m
[32m+[m[32m## loading methylKitList objects which were saved in jupyter notebook[m
[32m+[m[32m## JM[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_JM_bt2_local.RData")[m
[32m+[m
[32m+[m[32m## ZF[m
[32m+[m[32mload("/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2_local.RData")[m
[32m+[m
[32m+[m[32m# Check the objects[m
[32m+[m[32mmethyl_data_JM[m
[32m+[m[32mmethyl_data_ZF[m
[32m+[m
[32m+[m
[32m+[m[32mtotal_CpGs_ZF <- sapply(methyl_data_ZF, function(x) nrow(x))[m
[32m+[m
[32m+[m[32mboxplot(total_CpGs_ZF)[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# for JM, the data did not contain enough CpGs and had lower read coverage in the samples from number 24 (second batch - see paper). Thus only the first batch was selected which still contains three different age groups[m
[32m+[m[32mmethyl_data_JM_24 <- reorganize(methyl_data_JM, sample.ids = unlist(JM_sample_names)[1:24], treatment = JM_treatment[1:24])[m
[32m+[m
[32m+[m
[32m+[m[32m#### Data manipulation ####[m
[32m+[m[32m# all the steps below are included in one single function for ease of use (jump to section "function"). Here, the included steps + some graphical representation of the data are explained[m
[32m+[m
[32m+[m[32m## prior distribution[m
[32m+[m[32m# before manipulating the data, the distribution can be looked at to identify PCR bias[m
[32m+[m
[32m+[m[32mgetMethylationStats(methyl_data_JM_24[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m[32mgetCoverageStats(methyl_data_JM[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m
[32m+[m[32m## filtering[m[41m [m
[32m+[m[32m# samples with certain amounts of reads are filtered out[m[41m [m
[32m+[m[32m# reads with very low number of reads (<10) and exceeding the 99.9% percentile are filtered out in this case[m
[32m+[m
[32m+[m[32mfiltered_JM_24 = filterByCoverage(methyl_data_JM_24, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9)[m
[32m+[m
[32m+[m[32m# in the JM paper, they used lo.count = 5 and hi.count = 100. It seems that the option above gives better results (graphic comparison, and more CpGs)[m
[32m+[m[32mfiltered_JM_24_100 = filterByCoverage(methyl_data_JM_24, lo.count=10, lo.perc=NULL, hi.count=100, hi.perc=NULL)[m
[32m+[m
[32m+[m[32mgetMethylationStats(filtered_JM_24[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m[32mgetCoverageStats(filtered_JM_24[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m[32mgetCoverageStats(filtered_JM_24_100[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m
[32m+[m[32m## normalizing[m
[32m+[m[32m# normalize coverage across samples again to eliminate PCR bias[m
[32m+[m[32mnorm_JM_24 <- normalizeCoverage(filtered_JM_24)[m
[32m+[m
[32m+[m[32mgetMethylationStats(norm_JM_24[[10]],plot=TRUE,both.strands=FALSE)[m
[32m+[m[32mgetCoverageStats(norm_JM_24[[1]],plot=TRUE,both.strands=FALSE)[m
[32m+[m
[32m+[m[32m## getting shared methylation sites[m
[32m+[m[32m# this allows to extract CpGs which are present in all samples. The parameter min.per.group, lets us define how many samples per treatment group have to have the CpG site in order to keep it. The lower the number, the higher the CpGs.[m[41m [m
[32m+[m
[32m+[m[32m# in this case CpGs have to be present in at least 20 out of 24 samples (83%)[m
[32m+[m[32mmeth_JM_24 = methylKit::unite(norm_JM_24, destrand=FALSE, min.per.group = 10L)[m
[32m+[m
[32m+[m[32m# check how many CpGs were kept[m
[32m+[m[32mdim(meth_JM_24)[m
[32m+[m
[32m+[m[32m# Check object[m
[32m+[m[32msave(meth_JM_24, file ="/workspace/cfngle/results-data/03_extracted_methyl/TMP_JM_methyl_179818_CpGs.RData")[m
[32m+[m
[32m+[m[32m### getting methylation amount in percent[m
[32m+[m[32m# Obtain percent methylation values[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mperc.meth_JM_24 <-percMethylation(meth_JM_24)[m
[32m+[m
[32m+[m[32m# Transpose dataframe to have samples as rows and CpGs as columns[m
[32m+[m[32mperc.meth.df_JM_24 <- as.data.frame(t(perc.meth_JM_24))[m
[32m+[m
[32m+[m[32m# Obtain the unique names of CpGs in the form of chromosome.start[m
[32m+[m[32mmeth_df_JM_24 <- as.data.frame(meth_JM_24)[m
[32m+[m[32mcpg_df_JM <- bind_cols(chr=meth_JM_24$chr, start=meth_JM_24$start)[m
[32m+[m[32mcpgs_JM <- tidyr::unite(cpg_df_JM, cpgs_JM, chr:start, sep=":")[m
[32m+[m
[32m+[m[32m# Add the unique CpG names as column names in the dataframe[m
[32m+[m[32mcolnames(perc.meth.df_JM_24) <- t(cpgs_JM)[m
[32m+[m[32m# Add the variables of interest. In this case we add "age" and "batch". Read the file containing this information in the following format with the samples ordered as in our dataframe (perc.meth.df):[m
[32m+[m
[32m+[m[32msamples.age_JM <- read.csv("JM/raw-reads/00_metadata/00_JM_metadata.csv", sep=",")[m[41m [m
[32m+[m[32mhead(samples.age)[m
[32m+[m
[32m+[m[32mmeth.age.df <- perc.meth.df %>% mutate(age=samples.age$age, sex = samples.age$sex)[m
[32m+[m
[32m+[m[32mwrite.csv(meth.age.df, file = "JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m
[32m+[m[32m# Obtain a dataframe listing all the CpGs and their position on the genome[m
[32m+[m[32mmeth_pos <- as.data.frame(bind_cols(chr = meth$chr, chr_pos = meth$start, strand = meth$strand, CpG_name = cpgs))[m
[32m+[m[32mwrite.csv(meth_pos, file = "JM/zzz-methyldata/01_JM_methylpos_179818_CpGs.csv")[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m
[32m+[m[32mmeth.extraction <- function(methyl_data, min_per_group = NULL, samples_age, lo.count=10, lo.perc=NULL, hi.count=NULL, hi.perc=99.9) {[m
[32m+[m[32m  print("filtering...")[m
[32m+[m[32m  temp = filterByCoverage(methyl_data, lo.count=lo.count, lo.perc=lo.perc, hi.count=hi.count, hi.perc=hi.perc)[m[41m [m
[32m+[m[32m  print("filtered, normalizing...")[m
[32m+[m[32m  temp = normalizeCoverage(temp)[m
[32m+[m[32m  print("normalized, uniting all samples...")[m
[32m+[m[32m  meth = methylKit::unite(temp, destrand=FALSE, min.per.group=min_per_group)[m
[32m+[m[32m  print("united, further downstream processes...")[m
[32m+[m[32m  # Obtain percent methylation values[m
[32m+[m[32m  perc.meth=percMethylation(meth)[m
[32m+[m[32m  # Transpose dataframe to have samples as rows and CpGs as columns[m
[32m+[m[32m  perc.meth.df <- as.data.frame(t(perc.meth))[m
[32m+[m[41m  [m
[32m+[m[32m  # Obtain the unique names of CpGs in the form of chromosome.start[m
[32m+[m[32m  meth.df <- as.data.frame(meth)[m
[32m+[m[32m  cpg.df <- bind_cols(chr=meth$chr, start=meth$start)[m
[32m+[m[32m  cpgs <- tidyr::unite(cpg.df, cpgs, chr:start, sep=":")[m
[32m+[m[32m  # Add the unique CpG names as column names in the dataframe[m
[32m+[m[32m  colnames(perc.meth.df) <- t(cpgs)[m
[32m+[m[41m  [m
[32m+[m[32m  meth.age.df <- perc.meth.df %>% mutate(age=samples_age$age, sex = samples_age$sex)[m
[32m+[m[41m  [m
[32m+[m[32m  # Obtain a dataframe listing all the CpGs and their position on the genome[m
[32m+[m[32m  meth_pos <- as.data.frame(bind_cols(chr = meth$chr, chr_pos = meth$start, strand = meth$strand, CpG_name = cpgs))[m
[32m+[m[32m  print("Done!")[m
[32m+[m[32m  print("List will be returned with first element being a dataframe containing the methylation positions and the second one a dataframe containing the metadata and names")[m
[32m+[m[32m  return(list(meth_pos,meth.age.df))[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## JM[m
[32m+[m[32m# getting metadata[m
[32m+[m[32msamples.age_JM <- read.csv("JM/raw-reads/00_metadata/00_JM_metadata.csv", sep=",")[m[41m [m
[32m+[m[32msamples_age_JM_24 <- samples.age_JM[1:24,][m
[32m+[m
[32m+[m[32m# extracting methyl values and positions[m
[32m+[m[32mJM_24_methyl_data_pos <- meth.extraction(methyl_data_JM_24, samples_age = samples_age_JM_24, min_per_group = 8L)[m
[32m+[m
[32m+[m[32mJM_24_methyl_data <- JM_24_methyl_data_pos[[2]][m
[32m+[m[32mJM_24_methyl_pos <- JM_24_methyl_data_pos[[1]][m
[32m+[m
[32m+[m[32msave(JM_24_methyl_data, file = "JM/zzz-methyldata/00_JM_methyldata_243285_CpGs.Rdata")[m
[32m+[m[32msave(JM_24_methyl_pos, file = "JM/zzz-methyldata/00_JM_methylpos_243285_CpGs.Rdata")[m
[32m+[m
[32m+[m[32mwrite.csv(JM_24_methyl_data_pos[[2]], file = "JM/zzz-methyldata/00_JM_methyldata_179818_CpGs.csv")[m
[32m+[m
[32m+[m[32mwrite.csv(JM_24_methyl_data_pos[[1]], file = "JM/zzz-methyldata/01_JM_methylpos_179818_CpGs.csv")[m
[32m+[m
[32m+[m[32m## ZF[m
[32m+[m[32m# File size too large, was done with HPC[m[41m [m
[32m+[m[32m# metadata[m
[32m+[m[32msamples.age_ZF <- read.csv("ZF/metadata/ZF_metadata.csv", sep=",")[m[41m [m
[32m+[m[32mcolnames(samples.age_ZF) <- gsub("Age_Weeks", "age", colnames(samples.age_ZF))[m
[32m+[m
[32m+[m[32mZF_methyl_data_pos <- meth.extraction(methyl_data_ZF, samples_age = samples.age_ZF, min_per_group = 48L)[m
[32m+[m
[32m+[m[32mZF_methyl_data <- ZF_methyl_data_pos[[2]][m[41m [m
[32m+[m[32mZF_methyl_pos <- ZF_methyl_data_pos[[1]][m
[32m+[m
[32m+[m[32msave(ZF_methyl_data, file = "ZF/zzz_methyldata/ZF_methyldata.RData")[m
[32m+[m[32msave(ZF_methyl_pos, file = "ZF/zzz_methyldata/ZF_methylpos.RData")[m
[32m+[m
[32m+[m[32mload("ZF/zzz_methyldata/ZF_methyldata.RData")[m
[32m+[m[32mload("ZF/zzz_methyldata/ZF_methylpos.RData")[m
[32m+[m
[32m+[m[32m#### corr testing and plotting ####[m
[32m+[m[32mmeth_ <- meth[m
[32m+[m[32mmeth_@sample.ids <- as.character(JM_metadata$age)[m
[32m+[m
[32m+[m[32mgetCorrelation(methylKit::select(meth,c(1:5)))[m
[32m+[m
[32m+[m[32mclusterSamples(meth_, dist="correlation", method="ward", plot=TRUE)[m
[32m+[m
[32m+[m[32mPCASamples(meth_JM_23, screeplot=TRUE)[m
[32m+[m[32mPCASamples(meth_JM_23)[m
[32m+[m
[32m+[m[32mJM_metadata <- read.csv("JM/raw-reads/00_metadata/00_JM_metadata.csv")[m
[32m+[m[32mJM_age <- data.frame(age = JM_metadata$age)[m
[32m+[m
[32m+[m
[32m+[m[32mPC_age_JM <- assocComp(mBase=meth,JM_age)[m
[32m+[m[32msort(PC_age_JM$association)[m
[32m+[m[32m##38 , 33[m
[32m+[m
[32m+[m[32mdf_temp_PCA <- data.frame(ID = JM_metadata$JM_names, PC1 = as.vector(PC_age_JM$pcs[,1]),PC10 = as.vector(PC_age_JM$pcs[,10]), PC2 = as.vector(PC_age_JM$pcs[,2]),PC3 = as.vector(PC_age_JM$pcs[,3]), PC33 = as.vector(PC_age_JM$pcs[,33]), PC38 = as.vector(PC_age_JM$pcs[,38]), age = JM_metadata$age)[m
[32m+[m
[32m+[m[32mmeth@treatment <- rep(c(1,2,3), 10)[m
[32m+[m
[32m+[m[32mtiles = tileMethylCounts(meth,win.size=1000,step.size=1000,cov.bases = 10)[m
[32m+[m
[32m+[m[32mmyDiff=calculateDiffMeth(meth)[m
[32m+[m
[32m+[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m
[32m+[m
[32m+[m[32mtemp_df <- data.frame(chr = as.factor(meth$chr), pos = meth$start, coverage = meth$coverage1)[m
[32m+[m
[32m+[m[32mggplot(temp_df, aes(x = pos, y = coverage, alpha = 0.5)) +[m
[32m+[m[32m  geom_point() +[m[41m  [m
[32m+[m[32m  facet_wrap(~ chr, scales = "free_x") +[m
[32m+[m[32m  labs(x = "Position", y = "", title = "JM medaka CpGs associated with age (in weeks)") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m
[32m+[m
[32m+[m[32mggplot(df_temp_PCA, aes(x = PC10, y = PC3, color = age, cex = 2)) +[m
[32m+[m[32m  geom_point() +[m[41m  [m
[32m+[m[32m  labs(title = "JM medaka CpGs associated with age (in weeks)") +[m
[32m+[m[32m  scale_color_gradient(low = "red", high = "darkblue") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  theme(strip.text.y = element_text(angle = 0))[m
[1mdiff --git a/04_human_AC_AS_EH_ZF_correlation_testing_v-1.2.R b/04_human_AC_AS_EH_ZF_correlation_testing_v-1.2.R[m
[1mnew file mode 100644[m
[1mindex 0000000..226ce66[m
[1m--- /dev/null[m
[1m+++ b/04_human_AC_AS_EH_ZF_correlation_testing_v-1.2.R[m
[36m@@ -0,0 +1,672 @@[m
[32m+[m[32m#### correlation testing ####[m
[32m+[m[32m## correlation test between the selected CpGs and to age as well[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m[32m# Data should be in environment from previous script[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32mcor.test.age <- function(methyl_values, age, SMR = "not_defined", species = "undefined", method = "pearson") {[m
[32m+[m[32m  correlation_results <- list()[m
[32m+[m[32m  print(paste0("Running correlation test against age with ", method, " method. Results are stored in tibble."))[m
[32m+[m[32m  # Loop through each methylation site[m
[32m+[m[32m  for (i in 1:ncol(methyl_values)) {[m
[32m+[m[32m    site_name <- colnames(methyl_values)[i][m
[32m+[m[32m    # Perform correlation test with age[m
[32m+[m[32m    test_result <- cor.test(methyl_values[,i], age, method = method) # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m    [m
[32m+[m[32m    # Store the results[m
[32m+[m[32m    correlation_results[[site_name]] <- list([m
[32m+[m[32m      correlation_coefficient = test_result$estimate,[m
[32m+[m[32m      p_value = test_result$p.value[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32m  correlation_summary <- tibble([m
[32m+[m[32m    Site = names(correlation_results),[m
[32m+[m[32m    Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m    P_value = sapply(correlation_results, function(x) x$p_value),[m
[32m+[m[32m    SMR = SMR,[m
[32m+[m[32m    species = species[m
[32m+[m[32m  )[m
[32m+[m[32m  return(correlation_summary)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcor.test.age.filter <- function(input, p_value = 0.05) {[m
[32m+[m[32m  significant_vector <- as.vector(ifelse(input$P_value <= p_value, TRUE, FALSE))[m
[32m+[m[32m  input$significant <- significant_vector[m
[32m+[m[32m  return(input)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Correlation tests ####[m
[32m+[m
[32m+[m[32mAC_cor_age_pearson <- cor.test.age(AC_meth_values, AC_age, AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], species = "AC")[m
[32m+[m[32mAC_cor_age_filtered_pearson <- cor.test.age.filter(AC_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mAS_cor_age_pearson <- cor.test.age(AS_meth_values, AS_age, AS_methyl_sites$SMR, species = "AS")[m
[32m+[m[32mAS_cor_age_filtered_pearson <- cor.test.age.filter(AS_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mEH_cor_age_pearson <- cor.test.age(EH_meth_values, EH_age, EH_methyl_sites$SMR, species = "EH")[m
[32m+[m[32mEH_cor_age_filtered_pearson <- cor.test.age.filter(EH_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mZF_cor_age_pearson <- cor.test.age(ZF_meth_values, ZF_age, ZF_methyl_sites$SMR, species = "ZF")[m
[32m+[m[32mZF_cor_age_filtered_pearson <- cor.test.age.filter(ZF_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mcor_all <- rbind(AC_cor_age_filtered_pearson,[m
[32m+[m[32m                 AS_cor_age_filtered_pearson,[m
[32m+[m[32m                 EH_cor_age_filtered_pearson,[m[41m [m
[32m+[m[32m                 ZF_cor_age_filtered_pearson)[m
[32m+[m
[32m+[m[32m## selecting CpGs[m
[32m+[m
[32m+[m[32mncol(AC_meth_values[AC_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(AS_meth_values[AS_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(EH_meth_values[EH_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(ZF_meth_values[ZF_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m
[32m+[m[32m#### function to choose only the highest correlating CpGs per SMR[m
[32m+[m
[32m+[m[32mselect.max.cor <- function(cor_tibble, filter_significant = FALSE) {[m
[32m+[m[32m  filtered_data <- cor_tibble[m
[32m+[m[32m  if(filter_significant == TRUE) {filtered_data <- filter(filtered_data, significant)}[m
[32m+[m[41m  [m
[32m+[m[32m  filtered_data <- filtered_data %>%[m[41m [m
[32m+[m[32m    group_by(SMR) %>%[m
[32m+[m[32m    # Add a temporary column for the absolute correlation values[m
[32m+[m[32m    mutate(abs_correlation = abs(Correlation)) %>%[m
[32m+[m[32m    # For each group, filter the row with the max absolute correlation[m
[32m+[m[32m    filter(abs_correlation == max(abs_correlation)) %>%[m
[32m+[m[32m    # Remove the temporary column[m
[32m+[m[32m    select(-abs_correlation) %>%[m
[32m+[m[32m    # Optionally, ensure only one row per group if there are ties[m
[32m+[m[32m    slice(1)[m
[32m+[m[32m  return(filtered_data)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## selecting only positively correlating samples[m
[32m+[m[32mAC_pos_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mAS_pos_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mEH_pos_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mZF_pos_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m
[32m+[m[32mall_pos_cor_CpG <- rbind(AC_pos_cor_CpGs, AS_pos_cor_CpGs, EH_pos_cor_CpGs, ZF_pos_cor_CpGs)[m
[32m+[m[32mall_pos_cor_CpG_common  <- all_pos_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting only negatively correlating samples[m
[32m+[m[32mAC_neg_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mAS_neg_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mEH_neg_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mZF_neg_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m
[32m+[m[32mall_neg_cor_CpG <- rbind(AC_neg_cor_CpGs, AS_neg_cor_CpGs, EH_neg_cor_CpGs, ZF_neg_cor_CpGs)[m
[32m+[m[32mall_neg_cor_CpG_common  <- all_neg_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting a mixture of both[m
[32m+[m[32mtemp_index_vec <- (all_pos_cor_CpG_common$SMR %in% all_neg_cor_CpG_common$SMR) == FALSE[m
[32m+[m[32mall_mix_cor_CpG_common  <- rbind(all_neg_cor_CpG_common, all_pos_cor_CpG_common[temp_index_vec,]) %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting significant ones[m
[32m+[m[32mAC_sig_CpGs <- select.max.cor(AC_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mAS_sig_CpGs <- select.max.cor(AS_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mEH_sig_CpGs <- select.max.cor(EH_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mZF_sig_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson, TRUE)[m
[32m+[m
[32m+[m[32mall_sig_CpGs <- rbind(AC_sig_CpGs, AS_sig_CpGs, EH_sig_CpGs, ZF_sig_CpGs)[m
[32m+[m
[32m+[m[32mall_sig_CpGs_common <- all_sig_CpGs %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m
[32m+[m[32m#### model creation ####[m
[32m+[m[32mlibrary(glmnet)[m
[32m+[m[32mAC_glm <- cv.glmnet(as.matrix(AC_meth_values), AC_age, alpha = 0.5)[m
[32m+[m[32mcoef(AC_glm, s=0.01)[m
[32m+[m[32mAC_glm_prediction <- predict(AC_glm, newx = as.matrix(AC_meth_values))[m
[32m+[m[32mplot(AC_glm)[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m### selecting only pos cor ones[m[41m [m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_pos_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_pos_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m### selecting only neg cor ones[m[41m [m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_neg_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_neg_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_neg_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_neg_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m# selecting a mixture of them[m[41m [m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_mix_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_mix_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_mix_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_mix_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m#combining methylation values[m
[32m+[m[32mall_meth_values_selected <- rbind(AC_meth_values_selected, AS_meth_values_selected, EH_meth_values_selected, ZF_meth_values_selected)[m
[32m+[m
[32m+[m[32mall_meth_values_selected_train <- all_meth_values_selected[-seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m[32mall_meth_values_selected_test <- all_meth_values_selected[seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m
[32m+[m[32mZF_meth_values_selected_train <- ZF_meth_values_selected[-seq(1, nrow(ZF_meth_values_selected), 4),][m
[32m+[m[32mZF_meth_values_selected_test <- ZF_meth_values_selected[seq(1, nrow(ZF_meth_values_selected), 4),][m
[32m+[m
[32m+[m[32msave(all_meth_values_selected, file = "/workspace/cfngle/results-data/06_model_creation/HS_all_meth_values_selected.RData")[m
[32m+[m[32m# for all[m
[32m+[m[32mX <- all_meth_values_selected_train %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m
[32m+[m[32mX_test <- all_meth_values_selected_test %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m
[32m+[m
[32m+[m[32m#### Testing model CV GLM ####[m
[32m+[m[32mset.seed(123)[m
[32m+[m
[32m+[m[32m# change age here![m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m[32m#changing value[m
[32m+[m[32mY <- -log(-log(Y))[m
[32m+[m[32mY_test <- -log(-log(Y_test))[m
[32m+[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mGLM_test <- cv.glmnet(X, Y, alpha = 0.5)[m
[32m+[m[32m# plot(glm_test)[m
[32m+[m
[32m+[m[32mcoef(GLM_test, s=GLM_test$lambda.min)[m
[32m+[m
[32m+[m[32m### running model on testing data[m
[32m+[m[32m### plotting[m
[32m+[m[32mGLM_predictions_test <- predict(GLM_test, X_test, s=GLM_test$lambda.min)[m
[32m+[m[32mGLM_predictions_cor_test <- cor(GLM_predictions_test, Y_test, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mGLM_mse_test <- mean((GLM_predictions_test - Y_test)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mGLM_mae_test <- mean(abs(GLM_predictions_test - Y_test)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mGLM_result_df <- data.frame(predictions = GLM_predictions_test,[m
[32m+[m[32m                            rel_age = Y_test,[m
[32m+[m[32m                            species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m
[32m+[m[32mGLM_result_df <- data.frame(predictions = exp(-exp(-GLM_predictions_test)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y_test)),[m
[32m+[m[32m                            species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mGLM_mse_test <- mean((exp(-exp(-GLM_predictions_test)) - exp(-exp(-Y_test)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mGLM_mae_test <- mean(abs(exp(-exp(-GLM_predictions_test)) - exp(-exp(-Y_test)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m
[32m+[m[32mcolnames(GLM_result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mGLM_plot_test <- ggplot(GLM_result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction GLM (test data set)",[m
[32m+[m[32m       subtitle = paste0("R=", GLM_predictions_cor_test,[m
[32m+[m[32m                         " MSE=", GLM_mse_test,[m
[32m+[m[32m                         " MAE=", GLM_mae_test,[m
[32m+[m[32m                         " N=", nrow(X_test))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32m### running model on training data[m
[32m+[m[32mGLM_predictions_train <- predict(GLM_test, newx= X, s=GLM_test$lambda.min)[m
[32m+[m[32mGLM_predictions_cor_train <- cor(GLM_predictions_train, Y, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mGLM_mse_train <- mean((GLM_predictions_train - Y)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mGLM_mae_train <- mean(abs(GLM_predictions_train - Y)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mGLM_result_df_train <- data.frame(predictions = GLM_predictions_train,[m
[32m+[m[32m                                  rel_age = Y,[m
[32m+[m[32m                                  species = all_meth_values_selected_train$species)[m
[32m+[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mGLM_result_df_train <- data.frame(predictions = exp(-exp(-GLM_predictions_train)),[m
[32m+[m[32m                                  rel_age = exp(-exp(-Y)),[m
[32m+[m[32m                                  species = all_meth_values_selected_train$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mGLM_mse_train <- mean((exp(-exp(-GLM_predictions_train)) - exp(-exp(-Y)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mGLM_mae_train <- mean(abs(exp(-exp(-GLM_predictions_train)) - exp(-exp(-Y)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mcolnames(GLM_result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mGLM_plot_train <- ggplot(GLM_result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction GLM (train data set)",[m
[32m+[m[32m       subtitle = paste0("R=", GLM_predictions_cor_train, " MSE=", GLM_mse_train, " MAE=", GLM_mae_train, " N=", nrow(X))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32mGLM_plot_train + GLM_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Testing multiple regression models ####[m
[32m+[m
[32m+[m[32mmlm_test <- lm(-log(-log(Y)) ~ X)[m
[32m+[m[32msummary(mlm_test)[m
[32m+[m
[32m+[m[32m# selecting only significant values[m
[32m+[m[32msign_vec <- as.vector((summary(mlm_test)$coefficients[,4] < 0.05)[-1])[m
[32m+[m
[32m+[m[32mmlm_test_significant <- lm(-log(-log(Y)) ~ X[,sign_vec])[m
[32m+[m[32msummary(mlm_test_significant)[m
[32m+[m
[32m+[m[32mplot(mlm_test)[m
[32m+[m
[32m+[m[32m#### Testing random forest model ####[m
[32m+[m
[32m+[m[32m### Shortcoming of random forest[m
[32m+[m[32m# Random Forests aren't good at generalizing cases with completely new data. For example, if I tell you that one ice-cream costs $1, 2 ice-creams cost $2, and 3 ice-creams cost $3, how much do 10 ice-creams cost? A linear regression can easily figure this out, while a Random Forest has no way of finding the answer.[m
[32m+[m[32m# Random forests are biased towards the categorical variable having multiple levels (categories). It is because feature selection based on impurity reduction is biased towards preferring variables with more categories so variable selection (importance) is not accurate for this type of data.[m
[32m+[m
[32m+[m[32mlibrary(randomForest)[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32m# change age here![m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m[32m#changing value[m
[32m+[m[32mY <- -log(-log(Y))[m
[32m+[m[32mY_test <- -log(-log(Y_test))[m
[32m+[m
[32m+[m[32m## actual model[m
[32m+[m[32mRF_test <- randomForest(Y ~ ., data = X, mtry = 9, ntree = 1500)[m
[32m+[m[32mplot(RF_test)[m
[32m+[m[32mvarImpPlot(RF_test)[m
[32m+[m[32mimportance(RF_test)[m
[32m+[m
[32m+[m[32mwhich.min(RF_test$mse)[m
[32m+[m
[32m+[m[32m## tuning model[m
[32m+[m[32mtuneRF([m
[32m+[m[32m  x=X, #define predictor variables[m
[32m+[m[32m  y=Y, #define response variable[m
[32m+[m[32m  ntreeTry=500,[m
[32m+[m[32m  mtryStart=4,[m[41m [m
[32m+[m[32m  stepFactor=1.5,[m
[32m+[m[32m  improve=0.01,[m
[32m+[m[32m  trace=TRUE #don't show real-time progress[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m### plotting and evaluating[m
[32m+[m[32mRF_predictions_test <- predict(RF_test, X_test)[m
[32m+[m[32mRF_predictions_cor_test <- cor(RF_predictions_test, Y_test, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mRF_mse_test <- mean((RF_predictions_test - Y_test)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mRF_mae_test <- mean(abs(RF_predictions_test - Y_test)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mRF_result_df <- data.frame(predictions = RF_predictions_test,[m
[32m+[m[32m                            rel_age = Y_test,[m
[32m+[m[32m                            species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m
[32m+[m[32mRF_result_df <- data.frame(predictions = exp(-exp(-RF_predictions_test)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y_test)),[m
[32m+[m[32m                            species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mRF_mse_test <- mean((exp(-exp(-RF_predictions_test)) - exp(-exp(-Y_test)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mRF_mae_test <- mean(abs(exp(-exp(-RF_predictions_test)) - exp(-exp(-Y_test)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m
[32m+[m[32mcolnames(RF_result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mRF_plot_test <- ggplot(RF_result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction RF (test data set)",[m
[32m+[m[32m       subtitle = paste0("R=", RF_predictions_cor_test,[m
[32m+[m[32m                         " MSE=", RF_mse_test,[m
[32m+[m[32m                         " MAE=", RF_mae_test,[m
[32m+[m[32m                         " N=", nrow(X_test))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32m### running model on training data[m
[32m+[m[32mRF_predictions_train <- predict(RF_test, newx= X)[m
[32m+[m[32mRF_predictions_cor_train <- cor(RF_predictions_train, Y, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mRF_mse_train <- mean((RF_predictions_train - Y)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mRF_mae_train <- mean(abs(RF_predictions_train - Y)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mRF_result_df_train <- data.frame(predictions = RF_predictions_train,[m
[32m+[m[32m                                  rel_age = Y,[m
[32m+[m[32m                                  species = all_meth_values_selected_train$species)[m
[32m+[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mRF_result_df_train <- data.frame(predictions = exp(-exp(-RF_predictions_train)),[m
[32m+[m[32m                                  rel_age = exp(-exp(-Y)),[m
[32m+[m[32m                                  species = all_meth_values_selected_train$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mRF_mse_train <- mean((exp(-exp(-RF_predictions_train)) - exp(-exp(-Y)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mRF_mae_train <- mean(abs(exp(-exp(-RF_predictions_train)) - exp(-exp(-Y)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mcolnames(RF_result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mRF_plot_train <- ggplot(RF_result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction RF (train data set)",[m
[32m+[m[32m       subtitle = paste0("R=", RF_predictions_cor_train, " MSE=", RF_mse_train, " MAE=", RF_mae_train, " N=", nrow(X))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32mRF_plot_train + RF_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m[32m#### Testing support vector regression models ####[m
[32m+[m[32mlibrary(e1071)[m
[32m+[m
[32m+[m[32m# change age here![m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m[32m#changing value[m
[32m+[m[32mY <- -log(-log(Y))[m
[32m+[m[32mY_test <- -log(-log(Y_test))[m
[32m+[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mSVM_test <- svm(Y ~ ., data = X, type = "eps-regression")[m
[32m+[m[32mSVM_test <- svm(Y ~ ., data = X, type = "nu-regression")[m
[32m+[m[32mSVM_test <- svm(Y ~ ., data = X, type = "nu-regression", kernel = "polynomial")[m
[32m+[m
[32m+[m[32msummary(SVM_test)[m
[32m+[m
[32m+[m
[32m+[m[32m### plotting[m
[32m+[m[32mSVM_predictions_test <- predict(SVM_test, X_test)[m
[32m+[m[32mSVM_predictions_cor_test <- cor(SVM_predictions_test, Y_test, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mSVM_mse_test <- mean((SVM_predictions_test - Y_test)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mSVM_mae_test <- mean(abs(SVM_predictions_test - Y_test)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mSVM_result_df <- data.frame(predictions = SVM_predictions_test,[m
[32m+[m[32m                        rel_age = Y_test,[m
[32m+[m[32m                        species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m
[32m+[m[32mSVM_result_df <- data.frame(predictions = exp(-exp(-SVM_predictions_test)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y_test)),[m
[32m+[m[32m                            species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mSVM_mse_test <- mean((exp(-exp(-SVM_predictions_test)) - exp(-exp(-Y_test)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mSVM_mae_test <- mean(abs(exp(-exp(-SVM_predictions_test)) - exp(-exp(-Y_test)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m
[32m+[m[32mcolnames(SVM_result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mSVM_plot_test <- ggplot(SVM_result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction SVM (test data set)",[m
[32m+[m[32m       subtitle = paste0("R=", SVM_predictions_cor_test,[m
[32m+[m[32m                         " MSE=", SVM_mse_test,[m
[32m+[m[32m                         " MAE=", SVM_mae_test,[m
[32m+[m[32m                         " N=", nrow(X_test))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32m### running model on training data[m
[32m+[m[32mSVM_predictions_train <- predict(SVM_test, newx= X)[m
[32m+[m[32mSVM_predictions_cor_train <- cor(SVM_predictions_train, Y, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mSVM_mse_train <- mean((SVM_predictions_train - Y)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mSVM_mae_train <- mean(abs(SVM_predictions_train - Y)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mSVM_result_df_train <- data.frame(predictions = SVM_predictions_train,[m
[32m+[m[32m                              rel_age = Y,[m
[32m+[m[32m                              species = all_meth_values_selected_train$species)[m
[32m+[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mSVM_result_df_train <- data.frame(predictions = exp(-exp(-SVM_predictions_train)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y)),[m
[32m+[m[32m                            species = all_meth_values_selected_train$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mSVM_mse_train <- mean((exp(-exp(-SVM_predictions_train)) - exp(-exp(-Y)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mSVM_mae_train <- mean(abs(exp(-exp(-SVM_predictions_train)) - exp(-exp(-Y)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mcolnames(SVM_result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mSVM_plot_train <- ggplot(SVM_result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction SVM (train data set)",[m
[32m+[m[32m       subtitle = paste0("R=", SVM_predictions_cor_train, " MSE=", SVM_mse_train, " MAE=", SVM_mae_train, " N=", nrow(X))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32mSVM_plot_train + SVM_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m[32m#### Testing Bayesian models ####[m
[32m+[m[32minstall.packages("rstanarm")[m
[32m+[m[32mlibrary(rstanarm)[m
[32m+[m
[32m+[m[32m#### Testing deep learning models ####[m
[32m+[m[32minstall.packages("keras")[m
[32m+[m[32mlibrary(keras)[m
[32m+[m[32mDL_test <- keras_model_sequential() %>%[m
[32m+[m[32m  layer_dense(units = 64, activation = 'relu', input_shape = c(num_features)) %>%[m
[32m+[m[32m  layer_dense(units = 1)[m
[32m+[m[32mDL_test %>% compile([m
[32m+[m[32m  optimizer = 'rmsprop',[m
[32m+[m[32m  loss = 'mse',[m
[32m+[m[32m  metrics = 'mae'[m
[32m+[m[32m)[m
[32m+[m[32mDL_test %>% fit(X, Y, epochs = 100, batch_size = 10, validation_split = 0.2)[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting ####[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m## all[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # facet_row(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(x = Site, y = Correlation, color = species, alpha = significant)) +[m
[32m+[m[32m  # geom_line(aes(x = c(-1,1), y = log2(0.05), color = "#CC79A7")) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  facet_wrap(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only significant[m
[32m+[m[32mggplot(subset(cor_all, significant == TRUE), aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  # facet_wrap(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only selected[m[41m [m
[32m+[m[32mggplot(all_sig_CpGs_common, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only cor positive[m[41m [m
[32m+[m[32mggplot(all_pos_cor_CpG, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## plotting SMR groups 24 and 28[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% subset(all_sig_CpGs_common, SMR == "SMR_024" | SMR == "SMR_026")$Site)[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% all_mix_cor_CpG_common$Site)[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species, color = species), alpha = 0.9, outlier.size = 0.1) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)",[m
[32m+[m[32m       subtitle = "Selected values are correlating with age")[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = species, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = rel_age, shape = species)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_manual(aesthetics = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  # theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
\ No newline at end of file[m
[1mdiff --git a/04_human_AC_AS_EH_ZF_correlation_testing_v-1.3.R b/04_human_AC_AS_EH_ZF_correlation_testing_v-1.3.R[m
[1mnew file mode 100644[m
[1mindex 0000000..c765a91[m
[1m--- /dev/null[m
[1m+++ b/04_human_AC_AS_EH_ZF_correlation_testing_v-1.3.R[m
[36m@@ -0,0 +1,685 @@[m
[32m+[m[32m#### correlation testing ####[m
[32m+[m[32m## correlation test between the selected CpGs and to age as well[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m[32m# Data should be in environment from previous script[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32mcor.test.age <- function(methyl_values, age, SMR = "not_defined", species = "undefined", method = "pearson") {[m
[32m+[m[32m  correlation_results <- list()[m
[32m+[m[32m  print(paste0("Running correlation test against age with ", method, " method. Results are stored in tibble."))[m
[32m+[m[32m  # Loop through each methylation site[m
[32m+[m[32m  for (i in 1:ncol(methyl_values)) {[m
[32m+[m[32m    site_name <- colnames(methyl_values)[i][m
[32m+[m[32m    # Perform correlation test with age[m
[32m+[m[32m    test_result <- cor.test(methyl_values[,i], age, method = method) # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m    [m
[32m+[m[32m    # Store the results[m
[32m+[m[32m    correlation_results[[site_name]] <- list([m
[32m+[m[32m      correlation_coefficient = test_result$estimate,[m
[32m+[m[32m      p_value = test_result$p.value[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32m  correlation_summary <- tibble([m
[32m+[m[32m    Site = names(correlation_results),[m
[32m+[m[32m    Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m    P_value = sapply(correlation_results, function(x) x$p_value),[m
[32m+[m[32m    SMR = SMR,[m
[32m+[m[32m    species = species[m
[32m+[m[32m  )[m
[32m+[m[32m  return(correlation_summary)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcor.test.age.filter <- function(input, p_value = 0.05) {[m
[32m+[m[32m  significant_vector <- as.vector(ifelse(input$P_value <= p_value, TRUE, FALSE))[m
[32m+[m[32m  input$significant <- significant_vector[m
[32m+[m[32m  return(input)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Correlation tests ####[m
[32m+[m
[32m+[m[32mAC_cor_age_pearson <- cor.test.age(AC_meth_values, AC_age, AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], species = "AC")[m
[32m+[m[32mAC_cor_age_filtered_pearson <- cor.test.age.filter(AC_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mAS_cor_age_pearson <- cor.test.age(AS_meth_values, AS_age, AS_methyl_sites$SMR, species = "AS")[m
[32m+[m[32mAS_cor_age_filtered_pearson <- cor.test.age.filter(AS_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mEH_cor_age_pearson <- cor.test.age(EH_meth_values, EH_age, EH_methyl_sites$SMR, species = "EH")[m
[32m+[m[32mEH_cor_age_filtered_pearson <- cor.test.age.filter(EH_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mZF_cor_age_pearson <- cor.test.age(ZF_meth_values, ZF_age, ZF_methyl_sites$SMR, species = "ZF")[m
[32m+[m[32mZF_cor_age_filtered_pearson <- cor.test.age.filter(ZF_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mcor_all <- rbind(AC_cor_age_filtered_pearson,[m
[32m+[m[32m                 AS_cor_age_filtered_pearson,[m
[32m+[m[32m                 EH_cor_age_filtered_pearson,[m[41m [m
[32m+[m[32m                 ZF_cor_age_filtered_pearson)[m
[32m+[m
[32m+[m[32m## selecting CpGs[m
[32m+[m
[32m+[m[32mncol(AC_meth_values[AC_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(AS_meth_values[AS_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(EH_meth_values[EH_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(ZF_meth_values[ZF_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m
[32m+[m[32m#### function to choose only the highest correlating CpGs per SMR[m
[32m+[m
[32m+[m[32mselect.max.cor <- function(cor_tibble, filter_significant = FALSE) {[m
[32m+[m[32m  filtered_data <- cor_tibble[m
[32m+[m[32m  if(filter_significant == TRUE) {filtered_data <- filter(filtered_data, significant)}[m
[32m+[m[41m  [m
[32m+[m[32m  filtered_data <- filtered_data %>%[m[41m [m
[32m+[m[32m    group_by(SMR) %>%[m
[32m+[m[32m    # Add a temporary column for the absolute correlation values[m
[32m+[m[32m    mutate(abs_correlation = abs(Correlation)) %>%[m
[32m+[m[32m    # For each group, filter the row with the max absolute correlation[m
[32m+[m[32m    filter(abs_correlation == max(abs_correlation)) %>%[m
[32m+[m[32m    # Remove the temporary column[m
[32m+[m[32m    select(-abs_correlation) %>%[m
[32m+[m[32m    # Optionally, ensure only one row per group if there are ties[m
[32m+[m[32m    slice(1)[m
[32m+[m[32m  return(filtered_data)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## selecting only positively correlating samples[m
[32m+[m[32mAC_pos_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mAS_pos_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mEH_pos_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mZF_pos_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m
[32m+[m[32mall_pos_cor_CpG <- rbind(AC_pos_cor_CpGs, AS_pos_cor_CpGs, EH_pos_cor_CpGs, ZF_pos_cor_CpGs)[m
[32m+[m[32mall_pos_cor_CpG_common  <- all_pos_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting only negatively correlating samples[m
[32m+[m[32mAC_neg_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mAS_neg_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mEH_neg_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mZF_neg_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m
[32m+[m[32mall_neg_cor_CpG <- rbind(AC_neg_cor_CpGs, AS_neg_cor_CpGs, EH_neg_cor_CpGs, ZF_neg_cor_CpGs)[m
[32m+[m[32mall_neg_cor_CpG_common  <- all_neg_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting a mixture of both[m
[32m+[m[32mtemp_index_vec <- (all_pos_cor_CpG_common$SMR %in% all_neg_cor_CpG_common$SMR) == FALSE[m
[32m+[m[32mall_mix_cor_CpG_common  <- rbind(all_neg_cor_CpG_common, all_pos_cor_CpG_common[temp_index_vec,]) %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting significant ones[m
[32m+[m[32mAC_sig_CpGs <- select.max.cor(AC_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mAS_sig_CpGs <- select.max.cor(AS_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mEH_sig_CpGs <- select.max.cor(EH_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mZF_sig_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson, TRUE)[m
[32m+[m
[32m+[m[32mall_sig_CpGs <- rbind(AC_sig_CpGs, AS_sig_CpGs, EH_sig_CpGs, ZF_sig_CpGs)[m
[32m+[m
[32m+[m[32mall_sig_CpGs_common <- all_sig_CpGs %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m
[32m+[m[32m#### model creation ####[m
[32m+[m[32mlibrary(glmnet)[m
[32m+[m[32mAC_glm <- cv.glmnet(as.matrix(AC_meth_values), AC_age, alpha = 0.5)[m
[32m+[m[32mcoef(AC_glm, s=0.01)[m
[32m+[m[32mAC_glm_prediction <- predict(AC_glm, newx = as.matrix(AC_meth_values))[m
[32m+[m[32mplot(AC_glm)[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m### selecting only pos cor ones[m[41m [m
[32m+[m[32m#### ----[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_pos_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_pos_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m### selecting only neg cor ones[m[41m [m
[32m+[m[32m#### ----[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_neg_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_neg_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_neg_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_neg_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m# selecting a mixture of them[m[41m [m
[32m+[m[32m#### ----[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_mix_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_mix_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_mix_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_mix_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m# Setting up data[m
[32m+[m[32m#### ----[m
[32m+[m[32m# combining all data[m[41m [m
[32m+[m[32mall_meth_values_selected <- rbind(AC_meth_values_selected, AS_meth_values_selected, EH_meth_values_selected, ZF_meth_values_selected)[m
[32m+[m
[32m+[m[32m## splitting into training and testing data[m
[32m+[m[41m [m
[32m+[m[32m# option A):[m
[32m+[m[32mall_meth_values_selected_train <- all_meth_values_selected[-seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m[32mall_meth_values_selected_test <- all_meth_values_selected[seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m
[32m+[m[32m# save(all_meth_values_selected, file = "/workspace/cfngle/results-data/06_model_creation/HS_all_meth_values_selected.RData")[m
[32m+[m
[32m+[m[32m# option B):[m
[32m+[m[32mlibrary(tidymodels)[m
[32m+[m
[32m+[m
[32m+[m[32m# training data[m
[32m+[m[32mX <- all_meth_values_selected_train %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m
[32m+[m[32m# testing data[m
[32m+[m[32mX_test <- all_meth_values_selected_test %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species) %>%[m[41m [m
[32m+[m[32m  as.matrix()[m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m
[32m+[m
[32m+[m[32m#### Testing model CV GLM ####[m
[32m+[m[32mset.seed(123)[m
[32m+[m
[32m+[m[32m# change age here![m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m[32m#changing value[m
[32m+[m[32mY <- -log(-log(Y))[m
[32m+[m[32mY_test <- -log(-log(Y_test))[m
[32m+[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mGLM_test <- cv.glmnet(X, Y, alpha = 1)[m
[32m+[m[32mplot(GLM_test)[m
[32m+[m
[32m+[m[32mcoef(GLM_test, s=GLM_test$lambda.min)[m
[32m+[m
[32m+[m[32m### running model on testing data[m
[32m+[m[32m### plotting[m
[32m+[m[32mGLM_predictions_test <- predict(GLM_test, X_test, s=GLM_test$lambda.min)[m
[32m+[m[32mGLM_predictions_cor_test <- cor(GLM_predictions_test, Y_test, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mGLM_mse_test <- mean((GLM_predictions_test - Y_test)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mGLM_mae_test <- mean(abs(GLM_predictions_test - Y_test)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mGLM_result_df <- data.frame(predictions = GLM_predictions_test,[m
[32m+[m[32m                            rel_age = Y_test,[m
[32m+[m[32m                            species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m
[32m+[m[32mGLM_result_df <- data.frame(predictions = exp(-exp(-GLM_predictions_test)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y_test)),[m
[32m+[m[32m                            species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mGLM_mse_test <- mean((exp(-exp(-GLM_predictions_test)) - exp(-exp(-Y_test)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mGLM_mae_test <- mean(abs(exp(-exp(-GLM_predictions_test)) - exp(-exp(-Y_test)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m
[32m+[m[32mcolnames(GLM_result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mGLM_plot_test <- ggplot(GLM_result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction GLM (test data set)",[m
[32m+[m[32m       subtitle = paste0("R=", GLM_predictions_cor_test,[m
[32m+[m[32m                         " MSE=", GLM_mse_test,[m
[32m+[m[32m                         " MAE=", GLM_mae_test,[m
[32m+[m[32m                         " N=", nrow(X_test))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32m### running model on training data[m
[32m+[m[32mGLM_predictions_train <- predict(GLM_test, newx= X, s=GLM_test$lambda.min)[m
[32m+[m[32mGLM_predictions_cor_train <- cor(GLM_predictions_train, Y, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mGLM_mse_train <- mean((GLM_predictions_train - Y)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mGLM_mae_train <- mean(abs(GLM_predictions_train - Y)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mGLM_result_df_train <- data.frame(predictions = GLM_predictions_train,[m
[32m+[m[32m                                  rel_age = Y,[m
[32m+[m[32m                                  species = all_meth_values_selected_train$species)[m
[32m+[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mGLM_result_df_train <- data.frame(predictions = exp(-exp(-GLM_predictions_train)),[m
[32m+[m[32m                                  rel_age = exp(-exp(-Y)),[m
[32m+[m[32m                                  species = all_meth_values_selected_train$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mGLM_mse_train <- mean((exp(-exp(-GLM_predictions_train)) - exp(-exp(-Y)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mGLM_mae_train <- mean(abs(exp(-exp(-GLM_predictions_train)) - exp(-exp(-Y)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mcolnames(GLM_result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mGLM_plot_train <- ggplot(GLM_result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction GLM (train data set)",[m
[32m+[m[32m       subtitle = paste0("R=", GLM_predictions_cor_train, " MSE=", GLM_mse_train, " MAE=", GLM_mae_train, " N=", nrow(X))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32mGLM_plot_train + GLM_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Testing multiple regression models ####[m
[32m+[m
[32m+[m[32mmlm_test <- lm(-log(-log(Y)) ~ X)[m
[32m+[m[32msummary(mlm_test)[m
[32m+[m
[32m+[m[32m# selecting only significant values[m
[32m+[m[32msign_vec <- as.vector((summary(mlm_test)$coefficients[,4] < 0.05)[-1])[m
[32m+[m
[32m+[m[32mmlm_test_significant <- lm(-log(-log(Y)) ~ X[,sign_vec])[m
[32m+[m[32msummary(mlm_test_significant)[m
[32m+[m
[32m+[m[32mplot(mlm_test)[m
[32m+[m
[32m+[m[32m#### Testing random forest model ####[m
[32m+[m
[32m+[m[32m### Shortcoming of random forest[m
[32m+[m[32m# Random Forests aren't good at generalizing cases with completely new data. For example, if I tell you that one ice-cream costs $1, 2 ice-creams cost $2, and 3 ice-creams cost $3, how much do 10 ice-creams cost? A linear regression can easily figure this out, while a Random Forest has no way of finding the answer.[m
[32m+[m[32m# Random forests are biased towards the categorical variable having multiple levels (categories). It is because feature selection based on impurity reduction is biased towards preferring variables with more categories so variable selection (importance) is not accurate for this type of data.[m
[32m+[m
[32m+[m[32mlibrary(randomForest)[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32m# change age here![m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m[32m#changing value[m
[32m+[m[32mY <- -log(-log(Y))[m
[32m+[m[32mY_test <- -log(-log(Y_test))[m
[32m+[m
[32m+[m[32m## actual model[m
[32m+[m[32mRF_test <- randomForest(Y ~ ., data = X, mtry = 9, ntree = 1500)[m
[32m+[m[32mplot(RF_test)[m
[32m+[m[32mvarImpPlot(RF_test)[m
[32m+[m[32mimportance(RF_test)[m
[32m+[m
[32m+[m[32mwhich.min(RF_test$mse)[m
[32m+[m
[32m+[m[32m## tuning model[m
[32m+[m[32mtuneRF([m
[32m+[m[32m  x=X, #define predictor variables[m
[32m+[m[32m  y=Y, #define response variable[m
[32m+[m[32m  ntreeTry=500,[m
[32m+[m[32m  mtryStart=4,[m[41m [m
[32m+[m[32m  stepFactor=1.5,[m
[32m+[m[32m  improve=0.01,[m
[32m+[m[32m  trace=TRUE #don't show real-time progress[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m### plotting and evaluating[m
[32m+[m[32mRF_predictions_test <- predict(RF_test, X_test)[m
[32m+[m[32mRF_predictions_cor_test <- cor(RF_predictions_test, Y_test, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mRF_mse_test <- mean((RF_predictions_test - Y_test)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mRF_mae_test <- mean(abs(RF_predictions_test - Y_test)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mRF_result_df <- data.frame(predictions = RF_predictions_test,[m
[32m+[m[32m                            rel_age = Y_test,[m
[32m+[m[32m                            species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m
[32m+[m[32mRF_result_df <- data.frame(predictions = exp(-exp(-RF_predictions_test)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y_test)),[m
[32m+[m[32m                            species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mRF_mse_test <- mean((exp(-exp(-RF_predictions_test)) - exp(-exp(-Y_test)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mRF_mae_test <- mean(abs(exp(-exp(-RF_predictions_test)) - exp(-exp(-Y_test)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m
[32m+[m[32mcolnames(RF_result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mRF_plot_test <- ggplot(RF_result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction RF (test data set)",[m
[32m+[m[32m       subtitle = paste0("R=", RF_predictions_cor_test,[m
[32m+[m[32m                         " MSE=", RF_mse_test,[m
[32m+[m[32m                         " MAE=", RF_mae_test,[m
[32m+[m[32m                         " N=", nrow(X_test))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32m### running model on training data[m
[32m+[m[32mRF_predictions_train <- predict(RF_test, newx= X)[m
[32m+[m[32mRF_predictions_cor_train <- cor(RF_predictions_train, Y, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mRF_mse_train <- mean((RF_predictions_train - Y)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mRF_mae_train <- mean(abs(RF_predictions_train - Y)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mRF_result_df_train <- data.frame(predictions = RF_predictions_train,[m
[32m+[m[32m                                  rel_age = Y,[m
[32m+[m[32m                                  species = all_meth_values_selected_train$species)[m
[32m+[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mRF_result_df_train <- data.frame(predictions = exp(-exp(-RF_predictions_train)),[m
[32m+[m[32m                                  rel_age = exp(-exp(-Y)),[m
[32m+[m[32m                                  species = all_meth_values_selected_train$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mRF_mse_train <- mean((exp(-exp(-RF_predictions_train)) - exp(-exp(-Y)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mRF_mae_train <- mean(abs(exp(-exp(-RF_predictions_train)) - exp(-exp(-Y)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mcolnames(RF_result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mRF_plot_train <- ggplot(RF_result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction RF (train data set)",[m
[32m+[m[32m       subtitle = paste0("R=", RF_predictions_cor_train, " MSE=", RF_mse_train, " MAE=", RF_mae_train, " N=", nrow(X))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32mRF_plot_train + RF_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m[32m#### Testing support vector regression models ####[m
[32m+[m[32mlibrary(e1071)[m
[32m+[m
[32m+[m[32m# change age here![m
[32m+[m[32mY <- all_meth_values_selected_train[,"rel_age"][m
[32m+[m[32mY_test <- all_meth_values_selected_test[,"rel_age"][m
[32m+[m[32m#changing value[m
[32m+[m[32mY <- -log(-log(Y))[m
[32m+[m[32mY_test <- -log(-log(Y_test))[m
[32m+[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mSVM_test <- svm(Y ~ ., data = X, type = "eps-regression")[m
[32m+[m[32mSVM_test <- svm(Y ~ ., data = X, type = "nu-regression")[m
[32m+[m[32mSVM_test <- svm(Y ~ ., data = X, type = "nu-regression", kernel = "polynomial")[m
[32m+[m
[32m+[m[32msummary(SVM_test)[m
[32m+[m
[32m+[m
[32m+[m[32m### plotting[m
[32m+[m[32mSVM_predictions_test <- predict(SVM_test, X_test)[m
[32m+[m[32mSVM_predictions_cor_test <- cor(SVM_predictions_test, Y_test, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mSVM_mse_test <- mean((SVM_predictions_test - Y_test)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mSVM_mae_test <- mean(abs(SVM_predictions_test - Y_test)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mSVM_result_df <- data.frame(predictions = SVM_predictions_test,[m
[32m+[m[32m                        rel_age = Y_test,[m
[32m+[m[32m                        species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m
[32m+[m[32mSVM_result_df <- data.frame(predictions = exp(-exp(-SVM_predictions_test)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y_test)),[m
[32m+[m[32m                            species = all_meth_values_selected_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mSVM_mse_test <- mean((exp(-exp(-SVM_predictions_test)) - exp(-exp(-Y_test)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mSVM_mae_test <- mean(abs(exp(-exp(-SVM_predictions_test)) - exp(-exp(-Y_test)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m
[32m+[m[32mcolnames(SVM_result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mSVM_plot_test <- ggplot(SVM_result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction SVM (test data set)",[m
[32m+[m[32m       subtitle = paste0("R=", SVM_predictions_cor_test,[m
[32m+[m[32m                         " MSE=", SVM_mse_test,[m
[32m+[m[32m                         " MAE=", SVM_mae_test,[m
[32m+[m[32m                         " N=", nrow(X_test))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32m### running model on training data[m
[32m+[m[32mSVM_predictions_train <- predict(SVM_test, newx= X)[m
[32m+[m[32mSVM_predictions_cor_train <- cor(SVM_predictions_train, Y, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mSVM_mse_train <- mean((SVM_predictions_train - Y)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mSVM_mae_train <- mean(abs(SVM_predictions_train - Y)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mSVM_result_df_train <- data.frame(predictions = SVM_predictions_train,[m
[32m+[m[32m                              rel_age = Y,[m
[32m+[m[32m                              species = all_meth_values_selected_train$species)[m
[32m+[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mSVM_result_df_train <- data.frame(predictions = exp(-exp(-SVM_predictions_train)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y)),[m
[32m+[m[32m                            species = all_meth_values_selected_train$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mSVM_mse_train <- mean((exp(-exp(-SVM_predictions_train)) - exp(-exp(-Y)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mSVM_mae_train <- mean(abs(exp(-exp(-SVM_predictions_train)) - exp(-exp(-Y)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mcolnames(SVM_result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mSVM_plot_train <- ggplot(SVM_result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction SVM (train data set)",[m
[32m+[m[32m       subtitle = paste0("R=", SVM_predictions_cor_train, " MSE=", SVM_mse_train, " MAE=", SVM_mae_train, " N=", nrow(X))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32mSVM_plot_train + SVM_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m[32m#### Testing Bayesian models ####[m
[32m+[m
[32m+[m[32mlibrary(reticulate)[m
[32m+[m[32muse_condaenv("cfngle_env-01", required = TRUE)[m
[32m+[m[32minstall.packages("rstanarm")[m
[32m+[m[32mlibrary(rstanarm)[m
[32m+[m
[32m+[m[32m#### Testing deep learning models ####[m
[32m+[m[32minstall.packages("keras")[m
[32m+[m[32mlibrary(keras)[m
[32m+[m[32mDL_test <- keras_model_sequential() %>%[m
[32m+[m[32m  layer_dense(units = 64, activation = 'relu', input_shape = c(num_features)) %>%[m
[32m+[m[32m  layer_dense(units = 1)[m
[32m+[m[32mDL_test %>% compile([m
[32m+[m[32m  optimizer = 'rmsprop',[m
[32m+[m[32m  loss = 'mse',[m
[32m+[m[32m  metrics = 'mae'[m
[32m+[m[32m)[m
[32m+[m[32mDL_test %>% fit(X, Y, epochs = 100, batch_size = 10, validation_split = 0.2)[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting ####[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m## all[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # facet_row(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(x = Site, y = Correlation, color = species, alpha = significant)) +[m
[32m+[m[32m  # geom_line(aes(x = c(-1,1), y = log2(0.05), color = "#CC79A7")) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  facet_wrap(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only significant[m
[32m+[m[32mggplot(subset(cor_all, significant == TRUE), aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  # facet_wrap(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only selected[m[41m [m
[32m+[m[32mggplot(all_sig_CpGs_common, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only cor positive[m[41m [m
[32m+[m[32mggplot(all_pos_cor_CpG, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## plotting SMR groups 24 and 28[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% subset(all_sig_CpGs_common, SMR == "SMR_024" | SMR == "SMR_026")$Site)[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% all_mix_cor_CpG_common$Site)[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species, color = species), alpha = 0.9, outlier.size = 0.1) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)",[m
[32m+[m[32m       subtitle = "Selected values are correlating with age")[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = species, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = rel_age, shape = species)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_manual(aesthetics = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  # theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
\ No newline at end of file[m
[1mdiff --git a/04_human_AC_AS_EH_ZF_correlation_testing_v-1.4.R b/04_human_AC_AS_EH_ZF_correlation_testing_v-1.4.R[m
[1mnew file mode 100644[m
[1mindex 0000000..9f5fbde[m
[1m--- /dev/null[m
[1m+++ b/04_human_AC_AS_EH_ZF_correlation_testing_v-1.4.R[m
[36m@@ -0,0 +1,977 @@[m
[32m+[m[32m#### correlation testing ####[m
[32m+[m[32m## correlation test between the selected CpGs and to age as well[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# library(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32m# library(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m[32mlibrary(tidymodels)[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mlibrary(patchwork)[m
[32m+[m[32mlibrary(caret)[m
[32m+[m
[32m+[m[32m## loading data[m[41m [m
[32m+[m[32m# methyl values[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/HS_AC_meth_values.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/HS_AS_meth_values.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/HS_EH_meth_values.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/HS_ZF_meth_values_imputed.Rdata")[m
[32m+[m[32m# Shared methylation sites[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/HS_AC_methyl_sites.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/HS_AS_methyl_sites.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/HS_EH_methyl_sites.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/HS_ZF_methyl_sites.Rdata")[m
[32m+[m[32m# Age metadata[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/HS_all_age.Rdata")[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32mcor.test.age <- function(methyl_values, age, SMR = "not_defined", species = "undefined", method = "pearson") {[m
[32m+[m[32m  correlation_results <- list()[m
[32m+[m[32m  print(paste0("Running correlation test against age with ", method, " method. Results are stored in tibble."))[m
[32m+[m[32m  # Loop through each methylation site[m
[32m+[m[32m  for (i in 1:ncol(methyl_values)) {[m
[32m+[m[32m    site_name <- colnames(methyl_values)[i][m
[32m+[m[32m    # Perform correlation test with age[m
[32m+[m[32m    test_result <- cor.test(methyl_values[,i], age, method = method) # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m    [m
[32m+[m[32m    # Store the results[m
[32m+[m[32m    correlation_results[[site_name]] <- list([m
[32m+[m[32m      correlation_coefficient = test_result$estimate,[m
[32m+[m[32m      p_value = test_result$p.value[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32m  correlation_summary <- tibble([m
[32m+[m[32m    Site = names(correlation_results),[m
[32m+[m[32m    Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m    P_value = sapply(correlation_results, function(x) x$p_value),[m
[32m+[m[32m    SMR = SMR,[m
[32m+[m[32m    species = species[m
[32m+[m[32m  )[m
[32m+[m[32m  return(correlation_summary)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcor.test.age.filter <- function(input, p_value = 0.05) {[m
[32m+[m[32m  significant_vector <- as.vector(ifelse(input$P_value <= p_value, TRUE, FALSE))[m
[32m+[m[32m  input$significant <- significant_vector[m
[32m+[m[32m  return(input)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Correlation tests ####[m
[32m+[m
[32m+[m[32mAC_cor_age_pearson <- cor.test.age(AC_meth_values, AC_age, AC_methyl_sites$SMR, species = "AC")[m
[32m+[m[32mAC_cor_age_filtered_pearson <- cor.test.age.filter(AC_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mAS_cor_age_pearson <- cor.test.age(AS_meth_values, AS_age, AS_methyl_sites$SMR, species = "AS")[m
[32m+[m[32mAS_cor_age_filtered_pearson <- cor.test.age.filter(AS_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mEH_cor_age_pearson <- cor.test.age(EH_meth_values, EH_age, EH_methyl_sites$SMR, species = "EH")[m
[32m+[m[32mEH_cor_age_filtered_pearson <- cor.test.age.filter(EH_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mZF_cor_age_pearson <- cor.test.age(ZF_meth_values_imputed, ZF_age, ZF_methyl_sites$SMR, species = "ZF")[m
[32m+[m[32mZF_cor_age_filtered_pearson <- cor.test.age.filter(ZF_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mcor_all <- rbind(AC_cor_age_filtered_pearson,[m
[32m+[m[32m                 AS_cor_age_filtered_pearson,[m
[32m+[m[32m                 EH_cor_age_filtered_pearson,[m[41m [m
[32m+[m[32m                 ZF_cor_age_filtered_pearson)[m
[32m+[m
[32m+[m[32m## selecting CpGs[m
[32m+[m
[32m+[m[32mncol(AC_meth_values[AC_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(AS_meth_values[AS_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(EH_meth_values[EH_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32mncol(ZF_meth_values_imputed[ZF_cor_age_filtered_pearson$significant] == TRUE)[m
[32m+[m[32m### 154, 120, 224, 64[m
[32m+[m
[32m+[m[32m#### function to choose only the highest correlating CpGs per SMR[m
[32m+[m
[32m+[m[32mselect.max.cor <- function(cor_tibble, filter_significant = FALSE) {[m
[32m+[m[32m  filtered_data <- cor_tibble[m
[32m+[m[32m  if(filter_significant == TRUE) {filtered_data <- filter(filtered_data, significant)}[m
[32m+[m[41m  [m
[32m+[m[32m  filtered_data <- filtered_data %>%[m[41m [m
[32m+[m[32m    group_by(SMR) %>%[m
[32m+[m[32m    # Add a temporary column for the absolute correlation values[m
[32m+[m[32m    mutate(abs_correlation = abs(Correlation)) %>%[m
[32m+[m[32m    # For each group, filter the row with the max absolute correlation[m
[32m+[m[32m    filter(abs_correlation == max(abs_correlation)) %>%[m
[32m+[m[32m    # Remove the temporary column[m
[32m+[m[32m    select(-abs_correlation) %>%[m
[32m+[m[32m    # Optionally, ensure only one row per group if there are ties[m
[32m+[m[32m    slice(1)[m
[32m+[m[32m  return(filtered_data)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m## selecting only positively correlating samples[m
[32m+[m[32mAC_pos_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mAS_pos_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mEH_pos_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m[32mZF_pos_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation > 0,])[m
[32m+[m
[32m+[m[32mall_pos_cor_CpG <- rbind(AC_pos_cor_CpGs, AS_pos_cor_CpGs, EH_pos_cor_CpGs, ZF_pos_cor_CpGs)[m
[32m+[m
[32m+[m[32m# keeping only CpGs when occurring in all species[m[41m [m
[32m+[m[32mall_pos_cor_CpG_common  <- all_pos_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting only negatively correlating samples[m
[32m+[m[32mAC_neg_cor_CpGs <- select.max.cor(AC_cor_age_filtered_pearson[AC_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mAS_neg_cor_CpGs <- select.max.cor(AS_cor_age_filtered_pearson[AS_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mEH_neg_cor_CpGs <- select.max.cor(EH_cor_age_filtered_pearson[EH_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m[32mZF_neg_cor_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson[ZF_cor_age_filtered_pearson$Correlation < 0,])[m
[32m+[m
[32m+[m[32mall_neg_cor_CpG <- rbind(AC_neg_cor_CpGs, AS_neg_cor_CpGs, EH_neg_cor_CpGs, ZF_neg_cor_CpGs)[m
[32m+[m
[32m+[m[32m# keeping only CpGs when occurring in all species[m[41m [m
[32m+[m[32mall_neg_cor_CpG_common  <- all_neg_cor_CpG %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting a mixture of both[m
[32m+[m[32mtemp_index_vec <- (all_pos_cor_CpG_common$SMR %in% all_neg_cor_CpG_common$SMR) == FALSE[m
[32m+[m[32mall_mix_cor_CpG_common  <- rbind(all_neg_cor_CpG_common, all_pos_cor_CpG_common[temp_index_vec,]) %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m[32m## selecting significant ones[m
[32m+[m[32mAC_sig_CpGs <- select.max.cor(AC_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mAS_sig_CpGs <- select.max.cor(AS_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mEH_sig_CpGs <- select.max.cor(EH_cor_age_filtered_pearson, TRUE)[m
[32m+[m[32mZF_sig_CpGs <- select.max.cor(ZF_cor_age_filtered_pearson, TRUE)[m
[32m+[m
[32m+[m[32mall_sig_CpGs <- rbind(AC_sig_CpGs, AS_sig_CpGs, EH_sig_CpGs, ZF_sig_CpGs)[m
[32m+[m
[32m+[m[32mall_sig_CpGs_common <- all_sig_CpGs %>%[m[41m [m
[32m+[m[32m  group_by(SMR) %>%[m[41m [m
[32m+[m[32m  filter(n() == 4) %>%[m[41m [m
[32m+[m[32m  ungroup[m
[32m+[m
[32m+[m
[32m+[m[32m#### model creation ####[m
[32m+[m[32mlibrary(glmnet)[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m### selecting only pos cor ones[m[41m [m
[32m+[m[32m#### ----[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_pos_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_pos_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_pos_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_pos_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_pos_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m### selecting only neg cor ones[m[41m [m
[32m+[m[32m#### ----[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_neg_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_neg_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_neg_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values) %in% all_neg_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_neg_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_neg_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m# selecting a mixture of them[m[41m [m
[32m+[m[32m#### ----[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values[,colnames(AC_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mAC_name_index <- match(colnames(AC_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AC_meth_values_selected) <- all_mix_cor_CpG_common$SMR[AC_name_index][m
[32m+[m[32mAC_meth_values_selected <- AC_meth_values_selected[, order(colnames(AC_meth_values_selected))][m
[32m+[m[32mAC_meth_values_selected$rel_age <- AC_age/25[m
[32m+[m[32mAC_meth_values_selected$species <- "AC"[m
[32m+[m
[32m+[m[32m#AS[m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values[,colnames(AS_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mAS_name_index <- match(colnames(AS_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(AS_meth_values_selected) <- all_mix_cor_CpG_common$SMR[AS_name_index][m
[32m+[m[32mAS_meth_values_selected <- AS_meth_values_selected[, order(colnames(AS_meth_values_selected))][m
[32m+[m[32mAS_meth_values_selected$rel_age <- AS_age/54[m
[32m+[m[32mAS_meth_values_selected$species <- "AS"[m
[32m+[m
[32m+[m[32m#EH[m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values[,colnames(EH_meth_values) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mEH_name_index <- match(colnames(EH_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(EH_meth_values_selected) <- all_mix_cor_CpG_common$SMR[EH_name_index][m
[32m+[m[32mEH_meth_values_selected <- EH_meth_values_selected[, order(colnames(EH_meth_values_selected))][m
[32m+[m[32mEH_meth_values_selected$rel_age <- EH_age/20[m
[32m+[m[32mEH_meth_values_selected$species <- "EH"[m
[32m+[m
[32m+[m[32m#ZF[m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_imputed[,colnames(ZF_meth_values_imputed) %in% all_mix_cor_CpG_common$Site][m
[32m+[m[32mZF_name_index <- match(colnames(ZF_meth_values_selected), all_mix_cor_CpG_common$Site)[m
[32m+[m[32mcolnames(ZF_meth_values_selected) <- all_mix_cor_CpG_common$SMR[ZF_name_index][m
[32m+[m[32mZF_meth_values_selected <- ZF_meth_values_selected[, order(colnames(ZF_meth_values_selected))][m
[32m+[m[32mZF_meth_values_selected$rel_age <- ZF_age/5[m
[32m+[m[32mZF_meth_values_selected$species <- "ZF"[m
[32m+[m
[32m+[m[32m#### ----[m
[32m+[m[32m# Setting up data[m
[32m+[m[32m#### ----[m
[32m+[m[32m# combining all data[m[41m [m
[32m+[m[32mall_meth_values_selected <- rbind(AC_meth_values_selected, AS_meth_values_selected, EH_meth_values_selected, ZF_meth_values_selected)[m
[32m+[m
[32m+[m[32m## plotting age distribution[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m
[32m+[m[32mplot_age_dist <- ggplot(all_meth_values_selected) +[m
[32m+[m[32m  geom_density(aes(x = rel_age, color = species), linewidth = 2) +[m
[32m+[m[32m  geom_density(aes(x = rel_age, fill = "all"), alpha = 0.2, size = 0) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[5]) +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  labs(title = "Relative age distribution for all samples")[m
[32m+[m
[32m+[m[32m## the plot shows that our dependent variable is not normally distributed (as expected from age)[m[41m [m
[32m+[m[32m## splitting into training and testing data[m
[32m+[m[41m [m
[32m+[m[32m# option A):[m
[32m+[m[32mmeth_train <- all_meth_values_selected[-seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m[32mmeth_test <- all_meth_values_selected[seq(1, nrow(all_meth_values_selected), 4),][m
[32m+[m
[32m+[m[32m# save(all_meth_values_selected, file = "/workspace/cfngle/results-data/06_model_creation/HS_all_meth_values_selected.RData")[m
[32m+[m
[32m+[m[32m# option B):[m
[32m+[m[32m# using a stratified splitting technique[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mAC_split <- initial_split(AC_meth_values_selected, strata = "rel_age")[m
[32m+[m[32mAS_split <- initial_split(AS_meth_values_selected, strata = "rel_age")[m
[32m+[m[32mEH_split <- initial_split(EH_meth_values_selected, strata = "rel_age")[m
[32m+[m[32mZF_split <- initial_split(ZF_meth_values_selected, strata = "rel_age")[m
[32m+[m
[32m+[m[32mmeth_train <- rbind(training(AC_split),[m
[32m+[m[32m                    training(AS_split),[m
[32m+[m[32m                    training(EH_split),[m
[32m+[m[32m                    training(ZF_split))[m
[32m+[m
[32m+[m[32mmeth_test <- rbind(testing(AC_split),[m
[32m+[m[32m                   testing(AS_split),[m
[32m+[m[32m                   testing(EH_split),[m
[32m+[m[32m                   testing(ZF_split))[m
[32m+[m
[32m+[m[32m# checking how many CpGs are present per data set[m
[32m+[m[32mnrow(meth_train)[m
[32m+[m[32mnrow(meth_test)[m
[32m+[m
[32m+[m[32m# checking the distribution of age in the two data sets[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m
[32m+[m[32mplot_sample_age_dist <- ggplot() +[m
[32m+[m[32m  geom_density(data = meth_train, aes(x = rel_age, fill = "Training"), alpha = 0.5, size = 0) +[m
[32m+[m[32m  geom_density(data = meth_test, aes(x = rel_age, fill = "Testing"), alpha = 0.5, size = 0) +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  labs(fill = "Dataset") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  ggtitle("Age Distribution in Training and Testing Sets")[m
[32m+[m
[32m+[m[32mplot(density(EH_meth_values_selected$rel_age))[m
[32m+[m
[32m+[m[32mplot_age_dist + plot_sample_age_dist +[m
[32m+[m[32m  plot_layout(nrow=1)[m
[32m+[m
[32m+[m
[32m+[m[32m### defining training data[m
[32m+[m[32mX <- meth_train %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species)[m
[32m+[m
[32m+[m[32mY <- meth_train[,"rel_age"][m
[32m+[m
[32m+[m[32m# testing data[m
[32m+[m[32mX_test <- meth_test %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species)[m
[32m+[m
[32m+[m[32mY_test <- meth_test[,"rel_age"][m
[32m+[m
[32m+[m[32m### Leaving a species out[m
[32m+[m[32m# X <- all_meth_values_selected %>%[m[41m [m
[32m+[m[32m#   filter(species != "ZF") %>%[m[41m [m
[32m+[m[32m#   select(-rel_age, -species)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# Y <- all_meth_values_selected %>%[m[41m [m
[32m+[m[32m#   filter(species != "ZF") %>%[m[41m [m
[32m+[m[32m#   .$rel_age[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# X_test <- all_meth_values_selected %>%[m[41m [m
[32m+[m[32m#   filter(species == "ZF") %>%[m[41m [m
[32m+[m[32m#   select(-rel_age, -species)[m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# Y_test <- all_meth_values_selected %>%[m[41m [m
[32m+[m[32m#   filter(species == "ZF") %>%[m[41m [m
[32m+[m[32m#   .$rel_age[m
[32m+[m
[32m+[m[32m# creating function for model testing[m
[32m+[m[32m#### ----[m
[32m+[m[32mevaluate_model <- function(model, X_train, Y_train, X_test, Y_test, species_train,[m
[32m+[m[32m                           species_test, transform = FALSE, colpalOI, plot_title = "Model evaluation:",[m[41m [m
[32m+[m[32m                           y_lim = c(0,.3), x_lim = c(0,.3), CpGs = "not defined") {[m
[32m+[m[32m  # Calculate predictions[m
[32m+[m[32m  predictions_train <- predict(model, X_train)[m
[32m+[m[32m  predictions_test <- predict(model, X_test)[m
[32m+[m[41m  [m
[32m+[m[32m  # Optional transformation[m
[32m+[m[32m  if (transform) {[m
[32m+[m[32m    predictions_train <- exp(-exp(-predictions_train))[m
[32m+[m[32m    predictions_test <- exp(-exp(-predictions_test))[m
[32m+[m[32m    Y_train[m
[32m+[m[32m    Y_test[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Calculate metrics[m
[32m+[m[32m  metrics_train <- data.frame([m
[32m+[m[32m    R = round(cor(predictions_train, Y_train, method = "pearson"), 4),[m
[32m+[m[32m    MSE = round(mean((predictions_train - Y_train)^2), 4),[m
[32m+[m[32m    MAE = round(mean(abs(predictions_train - Y_train)), 4),[m
[32m+[m[32m    N = nrow(X_train)[m
[32m+[m[32m  )[m
[32m+[m[41m  [m
[32m+[m[32m  metrics_test <- data.frame([m
[32m+[m[32m    R = round(cor(predictions_test, Y_test, method = "pearson"), 4),[m
[32m+[m[32m    MSE = round(mean((predictions_test - Y_test)^2), 4),[m
[32m+[m[32m    MAE = round(mean(abs(predictions_test - Y_test)), 4),[m
[32m+[m[32m    N = nrow(X_test)[m
[32m+[m[32m  )[m
[32m+[m[41m  [m
[32m+[m[32m  # Prepare data frames for plotting[m
[32m+[m[32m  result_df_train <- data.frame(age_predicted = predictions_train, age = Y_train, species = species_train)[m
[32m+[m[32m  result_df_test <- data.frame(age_predicted = predictions_test, age = Y_test, species = species_test)[m
[32m+[m[41m  [m
[32m+[m[32m  # Create plots[m
[32m+[m[32m  plot_train <- ggplot(result_df_train, aes(x = age, y = age_predicted, color = species)) +[m
[32m+[m[32m    geom_point(size = 3) +[m
[32m+[m[32m    geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +[m
[32m+[m[32m    # geom_smooth(method = "lm", se = FALSE, color = "black") +[m
[32m+[m[32m    # geom_line(data = result_df_train, aes(x = age, y = age_predicted), color = "black", alpha = 0.7, linetype = "dashed") +[m
[32m+[m[32m    scale_color_manual(values = colpalOI) +[m
[32m+[m[32m    ylim(y_lim) +[m
[32m+[m[32m    xlim(x_lim) +[m
[32m+[m[32m    labs(title = paste(plot_title, "(Training Set)"), y = "Estimated age (relative)", x = "Chronological age",[m
[32m+[m[32m         subtitle = paste0("R=", metrics_train$R, " MSE=", metrics_train$MSE, " MAE=", metrics_train$MAE, " N=", nrow(X_train), " CpGs=", CpGs)) +[m
[32m+[m[32m    theme_classic()[m
[32m+[m[41m  [m
[32m+[m[32m  plot_test <- ggplot(result_df_test, aes(x = age, y = age_predicted, color = species)) +[m
[32m+[m[32m    geom_point(size = 3) +[m
[32m+[m[32m    geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +[m
[32m+[m[32m    # geom_smooth(method = "lm", se = FALSE, color = "black") +[m
[32m+[m[32m    scale_color_manual(values = colpalOI) +[m
[32m+[m[32m    ylim(y_lim) +[m
[32m+[m[32m    xlim(x_lim) +[m
[32m+[m[32m    labs(title = paste(plot_title, "(Testing Set)"), y = "Estimated age (relative)", x = "Chronological age",[m
[32m+[m[32m         subtitle = paste0("R=", metrics_test$R, " MSE=", metrics_test$MSE, " MAE=", metrics_test$MAE, " N=", nrow(X_test), " CpGs=", CpGs)) +[m
[32m+[m[32m    theme_classic()[m
[32m+[m[41m  [m
[32m+[m[32m  # Return list containing metrics and plots[m
[32m+[m[32m  return(list(metrics_train = metrics_train, metrics_test = metrics_test, plot_train = plot_train, plot_test = plot_test))[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mX <- X[m
[32m+[m[32m#### Testing model CV GLM ####[m
[32m+[m
[32m+[m[32m# change age here![m
[32m+[m[32m# Y <- meth_train[,"rel_age"][m
[32m+[m[32m# Y_test <- meth_test[,"rel_age"][m
[32m+[m
[32m+[m[32m#changing value[m
[32m+[m[32mY <- -log(-log(Y))[m
[32m+[m[32mY_test <- -log(-log(Y_test))[m
[32m+[m
[32m+[m[32m# define alpha[m
[32m+[m[32mglm_alpha <- 0.5[m
[32m+[m
[32m+[m[32m# setting seed for reproducibility[m[41m [m
[32m+[m[32mset.seed(123)[m
[32m+[m
[32m+[m[32m# model[m
[32m+[m[32mGLM_test <- cv.glmnet(as.matrix(X), Y, alpha = glm_alpha)[m
[32m+[m[32mplot(GLM_test)[m
[32m+[m
[32m+[m[32mcoef(GLM_test, s=GLM_test$lambda.min)[m
[32m+[m
[32m+[m[32m### running model on testing data[m
[32m+[m[32m### plotting[m
[32m+[m[32mGLM_predictions_test <- predict(GLM_test, as.matrix(X_test), s=GLM_test$lambda.min) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mGLM_predictions_cor_test <- cor(GLM_predictions_test, Y_test, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mGLM_mse_test <- mean((GLM_predictions_test - Y_test)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mGLM_mae_test <- mean(abs(GLM_predictions_test - Y_test)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mGLM_result_df <- data.frame(predictions = GLM_predictions_test,[m
[32m+[m[32m                            rel_age = Y_test,[m
[32m+[m[32m                            species = "ZF")[m
[32m+[m[32m# for transformed Y![m
[32m+[m
[32m+[m[32mGLM_result_df <- data.frame(predictions = exp(-exp(-GLM_predictions_test)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y_test)),[m
[32m+[m[32m                            species = "ZF")[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mGLM_mse_test <- mean((exp(-exp(-GLM_predictions_test)) - exp(-exp(-Y_test)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mGLM_mae_test <- mean(abs(exp(-exp(-GLM_predictions_test)) - exp(-exp(-Y_test)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m
[32m+[m[32mcolnames(GLM_result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mGLM_plot_test <- ggplot(GLM_result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), size = 3) +[m
[32m+[m[32m  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[4]) +[m
[32m+[m[32m  ylab("Estimated age (relative)") +[m
[32m+[m[32m  xlab("Chronological age") +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction GLM (test data set)",[m
[32m+[m[32m       subtitle = paste0("R=", GLM_predictions_cor_test,[m
[32m+[m[32m                         " MSE=", GLM_mse_test,[m
[32m+[m[32m                         " MAE=", GLM_mae_test,[m
[32m+[m[32m                         " N=", nrow(X_test),[m[41m [m
[32m+[m[32m                         " alpha=", glm_alpha)) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m### running model on training data[m
[32m+[m[32mGLM_predictions_train <- predict(GLM_test, newx= as.matrix(X), s=GLM_test$lambda.min)[m
[32m+[m[32mGLM_predictions_cor_train <- cor(GLM_predictions_train, Y, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mGLM_mse_train <- mean((GLM_predictions_train - Y)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mGLM_mae_train <- mean(abs(GLM_predictions_train - Y)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mGLM_result_df_train <- data.frame(predictions = GLM_predictions_train,[m
[32m+[m[32m                                  rel_age = Y,[m
[32m+[m[32m                                  species = all_meth_values_selected[all_meth_values_selected$species != "ZF",]$species)[m
[32m+[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mGLM_result_df_train <- data.frame(predictions = exp(-exp(-GLM_predictions_train)),[m
[32m+[m[32m                                  rel_age = exp(-exp(-Y)),[m
[32m+[m[32m                                  species = all_meth_values_selected[all_meth_values_selected$species != "ZF",]$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mGLM_mse_train <- mean((exp(-exp(-GLM_predictions_train)) - exp(-exp(-Y)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mGLM_mae_train <- mean(abs(exp(-exp(-GLM_predictions_train)) - exp(-exp(-Y)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mcolnames(GLM_result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mGLM_plot_train <- ggplot(GLM_result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), size = 3) +[m
[32m+[m[32m  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylab("Estimated age (relative)") +[m
[32m+[m[32m  xlab("Chronological age") +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction GLM (train data set)",[m
[32m+[m[32m       subtitle = paste0("R=", GLM_predictions_cor_train, " MSE=", GLM_mse_train, " MAE=", GLM_mae_train, " N=", nrow(X))) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32mGLM_plot_train + GLM_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Testing multivariate linear regression models ####[m
[32m+[m
[32m+[m
[32m+[m[32m### pre-testing with base R package[m
[32m+[m[32mmlm_test <- lm(Y ~., data = X)[m
[32m+[m[32msummary(mlm_test)[m
[32m+[m
[32m+[m[32m# with transformed age[m
[32m+[m[32mmlm_test_t <- lm(-log(-log(Y)) ~., data = X)[m
[32m+[m
[32m+[m[32m## selecting only significant values[m
[32m+[m[32msign_vec <- as.vector((summary(mlm_test)$coefficients[,4] < 0.05)[-1])[m
[32m+[m[32m# stat tests[m[41m [m
[32m+[m[32mplot(density(mlm_test$residuals))[m
[32m+[m[32mshapiro.test(mlm_test$residuals)[m
[32m+[m
[32m+[m[32m## selecting only significant values[m
[32m+[m[32mmlm_test_opt <- lm(Y ~., data = X[,sign_vec])[m
[32m+[m[32msummary(mlm_test_significant)[m
[32m+[m[32m# with transformed age[m
[32m+[m[32mmlm_test_opt_t <- lm(-log(-log(Y)) ~.,X[sign_vec])[m
[32m+[m
[32m+[m[32m## using centered and scaled dataset[m[41m [m
[32m+[m[32m# did not change anything![m
[32m+[m[32mmlm_alt <- lm(Y ~., trainingData)[m
[32m+[m[32mpredict(mlm_alt, testingData)[m
[32m+[m
[32m+[m[32m### testing and plotting model[m
[32m+[m[32m# color palettes[m
[32m+[m[32mcolpal_CB <- c("#c06d00", "#f9cf6e", "#6a5d00", "#44a02b", "#008649", "#12ebf0", "#65a9ff", "#004588", "#660077", "#ff98f7", "#954674", "#630041")[m
[32m+[m[32mcolpal_CB_01 <- colpal_CB[c(TRUE, FALSE)][m
[32m+[m[32mcolpal_CB_02 <- colpal_CB[c(FALSE, TRUE)][m
[32m+[m
[32m+[m[32mcolpal_CB_a <- c("#f8cbb1","#006786","#182057","#6b6300","#ff8ab9","#f1aaff","#bb005a","#013aa8","#01ef9a","#fa8200","#ee0028","#26c100")[m
[32m+[m[32mcolpal_CB_a_01 <- colpal_CB_a[1:6][m
[32m+[m[32mcolpal_CB_a_02 <- colpal_CB_a[7:12][m
[32m+[m
[32m+[m[32m# testing normal mlm[m
[32m+[m[32mmlm_eval <-  evaluate_model(mlm_test, X, Y, X_test, Y_test, meth_train$species, meth_test$species, transform = FALSE,[m[41m [m
[32m+[m[32m                            colpalOI= colpal_CB, plot_title = "MLM prediction", CpGs = length(mlm_test$coefficients)-1)[m
[32m+[m[32mmlm_alt_eval <-  evaluate_model(mlm_alt, trainingData, Y, testingData, Y_test, meth_train$species, meth_test$species, transform = FALSE,[m[41m [m
[32m+[m[32m                            colpalOI= colpal_CB, plot_title = "MLM prediction", CpGs = length(mlm_test$coefficients)-1)[m
[32m+[m[32mmlm_eval_t <-  evaluate_model(mlm_test_t, X, Y, X_test, Y_test, meth_train$species, meth_test$species, transform = TRUE,[m[41m [m
[32m+[m[32m                              colpalOI= colpal_CB, plot_title = "MLM (age -log-log transformed) prediction", CpGs = length(mlm_test_t$coefficients)-1)[m
[32m+[m
[32m+[m[32m# testing optimized mlm[m
[32m+[m[32mmlm_eval_opt <-[m
[32m+[m[32m  evaluate_model(mlm_test_opt, X, Y, X_test, Y_test, meth_train$species, meth_test$species, transform = FALSE, colpalOI = colpal_CB_02, plot_title = "MLM (sign. CpGs only) prediction", CpGs = length(mlm_test_opt$coefficients) - 1[m
[32m+[m[32m  )[m
[32m+[m[32mmlm_eval_opt_t <-[m
[32m+[m[32m  evaluate_model(mlm_test_opt_t, X, Y, X_test, Y_test, meth_train$species, meth_test$species, transform = TRUE, colpalOI = colpal_CB_02, plot_title = "MLM (sign. CpGs only; age -log-log transformed) prediction", CpGs = length(mlm_test_opt$coefficients) - 1[m
[32m+[m[32m  )[m
[32m+[m
[32m+[m[32m## plotting[m[41m [m
[32m+[m[32m# normal age[m
[32m+[m[32mmlm_eval$plot_train + mlm_eval$plot_test  + mlm_eval_opt$plot_train + mlm_eval_opt$plot_test +[m
[32m+[m[32m  plot_layout(nrow = 2)[m
[32m+[m[32m# transformed age[m
[32m+[m[32mmlm_eval_t$plot_train + mlm_eval_t$plot_test  + mlm_eval_opt_t$plot_train + mlm_eval_opt_t$plot_test +[m
[32m+[m[32m  plot_layout(nrow = 2)[m
[32m+[m
[32m+[m[32m#### MLM (caret) ####[m
[32m+[m
[32m+[m[32m## defining data[m
[32m+[m[32m# training data[m
[32m+[m[32mX <- meth_train %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species)[m
[32m+[m
[32m+[m[32mY <- meth_train[,"rel_age"][m
[32m+[m
[32m+[m[32m# testing data[m
[32m+[m[32mX_test <- meth_test %>%[m[41m [m
[32m+[m[32m  select(-rel_age, -species)[m
[32m+[m
[32m+[m[32mY_test <- meth_test[,"rel_age"][m
[32m+[m
[32m+[m[32m## pre processing[m
[32m+[m[32m# centering means that all the the mean is being substracted from all values and scale divides them by the standard deviation.[m[41m [m
[32m+[m
[32m+[m[32m# training data[m
[32m+[m[32mpreProcValues <- preProcess(X, method = c("center", "scale"))[m
[32m+[m[32mtrainingData <- predict(preProcValues, X)[m
[32m+[m[32mtrainingData$rel_age <- Y[m
[32m+[m[32m# testing data[m
[32m+[m[32mpreProcValues_test <- preProcess(X_test, method = c("center", "scale"))[m
[32m+[m[32mtestingData <- predict(preProcValues_test, X_test)[m
[32m+[m[32mtestingData$rel_age <- Y_test[m
[32m+[m
[32m+[m[32m# training model[m[41m [m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mtrainControl <- trainControl(method = "cv", number = 10) # 10-fold CV[m
[32m+[m[32mMLM_model <- train(rel_age ~ ., data = trainingData,[m[41m [m
[32m+[m[32m                   method = "glmnet",[m[41m [m
[32m+[m[32m                   trControl = trainControl)[m
[32m+[m[32m# prediction test[m
[32m+[m[32mMLM_predict_test <- predict(MLM_model, newdata = X_test)[m
[32m+[m[32m# caret has functions to interpret prediction results[m
[32m+[m[32mperformanceResults <- postResample(MLM_predict_test, Y_test)[m
[32m+[m[32mprint(performanceResults)[m
[32m+[m
[32m+[m[32m#tuning model[m[41m [m
[32m+[m[32mMLM_tuned <- train(rel_age ~ ., data = testingData,[m[41m [m
[32m+[m[32m               method = "glmnet",[m
[32m+[m[32m               tuneLength = 10, # Number of tuning parameter values[m
[32m+[m[32m               trControl = trainControl)[m
[32m+[m
[32m+[m[32mimportance <- varImp(MLM_tuned, scale = FALSE)[m
[32m+[m[32mplot(importance)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Testing random forest model ####[m
[32m+[m
[32m+[m[32m### Shortcoming of random forest[m
[32m+[m[32m# Random Forests aren't good at generalizing cases with completely new data. For example, if I tell you that one ice-cream costs $1, 2 ice-creams cost $2, and 3 ice-creams cost $3, how much do 10 ice-creams cost? A linear regression can easily figure this out, while a Random Forest has no way of finding the answer.[m
[32m+[m[32m# Random forests are biased towards the categorical variable having multiple levels (categories). It is because feature selection based on impurity reduction is biased towards preferring variables with more categories so variable selection (importance) is not accurate for this type of data.[m
[32m+[m
[32m+[m[32mlibrary(randomForest)[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32m# change age here![m
[32m+[m[32mY <- meth_train[,"rel_age"][m
[32m+[m[32mY_test <- meth_test[,"rel_age"][m
[32m+[m[32m#changing value[m
[32m+[m[32mY <- -log(-log(Y))[m
[32m+[m[32mY_test <- -log(-log(Y_test))[m
[32m+[m
[32m+[m[32m## actual model[m
[32m+[m[32mRF_test <- randomForest(Y ~ ., data = X, mtry = 9, ntree = 1500)[m
[32m+[m[32mplot(RF_test)[m
[32m+[m[32mvarImpPlot(RF_test)[m
[32m+[m[32mimportance(RF_test)[m
[32m+[m
[32m+[m[32mwhich.min(RF_test$mse)[m
[32m+[m
[32m+[m[32m## tuning model[m
[32m+[m[32mtuneRF([m
[32m+[m[32m  x=X, #define predictor variables[m
[32m+[m[32m  y=Y, #define response variable[m
[32m+[m[32m  ntreeTry=500,[m
[32m+[m[32m  mtryStart=4,[m[41m [m
[32m+[m[32m  stepFactor=1.5,[m
[32m+[m[32m  improve=0.01,[m
[32m+[m[32m  trace=TRUE #don't show real-time progress[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32m### plotting and evaluating[m
[32m+[m[32mRF_predictions_test <- predict(RF_test, X_test)[m
[32m+[m[32mRF_predictions_cor_test <- cor(RF_predictions_test, Y_test, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mRF_mse_test <- mean((RF_predictions_test - Y_test)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mRF_mae_test <- mean(abs(RF_predictions_test - Y_test)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mRF_result_df <- data.frame(predictions = RF_predictions_test,[m
[32m+[m[32m                            rel_age = Y_test,[m
[32m+[m[32m                            species = meth_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m
[32m+[m[32mRF_result_df <- data.frame(predictions = exp(-exp(-RF_predictions_test)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y_test)),[m
[32m+[m[32m                            species = meth_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mRF_mse_test <- mean((exp(-exp(-RF_predictions_test)) - exp(-exp(-Y_test)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mRF_mae_test <- mean(abs(exp(-exp(-RF_predictions_test)) - exp(-exp(-Y_test)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m
[32m+[m[32mcolnames(RF_result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mRF_plot_test <- ggplot(RF_result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction RF (test data set)",[m
[32m+[m[32m       subtitle = paste0("R=", RF_predictions_cor_test,[m
[32m+[m[32m                         " MSE=", RF_mse_test,[m
[32m+[m[32m                         " MAE=", RF_mae_test,[m
[32m+[m[32m                         " N=", nrow(X_test))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32m### running model on training data[m
[32m+[m[32mRF_predictions_train <- predict(RF_test, newx= X)[m
[32m+[m[32mRF_predictions_cor_train <- cor(RF_predictions_train, Y, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mRF_mse_train <- mean((RF_predictions_train - Y)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mRF_mae_train <- mean(abs(RF_predictions_train - Y)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mRF_result_df_train <- data.frame(predictions = RF_predictions_train,[m
[32m+[m[32m                                  rel_age = Y,[m
[32m+[m[32m                                  species = meth_train$species)[m
[32m+[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mRF_result_df_train <- data.frame(predictions = exp(-exp(-RF_predictions_train)),[m
[32m+[m[32m                                  rel_age = exp(-exp(-Y)),[m
[32m+[m[32m                                  species = meth_train$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mRF_mse_train <- mean((exp(-exp(-RF_predictions_train)) - exp(-exp(-Y)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mRF_mae_train <- mean(abs(exp(-exp(-RF_predictions_train)) - exp(-exp(-Y)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mcolnames(RF_result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mRF_plot_train <- ggplot(RF_result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction RF (train data set)",[m
[32m+[m[32m       subtitle = paste0("R=", RF_predictions_cor_train, " MSE=", RF_mse_train, " MAE=", RF_mae_train, " N=", nrow(X))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32mRF_plot_train + RF_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m[32m#### Testing support vector regression models ####[m
[32m+[m[32mlibrary(e1071)[m
[32m+[m
[32m+[m[32m# change age here![m
[32m+[m[32mY <- meth_train[,"rel_age"][m
[32m+[m[32mY_test <- meth_test[,"rel_age"][m
[32m+[m[32m#changing value[m
[32m+[m[32mY <- -log(-log(Y))[m
[32m+[m[32mY_test <- -log(-log(Y_test))[m
[32m+[m
[32m+[m[32mset.seed(123)[m
[32m+[m[32mSVM_test <- svm(Y ~ ., data = X, type = "eps-regression")[m
[32m+[m[32mSVM_test <- svm(Y ~ ., data = X, type = "nu-regression")[m
[32m+[m[32mSVM_test <- svm(Y ~ ., data = X, type = "nu-regression", kernel = "polynomial")[m
[32m+[m
[32m+[m[32msummary(SVM_test)[m
[32m+[m
[32m+[m
[32m+[m[32m### plotting[m
[32m+[m[32mSVM_predictions_test <- predict(SVM_test, X_test)[m
[32m+[m[32mSVM_predictions_cor_test <- cor(SVM_predictions_test, Y_test, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mSVM_mse_test <- mean((SVM_predictions_test - Y_test)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mSVM_mae_test <- mean(abs(SVM_predictions_test - Y_test)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mSVM_result_df <- data.frame(predictions = SVM_predictions_test,[m
[32m+[m[32m                        rel_age = Y_test,[m
[32m+[m[32m                        species = meth_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m
[32m+[m[32mSVM_result_df <- data.frame(predictions = exp(-exp(-SVM_predictions_test)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y_test)),[m
[32m+[m[32m                            species = meth_test$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mSVM_mse_test <- mean((exp(-exp(-SVM_predictions_test)) - exp(-exp(-Y_test)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mSVM_mae_test <- mean(abs(exp(-exp(-SVM_predictions_test)) - exp(-exp(-Y_test)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m
[32m+[m[32mcolnames(SVM_result_df) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mSVM_plot_test <- ggplot(SVM_result_df, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction SVM (test data set)",[m
[32m+[m[32m       subtitle = paste0("R=", SVM_predictions_cor_test,[m
[32m+[m[32m                         " MSE=", SVM_mse_test,[m
[32m+[m[32m                         " MAE=", SVM_mae_test,[m
[32m+[m[32m                         " N=", nrow(X_test))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32m### running model on training data[m
[32m+[m[32mSVM_predictions_train <- predict(SVM_test, newx= X)[m
[32m+[m[32mSVM_predictions_cor_train <- cor(SVM_predictions_train, Y, method = "pearson") %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mSVM_mse_train <- mean((SVM_predictions_train - Y)^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m[32mSVM_mae_train <- mean(abs(SVM_predictions_train - Y)) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32m# for normal Y[m
[32m+[m[32mSVM_result_df_train <- data.frame(predictions = SVM_predictions_train,[m
[32m+[m[32m                              rel_age = Y,[m
[32m+[m[32m                              species = meth_train$species)[m
[32m+[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mSVM_result_df_train <- data.frame(predictions = exp(-exp(-SVM_predictions_train)),[m
[32m+[m[32m                            rel_age = exp(-exp(-Y)),[m
[32m+[m[32m                            species = meth_train$species)[m
[32m+[m[32m# for transformed Y![m
[32m+[m[32mSVM_mse_train <- mean((exp(-exp(-SVM_predictions_train)) - exp(-exp(-Y)))^2) %>%[m[41m [m
[32m+[m[32m  round(4)[m[41m [m
[32m+[m[32mSVM_mae_train <- mean(abs(exp(-exp(-SVM_predictions_train)) - exp(-exp(-Y)))) %>%[m[41m [m
[32m+[m[32m  round(4)[m
[32m+[m
[32m+[m[32mcolnames(SVM_result_df_train) <- c("age_predicted", "age", "species")[m
[32m+[m
[32m+[m[32mSVM_plot_train <- ggplot(SVM_result_df_train, aes(color = species)) +[m
[32m+[m[32m  geom_point(aes(x = age, y = age_predicted), cex = 3) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  ylim(0,0.30) +[m
[32m+[m[32m  xlim(0,0.30) +[m
[32m+[m[32m  labs(title = "Multispecies age (relative, -log(-log(x))) prediction SVM (train data set)",[m
[32m+[m[32m       subtitle = paste0("R=", SVM_predictions_cor_train, " MSE=", SVM_mse_train, " MAE=", SVM_mae_train, " N=", nrow(X))) +[m
[32m+[m[32m  theme_minimal()[m
[32m+[m
[32m+[m[32mSVM_plot_train + SVM_plot_test +[m
[32m+[m[32m  plot_layout(nrow = 1)[m
[32m+[m
[32m+[m[32m#### Testing Bayesian models ####[m
[32m+[m[32minstall.packages("brms")[m
[32m+[m[32minstall.packages("rstan")  # Required for brms[m
[32m+[m[32mlibrary(brms)[m
[32m+[m[32mlibrary(rstan)[m
[32m+[m
[32m+[m[32m# setting up formula for model[m
[32m+[m[32mBM_formula <- bf(rel_age ~.)[m
[32m+[m[32mBM_model <- brm(formula = BM_formula, data = trainingData, family = gaussian(), chains = 4, cores = min(10, parallel::detectCores()), iter = 2000)[m
[32m+[m[32msummary(BM_model)[m
[32m+[m[32mplot(BM_model)[m
[32m+[m
[32m+[m
[32m+[m[32msel_cols <- colnames(trainingData[,-ncol(trainingData)])[m
[32m+[m[32mplot(conditional_effects(BM_model, effects = sel_cols))[m
[32m+[m
[32m+[m[32mpp_check(BM_model)[m
[32m+[m
[32m+[m[32mBM_pp <- posterior_predict(BM_model)[m[41m [m
[32m+[m[41m  [m
[32m+[m[32mBM_predict_test <- predict(BM_model, testingData)[m
[32m+[m
[32m+[m
[32m+[m[32mci <- posterior_interval(BM_pp, prob = 0.95)[m
[32m+[m
[32m+[m[32m# Merge means and intervals[m
[32m+[m[32mprediction_data <- data.frame(Observed = testingData$rel_age, Predicted = BM_predict_test[,1], Lwr = BM_predict_test[,3], Upr = BM_predict_test[,4])[m
[32m+[m
[32m+[m[32m# Use ggplot2 for plotting[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mggplot(prediction_data, aes(x = Observed, y = Predicted)) +[m
[32m+[m[32m  geom_point() +[m
[32m+[m[32m  geom_errorbar(aes(ymin = Lwr, ymax = Upr), width = 0.2, alpha = 0.2) +[m
[32m+[m[32m  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +[m
[32m+[m[32m  theme_minimal() +[m
[32m+[m[32m  ylim(0,0.25) +[m
[32m+[m[32m  xlim(0,0.25) +[m
[32m+[m[32m  labs(x = "Observed Age", y = "Predicted Age", title = "Bayesian Model Predictions with Uncertainty Intervals")[m
[32m+[m
[32m+[m[32mevaluate_model(BM_model, trainingData[-length(trainingData)], trainingData$rel_age, testingData[-length(testingData)], testingData$rel_age, meth_train$species, meth_test$species,  CpGs = ncol(training_data)-1)[m
[32m+[m
[32m+[m[32m#### Testing deep learning models ####[m
[32m+[m[32minstall.packages("keras")[m
[32m+[m[32m# library(reticulate)[m
[32m+[m[32mlibrary(keras)[m
[32m+[m[32mDL_test <- keras_model_sequential() %>%[m
[32m+[m[32m  layer_dense(units = 64, activation = 'relu', input_shape = c(num_features)) %>%[m
[32m+[m[32m  layer_dense(units = 1)[m
[32m+[m[32mDL_test %>% compile([m
[32m+[m[32m  optimizer = 'rmsprop',[m
[32m+[m[32m  loss = 'mse',[m
[32m+[m[32m  metrics = 'mae'[m
[32m+[m[32m)[m
[32m+[m[32mDL_test %>% fit(X, Y, epochs = 100, batch_size = 10, validation_split = 0.2)[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting ####[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector() %>%[m
[32m+[m[32m  .[c(-1,-9)][m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m## all[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # facet_row(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(x = Site, y = Correlation, color = species, alpha = significant)) +[m
[32m+[m[32m  # geom_line(aes(x = c(-1,1), y = log2(0.05), color = "#CC79A7")) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  facet_wrap(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only significant[m
[32m+[m[32mggplot(subset(cor_all, significant == TRUE), aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  # facet_wrap(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only selected[m[41m [m
[32m+[m[32mggplot(all_sig_CpGs_common, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only cor positive[m[41m [m
[32m+[m[32mggplot(all_pos_cor_CpG, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  facet_row(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## plotting SMR groups 24 and 28[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% subset(all_sig_CpGs_common, SMR == "SMR_024" | SMR == "SMR_026")$Site)[m
[32m+[m[32mselected_methyl_values <- subset(all_meth_values_long, Site %in% all_mix_cor_CpG_common$Site)[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species, color = species), alpha = 0.9, outlier.size = 0.1) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)",[m
[32m+[m[32m       subtitle = "Selected values are correlating with age")[m
[32m+[m
[32m+[m[32mggplot(selected_methyl_values, aes(x = species, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = rel_age, shape = species)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_manual(aesthetics = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  # theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Atlantic Cod (AC), Australasian Snapper (ZF), European Hake (EH), Zebrafish (ZF) (human rgenome)")[m
\ No newline at end of file[m
[1mdiff --git a/04a_shared_methyl_regions_v-1.1.R b/04a_shared_methyl_regions_v-1.1.R[m
[1mnew file mode 100644[m
[1mindex 0000000..848c178[m
[1m--- /dev/null[m
[1m+++ b/04a_shared_methyl_regions_v-1.1.R[m
[36m@@ -0,0 +1,355 @@[m
[32m+[m[32m#### Reducing overlapping ranges of all species and extract the shared (methylation) regions[m[41m [m
[32m+[m[32m#### adding the methylation data to the extracted methylation sites[m[41m [m
[32m+[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32msetwd("/workspace/cfngle/results-data/02_conserved_seq")[m
[32m+[m[32mload("AC_AS_EH_JM_overlaps_bt2.R")[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m
[32m+[m[32m# converting GAlignments object to GRanges to be able to reduce them[m[41m [m
[32m+[m[32mgr_overlap_seqs_bt2 <- lapply(overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m
[32m+[m[32m# intersecting all sequences (option a!) This means that only the sequences which are intersecting will be selected[m
[32m+[m[32mintersected_seqs_bt2 <- GenomicRanges::intersect(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]]) %>%[m[41m [m
[32m+[m[32m  GenomicRanges::intersect(gr_overlap_seqs_bt2[[3]])[m
[32m+[m[32mboxplot(width(intersected_seqs_bt2))[m
[32m+[m[32mnames(intersected_seqs_bt2) <- sprintf("SMR_c_bt2_%03d", 1:length(intersected_seqs_bt2))[m
[32m+[m[32mSMR_a_bt2 <- intersected_seqs_bt2[m
[32m+[m
[32m+[m[32m# reducing them is option b of how to define the shared methyl regions[m
[32m+[m[32m#group them first[m
[32m+[m[32mgroup_gr_overlap_bt2 <-  c(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]], gr_overlap_seqs_bt2[[3]], gr_overlap_seqs_bt2[[4]])[m
[32m+[m[32mSMR_b_bt2 <- GenomicRanges::reduce(group_gr_overlap_bt2)[m
[32m+[m[32mnames(SMR_b_bt2) <- sprintf("SMR_b_bt2_%03d", 1:length(SMR_b_bt2))[m
[32m+[m
[32m+[m[32mAC_AS_EH_JM_SMR_b_bt2 <- SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(AC_AS_EH_JM_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/AC_AS_EH_JM_SMR_b_bt2.Rdata")[m
[32m+[m
[32m+[m[32m# check which CpGs are in which SMR[m
[32m+[m[32mhist(subjectHits(findOverlaps(SMR_b_bt2, gr_overlap_seqs_bt2[[3]])))[m
[32m+[m
[32m+[m[32mlength(subjectHits(findOverlaps(intersected_seqs_bt2, gr_overlap_seqs_bt2[[3]])))[m
[32m+[m
[32m+[m[32m## getting overlapped sequence data[m
[32m+[m[32mload("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_bt2.R")[m
[32m+[m[32mload("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32moverlap_seqs_mini[m
[32m+[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_AC_JM_bt2 <- overlap_seqs_bt2[[4]][m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ## finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = paste0("SMR_", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- get.methyl.sites(overlap_AC_AC_bt2, species = "AC", SMRs = SMR_b_bt2)[m
[32m+[m[32mAS_methyl_sites <- get.methyl.sites(overlap_AC_AS_bt2, species = "AS", SMRs = SMR_b_bt2)[m
[32m+[m[32mEH_methyl_sites <- get.methyl.sites(overlap_AC_EH_bt2, species = "EH", SMRs = SMR_b_bt2)[m
[32m+[m[32mJM_methyl_sites <- get.methyl.sites(overlap_AC_JM_bt2, species = "JM", SMRs = SMR_b_bt2)[m
[32m+[m
[32m+[m[32mSMR_b_bt2[m
[32m+[m
[32m+[m[32m### load methylation data for samples[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AS_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32mtail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32m# JM_meth_data <- read.csv("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m[32mJM_meth_data <- load("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_179818_CpGs.Rdata")[m
[32m+[m[32mJM_meth_data <- JM_24_methyl_data[m
[32m+[m
[32m+[m[32mtail(colnames(JM_meth_data))[m
[32m+[m[32mJM_age <- JM_meth_data$age[m
[32m+[m
[32m+[m[32m##ZF ##NOT DONE!![m
[32m+[m[32mZF_meth_data <- read.csv("/workspace/cfngle/raw-data/ZF/")[m
[32m+[m[32mtail(colnames(ZF_meth_data))[m
[32m+[m[32mZF_age <- ZF_meth_data$age[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m
[32m+[m[32m# paste0(gsub("JM_", "",JM_methyl_sites$Chr), ".", JM_methyl_sites$pos_rgenome)[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_align) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mmeth_sites_names_tmp %in% AC_meth_data_test[m
[32m+[m
[32m+[m[32m# meth_sites_names_tmp %in% colnames(AC_meth_data)[m
[32m+[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values <- AC_meth_data[,meth_columns_tmp][m
[32m+[m
[32m+[m[32m# AS_meth_values_t <- t(AS_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = AS_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites$Chr), ":", JM_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mJM_meth_values <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# JM_meth_values_t <- t(JM_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = JM_methyl_sites$SMR))[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### PCA tests and stat tests ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mPCA_JM <- prcomp(JM_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_JM <- as.data.frame(PCA_JM$x)[m
[32m+[m[32mPCA_values_JM$species <- "JM"[m
[32m+[m
[32m+[m
[32m+[m[32mPCA_values_all <- rbind(PCA_values_AC[,c(1:10, length(PCA_values_AC))],[m
[32m+[m[32m                        PCA_values_AS[,c(1:10, length(PCA_values_AS))],[m
[32m+[m[32m                        PCA_values_EH[,c(1:10, length(PCA_values_EH))])[m
[32m+[m[32mage_all <- c(AC_age/mean(AC_age), AS_age/mean(AS_age), EH_age/mean(EH_age))[m
[32m+[m
[32m+[m[32m#### plotting results ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mggplot(PCA_values_all, aes(x = PC5, y = PC1, color = age_all, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = "blue", high = "red") +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mggplot(PCA_values_EH, aes(x = PC1, y = PC2, color = EH_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = "blue", high = "red") +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, times = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_meth_data$age, times = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR, times = length(AC_age)))[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, times = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m
[32m+[m[32mJM_meth_values_long <- pivot_longer(JM_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mJM_meth_values_long$age <- rep(JM_meth_data$age, times = ncol(JM_meth_values))[m
[32m+[m[32mJM_meth_values_long$SMR <- as.factor(rep(JM_methyl_sites$SMR, times = length(JM_age)))[m
[32m+[m[32mJM_meth_values_long$Site_i <- gsub(".*\\.", "", JM_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mJM_meth_values_long$Site_f <- gsub(".*\\.", "", JM_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mJM_meth_values_long$species <- "JM"[m
[32m+[m[32m# C_meth_values_long$sample <- rep(paste0("sample_", 1:length(AC_meth_values)),each = ncol(AC_age))[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, JM_meth_values_long)[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(AS_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, cex = 1, alpha = 0.5)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Snapper")[m
[32m+[m[41m  [m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, size = 0.2, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Cod")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, size = 0.2, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH")[m
[32m+[m
[32m+[m[32mggplot(JM_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, size = 0.2, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values JM")[m
[32m+[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(alpha=0.5)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5, fill = species)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (AS), Hake (EH), Medaka (JM)")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### testing correlation tests ####[m
[32m+[m[32m# Initialize a list to store the results[m
[32m+[m[32mcorrelation_results <- list()[m
[32m+[m
[32m+[m[32m# Loop through each methylation site[m
[32m+[m[32mfor (i in 1:ncol(AS_meth_values)) {[m
[32m+[m[32m  site_name <- colnames(AS_meth_values)[i][m
[32m+[m[32m  # Perform correlation test with age[m
[32m+[m[32m  test_result <- cor.test(AS_meth_values[,i], AS_meth_data$age, method = "pearson") # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m  [m
[32m+[m[32m  # Store the results[m
[32m+[m[32m  correlation_results[[site_name]] <- list([m
[32m+[m[32m    correlation_coefficient = test_result$estimate,[m
[32m+[m[32m    p_value = test_result$p.value[m
[32m+[m[32m  )[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mcorrelation_summary <- tibble([m
[32m+[m[32m  Site = names(correlation_results),[m
[32m+[m[32m  Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m  P_value = sapply(correlation_results, function(x) x$p_value)[m
[32m+[m[32m)[m
[1mdiff --git a/04a_shared_methyl_regions_v-1.2.R b/04a_shared_methyl_regions_v-1.2.R[m
[1mnew file mode 100644[m
[1mindex 0000000..04931ab[m
[1m--- /dev/null[m
[1m+++ b/04a_shared_methyl_regions_v-1.2.R[m
[36m@@ -0,0 +1,422 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m
[32m+[m[32m#Reducing overlapping ranges of all species and extract the shared (methylation) regions[m[41m [m
[32m+[m[32m# adding the methylation data to the extracted methylation sites[m[41m [m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/workspace/cfngle/results-data/02_conserved_seq")[m
[32m+[m
[32m+[m[32m#### Data manipulation ####[m
[32m+[m[32m# loading overlapping sequences for all species (only bt2 in this case)[m[41m [m
[32m+[m[32mload("AC_AS_EH_JM_ZF_overlaps_bt2.RData")[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m
[32m+[m[32m# converting GAlignments object to GRanges to be able to reduce them[m[41m [m
[32m+[m[32mgr_overlap_seqs_bt2 <- lapply(overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m
[32m+[m[32m### Shared methylation regions[m
[32m+[m[32m## OPTION A)[m
[32m+[m
[32m+[m[32m# intersecting all sequences (option a!) This means that only the sequences which are intersecting will be selected[m
[32m+[m[32mintersected_seqs_bt2 <- GenomicRanges::intersect(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]]) %>%[m[41m [m
[32m+[m[32m  GenomicRanges::intersect(gr_overlap_seqs_bt2[[3]])[m
[32m+[m[32mboxplot(width(intersected_seqs_bt2))[m
[32m+[m[32mnames(intersected_seqs_bt2) <- sprintf("SMR_c_bt2_%03d", 1:length(intersected_seqs_bt2))[m
[32m+[m[32mSMR_a_bt2 <- intersected_seqs_bt2[m
[32m+[m
[32m+[m[32m## OPTION B)[m
[32m+[m[32m# reducing them is option b of how to define the shared methyl regions[m
[32m+[m[32m# group them first[m
[32m+[m[32mgroup_gr_overlap_bt2 <-  c(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]], gr_overlap_seqs_bt2[[3]], gr_overlap_seqs_bt2[[4]])[m
[32m+[m[32mSMR_b_bt2 <- GenomicRanges::reduce(group_gr_overlap_bt2)[m
[32m+[m[32mnames(SMR_b_bt2) <- sprintf("SMR_b_bt2_%03d", 1:length(SMR_b_bt2))[m
[32m+[m
[32m+[m[32mall_SMR_b_bt2 <- SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(all_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/all_SMR_b_bt2.Rdata")[m
[32m+[m
[32m+[m[32m### Loading sequences[m[41m [m
[32m+[m
[32m+[m[32m## getting overlapped sequence data[m
[32m+[m[32mload("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_bt2.R")[m
[32m+[m[32mload("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32moverlap_seqs_mini[m
[32m+[m
[32m+[m[32m## BT2[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_AC_JM_bt2 <- overlap_seqs_bt2[[4]][m
[32m+[m[32moverlap_AC_ZF_bt2 <- overlap_seqs_bt2[[5]][m
[32m+[m
[32m+[m[32m## function to get methyl sites[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- get.methyl.sites(overlap_AC_AC_bt2, species = "AC", SMRs = SMR_b_bt2)[m
[32m+[m[32mAS_methyl_sites <- get.methyl.sites(overlap_AC_AS_bt2, species = "AS", SMRs = SMR_b_bt2)[m
[32m+[m[32mEH_methyl_sites <- get.methyl.sites(overlap_AC_EH_bt2, species = "EH", SMRs = SMR_b_bt2)[m
[32m+[m[32mJM_methyl_sites <- get.methyl.sites(overlap_AC_JM_bt2, species = "JM", SMRs = SMR_b_bt2)[m
[32m+[m[32mZF_methyl_sites <- get.methyl.sites(overlap_AC_ZF_bt2, species = "ZF", SMRs = SMR_b_bt2)[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AS_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32mtail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32m# JM_meth_data <- read.csv("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m[32mJM_meth_data <- load("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_179818_CpGs.Rdata")[m
[32m+[m[32mJM_meth_data <- JM_24_methyl_data[m
[32m+[m
[32m+[m[32mJM_age <- JM_meth_data$age[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m[32mtail(colnames(ZF_meth_data))[m
[32m+[m
[32m+[m[32mZF_age <- ZF_meth_data$age[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_align) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp %in% AC_meth_data_test)[m
[32m+[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp[meth_sites_names_tmp %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values <- AC_meth_data[,meth_columns_tmp][m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites$Chr), ":", JM_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mJM_meth_values <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites$Chr), ":", ZF_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(ZF_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(ZF_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mZF_meth_values <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values, file = paste0(save_dir, "AC_meth_values.csv") )[m
[32m+[m[32msave(AC_meth_values, file = paste0(save_dir, "AC_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values, file = paste0(save_dir, "AS_meth_values.csv") )[m
[32m+[m[32msave(AS_meth_values, file = paste0(save_dir, "AS_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values, file = paste0(save_dir, "EH_meth_values.csv") )[m
[32m+[m[32msave(EH_meth_values, file = paste0(save_dir, "EH_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mwrite.csv(JM_meth_values, file = paste0(save_dir, "JM_meth_values.csv") )[m
[32m+[m[32msave(JM_meth_values, file = paste0(save_dir, "JM_meth_values.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values.csv") )[m
[32m+[m[32msave(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values.Rdata"))[m
[32m+[m
[32m+[m
[32m+[m[32m#### PCA tests and stat tests ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values[c(-71,-74,-27,-69,-2,-3,-17),],scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mPCA_JM <- prcomp(JM_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_JM <- as.data.frame(PCA_JM$x)[m
[32m+[m[32mPCA_values_JM$species <- "JM"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m
[32m+[m[32mPCA_values_all <- rbind(PCA_values_AC[,c(1:10, length(PCA_values_AC))],[m
[32m+[m[32m                        PCA_values_AS[,c(1:10, length(PCA_values_AS))],[m
[32m+[m[32m                        PCA_values_EH[,c(1:10, length(PCA_values_EH))])[m
[32m+[m[32mage_all <- c(AC_age/mean(AC_age), AS_age/mean(AS_age), EH_age/mean(EH_age))[m
[32m+[m
[32m+[m[32m#### plotting results ####[m
[32m+[m
[32m+[m[32mAC_age_tmp <- AC_age[c(-71,-74,-27,-69,-2,-3,-17)][m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age_tmp, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = "blue", high = "red") +[m
[32m+[m[32m  geom_text(aes(label = 1:nrow(AC_meth_data[c(-71,-74,-27,-69,-2,-3,-17),])), nudge_x = 0.6, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mggplot(PCA_values_AS, aes(x = PC1, y = PC2, color = AS_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = "blue", high = "red") +[m
[32m+[m[32m  geom_text(aes(label = AS_meth_data$id), nudge_x = 0.6, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mggplot(PCA_values_EH, aes(x = PC1, y = PC2, color = EH_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = "blue", high = "red") +[m
[32m+[m[32m  geom_text(aes(label = EH_meth_data$id), nudge_x = 0.6, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mggplot(PCA_values_ZF, aes(x = PC1, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = "blue", high = "red") +[m
[32m+[m[32m  geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, times = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, times = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, times = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m[32m# EH_meth_values_long$id <- rep(paste0("EH_", EH_meth_data$id), times = ncol(EH_meth_values))[m
[32m+[m
[32m+[m[32mJM_meth_values_long <- pivot_longer(JM_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mJM_meth_values_long$age <- rep(JM_meth_data$age, times = ncol(JM_meth_values))[m
[32m+[m[32mJM_meth_values_long$SMR <- as.factor(rep(JM_methyl_sites$SMR, times = length(JM_age)))[m
[32m+[m[32mJM_meth_values_long$Site_i <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mJM_meth_values_long$Site_f <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mJM_meth_values_long$species <- "JM"[m
[32m+[m[32m# C_meth_values_long$sample <- rep(paste0("sample_", 1:length(AC_meth_values)),each = ncol(AC_age))[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, times = ncol(ZF_meth_values))[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, JM_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(AS_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, cex = 1, alpha = 0.5)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Snapper")[m
[32m+[m[41m  [m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, size = 0.2, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Cod")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, size = 0.2, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH")[m
[32m+[m
[32m+[m[32mggplot(JM_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, size = 0.2, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values JM")[m
[32m+[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(alpha=0.5)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5, fill = species)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (AS), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### testing correlation tests ####[m
[32m+[m[32m# Initialize a list to store the results[m
[32m+[m[32mcorrelation_results <- list()[m
[32m+[m
[32m+[m[32m# Loop through each methylation site[m
[32m+[m[32mfor (i in 1:ncol(AS_meth_values)) {[m
[32m+[m[32m  site_name <- colnames(AS_meth_values)[i][m
[32m+[m[32m  # Perform correlation test with age[m
[32m+[m[32m  test_result <- cor.test(AS_meth_values[,i], AS_meth_data$age, method = "pearson") # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m  [m
[32m+[m[32m  # Store the results[m
[32m+[m[32m  correlation_results[[site_name]] <- list([m
[32m+[m[32m    correlation_coefficient = test_result$estimate,[m
[32m+[m[32m    p_value = test_result$p.value[m
[32m+[m[32m  )[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mcorrelation_summary <- tibble([m
[32m+[m[32m  Site = names(correlation_results),[m
[32m+[m[32m  Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m  P_value = sapply(correlation_results, function(x) x$p_value)[m
[32m+[m[32m)[m
[1mdiff --git a/04a_shared_methyl_regions_v-1.3.R b/04a_shared_methyl_regions_v-1.3.R[m
[1mnew file mode 100644[m
[1mindex 0000000..5f0283d[m
[1m--- /dev/null[m
[1m+++ b/04a_shared_methyl_regions_v-1.3.R[m
[36m@@ -0,0 +1,423 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m
[32m+[m[32m#Reducing overlapping ranges of all species and extract the shared (methylation) regions[m[41m [m
[32m+[m[32m# adding the methylation data to the extracted methylation sites[m[41m [m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/workspace/cfngle/results-data/02_conserved_seq")[m
[32m+[m
[32m+[m[32m#### Data manipulation ####[m
[32m+[m[32m# loading overlapping sequences for all species (only bt2 in this case)[m[41m [m
[32m+[m[32mload("AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m
[32m+[m[32m# converting GAlignments object to GRanges to be able to reduce them[m[41m [m
[32m+[m[32mgr_overlap_seqs_bt2 <- lapply(overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m
[32m+[m[32m### Shared methylation regions[m
[32m+[m[32m## OPTION A)[m
[32m+[m
[32m+[m[32m# intersecting all sequences (option a!) This means that only the sequences which are intersecting will be selected[m
[32m+[m[32mintersected_seqs_bt2 <- GenomicRanges::intersect(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]]) %>%[m[41m [m
[32m+[m[32m  GenomicRanges::intersect(gr_overlap_seqs_bt2[[3]])[m
[32m+[m[32mboxplot(width(intersected_seqs_bt2))[m
[32m+[m[32mnames(intersected_seqs_bt2) <- sprintf("SMR_c_bt2_%03d", 1:length(intersected_seqs_bt2))[m
[32m+[m[32mSMR_a_bt2 <- intersected_seqs_bt2[m
[32m+[m
[32m+[m[32m## OPTION B)[m
[32m+[m[32m# reducing them is option b of how to define the shared methyl regions[m
[32m+[m[32m# group them first[m
[32m+[m[32mgroup_gr_overlap_bt2 <-  c(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]], gr_overlap_seqs_bt2[[3]], gr_overlap_seqs_bt2[[4]])[m
[32m+[m[32mSMR_b_bt2 <- GenomicRanges::reduce(group_gr_overlap_bt2)[m
[32m+[m[32mnames(SMR_b_bt2) <- sprintf("SMR_b_bt2_%03d", 1:length(SMR_b_bt2))[m
[32m+[m
[32m+[m[32mall_SMR_b_bt2 <- SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(all_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/all_SMR_b_bt2_v_2.Rdata")[m
[32m+[m
[32m+[m[32m#### Getting methylation values ####[m
[32m+[m[32m### Loading sequences[m
[32m+[m
[32m+[m[32m## getting overlapped sequence data[m
[32m+[m[32mload("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m[32m# load("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32m# overlap_seqs_mini[m
[32m+[m
[32m+[m[32m## BT2[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_AC_JM_bt2 <- overlap_seqs_bt2[[4]][m
[32m+[m[32moverlap_AC_ZF_bt2 <- overlap_seqs_bt2[[5]][m
[32m+[m
[32m+[m[32m## function to get methyl sites[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extractinformation from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- get.methyl.sites(overlap_AC_AC_bt2, species = "AC", SMRs = SMR_b_bt2)[m
[32m+[m[32mAS_methyl_sites <- get.methyl.sites(overlap_AC_AS_bt2, species = "AS", SMRs = SMR_b_bt2)[m
[32m+[m[32mEH_methyl_sites <- get.methyl.sites(overlap_AC_EH_bt2, species = "EH", SMRs = SMR_b_bt2)[m
[32m+[m[32mJM_methyl_sites <- get.methyl.sites(overlap_AC_JM_bt2, species = "JM", SMRs = SMR_b_bt2)[m
[32m+[m[32mZF_methyl_sites <- get.methyl.sites(overlap_AC_ZF_bt2, species = "ZF", SMRs = SMR_b_bt2)[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AS_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32mtail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32m# JM_meth_data <- read.csv("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m[32mJM_meth_data <- load("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_243285_CpGs.Rdata")[m
[32m+[m[32mJM_meth_data <- JM_24_methyl_data[m
[32m+[m
[32m+[m[32mJM_age <- JM_meth_data$age[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m[32mtail(colnames(ZF_meth_data))[m
[32m+[m
[32m+[m[32mZF_age <- ZF_meth_data$age[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_align) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp %in% AC_meth_data_test)[m
[32m+[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp[meth_sites_names_tmp %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values <- AC_meth_data[,meth_columns_tmp][m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites$Chr), ":", JM_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mJM_meth_values <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites$Chr), ":", ZF_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(ZF_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(ZF_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mZF_meth_values <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values, file = paste0(save_dir, "AC_meth_values_v_2.csv") )[m
[32m+[m[32msave(AC_meth_values, file = paste0(save_dir, "AC_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values, file = paste0(save_dir, "AS_meth_values_v_2.csv") )[m
[32m+[m[32msave(AS_meth_values, file = paste0(save_dir, "AS_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values, file = paste0(save_dir, "EH_meth_values_v_2.csv") )[m
[32m+[m[32msave(EH_meth_values, file = paste0(save_dir, "EH_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mwrite.csv(JM_meth_values, file = paste0(save_dir, "JM_meth_values_v_2.csv") )[m
[32m+[m[32msave(JM_meth_values, file = paste0(save_dir, "JM_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values_v_2.csv") )[m
[32m+[m[32msave(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m
[32m+[m[32m#### PCA tests and stat tests ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values[c(-71,-74,-27,-69,-2,-3,-17),],scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mPCA_JM <- prcomp(JM_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_JM <- as.data.frame(PCA_JM$x)[m
[32m+[m[32mPCA_values_JM$species <- "JM"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m
[32m+[m[32m# PCA_values_all <- rbind(PCA_values_AC[,c(1:10, length(PCA_values_AC))],[m
[32m+[m[32m#                         PCA_values_AS[,c(1:10, length(PCA_values_AS))],[m
[32m+[m[32m#                         PCA_values_EH[,c(1:10, length(PCA_values_EH))])[m
[32m+[m[32m# age_all <- c(AC_age/mean(AC_age), AS_age/mean(AS_age), EH_age/mean(EH_age))[m
[32m+[m
[32m+[m[32m#### plotting results ####[m
[32m+[m
[32m+[m[32m# AC_age_tmp <- AC_age[c(-71,-74,-27,-69,-2,-3,-17)][m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = "blue", high = "red") +[m
[32m+[m[32m  geom_text(aes(label = 1:nrow(AC_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mggplot(PCA_values_AS, aes(x = PC1, y = PC2, color = AS_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = "blue", high = "red") +[m
[32m+[m[32m  geom_text(aes(label = AS_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mggplot(PCA_values_EH, aes(x = PC2, y = PC1, color = EH_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = "blue", high = "red") +[m
[32m+[m[32m  geom_text(aes(label = EH_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mggplot(PCA_values_ZF, aes(x = PC3, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = "blue", high = "red") +[m
[32m+[m[32m  geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, times = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, times = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, times = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m[32m# EH_meth_values_long$id <- rep(paste0("EH_", EH_meth_data$id), times = ncol(EH_meth_values))[m
[32m+[m
[32m+[m[32mJM_meth_values_long <- pivot_longer(JM_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mJM_meth_values_long$age <- rep(JM_meth_data$age, times = ncol(JM_meth_values))[m
[32m+[m[32mJM_meth_values_long$SMR <- as.factor(rep(JM_methyl_sites$SMR, times = length(JM_age)))[m
[32m+[m[32mJM_meth_values_long$Site_i <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mJM_meth_values_long$Site_f <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mJM_meth_values_long$species <- "JM"[m
[32m+[m[32m# C_meth_values_long$sample <- rep(paste0("sample_", 1:length(AC_meth_values)),each = ncol(AC_age))[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, times = ncol(ZF_meth_values))[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, JM_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(AS_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, cex = 1, alpha = 0.5)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Snapper")[m
[32m+[m[41m  [m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, size = 0.2, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Cod")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, size = 0.2, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH")[m
[32m+[m
[32m+[m[32mggplot(JM_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(color = age, size = 0.2, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values JM")[m
[32m+[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_point(aes(alpha=0.5)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5, fill = species)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "green", high = "red") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (AS), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### testing correlation tests ####[m
[32m+[m[32m# Initialize a list to store the results[m
[32m+[m[32mcorrelation_results <- list()[m
[32m+[m
[32m+[m[32m# Loop through each methylation site[m
[32m+[m[32mfor (i in 1:ncol(AS_meth_values)) {[m
[32m+[m[32m  site_name <- colnames(AS_meth_values)[i][m
[32m+[m[32m  # Perform correlation test with age[m
[32m+[m[32m  test_result <- cor.test(AS_meth_values[,i], AS_meth_data$age, method = "pearson") # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m  [m
[32m+[m[32m  # Store the results[m
[32m+[m[32m  correlation_results[[site_name]] <- list([m
[32m+[m[32m    correlation_coefficient = test_result$estimate,[m
[32m+[m[32m    p_value = test_result$p.value[m
[32m+[m[32m  )[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mcorrelation_summary <- tibble([m
[32m+[m[32m  Site = names(correlation_results),[m
[32m+[m[32m  Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m  P_value = sapply(correlation_results, function(x) x$p_value)[m
[32m+[m[32m)[m
[1mdiff --git a/04a_shared_methyl_regions_v-1.4.R b/04a_shared_methyl_regions_v-1.4.R[m
[1mnew file mode 100644[m
[1mindex 0000000..ddf2b12[m
[1m--- /dev/null[m
[1m+++ b/04a_shared_methyl_regions_v-1.4.R[m
[36m@@ -0,0 +1,434 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m
[32m+[m[32m#Reducing overlapping ranges of all species and extract the shared (methylation) regions[m[41m [m
[32m+[m[32m# adding the methylation data to the extracted methylation sites[m[41m [m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m[32mlibrary(ggforce)[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/workspace/cfngle/results-data/02_conserved_seq")[m
[32m+[m
[32m+[m[32m#### Data manipulation ####[m
[32m+[m[32m# loading overlapping sequences for all species (only bt2 in this case)[m[41m [m
[32m+[m[32mload("AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m
[32m+[m[32m# converting GAlignments object to GRanges to be able to reduce them[m[41m [m
[32m+[m[32mgr_overlap_seqs_bt2 <- lapply(overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m
[32m+[m[32m### Shared methylation regions[m
[32m+[m[32m## OPTION A)[m
[32m+[m
[32m+[m[32m# intersecting all sequences (option a!) This means that only the sequences which are intersecting will be selected[m
[32m+[m[32mintersected_seqs_bt2 <- GenomicRanges::intersect(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]]) %>%[m[41m [m
[32m+[m[32m  GenomicRanges::intersect(gr_overlap_seqs_bt2[[3]])[m
[32m+[m[32mboxplot(width(intersected_seqs_bt2))[m
[32m+[m[32mnames(intersected_seqs_bt2) <- sprintf("SMR_c_bt2_%03d", 1:length(intersected_seqs_bt2))[m
[32m+[m[32mSMR_a_bt2 <- intersected_seqs_bt2[m
[32m+[m
[32m+[m[32m## OPTION B)[m
[32m+[m[32m# reducing them is option b of how to define the shared methyl regions[m
[32m+[m[32m# group them first[m
[32m+[m[32mgroup_gr_overlap_bt2 <- c(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]], gr_overlap_seqs_bt2[[3]], gr_overlap_seqs_bt2[[4]])[m
[32m+[m[32mSMR_b_bt2 <- GenomicRanges::reduce(group_gr_overlap_bt2)[m
[32m+[m[32mnames(SMR_b_bt2) <- sprintf("SMR_b_bt2_%03d", 1:length(SMR_b_bt2))[m
[32m+[m
[32m+[m[32mall_SMR_b_bt2 <- SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(all_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/all_SMR_b_bt2_v_2.Rdata")[m
[32m+[m
[32m+[m[32m#### Getting methylation values ####[m
[32m+[m[32m### Loading sequences[m
[32m+[m
[32m+[m[32m## getting overlapped sequence data[m
[32m+[m[32mload("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m[32m# load("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32m# overlap_seqs_mini[m
[32m+[m
[32m+[m[32m## BT2[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_AC_JM_bt2 <- overlap_seqs_bt2[[4]][m
[32m+[m[32moverlap_AC_ZF_bt2 <- overlap_seqs_bt2[[5]][m
[32m+[m
[32m+[m[32m## function to get methyl sites[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extract information from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_AS_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_AS_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("AS_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_AS <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_AS <- bind_rows(final_methyl_sites_AS)[m
[32m+[m[32m  return(df_final_methyl_sites_AS)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- get.methyl.sites(overlap_AC_AC_bt2, species = "AC", SMRs = SMR_b_bt2)[m
[32m+[m[32mAS_methyl_sites <- get.methyl.sites(overlap_AC_AS_bt2, species = "AS", SMRs = SMR_b_bt2)[m
[32m+[m[32mEH_methyl_sites <- get.methyl.sites(overlap_AC_EH_bt2, species = "EH", SMRs = SMR_b_bt2)[m
[32m+[m[32mJM_methyl_sites <- get.methyl.sites(overlap_AC_JM_bt2, species = "JM", SMRs = SMR_b_bt2)[m
[32m+[m[32mZF_methyl_sites <- get.methyl.sites(overlap_AC_ZF_bt2, species = "ZF", SMRs = SMR_b_bt2)[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AS_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32mtail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32m# JM_meth_data <- read.csv("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m[32mJM_meth_data <- load("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_243285_CpGs.Rdata")[m
[32m+[m[32mJM_meth_data <- JM_24_methyl_data[m
[32m+[m
[32m+[m[32mJM_age <- JM_meth_data$age[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m[32mtail(colnames(ZF_meth_data))[m
[32m+[m
[32m+[m[32mZF_age <- ZF_meth_data$age[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp_AC <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_align) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values <- AC_meth_data[,meth_columns_tmp][m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites$Chr), ":", JM_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mJM_meth_values <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites$Chr), ":", ZF_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(ZF_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(ZF_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mZF_meth_values <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values, file = paste0(save_dir, "AC_meth_values_v_2.csv") )[m
[32m+[m[32msave(AC_meth_values, file = paste0(save_dir, "AC_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values, file = paste0(save_dir, "AS_meth_values_v_2.csv") )[m
[32m+[m[32msave(AS_meth_values, file = paste0(save_dir, "AS_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values, file = paste0(save_dir, "EH_meth_values_v_2.csv") )[m
[32m+[m[32msave(EH_meth_values, file = paste0(save_dir, "EH_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mwrite.csv(JM_meth_values, file = paste0(save_dir, "JM_meth_values_v_2.csv") )[m
[32m+[m[32msave(JM_meth_values, file = paste0(save_dir, "JM_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values_v_2.csv") )[m
[32m+[m[32msave(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m
[32m+[m[32m#### PCA tests and stat tests ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mPCA_JM <- prcomp(JM_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_JM <- as.data.frame(PCA_JM$x)[m
[32m+[m[32mPCA_values_JM$species <- "JM"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m
[32m+[m[32m# PCA_values_all <- rbind(PCA_values_AC[,c(1:10, length(PCA_values_AC))],[m
[32m+[m[32m#                         PCA_values_AS[,c(1:10, length(PCA_values_AS))],[m
[32m+[m[32m#                         PCA_values_EH[,c(1:10, length(PCA_values_EH))])[m
[32m+[m[32m# age_all <- c(AC_age/mean(AC_age), AS_age/mean(AS_age), EH_age/mean(EH_age))[m
[32m+[m
[32m+[m[32m#### plotting results ####[m
[32m+[m
[32m+[m[32m# AC_age_tmp <- AC_age[c(-71,-74,-27,-69,-2,-3,-17)][m
[32m+[m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = 1:nrow(AC_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mggplot(PCA_values_AS, aes(x = PC1, y = PC2, color = AS_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = AS_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mggplot(PCA_values_EH, aes(x = PC2, y = PC1, color = EH_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = EH_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mggplot(PCA_values_ZF, aes(x = PC1, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m#### Transforming for plots ####[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, times = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, times = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, times = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m[32m# EH_meth_values_long$id <- rep(paste0("EH_", EH_meth_data$id), times = ncol(EH_meth_values))[m
[32m+[m
[32m+[m[32mJM_meth_values_long <- pivot_longer(JM_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mJM_meth_values_long$age <- rep(JM_meth_data$age, times = ncol(JM_meth_values))[m
[32m+[m[32mJM_meth_values_long$SMR <- as.factor(rep(JM_methyl_sites$SMR, times = length(JM_age)))[m
[32m+[m[32mJM_meth_values_long$Site_i <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mJM_meth_values_long$Site_f <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mJM_meth_values_long$species <- "JM"[m
[32m+[m[32m# C_meth_values_long$sample <- rep(paste0("sample_", 1:length(AC_meth_values)),each = ncol(AC_age))[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, times = ncol(ZF_meth_values))[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, JM_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m
[32m+[m[32m##color palettes[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m
[32m+[m
[32m+[m[32mggplot(ZF_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = colpal[1], high = colpal[7], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values AS")[m
[32m+[m[41m  [m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, cex = 0.5, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values AC")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH")[m
[32m+[m
[32m+[m[32mggplot(JM_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, cex = 0.1,  alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "#E69F00", high = "#0072B2", guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values JM")[m
[32m+[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina() +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (AS), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### testing correlation tests ####[m
[32m+[m[32m# Initialize a list to store the results[m
[32m+[m[32mcorrelation_results <- list()[m
[32m+[m
[32m+[m[32m# Loop through each methylation site[m
[32m+[m[32mfor (i in 1:ncol(AS_meth_values)) {[m
[32m+[m[32m  site_name <- colnames(AS_meth_values)[i][m
[32m+[m[32m  # Perform correlation test with age[m
[32m+[m[32m  test_result <- cor.test(AS_meth_values[,i], AS_meth_data$age, method = "pearson") # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m  [m
[32m+[m[32m  # Store the results[m
[32m+[m[32m  correlation_results[[site_name]] <- list([m
[32m+[m[32m    correlation_coefficient = test_result$estimate,[m
[32m+[m[32m    p_value = test_result$p.value[m
[32m+[m[32m  )[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mcorrelation_summary <- tibble([m
[32m+[m[32m  Site = names(correlation_results),[m
[32m+[m[32m  Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m  P_value = sapply(correlation_results, function(x) x$p_value)[m
[32m+[m[32m)[m
[1mdiff --git a/04a_shared_methyl_regions_v-1.5.R b/04a_shared_methyl_regions_v-1.5.R[m
[1mnew file mode 100644[m
[1mindex 0000000..dcc0992[m
[1m--- /dev/null[m
[1m+++ b/04a_shared_methyl_regions_v-1.5.R[m
[36m@@ -0,0 +1,600 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m
[32m+[m[32m#Reducing overlapping ranges of all species and extract the shared (methylation) regions[m[41m [m
[32m+[m[32m# adding the methylation data to the extracted methylation sites[m[41m [m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m[32mlibrary(ggforce)[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/workspace/cfngle/results-data/02_conserved_seq")[m
[32m+[m
[32m+[m[32m#### Data manipulation ####[m
[32m+[m[32m# loading overlapping sequences for all species (only bt2 in this case)[m[41m [m
[32m+[m[32mload("AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m
[32m+[m[32mload("JM_overlaps_bt2.RData")[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32moverlap_seqs_bt2_JM[m
[32m+[m
[32m+[m[32m# converting GAlignments object to GRanges to be able to reduce them[m[41m [m
[32m+[m[32mgr_overlap_seqs_bt2 <- lapply(overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m[32mgr_overlap_seqs_bt2_JM <- lapply(overlap_seqs_bt2_JM, function(x) granges(x))[m
[32m+[m
[32m+[m[32m### Shared methylation regions[m
[32m+[m[32m## OPTION A)[m
[32m+[m
[32m+[m[32m# intersecting all sequences (option a!) This means that only the sequences which are intersecting will be selected[m
[32m+[m[32mintersected_seqs_bt2 <- GenomicRanges::intersect(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]]) %>%[m[41m [m
[32m+[m[32m  GenomicRanges::intersect(gr_overlap_seqs_bt2[[3]])[m
[32m+[m[32mboxplot(width(intersected_seqs_bt2))[m
[32m+[m[32mnames(intersected_seqs_bt2) <- sprintf("SMR_c_bt2_%03d", 1:length(intersected_seqs_bt2))[m
[32m+[m[32mSMR_a_bt2 <- intersected_seqs_bt2[m
[32m+[m
[32m+[m[32m## OPTION B)[m
[32m+[m[32m# reducing them is option b of how to define the shared methyl regions[m
[32m+[m[32m# group them first[m
[32m+[m[32mgroup_gr_overlap_bt2 <- c(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]], gr_overlap_seqs_bt2[[3]], gr_overlap_seqs_bt2[[4]],gr_overlap_seqs_bt2[[5]])[m
[32m+[m[32mSMR_b_bt2 <- GenomicRanges::reduce(group_gr_overlap_bt2)[m
[32m+[m[32mnames(SMR_b_bt2) <- sprintf("SMR_b_bt2_%03d", 1:length(SMR_b_bt2))[m
[32m+[m
[32m+[m[32mall_SMR_b_bt2 <- SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(all_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/all_SMR_b_bt2_v_2.Rdata")[m
[32m+[m
[32m+[m[32m### FOR JM[m
[32m+[m[32mgroup_gr_overlap_bt2_JM <- c(gr_overlap_seqs_bt2_JM[[1]], gr_overlap_seqs_bt2_JM[[2]], gr_overlap_seqs_bt2_JM[[3]], gr_overlap_seqs_bt2_JM[[4]], gr_overlap_seqs_bt2_JM[[5]])[m
[32m+[m[32mSMR_b_bt2_JM <- GenomicRanges::reduce(group_gr_overlap_bt2_JM)[m
[32m+[m[32mnames(SMR_b_bt2_JM) <- sprintf("SMR_b_bt2_JM_%03d", 1:length(SMR_b_bt2_JM))[m
[32m+[m
[32m+[m[32mSMR_b_bt2_JM[m
[32m+[m
[32m+[m[32msave(SMR_b_bt2_JM, file = "/workspace/cfngle/results-data/04_SMRs/SMR_b_bt2_JM.RData")[m
[32m+[m
[32m+[m[32m#### Getting methylation values ####[m
[32m+[m[32m### Loading sequences[m
[32m+[m
[32m+[m[32m## getting overlapped sequence data[m
[32m+[m[32mload("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m[32m# load("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32m# overlap_seqs_mini[m
[32m+[m
[32m+[m[32m## BT2[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_AC_JM_bt2 <- overlap_seqs_bt2[[4]][m
[32m+[m[32moverlap_AC_ZF_bt2 <- overlap_seqs_bt2[[5]][m
[32m+[m
[32m+[m[32m## BT2[m
[32m+[m[32moverlap_JM_AC_bt2 <- overlap_seqs_bt2_JM[[1]][m
[32m+[m[32moverlap_JM_AS_bt2 <- overlap_seqs_bt2_JM[[2]][m
[32m+[m[32moverlap_JM_EH_bt2 <- overlap_seqs_bt2_JM[[3]][m
[32m+[m[32moverlap_JM_JM_bt2 <- overlap_seqs_bt2_JM[[4]][m
[32m+[m[32moverlap_JM_ZF_bt2 <- overlap_seqs_bt2_JM[[5]][m
[32m+[m
[32m+[m
[32m+[m[32m## function to get methyl sites[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extract information from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_ZF_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_ZF_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("ZF_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_ZF <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_ZF <- bind_rows(final_methyl_sites_ZF)[m
[32m+[m[32m  return(df_final_methyl_sites_ZF)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- get.methyl.sites(overlap_AC_AC_bt2, species = "AC", SMRs = SMR_b_bt2)[m
[32m+[m[32mAS_methyl_sites <- get.methyl.sites(overlap_AC_AS_bt2, species = "AS", SMRs = SMR_b_bt2)[m
[32m+[m[32mEH_methyl_sites <- get.methyl.sites(overlap_AC_EH_bt2, species = "EH", SMRs = SMR_b_bt2)[m
[32m+[m[32mJM_methyl_sites <- get.methyl.sites(overlap_AC_JM_bt2, species = "JM", SMRs = SMR_b_bt2)[m
[32m+[m[32mZF_methyl_sites <- get.methyl.sites(overlap_AC_ZF_bt2, species = "ZF", SMRs = SMR_b_bt2)[m
[32m+[m
[32m+[m[32mAC_methyl_sites_JM <- get.methyl.sites(overlap_JM_AC_bt2, species = "AC", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mAS_methyl_sites_JM <- get.methyl.sites(overlap_JM_AS_bt2, species = "AS", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mEH_methyl_sites_JM <- get.methyl.sites(overlap_JM_EH_bt2, species = "EH", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mJM_methyl_sites_JM <- get.methyl.sites(overlap_JM_JM_bt2, species = "JM", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mZF_methyl_sites_JM <- get.methyl.sites(overlap_JM_ZF_bt2, species = "ZF", SMRs = SMR_b_bt2_JM)[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(ZF_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32mtail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32m# JM_meth_data <- read.csv("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m[32mJM_meth_data <- load("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_243285_CpGs.Rdata")[m
[32m+[m[32mJM_meth_data <- JM_24_methyl_data[m
[32m+[m
[32m+[m[32mJM_age <- JM_meth_data$age[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m[32mtail(colnames(ZF_meth_data))[m
[32m+[m
[32m+[m[32mZF_age <- ZF_meth_data$age[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m### FOR AC rgenome[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp_AC <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_align) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mAC_meth_values <- AC_meth_data[,meth_columns_tmp][m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mAS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mEH_meth_values <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites$SMR))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites$Chr), ":", JM_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mJM_meth_values <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites$Chr), ":", ZF_methyl_sites$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(ZF_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(ZF_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mZF_meth_values <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values, file = paste0(save_dir, "AC_meth_values_v_2.csv") )[m
[32m+[m[32msave(AC_meth_values, file = paste0(save_dir, "AC_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values, file = paste0(save_dir, "AS_meth_values_v_2.csv") )[m
[32m+[m[32msave(AS_meth_values, file = paste0(save_dir, "AS_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values, file = paste0(save_dir, "EH_meth_values_v_2.csv") )[m
[32m+[m[32msave(EH_meth_values, file = paste0(save_dir, "EH_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mwrite.csv(JM_meth_values, file = paste0(save_dir, "JM_meth_values_v_2.csv") )[m
[32m+[m[32msave(JM_meth_values, file = paste0(save_dir, "JM_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values_v_2.csv") )[m
[32m+[m[32msave(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m### FOR JM rgenome[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp_AC <- paste0(AC_methyl_sites_JM$Chr, ".", AC_methyl_sites_JM$pos_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values_JM <- AC_meth_data[,meth_columns_tmp][m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(AS_methyl_sites_JM$Chr, "-", AS_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values_JM <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites_JM$SMR))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites_JM$Chr), ".", EH_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values_JM <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m# EH_meth_values_t <- t(EH_meth_data[,meth_columns_tmp]) %>%[m[41m [m
[32m+[m[32m#   cbind(., data.frame(SMR = EH_methyl_sites_JM$SMR))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites_JM$Chr), ":", JM_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mJM_meth_values_JM <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites_JM$Chr), ":", ZF_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mtable(meth_sites_names_tmp %in% colnames(ZF_meth_data))[m
[32m+[m[32mmeth_columns_tmp <- ZF_meth_data[meth_sites_names_tmp] %>% as.vector()[m
[32m+[m[32mmeth_columns_tmp <- unlist(meth_columns_tmp)[m
[32m+[m[32mZF_meth_values_JM <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32mZF_meth_values_JM <- ZF_meth_data[meth_sites_names_tmp][m
[32m+[m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values_JM, file = paste0(save_dir, "AC_meth_values_JM.csv") )[m
[32m+[m[32msave(AC_meth_values_JM, file = paste0(save_dir, "AC_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values_JM, file = paste0(save_dir, "AS_meth_values_JM.csv") )[m
[32m+[m[32msave(AS_meth_values_JM, file = paste0(save_dir, "AS_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values_JM, file = paste0(save_dir, "EH_meth_values_JM.csv") )[m
[32m+[m[32msave(EH_meth_values_JM, file = paste0(save_dir, "EH_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mwrite.csv(JM_meth_values_JM, file = paste0(save_dir, "JM_meth_values_JM.csv") )[m
[32m+[m[32msave(JM_meth_values_JM, file = paste0(save_dir, "JM_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values_JM, file = paste0(save_dir, "ZF_meth_values_JM.csv") )[m
[32m+[m[32msave(ZF_meth_values_JM, file = paste0(save_dir, "ZF_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m#### PCA tests and stat tests ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mPCA_JM <- prcomp(JM_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_JM <- as.data.frame(PCA_JM$x)[m
[32m+[m[32mPCA_values_JM$species <- "JM"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m
[32m+[m[32m# PCA_values_all <- rbind(PCA_values_AC[,c(1:10, length(PCA_values_AC))],[m
[32m+[m[32m#                         PCA_values_AS[,c(1:10, length(PCA_values_AS))],[m
[32m+[m[32m#                         PCA_values_EH[,c(1:10, length(PCA_values_EH))])[m
[32m+[m[32m# age_all <- c(AC_age/mean(AC_age), AS_age/mean(AS_age), EH_age/mean(EH_age))[m
[32m+[m
[32m+[m[32m#### plotting results ####[m
[32m+[m
[32m+[m[32m# AC_age_tmp <- AC_age[c(-71,-74,-27,-69,-2,-3,-17)][m
[32m+[m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = 1:nrow(AC_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mggplot(PCA_values_AS, aes(x = PC1, y = PC2, color = AS_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = AS_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mggplot(PCA_values_EH, aes(x = PC2, y = PC1, color = EH_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = EH_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mggplot(PCA_values_ZF, aes(x = PC1, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m#### Transforming for plots ####[m
[32m+[m
[32m+[m[32m#run this if JM is rgenome[m[41m [m
[32m+[m[32mAC_meth_values <- AC_meth_values_JM[m
[32m+[m[32mAS_meth_values <- AS_meth_values_JM[m
[32m+[m[32mEH_meth_values <- EH_meth_values_JM[m
[32m+[m[32mJM_meth_values <- JM_meth_values_JM[m
[32m+[m[32mZF_meth_values <- ZF_meth_values_JM[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- AC_methyl_sites_JM[m
[32m+[m[32mAS_methyl_sites <- AS_methyl_sites_JM[m
[32m+[m[32mEH_methyl_sites <- EH_methyl_sites_JM[m
[32m+[m[32mJM_methyl_sites <- JM_methyl_sites_JM[m
[32m+[m[32mZF_methyl_sites <- ZF_methyl_sites_JM[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, each = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, each = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, each = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m[32m# EH_meth_values_long$id <- rep(paste0("EH_", EH_meth_data$id), times = ncol(EH_meth_values))[m
[32m+[m
[32m+[m[32mJM_meth_values_long <- pivot_longer(JM_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mJM_meth_values_long$age <- rep(JM_meth_data$age, each = ncol(JM_meth_values))[m
[32m+[m[32mJM_meth_values_long$SMR <- as.factor(rep(JM_methyl_sites$SMR, times = length(JM_age)))[m
[32m+[m[32mJM_meth_values_long$Site_i <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mJM_meth_values_long$Site_f <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mJM_meth_values_long$species <- "JM"[m
[32m+[m[32m# C_meth_values_long$sample <- rep(paste0("sample_", 1:length(AC_meth_values)),each = ncol(AC_age))[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, each = ncol(ZF_meth_values))[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, JM_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m
[32m+[m[32m##color palettes[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(AS_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = colpal[1], high = colpal[7], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values AS")[m
[32m+[m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AC")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH")[m
[32m+[m
[32m+[m[32mggplot(JM_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, cex = 0.1,  alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "#E69F00", high = "#0072B2", guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values JM")[m
[32m+[m
[32m+[m[32m## all boxplot and sina[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina() +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (ZF), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m[32m## all boxplot[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  # geom_sina(aes(color = species)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (ZF), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m[32m## all sina[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = species)) +[m
[32m+[m[32m  # geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (ZF), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### testing correlation tests ####[m
[32m+[m[32m# Initialize a list to store the results[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mcorrelation_results_ZF <- list()[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m
[32m+[m[32mcor.test.age <- function(methyl_values, age, method = "pearson") {[m
[32m+[m[32m  correlation_results <- list()[m
[32m+[m[32m  print(paste0("Running correlation test against age with ", method, " method. Results are stored in tibble."))[m
[32m+[m[32m  # Loop through each methylation site[m
[32m+[m[32m  for (i in 1:ncol(methyl_values)) {[m
[32m+[m[32m    site_name <- colnames(methyl_values)[i][m
[32m+[m[32m    # Perform correlation test with age[m
[32m+[m[32m    test_result <- cor.test(methyl_values[,i], age, method = method) # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m    [m
[32m+[m[32m    # Store the results[m
[32m+[m[32m    correlation_results[[site_name]] <- list([m
[32m+[m[32m      correlation_coefficient = test_result$estimate,[m
[32m+[m[32m      p_value = test_result$p.value[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32m  correlation_summary <- tibble([m
[32m+[m[32m    Site = names(correlation_results),[m
[32m+[m[32m    Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m    P_value = sapply(correlation_results, function(x) x$p_value)[m
[32m+[m[32m  )[m
[32m+[m[32m  return(correlation_summary)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcor.test.age.filter <- function(input, p_value = 0.05) {[m
[32m+[m[32m  input[input$P_value <= p_value,][m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mAC_cor_age_pearson <- cor.test.age(AC_meth_values, AC_meth_data$age)[m
[32m+[m[32mAC_cor_age_filtered_pearson <- cor.test.age.filter(AC_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mAC_cor_age_spearman <- cor.test.age(AC_meth_values, AC_meth_data$age, method = "spearman")[m
[32m+[m[32mAC_cor_age_filtered_spearman <- cor.test.age.filter(AC_cor_age_spearman, 0.05)[m
[32m+[m
[32m+[m[32mAC_cor_age_kendall <- cor.test.age(AC_meth_values, AC_meth_data$age, method = "kendall")[m
[32m+[m[32mAC_cor_age_filtered_kendall <- cor.test.age.filter(AC_cor_age_kendall, 0.05)[m
[32m+[m
[32m+[m[32mAS_cor_age_pearson <- cor.test.age(AS_meth_values, AS_meth_data$age)[m
[32m+[m[32mAS_cor_age_filtered_pearson <- cor.test.age.filter(AS_cor_age, 0.05)[m
[32m+[m
[32m+[m[32mEH_cor_age_pearson <- cor.test.age(EH_meth_values, EH_meth_data$age)[m
[32m+[m[32mEH_cor_age_filtered_pearson <- cor.test.age.filter(EH_cor_age, 0.05)[m
[32m+[m
[32m+[m[32mJM_cor_age_pearson <- cor.test.age(JM_meth_values, JM_meth_data$age)[m
[32m+[m[32mJM_cor_age_filtered_pearson <- cor.test.age.filter(JM_cor_age, 0.05)[m
[32m+[m
[32m+[m[32mZF_cor_age_pearson <- cor.test.age(ZF_meth_values, ZF_meth_data$age)[m
[32m+[m[32mZF_cor_age_filtered_pearson <- cor.test.age.filter(ZF_cor_age, 0.05)[m
[32m+[m
[1mdiff --git a/04a_shared_methyl_regions_v-1.6.R b/04a_shared_methyl_regions_v-1.6.R[m
[1mnew file mode 100644[m
[1mindex 0000000..ef08658[m
[1m--- /dev/null[m
[1m+++ b/04a_shared_methyl_regions_v-1.6.R[m
[36m@@ -0,0 +1,599 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m
[32m+[m[32m#Reducing overlapping ranges of all species and extract the shared (methylation) regions[m[41m [m
[32m+[m[32m# adding the methylation data to the extracted methylation sites[m[41m [m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m[32mlibrary(ggforce)[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/workspace/cfngle/results-data/02_conserved_seq")[m
[32m+[m
[32m+[m[32m#### Data manipulation ####[m
[32m+[m[32m# loading overlapping sequences for all species (only bt2 in this case)[m[41m [m
[32m+[m[32mload("AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m
[32m+[m[32mload("JM_overlaps_bt2.RData")[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32moverlap_seqs_bt2_JM[m
[32m+[m
[32m+[m[32m# converting GAlignments object to GRanges to be able to reduce them[m[41m [m
[32m+[m[32mgr_overlap_seqs_bt2 <- lapply(overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m[32mgr_overlap_seqs_bt2_JM <- lapply(overlap_seqs_bt2_JM, function(x) granges(x))[m
[32m+[m
[32m+[m[32m### Shared methylation regions[m
[32m+[m[32m## OPTION A)[m
[32m+[m
[32m+[m[32m# intersecting all sequences (option a!) This means that only the sequences which are intersecting will be selected[m
[32m+[m[32mintersected_seqs_bt2 <- GenomicRanges::intersect(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]]) %>%[m[41m [m
[32m+[m[32m  GenomicRanges::intersect(gr_overlap_seqs_bt2[[3]])[m
[32m+[m[32mboxplot(width(intersected_seqs_bt2))[m
[32m+[m[32mnames(intersected_seqs_bt2) <- sprintf("SMR_c_bt2_%03d", 1:length(intersected_seqs_bt2))[m
[32m+[m[32mSMR_a_bt2 <- intersected_seqs_bt2[m
[32m+[m
[32m+[m[32m## OPTION B)[m
[32m+[m[32m# reducing them is option b of how to define the shared methyl regions[m
[32m+[m[32m# group them first[m
[32m+[m[32mgroup_gr_overlap_bt2 <- c(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]], gr_overlap_seqs_bt2[[3]], gr_overlap_seqs_bt2[[4]],gr_overlap_seqs_bt2[[5]])[m
[32m+[m[32mSMR_b_bt2 <- GenomicRanges::reduce(group_gr_overlap_bt2)[m
[32m+[m[32mnames(SMR_b_bt2) <- sprintf("SMR_b_bt2_%03d", 1:length(SMR_b_bt2))[m
[32m+[m
[32m+[m[32mall_SMR_b_bt2 <- SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(all_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/all_SMR_b_bt2_v_2.Rdata")[m
[32m+[m
[32m+[m[32m### FOR JM[m
[32m+[m[32mgroup_gr_overlap_bt2_JM <- c(gr_overlap_seqs_bt2_JM[[1]], gr_overlap_seqs_bt2_JM[[2]], gr_overlap_seqs_bt2_JM[[3]], gr_overlap_seqs_bt2_JM[[4]], gr_overlap_seqs_bt2_JM[[5]])[m
[32m+[m[32mSMR_b_bt2_JM <- GenomicRanges::reduce(group_gr_overlap_bt2_JM)[m
[32m+[m[32mnames(SMR_b_bt2_JM) <- sprintf("SMR_b_bt2_JM_%03d", 1:length(SMR_b_bt2_JM))[m
[32m+[m
[32m+[m[32mSMR_b_bt2_JM[m
[32m+[m
[32m+[m[32msave(SMR_b_bt2_JM, file = "/workspace/cfngle/results-data/04_SMRs/SMR_b_bt2_JM.RData")[m
[32m+[m
[32m+[m[32m#### Getting methylation values ####[m
[32m+[m[32m### Loading sequences[m
[32m+[m
[32m+[m[32m## getting overlapped sequence data[m
[32m+[m[32mload("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m[32m# load("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32m# overlap_seqs_mini[m
[32m+[m
[32m+[m[32m## BT2[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_AC_JM_bt2 <- overlap_seqs_bt2[[4]][m
[32m+[m[32moverlap_AC_ZF_bt2 <- overlap_seqs_bt2[[5]][m
[32m+[m
[32m+[m[32m## BT2[m
[32m+[m[32moverlap_JM_AC_bt2 <- overlap_seqs_bt2_JM[[1]][m
[32m+[m[32moverlap_JM_AS_bt2 <- overlap_seqs_bt2_JM[[2]][m
[32m+[m[32moverlap_JM_EH_bt2 <- overlap_seqs_bt2_JM[[3]][m
[32m+[m[32moverlap_JM_JM_bt2 <- overlap_seqs_bt2_JM[[4]][m
[32m+[m[32moverlap_JM_ZF_bt2 <- overlap_seqs_bt2_JM[[5]][m
[32m+[m
[32m+[m
[32m+[m[32m## function to get methyl sites[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extract information from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_ZF_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_ZF_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("ZF_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_ZF <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_ZF <- bind_rows(final_methyl_sites_ZF)[m
[32m+[m[32m  return(df_final_methyl_sites_ZF)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- get.methyl.sites(overlap_AC_AC_bt2, species = "AC", SMRs = SMR_b_bt2)[m
[32m+[m[32mAS_methyl_sites <- get.methyl.sites(overlap_AC_AS_bt2, species = "AS", SMRs = SMR_b_bt2)[m
[32m+[m[32mEH_methyl_sites <- get.methyl.sites(overlap_AC_EH_bt2, species = "EH", SMRs = SMR_b_bt2)[m
[32m+[m[32mJM_methyl_sites <- get.methyl.sites(overlap_AC_JM_bt2, species = "JM", SMRs = SMR_b_bt2)[m
[32m+[m[32mZF_methyl_sites <- get.methyl.sites(overlap_AC_ZF_bt2, species = "ZF", SMRs = SMR_b_bt2)[m
[32m+[m
[32m+[m[32mAC_methyl_sites_JM <- get.methyl.sites(overlap_JM_AC_bt2, species = "AC", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mAS_methyl_sites_JM <- get.methyl.sites(overlap_JM_AS_bt2, species = "AS", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mEH_methyl_sites_JM <- get.methyl.sites(overlap_JM_EH_bt2, species = "EH", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mJM_methyl_sites_JM <- get.methyl.sites(overlap_JM_JM_bt2, species = "JM", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mZF_methyl_sites_JM <- get.methyl.sites(overlap_JM_ZF_bt2, species = "ZF", SMRs = SMR_b_bt2_JM)[m
[32m+[m
[32m+[m[32m# saving methylation sites[m
[32m+[m
[32m+[m[32msave(AC_methyl_sites_JM, file = "/workspace/cfngle/results-data/05_shared_methyl_values/AC_methyl_sites_JM.Rdata")[m
[32m+[m[32msave(AS_methyl_sites_JM, file = "/workspace/cfngle/results-data/05_shared_methyl_values/AS_methyl_sites_JM.Rdata")[m
[32m+[m[32msave(EH_methyl_sites_JM, file = "/workspace/cfngle/results-data/05_shared_methyl_values/EH_methyl_sites_JM.Rdata")[m
[32m+[m[32msave(JM_methyl_sites_JM, file = "/workspace/cfngle/results-data/05_shared_methyl_values/JM_methyl_sites_JM.Rdata")[m
[32m+[m[32msave(ZF_methyl_sites_JM, file = "/workspace/cfngle/results-data/05_shared_methyl_values/ZF_methyl_sites_JM.Rdata")[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(ZF_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32mtail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32m# JM_meth_data <- read.csv("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m[32mJM_meth_data <- load("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_243285_CpGs.Rdata")[m
[32m+[m[32mJM_meth_data <- JM_24_methyl_data[m
[32m+[m
[32m+[m[32mJM_age <- JM_meth_data$age[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m[32mtail(colnames(ZF_meth_data))[m
[32m+[m
[32m+[m[32mZF_age <- ZF_meth_data$age[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m# ### FOR AC rgenome[m
[32m+[m[32m# ##AC[m
[32m+[m[32m# meth_sites_names_tmp_AC <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_align) %>%[m[41m [m
[32m+[m[32m#   gsub("AC_", "Chr", .)[m
[32m+[m[32m# AC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32m# AC_table <- table(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m[32m# meth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m#   as.vector()[m
[32m+[m[32m# AC_meth_values <- AC_meth_data[,meth_columns_tmp][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##AS[m
[32m+[m[32m# meth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32m# meth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32m# meth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m#   as.vector()[m
[32m+[m[32m# AS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##EH[m
[32m+[m[32m# meth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32m# meth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32m# meth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m#   as.vector()[m
[32m+[m[32m# EH_meth_values <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##JM[m
[32m+[m[32m# meth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites$Chr), ":", JM_methyl_sites$pos_rgenome)[m
[32m+[m[32m# meth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32m# meth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m#   as.vector()[m
[32m+[m[32m# JM_meth_values <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##ZF[m
[32m+[m[32m# meth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites$Chr), ":", ZF_methyl_sites$pos_rgenome)[m
[32m+[m[32m# meth_sites_names_tmp %in% colnames(ZF_meth_data)[m
[32m+[m[32m# meth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(ZF_meth_data))) %>%[m[41m [m
[32m+[m[32m#   as.vector()[m
[32m+[m[32m# ZF_meth_values <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ### saving data[m
[32m+[m[32m# save_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##AC[m
[32m+[m[32m# write.csv(AC_meth_values, file = paste0(save_dir, "AC_meth_values_v_2.csv") )[m
[32m+[m[32m# save(AC_meth_values, file = paste0(save_dir, "AC_meth_values_v_2.Rdata"))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##AS[m
[32m+[m[32m# write.csv(AS_meth_values, file = paste0(save_dir, "AS_meth_values_v_2.csv") )[m
[32m+[m[32m# save(AS_meth_values, file = paste0(save_dir, "AS_meth_values_v_2.Rdata"))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##EH[m
[32m+[m[32m# write.csv(EH_meth_values, file = paste0(save_dir, "EH_meth_values_v_2.csv") )[m
[32m+[m[32m# save(EH_meth_values, file = paste0(save_dir, "EH_meth_values_v_2.Rdata"))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##JM[m
[32m+[m[32m# write.csv(JM_meth_values, file = paste0(save_dir, "JM_meth_values_v_2.csv") )[m
[32m+[m[32m# save(JM_meth_values, file = paste0(save_dir, "JM_meth_values_v_2.Rdata"))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##ZF[m
[32m+[m[32m# write.csv(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values_v_2.csv") )[m
[32m+[m[32m# save(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m### FOR JM rgenome[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp_AC <- paste0(AC_methyl_sites_JM$Chr, ".", AC_methyl_sites_JM$pos_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m[32mAC_selected_CpGs <- meth_sites_names_tmp_AC %in% AC_meth_data_test[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values_JM <- AC_meth_data[,meth_columns_tmp][m
[32m+[m
[32m+[m[32msave(AC_selected_CpGs, file = "/workspace/cfngle/results-data/05_shared_methyl_values/AC_selected_CpGs")[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("AS_", "",AS_methyl_sites_JM$Chr), "-", AS_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values_JM <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites_JM$Chr), ".", EH_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values_JM <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites_JM$Chr), ":", JM_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mJM_meth_values_JM <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites_JM$Chr), ":", ZF_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mtable(meth_sites_names_tmp %in% colnames(ZF_meth_data))[m
[32m+[m[32mmeth_columns_tmp <- ZF_meth_data[meth_sites_names_tmp] %>% as.vector()[m
[32m+[m[32mmeth_columns_tmp <- unlist(meth_columns_tmp)[m
[32m+[m[32m# ZF_meth_values_JM <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32mZF_meth_values_JM <- ZF_meth_data[meth_sites_names_tmp][m
[32m+[m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values_JM, file = paste0(save_dir, "AC_meth_values_JM.csv") )[m
[32m+[m[32msave(AC_meth_values_JM, file = paste0(save_dir, "AC_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values_JM, file = paste0(save_dir, "AS_meth_values_JM.csv") )[m
[32m+[m[32msave(AS_meth_values_JM, file = paste0(save_dir, "AS_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values_JM, file = paste0(save_dir, "EH_meth_values_JM.csv") )[m
[32m+[m[32msave(EH_meth_values_JM, file = paste0(save_dir, "EH_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mwrite.csv(JM_meth_values_JM, file = paste0(save_dir, "JM_meth_values_JM.csv") )[m
[32m+[m[32msave(JM_meth_values_JM, file = paste0(save_dir, "JM_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values_JM, file = paste0(save_dir, "ZF_meth_values_JM.csv") )[m
[32m+[m[32msave(ZF_meth_values_JM, file = paste0(save_dir, "ZF_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m#### PCA tests and stat tests ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mPCA_JM <- prcomp(JM_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_JM <- as.data.frame(PCA_JM$x)[m
[32m+[m[32mPCA_values_JM$species <- "JM"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m
[32m+[m[32m# PCA_values_all <- rbind(PCA_values_AC[,c(1:10, length(PCA_values_AC))],[m
[32m+[m[32m#                         PCA_values_AS[,c(1:10, length(PCA_values_AS))],[m
[32m+[m[32m#                         PCA_values_EH[,c(1:10, length(PCA_values_EH))])[m
[32m+[m[32m# age_all <- c(AC_age/mean(AC_age), AS_age/mean(AS_age), EH_age/mean(EH_age))[m
[32m+[m
[32m+[m[32m#### plotting results ####[m
[32m+[m
[32m+[m[32m# AC_age_tmp <- AC_age[c(-71,-74,-27,-69,-2,-3,-17)][m
[32m+[m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = 1:nrow(AC_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mggplot(PCA_values_AS, aes(x = PC1, y = PC2, color = AS_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = AS_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mggplot(PCA_values_EH, aes(x = PC2, y = PC1, color = EH_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = EH_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mggplot(PCA_values_ZF, aes(x = PC1, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m#### Transforming for plots ####[m
[32m+[m
[32m+[m[32m#run this if JM is rgenome[m[41m [m
[32m+[m[32mAC_meth_values <- AC_meth_values_JM[m
[32m+[m[32mAS_meth_values <- AS_meth_values_JM[m
[32m+[m[32mEH_meth_values <- EH_meth_values_JM[m
[32m+[m[32mJM_meth_values <- JM_meth_values_JM[m
[32m+[m[32mZF_meth_values <- ZF_meth_values_JM[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- AC_methyl_sites_JM[m
[32m+[m[32mAS_methyl_sites <- AS_methyl_sites_JM[m
[32m+[m[32mEH_methyl_sites <- EH_methyl_sites_JM[m
[32m+[m[32mJM_methyl_sites <- JM_methyl_sites_JM[m
[32m+[m[32mZF_methyl_sites <- ZF_methyl_sites_JM[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, each = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, each = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, each = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m[32m# EH_meth_values_long$id <- rep(paste0("EH_", EH_meth_data$id), times = ncol(EH_meth_values))[m
[32m+[m
[32m+[m[32mJM_meth_values_long <- pivot_longer(JM_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mJM_meth_values_long$age <- rep(JM_meth_data$age, each = ncol(JM_meth_values))[m
[32m+[m[32mJM_meth_values_long$SMR <- as.factor(rep(JM_methyl_sites$SMR, times = length(JM_age)))[m
[32m+[m[32mJM_meth_values_long$Site_i <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mJM_meth_values_long$Site_f <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mJM_meth_values_long$species <- "JM"[m
[32m+[m[32m# C_meth_values_long$sample <- rep(paste0("sample_", 1:length(AC_meth_values)),each = ncol(AC_age))[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, each = ncol(ZF_meth_values))[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, JM_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m
[32m+[m[32m##color palettes[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(AS_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = colpal[1], high = colpal[7], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values AS")[m
[32m+[m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AC")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH")[m
[32m+[m
[32m+[m[32mggplot(JM_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, cex = 0.1,  alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "#E69F00", high = "#0072B2", guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values JM")[m
[32m+[m
[32m+[m[32m## all boxplot and sina[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina() +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (ZF), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m[32m## all boxplot[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  # geom_sina(aes(color = species)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (ZF), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m[32m## all sina[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = species)) +[m
[32m+[m[32m  # geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (ZF), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### testing correlation tests ####[m
[32m+[m[32m# Initialize a list to store the results[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mcorrelation_results_ZF <- list()[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m
[32m+[m[32mcor.test.age <- function(methyl_values, age, method = "pearson") {[m
[32m+[m[32m  correlation_results <- list()[m
[32m+[m[32m  print(paste0("Running correlation test against age with ", method, " method. Results are stored in tibble."))[m
[32m+[m[32m  # Loop through each methylation site[m
[32m+[m[32m  for (i in 1:ncol(methyl_values)) {[m
[32m+[m[32m    site_name <- colnames(methyl_values)[i][m
[32m+[m[32m    # Perform correlation test with age[m
[32m+[m[32m    test_result <- cor.test(methyl_values[,i], age, method = method) # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m    [m
[32m+[m[32m    # Store the results[m
[32m+[m[32m    correlation_results[[site_name]] <- list([m
[32m+[m[32m      correlation_coefficient = test_result$estimate,[m
[32m+[m[32m      p_value = test_result$p.value[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32m  correlation_summary <- tibble([m
[32m+[m[32m    Site = names(correlation_results),[m
[32m+[m[32m    Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m    P_value = sapply(correlation_results, function(x) x$p_value)[m
[32m+[m[32m  )[m
[32m+[m[32m  return(correlation_summary)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcor.test.age.filter <- function(input, p_value = 0.05) {[m
[32m+[m[32m  input[input$P_value <= p_value,][m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mAC_cor_age_pearson <- cor.test.age(AC_meth_values, AC_meth_data$age)[m
[32m+[m[32mAC_cor_age_filtered_pearson <- cor.test.age.filter(AC_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mAC_cor_age_spearman <- cor.test.age(AC_meth_values, AC_meth_data$age, method = "spearman")[m
[32m+[m[32mAC_cor_age_filtered_spearman <- cor.test.age.filter(AC_cor_age_spearman, 0.05)[m
[32m+[m
[32m+[m[32mAC_cor_age_kendall <- cor.test.age(AC_meth_values, AC_meth_data$age, method = "kendall")[m
[32m+[m[32mAC_cor_age_filtered_kendall <- cor.test.age.filter(AC_cor_age_kendall, 0.05)[m
[32m+[m
[32m+[m[32mAS_cor_age_pearson <- cor.test.age(AS_meth_values, AS_meth_data$age)[m
[32m+[m[32mAS_cor_age_filtered_pearson <- cor.test.age.filter(AS_cor_age, 0.05)[m
[32m+[m
[32m+[m[32mEH_cor_age_pearson <- cor.test.age(EH_meth_values, EH_meth_data$age)[m
[32m+[m[32mEH_cor_age_filtered_pearson <- cor.test.age.filter(EH_cor_age, 0.05)[m
[32m+[m
[32m+[m[32mJM_cor_age_pearson <- cor.test.age(JM_meth_values, JM_meth_data$age)[m
[32m+[m[32mJM_cor_age_filtered_pearson <- cor.test.age.filter(JM_cor_age, 0.05)[m
[32m+[m
[32m+[m[32mZF_cor_age_pearson <- cor.test.age(ZF_meth_values, ZF_meth_data$age)[m
[32m+[m[32mZF_cor_age_filtered_pearson <- cor.test.age.filter(ZF_cor_age, 0.05)[m
[32m+[m
[32m+[m
[1mdiff --git a/04a_shared_methyl_regions_v-1.7.R b/04a_shared_methyl_regions_v-1.7.R[m
[1mnew file mode 100644[m
[1mindex 0000000..ef08658[m
[1m--- /dev/null[m
[1m+++ b/04a_shared_methyl_regions_v-1.7.R[m
[36m@@ -0,0 +1,599 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m
[32m+[m[32m#Reducing overlapping ranges of all species and extract the shared (methylation) regions[m[41m [m
[32m+[m[32m# adding the methylation data to the extracted methylation sites[m[41m [m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m[32mlibrary(ggforce)[m
[32m+[m
[32m+[m[32m#### Settings ####[m
[32m+[m[32msetwd("/workspace/cfngle/results-data/02_conserved_seq")[m
[32m+[m
[32m+[m[32m#### Data manipulation ####[m
[32m+[m[32m# loading overlapping sequences for all species (only bt2 in this case)[m[41m [m
[32m+[m[32mload("AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m
[32m+[m[32mload("JM_overlaps_bt2.RData")[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32moverlap_seqs_bt2_JM[m
[32m+[m
[32m+[m[32m# converting GAlignments object to GRanges to be able to reduce them[m[41m [m
[32m+[m[32mgr_overlap_seqs_bt2 <- lapply(overlap_seqs_bt2, function(x) granges(x))[m
[32m+[m[32mgr_overlap_seqs_bt2_JM <- lapply(overlap_seqs_bt2_JM, function(x) granges(x))[m
[32m+[m
[32m+[m[32m### Shared methylation regions[m
[32m+[m[32m## OPTION A)[m
[32m+[m
[32m+[m[32m# intersecting all sequences (option a!) This means that only the sequences which are intersecting will be selected[m
[32m+[m[32mintersected_seqs_bt2 <- GenomicRanges::intersect(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]]) %>%[m[41m [m
[32m+[m[32m  GenomicRanges::intersect(gr_overlap_seqs_bt2[[3]])[m
[32m+[m[32mboxplot(width(intersected_seqs_bt2))[m
[32m+[m[32mnames(intersected_seqs_bt2) <- sprintf("SMR_c_bt2_%03d", 1:length(intersected_seqs_bt2))[m
[32m+[m[32mSMR_a_bt2 <- intersected_seqs_bt2[m
[32m+[m
[32m+[m[32m## OPTION B)[m
[32m+[m[32m# reducing them is option b of how to define the shared methyl regions[m
[32m+[m[32m# group them first[m
[32m+[m[32mgroup_gr_overlap_bt2 <- c(gr_overlap_seqs_bt2[[1]], gr_overlap_seqs_bt2[[2]], gr_overlap_seqs_bt2[[3]], gr_overlap_seqs_bt2[[4]],gr_overlap_seqs_bt2[[5]])[m
[32m+[m[32mSMR_b_bt2 <- GenomicRanges::reduce(group_gr_overlap_bt2)[m
[32m+[m[32mnames(SMR_b_bt2) <- sprintf("SMR_b_bt2_%03d", 1:length(SMR_b_bt2))[m
[32m+[m
[32m+[m[32mall_SMR_b_bt2 <- SMR_b_bt2[m
[32m+[m
[32m+[m[32msave(all_SMR_b_bt2, file = "/workspace/cfngle/results-data/04_SMRs/all_SMR_b_bt2_v_2.Rdata")[m
[32m+[m
[32m+[m[32m### FOR JM[m
[32m+[m[32mgroup_gr_overlap_bt2_JM <- c(gr_overlap_seqs_bt2_JM[[1]], gr_overlap_seqs_bt2_JM[[2]], gr_overlap_seqs_bt2_JM[[3]], gr_overlap_seqs_bt2_JM[[4]], gr_overlap_seqs_bt2_JM[[5]])[m
[32m+[m[32mSMR_b_bt2_JM <- GenomicRanges::reduce(group_gr_overlap_bt2_JM)[m
[32m+[m[32mnames(SMR_b_bt2_JM) <- sprintf("SMR_b_bt2_JM_%03d", 1:length(SMR_b_bt2_JM))[m
[32m+[m
[32m+[m[32mSMR_b_bt2_JM[m
[32m+[m
[32m+[m[32msave(SMR_b_bt2_JM, file = "/workspace/cfngle/results-data/04_SMRs/SMR_b_bt2_JM.RData")[m
[32m+[m
[32m+[m[32m#### Getting methylation values ####[m
[32m+[m[32m### Loading sequences[m
[32m+[m
[32m+[m[32m## getting overlapped sequence data[m
[32m+[m[32mload("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_ZF_overlaps_bt2_v_2.RData")[m
[32m+[m[32m# load("/workspace/cfngle/results-data/02_conserved_seq/AC_AS_EH_JM_overlaps_mini.R")[m
[32m+[m
[32m+[m[32moverlap_seqs_bt2[m
[32m+[m[32m# overlap_seqs_mini[m
[32m+[m
[32m+[m[32m## BT2[m
[32m+[m[32moverlap_AC_AC_bt2 <- overlap_seqs_bt2[[1]][m
[32m+[m[32moverlap_AC_AS_bt2 <- overlap_seqs_bt2[[2]][m
[32m+[m[32moverlap_AC_EH_bt2 <- overlap_seqs_bt2[[3]][m
[32m+[m[32moverlap_AC_JM_bt2 <- overlap_seqs_bt2[[4]][m
[32m+[m[32moverlap_AC_ZF_bt2 <- overlap_seqs_bt2[[5]][m
[32m+[m
[32m+[m[32m## BT2[m
[32m+[m[32moverlap_JM_AC_bt2 <- overlap_seqs_bt2_JM[[1]][m
[32m+[m[32moverlap_JM_AS_bt2 <- overlap_seqs_bt2_JM[[2]][m
[32m+[m[32moverlap_JM_EH_bt2 <- overlap_seqs_bt2_JM[[3]][m
[32m+[m[32moverlap_JM_JM_bt2 <- overlap_seqs_bt2_JM[[4]][m
[32m+[m[32moverlap_JM_ZF_bt2 <- overlap_seqs_bt2_JM[[5]][m
[32m+[m
[32m+[m
[32m+[m[32m## function to get methyl sites[m
[32m+[m
[32m+[m[32mget.methyl.sites <- function(seqs_aligned, species = "undefined", SMRs = "undefined") {[m
[32m+[m[32m  ### A) extract information from CIGAR code[m
[32m+[m[32m  cigar_sep <- cigar(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    sapply(function(x) regmatches(x, gregexpr("\\d+[A-Z]", x)))[m
[32m+[m[41m  [m
[32m+[m[32m  start_temp <- lapply(cigar_sep, function(x) if(grepl("S$", x[1])) {[m
[32m+[m[32m    x[1] <- as.integer(strsplit(x[1], split = "S")[1])[m
[32m+[m[32m  }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  # getting end of alignment of CIGAR[m
[32m+[m[32m  end_ZF_AC <- lapply(cigar_sep, function(x)[m
[32m+[m[32m    if(grepl("S$", x[length(x)])) {[m
[32m+[m[32m      x[length(x)] <- as.integer(strsplit(x[length(x)], split = "S")[1])[m
[32m+[m[32m    }) %>%[m[41m [m
[32m+[m[32m    gsub('NULL', '0',.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_end <- qwidth(seqs_aligned) - end_ZF_AC[m[41m [m
[32m+[m[41m  [m
[32m+[m[32m  cigar_width_df <- data.frame(seq_names = names(seqs_aligned),start_temp, seq_end, seq_end-start_temp, width(seqs_aligned),width(seqs_aligned)-(seq_end-start_temp))[m
[32m+[m[32m  names(cigar_width_df) <- c("seq_names", "start","end","width","width_align","diff")[m
[32m+[m[41m  [m
[32m+[m[32m  ### B) getting the start of sequence which was aligned[m
[32m+[m[32m  seq_start_pos <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub(":.*$", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("^.+_", "",.) %>% as.integer()[m
[32m+[m[41m  [m
[32m+[m[32m  seq_chr_name <- names(seqs_aligned) %>%[m[41m [m
[32m+[m[32m    gsub("ZF_", "",.) %>%[m[41m [m
[32m+[m[32m    gsub("_[^_]*$", "",., perl = TRUE)[m
[32m+[m[41m  [m
[32m+[m[32m  # getting methylation site an normalizing to the aligned sequence part[m
[32m+[m[32m  methyl_sites <- mcols(seqs_aligned)$methyl_pos %>%[m[41m [m
[32m+[m[32m    strsplit(",") %>% lapply(function(x) as.integer(x))[m
[32m+[m[32m  normalized_methyl_sites <- mapply(function(x, start_pos) x - start_pos, methyl_sites, seq_start_pos, SIMPLIFY = FALSE)[m
[32m+[m[32m  mapped_methyl_sites <- mapply(function(x, start_pos) x - start_pos, normalized_methyl_sites, cigar_width_df$start, SIMPLIFY = FALSE)[m
[32m+[m[32m  aligned_methyl_sites <- mapply(function(x, start_pos, align_pos) x - start_pos + align_pos, mapped_methyl_sites, cigar_width_df$start, start(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  methyl_on_aligned <- mapply(function(x, w) x <= w & x > 0, mapped_methyl_sites, width(seqs_aligned), SIMPLIFY = FALSE)[m
[32m+[m[41m  [m
[32m+[m[32m  ### C) finding overlaps between sequences and SMRs[m
[32m+[m[32m  SMR_index <- subjectHits(findOverlaps(seqs_aligned, SMRs))[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  final_methyl_sites_ZF <- lapply(seq_along(mapped_methyl_sites), function(i) {[m
[32m+[m[32m    df <- data.frame(seq_names = cigar_width_df$seq_names[i],[m[41m [m
[32m+[m[32m                     pos_rgenome = methyl_sites[[i]],[m
[32m+[m[32m                     pos_seq = mapped_methyl_sites[[i]],[m
[32m+[m[32m                     pos_align = aligned_methyl_sites[[i]],[m[41m [m
[32m+[m[32m                     width_align = width(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     chr_align = seqnames(seqs_aligned)[i],[m[41m [m
[32m+[m[32m                     aligned = methyl_on_aligned[[i]],[m[41m [m
[32m+[m[32m                     seq_number = sprintf("seq_%03d", 1:length(aligned_methyl_sites))[i],[m
[32m+[m[32m                     SMR = sprintf("SMR_%03d", SMR_index[i]),[m
[32m+[m[32m                     species = species)[m
[32m+[m[32m    df$Chr <- seq_chr_name[i][m
[32m+[m[32m    df <- cbind(df[length(df)], df[-length(df)])[m
[32m+[m[32m    return(df)[m
[32m+[m[32m  })[m
[32m+[m[32m  df_final_methyl_sites_ZF <- bind_rows(final_methyl_sites_ZF)[m
[32m+[m[32m  return(df_final_methyl_sites_ZF)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# getting methyl sites for all species[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- get.methyl.sites(overlap_AC_AC_bt2, species = "AC", SMRs = SMR_b_bt2)[m
[32m+[m[32mAS_methyl_sites <- get.methyl.sites(overlap_AC_AS_bt2, species = "AS", SMRs = SMR_b_bt2)[m
[32m+[m[32mEH_methyl_sites <- get.methyl.sites(overlap_AC_EH_bt2, species = "EH", SMRs = SMR_b_bt2)[m
[32m+[m[32mJM_methyl_sites <- get.methyl.sites(overlap_AC_JM_bt2, species = "JM", SMRs = SMR_b_bt2)[m
[32m+[m[32mZF_methyl_sites <- get.methyl.sites(overlap_AC_ZF_bt2, species = "ZF", SMRs = SMR_b_bt2)[m
[32m+[m
[32m+[m[32mAC_methyl_sites_JM <- get.methyl.sites(overlap_JM_AC_bt2, species = "AC", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mAS_methyl_sites_JM <- get.methyl.sites(overlap_JM_AS_bt2, species = "AS", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mEH_methyl_sites_JM <- get.methyl.sites(overlap_JM_EH_bt2, species = "EH", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mJM_methyl_sites_JM <- get.methyl.sites(overlap_JM_JM_bt2, species = "JM", SMRs = SMR_b_bt2_JM)[m
[32m+[m[32mZF_methyl_sites_JM <- get.methyl.sites(overlap_JM_ZF_bt2, species = "ZF", SMRs = SMR_b_bt2_JM)[m
[32m+[m
[32m+[m[32m# saving methylation sites[m
[32m+[m
[32m+[m[32msave(AC_methyl_sites_JM, file = "/workspace/cfngle/results-data/05_shared_methyl_values/AC_methyl_sites_JM.Rdata")[m
[32m+[m[32msave(AS_methyl_sites_JM, file = "/workspace/cfngle/results-data/05_shared_methyl_values/AS_methyl_sites_JM.Rdata")[m
[32m+[m[32msave(EH_methyl_sites_JM, file = "/workspace/cfngle/results-data/05_shared_methyl_values/EH_methyl_sites_JM.Rdata")[m
[32m+[m[32msave(JM_methyl_sites_JM, file = "/workspace/cfngle/results-data/05_shared_methyl_values/JM_methyl_sites_JM.Rdata")[m
[32m+[m[32msave(ZF_methyl_sites_JM, file = "/workspace/cfngle/results-data/05_shared_methyl_values/ZF_methyl_sites_JM.Rdata")[m
[32m+[m
[32m+[m[32m### load methylation data for samples as well as age vector for each species[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(ZF_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32mtail(colnames(EH_meth_data))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32m# JM_meth_data <- read.csv("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m[32mJM_meth_data <- load("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_243285_CpGs.Rdata")[m
[32m+[m[32mJM_meth_data <- JM_24_methyl_data[m
[32m+[m
[32m+[m[32mJM_age <- JM_meth_data$age[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m[32mtail(colnames(ZF_meth_data))[m
[32m+[m
[32m+[m[32mZF_age <- ZF_meth_data$age[m
[32m+[m
[32m+[m[32m#### extract methylation data for all samples ####[m
[32m+[m[32m# Not all the datasets have the same naming structure, hence the steps are different and are done one by one[m
[32m+[m
[32m+[m[32m# ### FOR AC rgenome[m
[32m+[m[32m# ##AC[m
[32m+[m[32m# meth_sites_names_tmp_AC <- paste0(AC_methyl_sites$Chr, ".", AC_methyl_sites$pos_align) %>%[m[41m [m
[32m+[m[32m#   gsub("AC_", "Chr", .)[m
[32m+[m[32m# AC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32m# AC_table <- table(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m[32m# meth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m#   as.vector()[m
[32m+[m[32m# AC_meth_values <- AC_meth_data[,meth_columns_tmp][m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##AS[m
[32m+[m[32m# meth_sites_names_tmp <- paste0(AS_methyl_sites$Chr, "-", AS_methyl_sites$pos_rgenome)[m
[32m+[m[32m# meth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32m# meth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m#   as.vector()[m
[32m+[m[32m# AS_meth_values <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##EH[m
[32m+[m[32m# meth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites$Chr), ".", EH_methyl_sites$pos_rgenome)[m
[32m+[m[32m# meth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32m# meth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m#   as.vector()[m
[32m+[m[32m# EH_meth_values <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##JM[m
[32m+[m[32m# meth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites$Chr), ":", JM_methyl_sites$pos_rgenome)[m
[32m+[m[32m# meth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32m# meth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m#   as.vector()[m
[32m+[m[32m# JM_meth_values <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##ZF[m
[32m+[m[32m# meth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites$Chr), ":", ZF_methyl_sites$pos_rgenome)[m
[32m+[m[32m# meth_sites_names_tmp %in% colnames(ZF_meth_data)[m
[32m+[m[32m# meth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(ZF_meth_data))) %>%[m[41m [m
[32m+[m[32m#   as.vector()[m
[32m+[m[32m# ZF_meth_values <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ### saving data[m
[32m+[m[32m# save_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##AC[m
[32m+[m[32m# write.csv(AC_meth_values, file = paste0(save_dir, "AC_meth_values_v_2.csv") )[m
[32m+[m[32m# save(AC_meth_values, file = paste0(save_dir, "AC_meth_values_v_2.Rdata"))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##AS[m
[32m+[m[32m# write.csv(AS_meth_values, file = paste0(save_dir, "AS_meth_values_v_2.csv") )[m
[32m+[m[32m# save(AS_meth_values, file = paste0(save_dir, "AS_meth_values_v_2.Rdata"))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##EH[m
[32m+[m[32m# write.csv(EH_meth_values, file = paste0(save_dir, "EH_meth_values_v_2.csv") )[m
[32m+[m[32m# save(EH_meth_values, file = paste0(save_dir, "EH_meth_values_v_2.Rdata"))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##JM[m
[32m+[m[32m# write.csv(JM_meth_values, file = paste0(save_dir, "JM_meth_values_v_2.csv") )[m
[32m+[m[32m# save(JM_meth_values, file = paste0(save_dir, "JM_meth_values_v_2.Rdata"))[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# ##ZF[m
[32m+[m[32m# write.csv(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values_v_2.csv") )[m
[32m+[m[32m# save(ZF_meth_values, file = paste0(save_dir, "ZF_meth_values_v_2.Rdata"))[m
[32m+[m
[32m+[m[32m### FOR JM rgenome[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mmeth_sites_names_tmp_AC <- paste0(AC_methyl_sites_JM$Chr, ".", AC_methyl_sites_JM$pos_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub("AC_", "Chr", .)[m
[32m+[m[32mAC_meth_data_test <- gsub("X", "Chr", colnames(AC_meth_data))[m
[32m+[m[32mtable(meth_sites_names_tmp_AC %in% AC_meth_data_test)[m
[32m+[m[32mAC_selected_CpGs <- meth_sites_names_tmp_AC %in% AC_meth_data_test[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp_AC[meth_sites_names_tmp_AC %in% AC_meth_data_test], function(x) grep(x, AC_meth_data_test)) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAC_meth_values_JM <- AC_meth_data[,meth_columns_tmp][m
[32m+[m
[32m+[m[32msave(AC_selected_CpGs, file = "/workspace/cfngle/results-data/05_shared_methyl_values/AC_selected_CpGs")[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("AS_", "",AS_methyl_sites_JM$Chr), "-", AS_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(AS_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(AS_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mAS_meth_values_JM <- AS_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("EH_", "",EH_methyl_sites_JM$Chr), ".", EH_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(EH_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(EH_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mEH_meth_values_JM <- EH_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("JM_", "",JM_methyl_sites_JM$Chr), ":", JM_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mmeth_sites_names_tmp %in% colnames(JM_meth_data)[m
[32m+[m[32mmeth_columns_tmp <- sapply(meth_sites_names_tmp, function(x) grep(x, colnames(JM_meth_data))) %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m
[32m+[m[32mJM_meth_values_JM <- JM_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mmeth_sites_names_tmp <- paste0(gsub("ZF_", "",ZF_methyl_sites_JM$Chr), ":", ZF_methyl_sites_JM$pos_rgenome)[m
[32m+[m[32mtable(meth_sites_names_tmp %in% colnames(ZF_meth_data))[m
[32m+[m[32mmeth_columns_tmp <- ZF_meth_data[meth_sites_names_tmp] %>% as.vector()[m
[32m+[m[32mmeth_columns_tmp <- unlist(meth_columns_tmp)[m
[32m+[m[32m# ZF_meth_values_JM <- ZF_meth_data[,meth_columns_tmp][m[41m [m
[32m+[m[32mZF_meth_values_JM <- ZF_meth_data[meth_sites_names_tmp][m
[32m+[m
[32m+[m[32m### saving data[m
[32m+[m[32msave_dir <- "/workspace/cfngle/results-data/05_shared_methyl_values/"[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mwrite.csv(AC_meth_values_JM, file = paste0(save_dir, "AC_meth_values_JM.csv") )[m
[32m+[m[32msave(AC_meth_values_JM, file = paste0(save_dir, "AC_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mwrite.csv(AS_meth_values_JM, file = paste0(save_dir, "AS_meth_values_JM.csv") )[m
[32m+[m[32msave(AS_meth_values_JM, file = paste0(save_dir, "AS_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mwrite.csv(EH_meth_values_JM, file = paste0(save_dir, "EH_meth_values_JM.csv") )[m
[32m+[m[32msave(EH_meth_values_JM, file = paste0(save_dir, "EH_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mwrite.csv(JM_meth_values_JM, file = paste0(save_dir, "JM_meth_values_JM.csv") )[m
[32m+[m[32msave(JM_meth_values_JM, file = paste0(save_dir, "JM_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mwrite.csv(ZF_meth_values_JM, file = paste0(save_dir, "ZF_meth_values_JM.csv") )[m
[32m+[m[32msave(ZF_meth_values_JM, file = paste0(save_dir, "ZF_meth_values_JM.Rdata"))[m
[32m+[m
[32m+[m[32m#### PCA tests and stat tests ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mPCA_JM <- prcomp(JM_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_JM <- as.data.frame(PCA_JM$x)[m
[32m+[m[32mPCA_values_JM$species <- "JM"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m
[32m+[m[32m# PCA_values_all <- rbind(PCA_values_AC[,c(1:10, length(PCA_values_AC))],[m
[32m+[m[32m#                         PCA_values_AS[,c(1:10, length(PCA_values_AS))],[m
[32m+[m[32m#                         PCA_values_EH[,c(1:10, length(PCA_values_EH))])[m
[32m+[m[32m# age_all <- c(AC_age/mean(AC_age), AS_age/mean(AS_age), EH_age/mean(EH_age))[m
[32m+[m
[32m+[m[32m#### plotting results ####[m
[32m+[m
[32m+[m[32m# AC_age_tmp <- AC_age[c(-71,-74,-27,-69,-2,-3,-17)][m
[32m+[m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = 1:nrow(AC_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mggplot(PCA_values_AS, aes(x = PC1, y = PC2, color = AS_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = AS_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mggplot(PCA_values_EH, aes(x = PC2, y = PC1, color = EH_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = EH_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mggplot(PCA_values_ZF, aes(x = PC1, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m#### Transforming for plots ####[m
[32m+[m
[32m+[m[32m#run this if JM is rgenome[m[41m [m
[32m+[m[32mAC_meth_values <- AC_meth_values_JM[m
[32m+[m[32mAS_meth_values <- AS_meth_values_JM[m
[32m+[m[32mEH_meth_values <- EH_meth_values_JM[m
[32m+[m[32mJM_meth_values <- JM_meth_values_JM[m
[32m+[m[32mZF_meth_values <- ZF_meth_values_JM[m
[32m+[m
[32m+[m[32mAC_methyl_sites <- AC_methyl_sites_JM[m
[32m+[m[32mAS_methyl_sites <- AS_methyl_sites_JM[m
[32m+[m[32mEH_methyl_sites <- EH_methyl_sites_JM[m
[32m+[m[32mJM_methyl_sites <- JM_methyl_sites_JM[m
[32m+[m[32mZF_methyl_sites <- ZF_methyl_sites_JM[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, each = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, each = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, each = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m[32m# EH_meth_values_long$id <- rep(paste0("EH_", EH_meth_data$id), times = ncol(EH_meth_values))[m
[32m+[m
[32m+[m[32mJM_meth_values_long <- pivot_longer(JM_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mJM_meth_values_long$age <- rep(JM_meth_data$age, each = ncol(JM_meth_values))[m
[32m+[m[32mJM_meth_values_long$SMR <- as.factor(rep(JM_methyl_sites$SMR, times = length(JM_age)))[m
[32m+[m[32mJM_meth_values_long$Site_i <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mJM_meth_values_long$Site_f <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mJM_meth_values_long$species <- "JM"[m
[32m+[m[32m# C_meth_values_long$sample <- rep(paste0("sample_", 1:length(AC_meth_values)),each = ncol(AC_age))[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, each = ncol(ZF_meth_values))[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, JM_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m
[32m+[m[32m##color palettes[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m
[32m+[m[32mggplot(AS_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = colpal[1], high = colpal[7], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values AS")[m
[32m+[m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values AC")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH")[m
[32m+[m
[32m+[m[32mggplot(JM_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, cex = 0.1,  alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "#E69F00", high = "#0072B2", guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values JM")[m
[32m+[m
[32m+[m[32m## all boxplot and sina[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina() +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (ZF), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m[32m## all boxplot[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  # geom_sina(aes(color = species)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (ZF), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m[32m## all sina[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = species)) +[m
[32m+[m[32m  # geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_blank()) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (ZF), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m#### testing correlation tests ####[m
[32m+[m[32m# Initialize a list to store the results[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mcorrelation_results_ZF <- list()[m
[32m+[m
[32m+[m[32m#### function ####[m
[32m+[m
[32m+[m[32mcor.test.age <- function(methyl_values, age, method = "pearson") {[m
[32m+[m[32m  correlation_results <- list()[m
[32m+[m[32m  print(paste0("Running correlation test against age with ", method, " method. Results are stored in tibble."))[m
[32m+[m[32m  # Loop through each methylation site[m
[32m+[m[32m  for (i in 1:ncol(methyl_values)) {[m
[32m+[m[32m    site_name <- colnames(methyl_values)[i][m
[32m+[m[32m    # Perform correlation test with age[m
[32m+[m[32m    test_result <- cor.test(methyl_values[,i], age, method = method) # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m    [m
[32m+[m[32m    # Store the results[m
[32m+[m[32m    correlation_results[[site_name]] <- list([m
[32m+[m[32m      correlation_coefficient = test_result$estimate,[m
[32m+[m[32m      p_value = test_result$p.value[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32m  correlation_summary <- tibble([m
[32m+[m[32m    Site = names(correlation_results),[m
[32m+[m[32m    Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m    P_value = sapply(correlation_results, function(x) x$p_value)[m
[32m+[m[32m  )[m
[32m+[m[32m  return(correlation_summary)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcor.test.age.filter <- function(input, p_value = 0.05) {[m
[32m+[m[32m  input[input$P_value <= p_value,][m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mAC_cor_age_pearson <- cor.test.age(AC_meth_values, AC_meth_data$age)[m
[32m+[m[32mAC_cor_age_filtered_pearson <- cor.test.age.filter(AC_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mAC_cor_age_spearman <- cor.test.age(AC_meth_values, AC_meth_data$age, method = "spearman")[m
[32m+[m[32mAC_cor_age_filtered_spearman <- cor.test.age.filter(AC_cor_age_spearman, 0.05)[m
[32m+[m
[32m+[m[32mAC_cor_age_kendall <- cor.test.age(AC_meth_values, AC_meth_data$age, method = "kendall")[m
[32m+[m[32mAC_cor_age_filtered_kendall <- cor.test.age.filter(AC_cor_age_kendall, 0.05)[m
[32m+[m
[32m+[m[32mAS_cor_age_pearson <- cor.test.age(AS_meth_values, AS_meth_data$age)[m
[32m+[m[32mAS_cor_age_filtered_pearson <- cor.test.age.filter(AS_cor_age, 0.05)[m
[32m+[m
[32m+[m[32mEH_cor_age_pearson <- cor.test.age(EH_meth_values, EH_meth_data$age)[m
[32m+[m[32mEH_cor_age_filtered_pearson <- cor.test.age.filter(EH_cor_age, 0.05)[m
[32m+[m
[32m+[m[32mJM_cor_age_pearson <- cor.test.age(JM_meth_values, JM_meth_data$age)[m
[32m+[m[32mJM_cor_age_filtered_pearson <- cor.test.age.filter(JM_cor_age, 0.05)[m
[32m+[m
[32m+[m[32mZF_cor_age_pearson <- cor.test.age(ZF_meth_values, ZF_meth_data$age)[m
[32m+[m[32mZF_cor_age_filtered_pearson <- cor.test.age.filter(ZF_cor_age, 0.05)[m
[32m+[m
[32m+[m
[1mdiff --git a/04b_plotting_shared_methyl_regions_v-1.0.R b/04b_plotting_shared_methyl_regions_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..0fe49bc[m
[1m--- /dev/null[m
[1m+++ b/04b_plotting_shared_methyl_regions_v-1.0.R[m
[36m@@ -0,0 +1,230 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m
[32m+[m[32m# plotting methylation values[m[41m [m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(tidyverse)[m
[32m+[m[32mlibrary(ggforce)[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/AC_meth_values_v_2.Rdata")[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/AS_meth_values_v_2.Rdata")[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/EH_meth_values_v_2.Rdata")[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/JM_meth_values_v_2.Rdata")[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/ZF_meth_values_v_2.Rdata")[m
[32m+[m
[32m+[m
[32m+[m[32m#### PCA tests and stat tests ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mPCA_AC <- prcomp(AC_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AC <- as.data.frame(PCA_AC$x)[m
[32m+[m[32mPCA_values_AC$species <- "AC"[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mPCA_AS <- prcomp(AS_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_AS <- as.data.frame(PCA_AS$x)[m
[32m+[m[32mPCA_values_AS$species <- "AS"[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mPCA_EH <- prcomp(EH_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_EH <- as.data.frame(PCA_EH$x)[m
[32m+[m[32mPCA_values_EH$species <- "EH"[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mPCA_JM <- prcomp(JM_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_JM <- as.data.frame(PCA_JM$x)[m
[32m+[m[32mPCA_values_JM$species <- "JM"[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mPCA_ZF <- prcomp(ZF_meth_values,scale = TRUE)[m
[32m+[m[32mPCA_values_ZF <- as.data.frame(PCA_ZF$x)[m
[32m+[m[32mPCA_values_ZF$species <- "ZF"[m
[32m+[m
[32m+[m[32m#### plotting results ####[m
[32m+[m
[32m+[m[32m## color palettes[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mggplot(PCA_values_AC, aes(x = PC1, y = PC2, color = AC_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = 1:nrow(AC_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mggplot(PCA_values_AS, aes(x = PC3, y = PC2, color = AS_age, shape = species)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  facet_wrap(~species) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = AS_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mggplot(PCA_values_EH, aes(x = PC2, y = PC1, color = EH_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = EH_meth_data$id), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mggplot(PCA_values_ZF, aes(x = PC1, y = PC2, color = ZF_age)) +[m
[32m+[m[32m  geom_point(aes(cex = 7)) +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6]) +[m
[32m+[m[32m  geom_text(aes(label = rownames(ZF_meth_data)), nudge_x = 0.2, nudge_y = 0) +[m
[32m+[m[32m  theme_classic()[m
[32m+[m
[32m+[m[32m#### Transforming for plots ####[m
[32m+[m
[32m+[m[32mAS_meth_values_long <- pivot_longer(AS_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAS_meth_values_long$age <- rep(AS_age, times = ncol(AS_meth_values))[m
[32m+[m[32mAS_meth_values_long$SMR <- as.factor(rep(AS_methyl_sites$SMR, times = length(AS_age)))[m
[32m+[m[32mAS_meth_values_long$Site_i <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAS_meth_values_long$Site_f <- gsub(".*-", "", AS_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAS_meth_values_long$pos_rgenome <- rep(AS_methyl_sites$pos_rgenome, times = length(AS_age))[m
[32m+[m[32mAS_meth_values_long$species <- "AS"[m
[32m+[m
[32m+[m[32mAC_meth_values_long <- pivot_longer(AC_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mAC_meth_values_long$age <- rep(AC_age, times = ncol(AC_meth_values))[m
[32m+[m[32mAC_meth_values_long$SMR <- as.factor(rep(AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test], times = length(AC_age))) # indexing is necessary because not all CpGs were able to be extracted from the shared sites due o batch correction[m
[32m+[m[32mAC_meth_values_long$Site_i <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mAC_meth_values_long$Site_f <- gsub(".*\\.", "", AC_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mAC_meth_values_long$pos_rgenome <- rep(AC_methyl_sites$pos_rgenome[meth_sites_names_tmp_AC %in% AC_meth_data_test], times = length(AC_age))[m
[32m+[m[32mAC_meth_values_long$species <- "AC"[m
[32m+[m
[32m+[m[32mEH_meth_values_long <- pivot_longer(EH_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mEH_meth_values_long$age <- rep(EH_meth_data$age, times = ncol(EH_meth_values))[m
[32m+[m[32mEH_meth_values_long$SMR <- as.factor(rep(EH_methyl_sites$SMR, times = length(EH_age)))[m
[32m+[m[32mEH_meth_values_long$Site_i <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mEH_meth_values_long$Site_f <- gsub(".*\\.", "", EH_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mEH_meth_values_long$pos_rgenome <- rep(EH_methyl_sites$pos_rgenome, times = length(EH_age))[m
[32m+[m[32mEH_meth_values_long$species <- "EH"[m
[32m+[m[32m# EH_meth_values_long$id <- rep(paste0("EH_", EH_meth_data$id), times = ncol(EH_meth_values))[m
[32m+[m
[32m+[m[32mJM_meth_values_long <- pivot_longer(JM_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mJM_meth_values_long$age <- rep(JM_meth_data$age, times = ncol(JM_meth_values))[m
[32m+[m[32mJM_meth_values_long$SMR <- as.factor(rep(JM_methyl_sites$SMR, times = length(JM_age)))[m
[32m+[m[32mJM_meth_values_long$Site_i <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mJM_meth_values_long$Site_f <- gsub(".*\\:", "", JM_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mJM_meth_values_long$pos_rgenome <- rep(JM_methyl_sites$pos_rgenome, times = length(JM_age))[m
[32m+[m[32mJM_meth_values_long$species <- "JM"[m
[32m+[m[32m# C_meth_values_long$sample <- rep(paste0("sample_", 1:length(AC_meth_values)),each = ncol(AC_age))[m
[32m+[m
[32m+[m[32mZF_meth_values_long <- pivot_longer(ZF_meth_values, cols = everything(), names_to = "Site", values_to = "Methylation_Value")[m
[32m+[m[32mZF_meth_values_long$age <- rep(ZF_meth_data$age, times = ncol(ZF_meth_values))[m
[32m+[m[32mZF_meth_values_long$SMR <- as.factor(rep(ZF_methyl_sites$SMR, times = length(ZF_age)))[m
[32m+[m[32mZF_meth_values_long$Site_i <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.integer()[m
[32m+[m[32mZF_meth_values_long$Site_f <- gsub(".*\\:", "", ZF_meth_values_long$Site) %>% as.factor()[m
[32m+[m[32mZF_meth_values_long$pos_rgenome <- rep(ZF_methyl_sites$pos_rgenome, times = length(ZF_age))[m
[32m+[m[32mZF_meth_values_long$species <- "ZF"[m
[32m+[m
[32m+[m[32mall_meth_values_long <- rbind(AC_meth_values_long, AS_meth_values_long, EH_meth_values_long, JM_meth_values_long, ZF_meth_values_long)[m
[32m+[m
[32m+[m[32mAC_meth_positions <- data.frame(species = "AC",[m
[32m+[m[32m                                SMR = AC_methyl_sites$SMR[meth_sites_names_tmp_AC %in% AC_meth_data_test],[m
[32m+[m[32m                                position = AC_methyl_sites$pos_align[meth_sites_names_tmp_AC %in% AC_meth_data_test])[m
[32m+[m
[32m+[m[32mAS_meth_positions <- data.frame(species = "AS",[m
[32m+[m[32m                                SMR = AS_methyl_sites$SMR,[m
[32m+[m[32m                                position = AS_methyl_sites$pos_align)[m
[32m+[m
[32m+[m[32mEH_meth_positions <- data.frame(species = "EH",[m
[32m+[m[32m                                SMR = EH_methyl_sites$SMR,[m
[32m+[m[32m                                position = EH_methyl_sites$pos_align)[m
[32m+[m
[32m+[m[32mJM_meth_positions <- data.frame(species = "JM",[m
[32m+[m[32m                                SMR = JM_methyl_sites$SMR,[m
[32m+[m[32m                                position = JM_methyl_sites$pos_align)[m
[32m+[m
[32m+[m[32mZF_meth_positions <- data.frame(species = "ZF",[m
[32m+[m[32m                                SMR = ZF_methyl_sites$SMR,[m
[32m+[m[32m                                position = ZF_methyl_sites$pos_align)[m
[32m+[m
[32m+[m
[32m+[m[32mall_meth_positions <- rbind(AC_meth_positions, AS_meth_positions, EH_meth_positions, JM_meth_positions, ZF_meth_positions)[m
[32m+[m
[32m+[m[32m## plotting methyl values[m
[32m+[m
[32m+[m[32mggplot(ZF_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = colpal[1], high = colpal[7], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values AS")[m
[32m+[m[41m  [m
[32m+[m[32mggplot(AC_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, cex = 0.5, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values AC")[m
[32m+[m
[32m+[m[32mggplot(EH_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = cbbPalette[2], high = cbbPalette[6], guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values EH")[m
[32m+[m
[32m+[m[32mggplot(JM_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(color = age, cex = 0.1,  alpha = 0.7)) +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, alpha = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_gradient(low = "#E69F00", high = "#0072B2", guide = "legend") +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values JM")[m
[32m+[m
[32m+[m[32m## all[m
[32m+[m
[32m+[m[32mggplot(all_meth_values_long, aes(x = Site, y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina() +[m
[32m+[m[32m  geom_boxplot(aes(group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (AS), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m[32m# with rgenome position[m
[32m+[m[32mggplot(all_meth_values_long, aes(y = Methylation_Value)) +[m
[32m+[m[32m  geom_sina(aes(x = Site, color = species)) +[m
[32m+[m[32m  # geom_boxplot(aes(x = Site, group = Site_f, fill = species), alpha = 0.9) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_fill_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +[m
[32m+[m[32m  labs(title = "Methylation values Cod (AC), Snapper (AS), Hake (EH), Medaka (JM), Zebrafish (ZF)")[m
[32m+[m
[32m+[m[32m## testing[m
[32m+[m
[32m+[m[32mggplot(all_meth_positions) +[m
[32m+[m[32m  geom_point(aes(x = position, y = species, color = species, cex = 0.5)) +[m
[32m+[m[32m  facet_wrap(~SMR, scale = "free_x") +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Methylation positions Cod (AC), Snapper (AS), Hake (EH), Medaka (JM), Zebrafish (ZF)") +[m
[32m+[m[32m  xlab("CpG position on rgenome")[m
[32m+[m
[1mdiff --git a/04c_correlation_testing_v-1.0.R b/04c_correlation_testing_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..a233330[m
[1m--- /dev/null[m
[1m+++ b/04c_correlation_testing_v-1.0.R[m
[36m@@ -0,0 +1,157 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m
[32m+[m[32m## correlation test between the selected CpGs and to age as well[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(tibble)[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m
[32m+[m[32m#### loading data[m
[32m+[m
[32m+[m[32m## methyl values[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/AC_meth_values_JM.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/AS_meth_values_JM.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/EH_meth_values_JM.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/JM_meth_values_JM.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/ZF_meth_values_JM.Rdata")[m
[32m+[m
[32m+[m[32m## methyl sites[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/AC_methyl_sites_JM.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/AC_selected_CpGs")[m
[32m+[m[32mAC_methyl_sites_JM <- AC_methyl_sites_JM[AC_selected_CpGs,][m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/AS_methyl_sites_JM.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/EH_methyl_sites_JM.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/JM_methyl_sites_JM.Rdata")[m
[32m+[m[32mload("/workspace/cfngle/results-data/05_shared_methyl_values/ZF_methyl_sites_JM.Rdata")[m
[32m+[m
[32m+[m[32m### methyl values for all samples including age[m
[32m+[m[32m## AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m[32mEH_metadata_samples <- read.csv("/workspace/cfngle/raw-data/EH/zzz-methyl_data/hake-samples.txt", sep = "\t")[m
[32m+[m[32mEH_sex <- EH_metadata_samples$sex[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32mJM_meth_data <- load("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_243285_CpGs.Rdata")[m
[32m+[m[32mJM_meth_data <- JM_24_methyl_data[m
[32m+[m[32mJM_age <- JM_meth_data$age[m
[32m+[m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meth_data <- load("/workspace/cfngle/raw-data/ZF/zzz_methyldata/ZF_methyldata_88.RData")[m
[32m+[m[32mZF_meth_data <- ZF_methyl_data[m
[32m+[m[32mZF_age <- ZF_meth_data$age[m
[32m+[m
[32m+[m
[32m+[m[32m#### functions ####[m
[32m+[m
[32m+[m[32mcor.test.age <- function(methyl_values, age, SMR = "not_defined", species = "undefined", method = "pearson") {[m
[32m+[m[32m  correlation_results <- list()[m
[32m+[m[32m  print(paste0("Running correlation test against age with ", method, " method. Results are stored in tibble."))[m
[32m+[m[32m  # Loop through each methylation site[m
[32m+[m[32m  for (i in 1:ncol(methyl_values)) {[m
[32m+[m[32m    site_name <- colnames(methyl_values)[i][m
[32m+[m[32m    # Perform correlation test with age[m
[32m+[m[32m    test_result <- cor.test(methyl_values[,i], age, method = method) # Use "spearman" or "kendall" if more appropriate[m
[32m+[m[41m    [m
[32m+[m[32m    # Store the results[m
[32m+[m[32m    correlation_results[[site_name]] <- list([m
[32m+[m[32m      correlation_coefficient = test_result$estimate,[m
[32m+[m[32m      p_value = test_result$p.value[m
[32m+[m[32m    )[m
[32m+[m[32m  }[m
[32m+[m[41m  [m
[32m+[m[32m  # Optionally, convert the results list to a more convenient format like a dataframe[m
[32m+[m[32m  correlation_summary <- tibble([m
[32m+[m[32m    Site = names(correlation_results),[m
[32m+[m[32m    Correlation = sapply(correlation_results, function(x) x$correlation_coefficient),[m
[32m+[m[32m    P_value = sapply(correlation_results, function(x) x$p_value),[m
[32m+[m[32m    SMR = SMR,[m
[32m+[m[32m    species = species[m
[32m+[m[32m  )[m
[32m+[m[32m  return(correlation_summary)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mcor.test.age.filter <- function(input, p_value = 0.05) {[m
[32m+[m[32m  significant_vector <- as.vector(ifelse(input$P_value <= p_value, TRUE, FALSE))[m
[32m+[m[32m  input$significant <- significant_vector[m
[32m+[m[32m  return(input)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m#### Correlation tests ####[m
[32m+[m
[32m+[m[32mAC_cor_age_pearson <- cor.test.age(AC_meth_values_JM, AC_age, AC_methyl_sites_JM$SMR, species = "AC")[m
[32m+[m[32mAC_cor_age_filtered_pearson <- cor.test.age.filter(AC_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32m# AC_cor_age_spearman <- cor.test.age(AC_meth_values_JM, AC_meth_data$age, method = "spearman")[m
[32m+[m[32m# AC_cor_age_filtered_spearman <- cor.test.age.filter(AC_cor_age_spearman, 0.05)[m
[32m+[m[32m#[m[41m [m
[32m+[m[32m# AC_cor_age_kendall <- cor.test.age(AC_meth_values_JM, AC_meth_data$age, method = "kendall")[m
[32m+[m[32m# AC_cor_age_filtered_kendall <- cor.test.age.filter(AC_cor_age_kendall, 0.05)[m
[32m+[m
[32m+[m[32mAS_cor_age_pearson <- cor.test.age(AS_meth_values_JM, AS_age, AS_methyl_sites_JM$SMR, species = "AS")[m
[32m+[m[32mAS_cor_age_filtered_pearson <- cor.test.age.filter(AS_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mEH_cor_age_pearson <- cor.test.age(EH_meth_values_JM, EH_age, EH_methyl_sites_JM$SMR, species = "EH")[m
[32m+[m[32mEH_cor_age_filtered_pearson <- cor.test.age.filter(EH_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mJM_cor_age_pearson <- cor.test.age(JM_meth_values_JM, JM_age, JM_methyl_sites_JM$SMR, species = "JM")[m
[32m+[m[32mJM_cor_age_filtered_pearson <- cor.test.age.filter(JM_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mZF_cor_age_pearson <- cor.test.age(ZF_meth_values_JM, ZF_age, ZF_methyl_sites_JM$SMR, species = "ZF")[m
[32m+[m[32mZF_cor_age_filtered_pearson <- cor.test.age.filter(ZF_cor_age_pearson, 0.05)[m
[32m+[m
[32m+[m[32mcor_all <- rbind(AC_cor_age_filtered_pearson,[m
[32m+[m[32m                 AS_cor_age_filtered_pearson,[m
[32m+[m[32m                 EH_cor_age_filtered_pearson,[m[41m [m
[32m+[m[32m                 JM_cor_age_filtered_pearson,[m
[32m+[m[32m                 ZF_cor_age_filtered_pearson)[m
[32m+[m
[32m+[m[32m## selecting CpGs[m
[32m+[m
[32m+[m[32mncol(AC_meth_values_JM[AC_cor_age_filtered_pearson$significant])[m
[32m+[m[32mncol(AS_meth_values_JM[AS_cor_age_filtered_pearson$significant])[m
[32m+[m[32mncol(EH_meth_values_JM[EH_cor_age_filtered_pearson$significant])[m
[32m+[m[32mncol(JM_meth_values_JM[JM_cor_age_filtered_pearson$significant])[m
[32m+[m[32mncol(ZF_meth_values_JM[ZF_cor_age_filtered_pearson$significant])[m
[32m+[m
[32m+[m
[32m+[m[32m#### plotting ####[m
[32m+[m[32mcolpalOI <- palette.colors(palette = "Okabe-Ito") %>%[m[41m [m
[32m+[m[32m  as.vector()[m
[32m+[m[32mcolpal <- hcl.colors(7, "SunsetDark")[m[41m [m
[32m+[m[32mcbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[m
[32m+[m
[32m+[m[32m## all[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species, alpha = significant)) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  # facet_row(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32mggplot(cor_all, aes()) +[m
[32m+[m[32m  geom_point(aes(x = Site, y = Correlation, color = species, alpha = significant)) +[m
[32m+[m[32m  # geom_line(aes(x = c(-1,1), y = log2(0.05), color = "#CC79A7")) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  facet_wrap(~SMR) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[32m+[m
[32m+[m[32m## only significant[m
[32m+[m[32mggplot(subset(cor_all, significant == TRUE), aes()) +[m
[32m+[m[32m  geom_point(aes(y = Correlation, x = Site, color = species)) +[m
[32m+[m[32m  facet_wrap(~SMR) +[m
[32m+[m[32m  scale_color_manual(values = colpalOI[c(-1,-9)]) +[m
[32m+[m[32m  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())[m
[1mdiff --git a/99_age_data_overview_v-1.0.R b/99_age_data_overview_v-1.0.R[m
[1mnew file mode 100644[m
[1mindex 0000000..f220ae0[m
[1m--- /dev/null[m
[1m+++ b/99_age_data_overview_v-1.0.R[m
[36m@@ -0,0 +1,137 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# retrieving age data on all samples for all species[m[41m [m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mlibrary(ggforce)[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m
[32m+[m[32m#### Retrieving data ####[m
[32m+[m
[32m+[m[32m##AC[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/meth-corrected-batchcorrected-cod.Rdata")[m
[32m+[m[32m# xx <- load("/workspace/cfngle/raw-data/AC/zzz_methyl_data/Meth-complete-nobatchcorrection-cod.RData")[m
[32m+[m[32massign("AC_meth_data", get(xx))[m
[32m+[m[32mAC_meth_data <- as.data.frame(AC_meth_data)[m
[32m+[m[32mAC_meta_data <- read.csv("/workspace/cfngle/raw-data/AC/zzz_methyl_data/cod-samples.txt", sep = "\t")[m
[32m+[m
[32m+[m[32m# tail(colnames(AC_meth_data))[m
[32m+[m[32mAC_age <- AC_meth_data$age[m
[32m+[m[32mAC_sample_names <- rownames(AC_meth_data)[m[41m [m
[32m+[m[32mAC_names <- sprintf("AC_%03d", 1:length(AC_sample_names))[m
[32m+[m[32mAC_max_age <- 25[m[41m [m
[32m+[m
[32m+[m[32mAC_sample_sex <- AC_meta_data$sex %>%[m[41m [m
[32m+[m[32m  gsub("M", "Male", .) %>%[m
[32m+[m[32m  gsub("F", "Female", .)[m[41m [m
[32m+[m
[32m+[m[32mAC_sample_sex[is.na(AC_sample_sex)] <- "unknown"[m
[32m+[m
[32m+[m[32mAC_df <- data.frame(sample_name = AC_sample_names,[m
[32m+[m[32m                    name = AC_names,[m
[32m+[m[32m                    age = AC_age,[m
[32m+[m[32m                    sex = AC_sample_sex,[m
[32m+[m[32m                    max_age = AC_max_age,[m
[32m+[m[32m                    rel_age = AC_age / AC_max_age,[m[41m [m
[32m+[m[32m                    species = "AC",[m
[32m+[m[32m                    scientific_name = "Gadus morhua")[m
[32m+[m
[32m+[m[32m##AS[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/AS/zzz_methyl_data/Meth-complete-snapper.RData")[m
[32m+[m[32massign("AS_meth_data", get(xx))[m
[32m+[m[32m# tail(colnames(AS_meth_data))[m
[32m+[m[32mAS_age <- AS_meth_data$age[m
[32m+[m[32mAS_sample_names <- rownames(AS_meth_data)[m
[32m+[m[32mAS_names <- sprintf("AS_%03d", 1:length(AS_sample_names))[m
[32m+[m[32mAS_max_age <- 54[m[41m [m
[32m+[m[32mAS_sample_sex <- "unknown"[m
[32m+[m
[32m+[m[32mAS_df <- data.frame(sample_name = AS_sample_names,[m
[32m+[m[32m                    name = AS_names,[m
[32m+[m[32m                    age = AS_age,[m
[32m+[m[32m                    sex = AS_sample_sex,[m
[32m+[m[32m                    max_age = AS_max_age,[m
[32m+[m[32m                    rel_age = AS_age / AS_max_age,[m[41m [m
[32m+[m[32m                    species = "AS",[m
[32m+[m[32m                    scientific_name = "Chrysophrys auratus")[m
[32m+[m
[32m+[m[32m##EH[m
[32m+[m[32mxx <- load("/workspace/cfngle/raw-data/EH/zzz-methyl_data/Meth-complete-hake.RData")[m
[32m+[m[32massign("EH_meth_data", get(xx))[m
[32m+[m[32mtail(colnames(EH_meth_data))[m
[32m+[m
[32m+[m[32mEH_meta_data <- read.csv("/workspace/cfngle/raw-data/EH/zzz-methyl_data/hake-samples.txt", sep = "\t")[m
[32m+[m
[32m+[m[32mEH_age <- EH_meth_data$age[m
[32m+[m[32mEH_sample_names <- rownames(EH_meth_data)[m
[32m+[m[32mEH_names <- sprintf("EH_%03d", 1:length(EH_sample_names))[m
[32m+[m[32mEH_max_age <- 20[m[41m [m
[32m+[m[32mEH_sample_sex <- EH_meta_data$sex %>%[m[41m [m
[32m+[m[32m  gsub("M", "Male", .) %>%[m
[32m+[m[32m  gsub("F", "Female", .)[m
[32m+[m[41m  [m
[32m+[m[32mEH_df <- data.frame(sample_name = EH_sample_names,[m
[32m+[m[32m                    name = EH_names,[m
[32m+[m[32m                    age = EH_age,[m
[32m+[m[32m                    sex = EH_sample_sex,[m
[32m+[m[32m                    max_age = EH_max_age,[m
[32m+[m[32m                    rel_age = EH_age / EH_max_age,[m[41m [m
[32m+[m[32m                    species = "EH",[m
[32m+[m[32m                    scientific_name = "Merluccius merluccius")[m
[32m+[m
[32m+[m[32m##JM[m
[32m+[m[32m# JM_meth_data <- read.csv("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_66079_CpGs.csv")[m
[32m+[m[32mJM_meth_data <- load("/workspace/cfngle/raw-data/JM/zzz-methyldata/00_JM_methyldata_179818_CpGs.Rdata")[m
[32m+[m[32mJM_meth_data <- JM_24_methyl_data[m
[32m+[m
[32m+[m[32mJM_age <- JM_meth_data$age / 365[m
[32m+[m[32mJM_sample_names <- rownames(JM_meth_data)[m
[32m+[m[32mJM_names <- sprintf("JM_%03d", 1:length(JM_sample_names))[m
[32m+[m[32mJM_max_age <- 5[m[41m [m
[32m+[m[32mJM_sample_sex <- "Male"[m
[32m+[m[32mJM_df <- data.frame(sample_name = JM_sample_names,[m
[32m+[m[32m                    name = JM_sample_names,[m
[32m+[m[32m                    age = JM_age,[m
[32m+[m[32m                    sex = JM_sample_sex,[m
[32m+[m[32m                    max_age = JM_max_age,[m
[32m+[m[32m                    rel_age = JM_age / JM_max_age,[m[41m [m
[32m+[m[32m                    species = "JM",[m
[32m+[m[32m                    scientific_name = "Oryzias latipes")[m
[32m+[m[41m  [m
[32m+[m[32m##ZF[m
[32m+[m[32mZF_meta_data <- read.csv("/workspace/cfngle/raw-data/ZF/metadata/ZF_metadata.csv")[m
[32m+[m[32mZF_age <- ZF_meta_data$Age_Weeks / 52[m
[32m+[m[32mZF_sample_names <- ZF_meta_data$name_new[m
[32m+[m[32mZF_max_age <- 5.5[m
[32m+[m[32mZF_sample_sex <- ZF_meta_data$Sex[m
[32m+[m
[32m+[m[32mZF_df <- data.frame(sample_name = ZF_sample_names,[m
[32m+[m[32m                    name = ZF_sample_names,[m
[32m+[m[32m                    age = ZF_age,[m
[32m+[m[32m                    sex = ZF_sample_sex,[m
[32m+[m[32m                    max_age = ZF_max_age,[m
[32m+[m[32m                    rel_age = ZF_age / ZF_max_age,[m[41m [m
[32m+[m[32m                    species = "ZF",[m
[32m+[m[32m                    scientific_name = "Danio rerio")[m
[32m+[m
[32m+[m[32m#### Data manipulation ####[m
[32m+[m
[32m+[m[32mdf_all <- rbind(AC_df, AS_df, EH_df, JM_df, ZF_df)[m
[32m+[m
[32m+[m
[32m+[m[32m#### Plotting ####[m
[32m+[m
[32m+[m[32mggplot(df_all, aes(y = rel_age, color = species)) +[m
[32m+[m[32m  # geom_point(aes(cex = 4, y = rel_age, x = 0.5)) +[m
[32m+[m[32m  geom_sina(aes(x = species, cex = 1, shape = sex, alpha = 0.5)) +[m
[32m+[m[32m  geom_boxplot(aes(x = species), fill = NA) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Relative age distribution of Cod (AC), Snapper (AS), Hake (EH), Medaka (JM)", x = "Species", y = "Relative age")[m
[32m+[m
[32m+[m[32mggplot(df_all) +[m
[32m+[m[32m  # geom_point(aes(cex = 4, y = rel_age, x = 0.5)) +[m
[32m+[m[32m  geom_sina(aes(x = species, y = rel_age, cex = 1, shape = sex, alpha = 0.5, color = species)) +[m
[32m+[m[32m  # geom_histogram(aes(x = rel_age), position = "dodge") +[m
[32m+[m[32m  # geom_density(aes(x = rel_age, alpha = 0.3)) +[m
[32m+[m[32m  theme_classic() +[m
[32m+[m[32m  labs(title = "Relative age distribution of Cod (AC), Snapper (AS), Hake (EH), Medaka (JM)", x = "Species", y = "Relative age")[m
[1mdiff --git a/EH_AC_alignment.R b/EH_AC_alignment.R[m
[1mnew file mode 100644[m
[1mindex 0000000..e16ef08[m
[1m--- /dev/null[m
[1m+++ b/EH_AC_alignment.R[m
[36m@@ -0,0 +1,81 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Comparing methylated sites for two species[m[41m [m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome)[m
[32m+[m[32mEH_rgenome_nvec <- gsub("fMerMel2.1_cnag1_", "", EH_rgenome_nvec)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome)[m
[32m+[m[32mAC_rgenome_nvec <- gsub(", gadMor3.0, whole genome shotgun sequence", "", AC_rgenome_nvec)[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua unplaced genomic scaffold", "", AC_rgenome_nvec)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m# EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mEH <- resize(EH,200)[m[41m [m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(EH)[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mAC <- resize(AC,200)[m[41m [m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(AC)[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mwriteXStringSet(EH_seq, file = "results-data/EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mwriteXStringSet(AC_seq, file = "results-data/AC_CpG_200bp.fasta")[m
[32m+[m
[32m+[m
[32m+[m[32m#### Visualization ####[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32m#print(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m[32mprint(autoplot(zz))[m
[32m+[m[41m      [m
\ No newline at end of file[m
[1mdiff --git a/EH_AC_alignment_v-1.1.R b/EH_AC_alignment_v-1.1.R[m
[1mnew file mode 100644[m
[1mindex 0000000..244842a[m
[1m--- /dev/null[m
[1m+++ b/EH_AC_alignment_v-1.1.R[m
[36m@@ -0,0 +1,88 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Comparing methylated sites for two species[m[41m [m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m
[32m+[m[32m# loading data for European hake (EH) and Atlantic cod (AC) and setting wd[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# EH[m
[32m+[m[32mEH_raw <- read.table("/powerplant/workspace/cfngle/raw-data/EH/BisRAD-CpGs-Hake.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mEH_rgenome <- readDNAStringSet("raw-data/EH/fMerMel2.1_cnag1.scaffolds.fa")[m
[32m+[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mEH_rgenome_nvec <- names(EH_rgenome) %>%[m
[32m+[m[32m  gsub("fMerMel2.1_cnag1_", "", .)[m
[32m+[m[32mnames(EH_rgenome) <- EH_rgenome_nvec[m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mAC_raw <- read.table("/powerplant/workspace/cfngle/raw-data/AC/BisRAD-CpGs-Cod.txt", sep = "\t", header = TRUE)[m
[32m+[m[32mAC_rgenome <- readDNAStringSet("raw-data/AC/GCF_902167405.1_gadMor3.0_genomic.fasta")[m
[32m+[m[32m# renaming the rgenome[m
[32m+[m[32mAC_rgenome_nvec <- names(AC_rgenome) %>%[m[41m [m
[32m+[m[32m  gsub(", gadMor3.0, whole genome shotgun sequence", "", .) %>%[m[41m [m
[32m+[m[32m  gsub(" Gadus morhua unplaced genomic scaffold", "", .)[m
[32m+[m[32mAC_rgenome_nvec[1:23] <- gsub("^.{36}", "", AC_rgenome_nvec[1:23])[m
[32m+[m[32mAC_rgenome_nvec <- gsub(" Gadus morhua mitochondrion, complete genome", "", AC_rgenome_nvec)[m
[32m+[m[32mnames(AC_rgenome) <- AC_rgenome_nvec[m
[32m+[m
[32m+[m[32m#### Manipulation Genomic Ranges ####[m
[32m+[m
[32m+[m[32m# EH[m
[32m+[m[32m# load data as GRanges class[m
[32m+[m[32mEH <- GRanges([m
[32m+[m[32m  seqnames = Rle(EH_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = EH_raw$start), end = c(EH_raw$end), names = 1:length(EH_raw$chr)),[m
[32m+[m[32m  strand = Rle(EH_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mEH <- resize(EH,200)[m[41m [m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences. "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(EH)[m
[32m+[m[32mEH <- reduce(EH)[m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mAC <- GRanges([m
[32m+[m[32m  seqnames = Rle(AC_raw$chr),[m
[32m+[m[32m  ranges = IRanges(c(start = AC_raw$start), end = c(AC_raw$end), names = 1:length(AC_raw$chr)),[m
[32m+[m[32m  strand = Rle(AC_raw$strand))[m
[32m+[m
[32m+[m[32m# to include the neighboring bp, "resize" can be used. to get the flanking bp, use "flank"[m
[32m+[m[32mAC <- resize(AC,200)[m[41m [m
[32m+[m
[32m+[m[32m# "reduce" can be used to get merge overlapping sequences "coverage" can be used to identify how much bp are overlapping[m
[32m+[m[32mcoverage(AC)[m
[32m+[m[32mAC <- reduce(AC)[m
[32m+[m
[32m+[m[32m#### Extraction ####[m
[32m+[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mEH_seq <- getSeq(EH_rgenome, EH)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(EH_seq) <- paste0("EH_", as.character(seqnames(EH)), "_", start(EH),":", end(EH))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mwriteXStringSet(EH_seq, file = "results-data/EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32m# extracting sequences using chromosome location and rgenome with the "Biostrings" package[m
[32m+[m[32mAC_seq <- getSeq(AC_rgenome, AC)[m
[32m+[m
[32m+[m[32m#adding names to the sequences[m
[32m+[m[32mnames(AC_seq) <- paste0("AC_", as.character(seqnames(AC)), "_", start(AC),":", end(AC))[m
[32m+[m
[32m+[m[32m# saving file[m
[32m+[m[32mwriteXStringSet(AC_seq, file = "results-data/AC_CpG_200bp.fasta")[m
[32m+[m
[32m+[m
[32m+[m[32m#### Visualization ####[m
[32m+[m[32m#print(autoplot(subset(EH, seqnames(EH) == "Chr1")))[m
[32m+[m[32mprint(autoplot(EH[EH@strand == "+"&EH@seqnames == "Chr1"]))[m
[32m+[m
[32m+[m[41m      [m
\ No newline at end of file[m
[1mdiff --git a/MAFFT_01.sl b/MAFFT_01.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..54f453b[m
[1m--- /dev/null[m
[1m+++ b/MAFFT_01.sl[m
[36m@@ -0,0 +1,30 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_8[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 40                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m#### MAFFT ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load mafft[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/mafft/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mmafft_args="--auto --thread -1"[m
[32m+[m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_100bp.fasta > ${path_results}AC_AS_EH_CpG_100bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_200bp.fasta > ${path_results}AC_AS_EH_CpG_200bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_500bp.fasta > ${path_results}AC_AS_EH_CpG_500bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_1000bp.fasta > ${path_results}AC_AS_EH_CpG_1000bp.fasta[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/MAFFT_02.sl b/MAFFT_02.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..560804e[m
[1m--- /dev/null[m
[1m+++ b/MAFFT_02.sl[m
[36m@@ -0,0 +1,30 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_8[m
[32m+[m[32m#SBATCH --time=15:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 40                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m#### MAFFT ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load mafft[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/mafft/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mmafft_args="--auto --thread -1"[m
[32m+[m
[32m+[m[32m#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_100bp.fasta > ${path_results}AC_AS_EH_CpG_100bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_200bp.fasta > ${path_results}AC_AS_EH_CpG_200bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_500bp.fasta > ${path_results}AC_AS_EH_CpG_500bp.fasta[m[41m [m
[32m+[m[32mmafft $mafft_args ${path_sequences}AC_AS_EH_CpG_1000bp.fasta > ${path_results}AC_AS_EH_CpG_1000bp.fasta[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/MAFFT_03_test_conserved.sl b/MAFFT_03_test_conserved.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..59c9a4f[m
[1m--- /dev/null[m
[1m+++ b/MAFFT_03_test_conserved.sl[m
[36m@@ -0,0 +1,31 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J MAFFT_03[m
[32m+[m[32m#SBATCH --time=01:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 40                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/mafft/job_output_mafft%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m#### MAFFT ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load mafft[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mmafft_args="--auto --thread -1"[m
[32m+[m
[32m+[m[32mmafft $mafft_args ${path_results}02_conserved_seq/AC_AS_EH_1000_conserved.fasta > ${path_results}02_conserved_seq/AC_AS_EH_1000_conserved_MSA_mafft.fasta[m
[32m+[m[32m#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_100bp.fasta > ${path_results}AC_AS_EH_CpG_100bp.fasta[m[41m [m
[32m+[m[32m#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_200bp.fasta > ${path_results}AC_AS_EH_CpG_200bp.fasta[m[41m [m
[32m+[m[32m#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_500bp.fasta > ${path_results}AC_AS_EH_CpG_500bp.fasta[m[41m [m
[32m+[m[32m#mafft $mafft_args ${path_sequences}AC_AS_EH_CpG_1000bp.fasta > ${path_results}AC_AS_EH_CpG_1000bp.fasta[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/Untitled.ipynb b/Untitled.ipynb[m
[1mnew file mode 100644[m
[1mindex 0000000..3a6a5e8[m
[1m--- /dev/null[m
[1m+++ b/Untitled.ipynb[m
[36m@@ -0,0 +1,146 @@[m
[32m+[m[32m{[m
[32m+[m[32m "cells": [[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 12,[m
[32m+[m[32m   "id": "203d8a2b-9396-4d9a-b731-c8c3414a0b35",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "library(methylKit)\n",[m
[32m+[m[32m    "library(tidyverse)\n",[m
[32m+[m[32m    "\n",[m
[32m+[m[32m    "# Set working directory: CHANGE TO YOUR WORKING DIRECTORY\n",[m
[32m+[m[32m    "setwd(\"/workspace/cfngle/raw-data/\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 4,[m
[32m+[m[32m   "id": "7d8f99e0-c117-4ab2-9a81-ab803a4619ce",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "name": "stderr",[m
[32m+[m[32m     "output_type": "stream",[m
[32m+[m[32m     "text": [[m
[32m+[m[32m      "Received list of locations.\n",[m
[32m+[m[32m      "\n"[m
[32m+[m[32m     ][m
[32m+[m[32m    },[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "ERROR",[m
[32m+[m[32m     "evalue": "Error in methRead(ZF_file_names, sample.id = ZF_sample_names, assembly = \"GRCz11\", : length of 'location'  and 'name' should be same\n\n",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "Error in methRead(ZF_file_names, sample.id = ZF_sample_names, assembly = \"GRCz11\", : length of 'location'  and 'name' should be same\n\nTraceback:\n",[m
[32m+[m[32m      "1. methRead(ZF_file_names, sample.id = ZF_sample_names, assembly = \"GRCz11\", \n .     header = TRUE, mincov = 1, treatment = ZF_treatment)",[m
[32m+[m[32m      "2. methRead(ZF_file_names, sample.id = ZF_sample_names, assembly = \"GRCz11\", \n .     header = TRUE, mincov = 1, treatment = ZF_treatment)",[m
[32m+[m[32m      "3. stop(\"length of 'location'  and 'name' should be same\\n\")"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "ZF_file_names <- list.files(\"ZF/008.methylkit_BM_local/\", pattern = \"*.txt\")\n",[m
[32m+[m[32m    "ZF_sample_names <- as.list(substr(ZF_file_names, start = 1, stop = 6))\n",[m
[32m+[m[32m    "ZF_file_names <- as.list(paste0(\"ZF/008.methylkit_BM_local/\", ZF_file_names))\n",[m
[32m+[m[32m    "ZF_treatment <- c(rep(c(0, 1), length.out = length(ZF_file_names)))\n",[m
[32m+[m[32m    "methyl_data_ZF <- methRead(ZF_file_names,\n",[m
[32m+[m[32m    "                            sample.id = ZF_sample_names,\n",[m
[32m+[m[32m    "                            assembly=\"GRCz11\",\n",[m
[32m+[m[32m    "                            header=TRUE, mincov = 1,\n",[m
[32m+[m[32m    "                            treatment = ZF_treatment)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 5,[m
[32m+[m[32m   "id": "b9256dce-3a46-4931-bdd6-7b2626343869",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "collapsed": true,[m
[32m+[m[32m    "jupyter": {[m
[32m+[m[32m     "outputs_hidden": true[m
[32m+[m[32m    },[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [[m
[32m+[m[32m    {[m
[32m+[m[32m     "ename": "ERROR",[m
[32m+[m[32m     "evalue": "Error in save(metyl_data_ZF, \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2.RData\"): objects 'metyl_data_ZF', '/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2.RData' not found\n",[m
[32m+[m[32m     "output_type": "error",[m
[32m+[m[32m     "traceback": [[m
[32m+[m[32m      "Error in save(metyl_data_ZF, \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2.RData\"): objects 'metyl_data_ZF', '/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2.RData' not found\nTraceback:\n",[m
[32m+[m[32m      "1. save(metyl_data_ZF, \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2.RData\")",[m
[32m+[m[32m      "2. stop(sprintf(ngettext(n, \"object %s not found\", \"objects %s not found\"), \n .     paste(sQuote(list[!ok]), collapse = \", \")), domain = NA)"[m
[32m+[m[32m     ][m
[32m+[m[32m    }[m
[32m+[m[32m   ],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "save(methyl_data_ZF, \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_ZF_bt2_local.RData\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 13,[m
[32m+[m[32m   "id": "0b177615-936e-4386-b732-a709cc840a44",[m
[32m+[m[32m   "metadata": {[m
[32m+[m[32m    "tags": [][m
[32m+[m[32m   },[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "JM_file_names <- list.files(\"JM/008.methylkit_BM_local/\", pattern = \"*.txt\")\n",[m
[32m+[m[32m    "JM_sample_names <- as.list(substr(JM_file_names, start = 1, stop = 6))\n",[m
[32m+[m[32m    "JM_file_names <- as.list(paste0(\"JM/008.methylkit_BM_local/\", JM_file_names))\n",[m
[32m+[m[32m    "JM_treatment <- c(rep(c(0, 1), length.out = length(JM_file_names)))\n",[m
[32m+[m[32m    "methyl_data_JM <- methRead(JM_file_names,\n",[m
[32m+[m[32m    "                            sample.id = JM_sample_names,\n",[m
[32m+[m[32m    "                            assembly=\"ASM223467v1\",\n",[m
[32m+[m[32m    "                            header=TRUE, mincov = 1,\n",[m
[32m+[m[32m    "                            treatment = JM_treatment)"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": 14,[m
[32m+[m[32m   "id": "96330d24-b8b5-4b09-b94f-c03f2a62bb9e",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [[m
[32m+[m[32m    "save(methyl_data_JM, file = \"/workspace/cfngle/results-data/03_extracted_methyl/methyl_data_JM_bt2_local.RData\")"[m
[32m+[m[32m   ][m
[32m+[m[32m  },[m
[32m+[m[32m  {[m
[32m+[m[32m   "cell_type": "code",[m
[32m+[m[32m   "execution_count": null,[m
[32m+[m[32m   "id": "3876475e-e54d-4269-9217-ca4852135749",[m
[32m+[m[32m   "metadata": {},[m
[32m+[m[32m   "outputs": [],[m
[32m+[m[32m   "source": [][m
[32m+[m[32m  }[m
[32m+[m[32m ],[m
[32m+[m[32m "metadata": {[m
[32m+[m[32m  "kernelspec": {[m
[32m+[m[32m   "display_name": "R-3.5.2",[m
[32m+[m[32m   "language": "R",[m
[32m+[m[32m   "name": "ir3.5.2"[m
[32m+[m[32m  },[m
[32m+[m[32m  "language_info": {[m
[32m+[m[32m   "codemirror_mode": "r",[m
[32m+[m[32m   "file_extension": ".r",[m
[32m+[m[32m   "mimetype": "text/x-r-source",[m
[32m+[m[32m   "name": "R",[m
[32m+[m[32m   "pygments_lexer": "r",[m
[32m+[m[32m   "version": "3.5.2"[m
[32m+[m[32m  }[m
[32m+[m[32m },[m
[32m+[m[32m "nbformat": 4,[m
[32m+[m[32m "nbformat_minor": 5[m
[32m+[m[32m}[m
[1mdiff --git a/ZZ_cleanup_cd-hit_clstr.R b/ZZ_cleanup_cd-hit_clstr.R[m
[1mnew file mode 100644[m
[1mindex 0000000..d9ae0e4[m
[1m--- /dev/null[m
[1m+++ b/ZZ_cleanup_cd-hit_clstr.R[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32m# short script to convert cd-hit terminal logs into readable files which show the amount of clusters which were formed[m
[32m+[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(stringr)[m
[32m+[m
[32m+[m[32mlabel_readout <- c("AC_AS", "AC_EH", "AS_EH", "AS_AC", "EH_AC", "EH_AS")[m
[32m+[m[32mlabel_bp <- c(rep("100", 6),rep("200", 6),rep("500", 6),rep("1000", 6))[m
[32m+[m
[32m+[m[32mreadout <- read.table("/workspace/cfngle/results-data/cd-hit/job_output_cd-hit4325390.txt", sep = "\t")[m[41m [m
[32m+[m[32mreadout_filtered <- readout %>%[m[41m [m
[32m+[m[32m  filter(.,str_detect(.[,1], fixed("compared"))) %>%[m[41m [m
[32m+[m[32m  filter(.,str_detect(.[,1], fixed("clusters"))) %>%[m[41m [m
[32m+[m[32m  transmute(str_replace_all(.[,1],"..........        0  compared ", "")) %>%[m[41m [m
[32m+[m[32m  transmute(str_replace_all(.[,1]," clusters", ""))[m
[32m+[m[32mreadout_filtered[m
[32m+[m[32mreadout_filtered <- cbind(readout_filtered, label_readout, label_bp)[m
[32m+[m[32mnames(readout_filtered) <- c("alignments", "species", "seq_length")[m
[32m+[m
[32m+[m[32mwrite.csv(readout_filtered, "/workspace/cfngle/results-data/cd-hit/filtered_reads.txt")[m
[1mdiff --git a/ZZ_test_overlaps.R b/ZZ_test_overlaps.R[m
[1mnew file mode 100644[m
[1mindex 0000000..16e0719[m
[1m--- /dev/null[m
[1m+++ b/ZZ_test_overlaps.R[m
[36m@@ -0,0 +1,105 @@[m
[32m+[m[32m#### Overview ####[m
[32m+[m[32m# Test to check for overlaps[m
[32m+[m
[32m+[m[32m#### Preparation ####[m
[32m+[m[32m# loading libraries[m
[32m+[m[32mlibrary(GenomicRanges) # https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html[m
[32m+[m[32mlibrary(GenomicAlignments)[m
[32m+[m[32mlibrary(Biostrings) # https://bioconductor.org/packages/release/bioc/html/Biostrings.html[m
[32m+[m[32mlibrary(ggbio) # https://www.bioconductor.org/packages/release/bioc/vignettes/ggbio/inst/doc/ggbio.pdf[m
[32m+[m[32mlibrary(dplyr)[m
[32m+[m[32mlibrary(tidyr)[m
[32m+[m[32mlibrary(Rsamtools)[m
[32m+[m[32mlibrary(ggplot2)[m
[32m+[m[32mlibrary(BSgenome)[m
[32m+[m[32mlibrary(karyoploteR)[m
[32m+[m
[32m+[m[32m# BiocManager::install("karyoploteR")[m
[32m+[m[32mlibrary(msa)[m
[32m+[m
[32m+[m[32m#require(BiocManager)[m
[32m+[m
[32m+[m[32m#### loading data ####[m
[32m+[m[32msetwd("/powerplant/workspace/cfngle")[m
[32m+[m
[32m+[m[32m# defining objects[m[41m [m
[32m+[m[32msave_path <- "/workspace/cfngle/results-data/02_conserved_seq/"[m
[32m+[m[32msuffix <- ".fasta"[m
[32m+[m
[32m+[m
[32m+[m[32m# Path to your .sam files[m
[32m+[m[32mbam_files <- c("results-data/bowtie2/ZF_AC_CpG_1000bp_bt2_.bam", "results-data/bowtie2/ZF_AC_CpG_1000bp_bt2_.bam", "results-data/bowtie2/ZF_EH_CpG_1000bp_bt2_.bam")[m
[32m+[m
[32m+[m[32m# Function to read sequences from a .sam file and extract identifiers[m
[32m+[m[32mread_bam_sequences <- function(bam_file) {[m
[32m+[m[32m  header <- scanBamHeader(bam_file)[m
[32m+[m[32m  param <- ScanBamParam(what="rname")  # qname for query names (identifiers)[m
[32m+[m[32m  pos <-ScanBamParam(what="pos")[m[41m [m
[32m+[m[32m  seqs <- scanBam(bam_file, param=param)[m
[32m+[m[32m  unlist(lapply(seqs, function(x) x$rname))[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m# Extracting identifiers from each .sam file[m
[32m+[m[32midentifiers_list <- lapply(bam_files, read_bam_sequences)[m
[32m+[m
[32m+[m[32m# Find overlapping identifiers between the first two files[m
[32m+[m[32moverlaps <- Reduce(intersect, identifiers_list)[m
[32m+[m
[32m+[m[32m# Print overlapping identifiers[m
[32m+[m[32mprint(unique(overlaps))[m
[32m+[m
[32m+[m
[32m+[m[32m#### testing MSA in R ####[m
[32m+[m
[32m+[m[32mmySequences <- readDNAStringSet("results-data/02_conserved_seq/AC_AS_EH_1000_conserved.fasta", format = "fasta")[m
[32m+[m[32mmsaResult <- msa(mySequences)[m
[32m+[m
[32m+[m[32m# You can print or plot the alignment result[m
[32m+[m[32mmsaResult[m
[32m+[m
[32m+[m[32m# msaPrettyPrint(msaResult) # needs more parameters set and an output for the PDF file[m
[32m+[m
[32m+[m[32m#### testing plotting data ####[m
[32m+[m
[32m+[m[32m# BiocManager::install("BSgenome.Drerio.UCSC.danRer11")[m
[32m+[m[32mlibrary(BSgenome.Drerio.UCSC.danRer11)[m
[32m+[m[32mDrerio[m
[32m+[m[32mgenome_rerio <- readDNAStringSet("raw-data/ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna")[m
[32m+[m[32mnames(genome_rerio) <- gsub(" .*", "", names(genome_rerio))[m
[32m+[m[32mgenome_rerio_gr <- GRanges([m
[32m+[m[32m  seqnames = Rle(genome_rerio@ranges@NAMES),[m
[32m+[m[32m  ranges = IRanges(c(start = genome_rerio@ranges@start), end = c(genome_rerio@ranges@start + genome_rerio@ranges@width), names = genome_rerio@ranges@NAMES),[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mplot_test <- granges(overlap_ZF_EH_AC_AS)[m
[32m+[m[32mplot_test_24 <- plot_test[seqnames(plot_test) %in% genome_rerio_gr@ranges@NAMES[1:24]][m
[32m+[m[32m# plot_test@strand <- Rle(strand(rep("*", length(plot_test))))[m
[32m+[m
[32m+[m
[32m+[m[32m# chromosomeNames = (paste0("chr", as.character(seq(1,24,1))))[m
[32m+[m
[32m+[m[32mplot_1 <- plotKaryotype(genome_rerio_gr[genome_rerio_gr@ranges@NAMES[1:24]])[m
[32m+[m
[32m+[m[32m# kpAddBaseNumbers(plot_1, tick.dist = 10000000, tick.len = 10, tick.col="red", cex=0.5, minor.tick.dist = 1000000, minor.tick.len = 5, minor.tick.col = "grey")[m
[32m+[m
[32m+[m[32mkpPlotMarkers(plot_1, chr=seqnames(plot_test), x=plot_test_24@ranges@start, labels = as.character(1:length(plot_test_24)), cex=0.7, text.orientation = "horizontal", line.color = "red")[m
[32m+[m
[32m+[m[32m# create costum df for plotting[m[41m [m
[32m+[m[32mdf_plot <- data.frame(chr=seqnames(plot_test_24), start=plot_test_24@ranges@start, end=plot_test_24@ranges@start+plot_test_24@ranges@width)[m
[32m+[m
[32m+[m[32mkpPlotRegions(plot_1, data=df_plot, col = "red", r0=0.3, layer.margin = 0.6)[m
[32m+[m[32mkpPlotDensity(plot_1, df_plot)[m
[32m+[m
[32m+[m[32m# kpLines(plot_1, chr=seqnames(plot_test), x=plot_test@ranges@start, y=1, col="#440000", lwd=1.5)[m
[32m+[m[32mkpPoints(plot_1, chr=seqnames(plot_test), x=plot_test@ranges@start, y=0, cex=3)[m
[32m+[m
[32m+[m
[32m+[m[32mtest_regions <- createRandomRegions(nregions=10, length.mean = 1e6, mask=NA, non.overlapping = FALSE)[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mprint(autoplot("danRer11"))[m
[32m+[m
[32m+[m[32mautoplot(genome_rerio_gr[genome_rerio_gr@ranges@NAMES == "NC_007113.7 Danio rerio strain Tuebingen chromosome 2, GRCz11 Primary Assembly"], which = granges(overlap_ZF_EH_AC_AS), layout= "karyogram")[m
[32m+[m[41m      [m
\ No newline at end of file[m
[1mdiff --git a/bowtie2_01.sl b/bowtie2_01.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..03920ef[m
[1m--- /dev/null[m
[1m+++ b/bowtie2_01.sl[m
[36m@@ -0,0 +1,76 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_01[m
[32m+[m[32m#SBATCH --time=02:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_mafft%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_mafft%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp" "AS_CpG_100bp" "EH_CpG_100bp")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp" "AS_CpG_200bp" "EH_CpG_200bp")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp" "AS_CpG_500bp" "EH_CpG_500bp")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp" "AS_CpG_1000bp" "EH_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 20"[m
[32m+[m
[32m+[m[32m## indexing[m
[32m+[m[32mbowtie2-build ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_raw}EH/bowtie2-index/EH_bowtie2[m
[32m+[m
[32m+[m[32m## rgenome ZF[m
[32m+[m[32m#echo "ZF"[m
[32m+[m[32m#for (( i=0; i<${#seq_100bp[@]}; i++ ));[m[41m [m
[32m+[m[32m#do[m[41m [m
[32m+[m[32m#    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}ZF_${seq_100bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m#    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}ZF_${seq_200bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m#    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}ZF_${seq_500bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m#    bowtie2 $bowtie2_args -x ${path_raw}ZF/rgenome/bowtie2-index/ZF_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}ZF_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m# done[m
[32m+[m
[32m+[m[32m## rgenome AC[m
[32m+[m[32mecho "AC"[m
[32m+[m[32mfor (( i=0; i<${#seq_100bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}AC_${seq_100bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}AC_${seq_200bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}AC_${seq_500bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AC/bowtie2-index/AC_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AC_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome AS[m
[32m+[m[32mecho "AS"[m
[32m+[m[32mfor (( i=0; i<${#seq_100bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}AS_${seq_100bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}AS_${seq_200bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}AS_${seq_500bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}AS/bowtie2-index/AS_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}AS_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
[32m+[m
[32m+[m[32m## rgenome EH[m
[32m+[m[32mecho "EH"[m
[32m+[m[32mfor (( i=0; i<${#seq_100bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/ -f -U ${path_sequences}${seq_100bp[$i]}$suffix -S ${path_results}EH_${seq_100bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/ -f -U ${path_sequences}${seq_200bp[$i]}$suffix -S ${path_results}EH_${seq_200bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/ -f -U ${path_sequences}${seq_500bp[$i]}$suffix -S ${path_results}EH_${seq_500bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32m    bowtie2 $bowtie2_args -x ${path_raw}EH/bowtie2-index/ -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}EH_${seq_1000bp[$i]}_bt2_.sam -N 1[m
[32m+[m[32mdone[m
\ No newline at end of file[m
[1mdiff --git a/cd_hit_01_75.sl b/cd_hit_01_75.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..73c5c58[m
[1m--- /dev/null[m
[1m+++ b/cd_hit_01_75.sl[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_01_75[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32m# 200 bp sequences[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32m#### CD-HIT ####[m
[32m+[m[32m# clustering sequences with cd-hit[m
[32m+[m[32mcdhit_opt="-p 1 -c 0.75 -n 4 -T 0 -M 0"[m
[32m+[m[32mcdhit_nmsfx="_75"[m
[32m+[m
[32m+[m[32m# logging[m
[32m+[m[32mscript ${path_results}cd-hit/log${cdhit_nmsfx}.log[m
[32m+[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[0]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[1]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_200bp[2]} -i2 ${path_results}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m
[32m+[m[32mexit[m
\ No newline at end of file[m
[1mdiff --git a/cd_hit_01_8.sl b/cd_hit_01_8.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..00593ad[m
[1m--- /dev/null[m
[1m+++ b/cd_hit_01_8.sl[m
[36m@@ -0,0 +1,48 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_01_75[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m# ZF[m
[32m+[m[32m#### CD-HIT ####[m
[32m+[m[32m# clustering sequences with cd-hit variables[m
[32m+[m[32mcdhit_opt="-p 1 -c 0.8 -n 5 -T 0 -M 0"[m
[32m+[m[32mcdhit_nmsfx="_8"[m
[32m+[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[0]} -i2 ${path_results}${seq_100bp[1]} -o ${path_results}cd-hit/AC_AS_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[0]} -i2 ${path_results}${seq_100bp[2]} -o ${path_results}cd-hit/AC_EH_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[1]} -i2 ${path_results}${seq_100bp[2]} -o ${path_results}cd-hit/AS_EH_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[1]} -i2 ${path_results}${seq_100bp[0]} -o ${path_results}cd-hit/AS_AC_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[2]} -i2 ${path_results}${seq_100bp[0]} -o ${path_results}cd-hit/EH_AC_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_results}${seq_100bp[2]} -i2 ${path_results}${seq_100bp[1]} -o ${path_results}cd-hit/EH_AS_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[1mdiff --git a/cd_hit_100bp_8.sl b/cd_hit_100bp_8.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..1ca67b1[m
[1m--- /dev/null[m
[1m+++ b/cd_hit_100bp_8.sl[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m# ZF[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[0]} > ${path_results}/minimap2/ZF_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[0]} > ${path_results}/minimap2/ZF_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[1]} > ${path_results}/minimap2/ZF_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[1]} > ${path_results}/minimap2/ZF_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_200bp[2]} > ${path_results}/minimap2/ZF_EH_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna ${path_results}${seq_100bp[2]} > ${path_results}/minimap2/ZF_EH_100_minimap.sam -t 20[m
\ No newline at end of file[m
[1mdiff --git a/cd_hit_8.sl b/cd_hit_8.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..77f45d9[m
[1m--- /dev/null[m
[1m+++ b/cd_hit_8.sl[m
[36m@@ -0,0 +1,82 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_8[m
[32m+[m[32m#SBATCH --time=20:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m# ZF[m
[32m+[m[32m#### CD-HIT ####[m
[32m+[m[32m# clustering sequences with cd-hit variables[m
[32m+[m[32mcdhit_opt="-p 1 -c 0.8 -n 5 -T 0 -M 0"[m
[32m+[m[32mcdhit_nmsfx="_8"[m
[32m+[m
[32m+[m[32m## 100[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[0]} -i2 ${path_sequences}${seq_100bp[1]} -o ${path_results}cd-hit/AC_AS_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[0]} -i2 ${path_sequences}${seq_100bp[2]} -o ${path_results}cd-hit/AC_EH_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[1]} -i2 ${path_sequences}${seq_100bp[2]} -o ${path_results}cd-hit/AS_EH_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[1]} -i2 ${path_sequences}${seq_100bp[0]} -o ${path_results}cd-hit/AS_AC_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[2]} -i2 ${path_sequences}${seq_100bp[0]} -o ${path_results}cd-hit/EH_AC_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_100bp[2]} -i2 ${path_sequences}${seq_100bp[1]} -o ${path_results}cd-hit/EH_AS_100_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m
[32m+[m[32m## 200[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[0]} -i2 ${path_sequences}${seq_200bp[1]} -o ${path_results}cd-hit/AC_AS_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[0]} -i2 ${path_sequences}${seq_200bp[2]} -o ${path_results}cd-hit/AC_EH_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[1]} -i2 ${path_sequences}${seq_200bp[2]} -o ${path_results}cd-hit/AS_EH_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[1]} -i2 ${path_sequences}${seq_200bp[0]} -o ${path_results}cd-hit/AS_AC_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[2]} -i2 ${path_sequences}${seq_200bp[0]} -o ${path_results}cd-hit/EH_AC_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_200bp[2]} -i2 ${path_sequences}${seq_200bp[1]} -o ${path_results}cd-hit/EH_AS_200_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m
[32m+[m[32m##500[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[0]} -i2 ${path_sequences}${seq_500bp[1]} -o ${path_results}cd-hit/AC_AS_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[0]} -i2 ${path_sequences}${seq_500bp[2]} -o ${path_results}cd-hit/AC_EH_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[1]} -i2 ${path_sequences}${seq_500bp[2]} -o ${path_results}cd-hit/AS_EH_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[1]} -i2 ${path_sequences}${seq_500bp[0]} -o ${path_results}cd-hit/AS_AC_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[2]} -i2 ${path_sequences}${seq_500bp[0]} -o ${path_results}cd-hit/EH_AC_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_500bp[2]} -i2 ${path_sequences}${seq_500bp[1]} -o ${path_results}cd-hit/EH_AS_500_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m
[32m+[m[32m##1000[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[0]} -i2 ${path_sequences}${seq_1000bp[1]} -o ${path_results}cd-hit/AC_AS_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[0]} -i2 ${path_sequences}${seq_1000bp[2]} -o ${path_results}cd-hit/AC_EH_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[1]} -i2 ${path_sequences}${seq_1000bp[2]} -o ${path_results}cd-hit/AS_EH_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[1]} -i2 ${path_sequences}${seq_1000bp[0]} -o ${path_results}cd-hit/AS_AC_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[2]} -i2 ${path_sequences}${seq_1000bp[0]} -o ${path_results}cd-hit/EH_AC_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_sequences}${seq_1000bp[2]} -i2 ${path_sequences}${seq_1000bp[1]} -o ${path_results}cd-hit/EH_AS_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
\ No newline at end of file[m
[1mdiff --git a/cd_hit_8_conserved_test.sl b/cd_hit_8_conserved_test.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..fbf288d[m
[1m--- /dev/null[m
[1m+++ b/cd_hit_8_conserved_test.sl[m
[36m@@ -0,0 +1,49 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J cd_hit_8[m
[32m+[m[32m#SBATCH --time=01:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_cd-hit%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m[32mpath_conserved=/workspace/cfngle/results-data/02_conserved_seq/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32mseq_conserved=("AC_1000_conserved.fasta" "AS_1000_conserved.fasta" "EH_1000_conserved.fasta")[m
[32m+[m
[32m+[m[32m# ZF[m
[32m+[m[32m#### CD-HIT ####[m
[32m+[m[32m# clustering sequences with cd-hit variables[m
[32m+[m[32mcdhit_opt="-p 1 -c 0.8 -n 5 -T 0 -M 0"[m
[32m+[m[32mcdhit_nmsfx="_conserved_8"[m
[32m+[m
[32m+[m[32m##1000[m
[32m+[m[32m# AC[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[0]} -i2 ${path_conserved}${seq_conserved[1]} -o ${path_results}cd-hit/AC_AS_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[0]} -i2 ${path_conserved}${seq_conserved[2]} -o ${path_results}cd-hit/AC_EH_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# AS[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[1]} -i2 ${path_conserved}${seq_conserved[2]} -o ${path_results}cd-hit/AS_EH_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[1]} -i2 ${path_conserved}${seq_conserved[0]} -o ${path_results}cd-hit/AS_AC_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32m# EH[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[2]} -i2 ${path_conserved}${seq_conserved[0]} -o ${path_results}cd-hit/EH_AC_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
[32m+[m[32mcd-hit-est-2d -i ${path_conserved}${seq_conserved[2]} -i2 ${path_conserved}${seq_conserved[1]} -o ${path_results}cd-hit/EH_AS_1000_cd-hit${cdhit_nmsfx}.fasta $cdhit_opt[m
\ No newline at end of file[m
[1mdiff --git a/extraction_conversion.sh b/extraction_conversion.sh[m
[1mnew file mode 100644[m
[1mindex 0000000..c0d4174[m
[1m--- /dev/null[m
[1m+++ b/extraction_conversion.sh[m
[36m@@ -0,0 +1,9 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32mset -e[m
[32m+[m[32mset -u[m
[32m+[m[32mset -o pipefail[m
[32m+[m
[32m+[m[32msample_name=$(basename -s ".txt" "$1")[m
[32m+[m[32mawk '{{gsub(/+/, "F");gsub(/-/,"R"); print $1"."$2, $1, $2, $3, $6=$4+$5, $7=100*$4/$6, $8=100*$5/$6}}' ${sample_name}.txt \[m
[32m+[m[32m| awk 'BEGIN{print "chrBase	chr	base	strand	coverage	freqC	freqT"}1' \[m
[32m+[m[32m| awk 'BEGIN{OFS ="\t"}{print $1, $2, $3, $4, $5, $6, $7}' > 010c.methylkit/${sample_name}-MK.txt[m
\ No newline at end of file[m
[1mdiff --git a/minimap2_01.sl b/minimap2_01.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..d90f049[m
[1m--- /dev/null[m
[1m+++ b/minimap2_01.sl[m
[36m@@ -0,0 +1,66 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/cd-hit/job_output_%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/cd-hit/job_output_%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32m# 200 bp sequences[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32mpath_rgenome="AC/GCF_902167405.1_gadMor3.0_genomic.fasta"[m
[32m+[m[32m#AC[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AC_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AC_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AC_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AC_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AC_EH_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AC_EH_100_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="Chrysophrys_auratus.v.1.0.all.male.map.fasta"[m
[32m+[m[32m#AS[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AS_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AS_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AS_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AS_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AS_EH_200_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AS_EH_100_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="fMerMel2.1_cnag1.scaffolds.fa"[m
[32m+[m[32m#EH\[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[0]} > ${path_results}minimap2/EH_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[0]} > ${path_results}minimap2/EH_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[1]} > ${path_results}minimap2/EH_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[1]} > ${path_results}minimap2/EH_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_200bp[2]} > ${path_results}minimap2/EH_EH_200_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}path_rgenome ${path_results}${seq_100bp[2]} > ${path_results}minimap2/EH_EH_100_minimap.sam -t 20[m[41m [m
[1mdiff --git a/minimap2_02.sl b/minimap2_02.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..bf2007c[m
[1m--- /dev/null[m
[1m+++ b/minimap2_02.sl[m
[36m@@ -0,0 +1,69 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32mpath_rgenome="AC/GCF_902167405.1_gadMor3.0_genomic.fasta"[m
[32m+[m[32m## AC rgenome[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AC_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AC_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AC_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AC_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AC_EH_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AC_EH_100_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta"[m
[32m+[m[32m## AS rgenome[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_200bp[0]} > ${path_results}minimap2/AS_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_100bp[0]} > ${path_results}minimap2/AS_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_200bp[1]} > ${path_results}minimap2/AS_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_100bp[1]} > ${path_results}minimap2/AS_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_200bp[2]} > ${path_results}minimap2/AS_EH_200_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}${seq_100bp[2]} > ${path_results}minimap2/AS_EH_100_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="EH/fMerMel2.1_cnag1.scaffolds.fa"[m
[32m+[m[32m## EH rgenome[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_200bp[0]} > ${path_results}minimap2/EH_AC_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_100bp[0]} > ${path_results}minimap2/EH_AC_100_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_200bp[1]} > ${path_results}minimap2/EH_AS_200_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_100bp[1]} > ${path_results}minimap2/EH_AS_100_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_200bp[2]} > ${path_results}minimap2/EH_EH_200_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}${seq_100bp[2]} > ${path_results}minimap2/EH_EH_100_minimap.sam -t 20[m[41m [m
[1mdiff --git a/minimap2_03.sl b/minimap2_03.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..be34bc2[m
[1m--- /dev/null[m
[1m+++ b/minimap2_03.sl[m
[36m@@ -0,0 +1,83 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J minimap2_02[m
[32m+[m[32m#SBATCH --time=00:40:00        # Walltime[m
[32m+[m[32m#SBATCH --mem-per-cpu=2G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 20                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/minimap2/job_output_minimap_500.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m# Alignments for various species to reference genomes[m
[32m+[m
[32m+[m[32m# loading modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m[32mmodule load minimap2[m[41m [m
[32m+[m[32mmodule load cd-hit[m
[32m+[m
[32m+[m[32m# setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_100bp=("AC_CpG_100bp.fasta" "AS_CpG_100bp.fasta" "EH_CpG_100bp.fasta")[m
[32m+[m
[32m+[m[32mseq_200bp=("AC_CpG_200bp.fasta" "AS_CpG_200bp.fasta" "EH_CpG_200bp.fasta")[m
[32m+[m
[32m+[m[32mseq_500bp=("AC_CpG_500bp.fasta" "AS_CpG_500bp.fasta" "EH_CpG_500bp.fasta")[m
[32m+[m
[32m+[m[32mseq_1000bp=("AC_CpG_1000bp.fasta" "AS_CpG_1000bp.fasta" "EH_CpG_1000bp.fasta")[m
[32m+[m
[32m+[m[32m#### MINIMAP2 ####[m
[32m+[m
[32m+[m[32mpath_rgenome="AC/GCF_902167405.1_gadMor3.0_genomic.fasta"[m
[32m+[m[32m## AC rgenome[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_1000bp[0]} > ${path_results}minimap2/AC_AC_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_500bp[0]} > ${path_results}minimap2/AC_AC_500_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_1000bp[1]} > ${path_results}minimap2/AC_AS_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_500bp[1]} > ${path_results}minimap2/AC_AS_500_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_1000bp[2]} > ${path_results}minimap2/AC_EH_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AC/GCF_902167405.1_gadMor3.0_genomic.fasta ${path_results}sequences/${seq_500bp[2]} > ${path_results}minimap2/AC_EH_500_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta"[m
[32m+[m[32m## AS rgenome[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_1000bp[0]} > ${path_results}minimap2/AS_AC_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_500bp[0]} > ${path_results}minimap2/AS_AC_500_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_1000bp[1]} > ${path_results}minimap2/AS_AS_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_500bp[1]} > ${path_results}minimap2/AS_AS_500_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_1000bp[2]} > ${path_results}minimap2/AS_EH_1000_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}AS/Chrysophrys_auratus.v.1.0.all.male.map.fasta ${path_results}sequences/${seq_500bp[2]} > ${path_results}minimap2/AS_EH_500_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32mpath_rgenome="EH/fMerMel2.1_cnag1.scaffolds.fa"[m
[32m+[m[32m## EH rgenome[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[0]} > ${path_results}minimap2/EH_AC_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[0]} > ${path_results}minimap2/EH_AC_500_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[1]} > ${path_results}minimap2/EH_AS_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[1]} > ${path_results}minimap2/EH_AS_500_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[2]} > ${path_results}minimap2/EH_EH_1000_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[2]} > ${path_results}minimap2/EH_EH_500_minimap.sam -t 20[m[41m [m
[32m+[m
[32m+[m[32m## ZF rgenome[m
[32m+[m[32mpath_rgenome=ZF/rgenome/GCF_000002035.6_GRCz11_genomic.fna[m
[32m+[m
[32m+[m[32m#AC[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[0]} > ${path_results}minimap2/ZF_AC_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[0]} > ${path_results}minimap2/ZF_AC_500_minimap.sam -t 20[m
[32m+[m[32m#AS[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[1]} > ${path_results}minimap2/ZF_AS_1000_minimap.sam -t 20[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[1]} > ${path_results}minimap2/ZF_AS_500_minimap.sam -t 20[m
[32m+[m[32m#EH[m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_1000bp[2]} > ${path_results}minimap2/ZF_EH_1000_minimap.sam -t 20[m[41m [m
[32m+[m[32mminimap2 -ax map-ont ${path_raw}EH/fMerMel2.1_cnag1.scaffolds.fa ${path_results}sequences/${seq_500bp[2]} > ${path_results}minimap2/ZF_EH_500_minimap.sam -t 20[m[41m [m
[1mdiff --git a/zz_bowtie2_06_1000_human_all.sl b/zz_bowtie2_06_1000_human_all.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..49d5f3a[m
[1m--- /dev/null[m
[1m+++ b/zz_bowtie2_06_1000_human_all.sl[m
[36m@@ -0,0 +1,38 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_1000_all[m
[32m+[m[32m#SBATCH --time=05:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem=20G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 4                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m[32mpath_sequences=/workspace/cfngle/results-data/sequences/[m
[32m+[m
[32m+[m[32m# filenames[m
[32m+[m[32mseq_1000bp=("JM_243285_CpG_1000bp" "ZF_757883_CpG_1000bp")[m
[32m+[m
[32m+[m[32m# file ending[m
[32m+[m[32msuffix=".fasta"[m
[32m+[m
[32m+[m[32m# arguments[m
[32m+[m[32mbowtie2_args="--very-sensitive --local -p 8"[m
[32m+[m
[32m+[m
[32m+[m[32m## rgenome Human[m
[32m+[m[32mecho "human reference genome"[m
[32m+[m[32mfor (( i=0; i<${#seq_1000bp[@]}; i++ ));[m[41m [m
[32m+[m[32mdo[m[41m [m
[32m+[m[32m   bowtie2 $bowtie2_args -x /workspace/cfngle/raw-data/zzz_human_rgenome/bowtie2-index/human_bowtie2 -f -U ${path_sequences}${seq_1000bp[$i]}$suffix -S ${path_results}human_${seq_1000bp[$i]}_bt2.sam -N 1[m
[32m+[m[32mdone[m
[1mdiff --git a/zz_bowtie2_index_human.sl b/zz_bowtie2_index_human.sl[m
[1mnew file mode 100644[m
[1mindex 0000000..1fe8860[m
[1m--- /dev/null[m
[1m+++ b/zz_bowtie2_index_human.sl[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m#!/bin/bash[m
[32m+[m[32m######################################################[m
[32m+[m[32m#SBATCH -J bowtie_index_human[m
[32m+[m[32m#SBATCH --time=010:00:00        # Walltime[m
[32m+[m[32m#SBATCH --mem=10G     # memory/cpu[m[41m [m
[32m+[m[32m#SBATCH -n 1                   # 1 core means serial[m
[32m+[m[32m#SBATCH --output=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m#SBATCH --error=/workspace/cfngle/results-data/bowtie2/job_output_bowtie%j.txt[m
[32m+[m[32m######################################################[m
[32m+[m[32m###  Run the Parallel Program[m
[32m+[m
[32m+[m[32m## BOWTIE2 ####[m
[32m+[m
[32m+[m[32m## modules[m
[32m+[m[32mmodule load bowtie2[m
[32m+[m
[32m+[m[32m## setting up variables[m[41m [m
[32m+[m[32m# paths[m
[32m+[m[32mpath_raw=/workspace/cfngle/raw-data/[m
[32m+[m[32mpath_results=/workspace/cfngle/results-data/bowtie2/[m
[32m+[m
[32m+[m[32m## indexing[m
[32m+[m[32mbowtie2-build ${path_raw}zzz_human_rgenome/GRCh38.fa ${path_raw}zzz_human_rgenome/bowtie2-index/human_bowtie2[m
